0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
73090d4c514b09b1d14ada3960d2bc886dfb76dd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/securitycontext"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func noDefault(*api.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecodeSinglePod(t *testing.T) {
0000000000000000000000000000000000000000;;		grace := int64(30)
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				APIVersion: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "test",
0000000000000000000000000000000000000000;;				UID:       "12345",
0000000000000000000000000000000000000000;;				Namespace: "mynamespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &grace,
0000000000000000000000000000000000000000;;				Containers: []v1.Container{{
0000000000000000000000000000000000000000;;					Name:                     "image",
0000000000000000000000000000000000000000;;					Image:                    "test/image",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePath:   "/dev/termination-log",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: v1.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;					SecurityContext:          securitycontext.ValidSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				SecurityContext: &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(testapi.Default.Codec(), pod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parsed, podOut, err := tryDecodeSinglePod(json, noDefault)
0000000000000000000000000000000000000000;;		if !parsed {
0000000000000000000000000000000000000000;;			t.Errorf("expected to have parsed file: (%s)", string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v (%s)", err, string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(pod, podOut) {
0000000000000000000000000000000000000000;;			t.Errorf("expected:\n%#v\ngot:\n%#v\n%s", pod, podOut, string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, gv := range api.Registry.EnabledVersionsForGroup(v1.GroupName) {
0000000000000000000000000000000000000000;;			info, _ := runtime.SerializerInfoForMediaType(api.Codecs.SupportedMediaTypes(), "application/yaml")
0000000000000000000000000000000000000000;;			encoder := api.Codecs.EncoderForVersion(info.Serializer, gv)
0000000000000000000000000000000000000000;;			yaml, err := runtime.Encode(encoder, pod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			parsed, podOut, err = tryDecodeSinglePod(yaml, noDefault)
0000000000000000000000000000000000000000;;			if !parsed {
0000000000000000000000000000000000000000;;				t.Errorf("expected to have parsed file: (%s)", string(yaml))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, string(yaml))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(pod, podOut) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%#v\ngot:\n%#v\n%s", pod, podOut, string(yaml))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecodePodList(t *testing.T) {
0000000000000000000000000000000000000000;;		grace := int64(30)
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				APIVersion: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "test",
0000000000000000000000000000000000000000;;				UID:       "12345",
0000000000000000000000000000000000000000;;				Namespace: "mynamespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &grace,
0000000000000000000000000000000000000000;;				Containers: []v1.Container{{
0000000000000000000000000000000000000000;;					Name:                     "image",
0000000000000000000000000000000000000000;;					Image:                    "test/image",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePath:   "/dev/termination-log",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: v1.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					SecurityContext: securitycontext.ValidSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				SecurityContext: &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podList := &v1.PodList{
0000000000000000000000000000000000000000;;			Items: []v1.Pod{*pod},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(testapi.Default.Codec(), podList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parsed, podListOut, err := tryDecodePodList(json, noDefault)
0000000000000000000000000000000000000000;;		if !parsed {
0000000000000000000000000000000000000000;;			t.Errorf("expected to have parsed file: (%s)", string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v (%s)", err, string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(podList, &podListOut) {
0000000000000000000000000000000000000000;;			t.Errorf("expected:\n%#v\ngot:\n%#v\n%s", podList, &podListOut, string(json))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, gv := range api.Registry.EnabledVersionsForGroup(v1.GroupName) {
0000000000000000000000000000000000000000;;			info, _ := runtime.SerializerInfoForMediaType(api.Codecs.SupportedMediaTypes(), "application/yaml")
0000000000000000000000000000000000000000;;			encoder := api.Codecs.EncoderForVersion(info.Serializer, gv)
0000000000000000000000000000000000000000;;			yaml, err := runtime.Encode(encoder, podList)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			parsed, podListOut, err = tryDecodePodList(yaml, noDefault)
0000000000000000000000000000000000000000;;			if !parsed {
0000000000000000000000000000000000000000;;				t.Errorf("expected to have parsed file: (%s): %v", string(yaml), err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, string(yaml))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(podList, &podListOut) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%#v\ngot:\n%#v\n%s", pod, &podListOut, string(yaml))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetSelfLink(t *testing.T) {
0000000000000000000000000000000000000000;;		var testCases = []struct {
0000000000000000000000000000000000000000;;			desc             string
0000000000000000000000000000000000000000;;			name             string
0000000000000000000000000000000000000000;;			namespace        string
0000000000000000000000000000000000000000;;			expectedSelfLink string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc:             "No namespace specified",
0000000000000000000000000000000000000000;;				name:             "foo",
0000000000000000000000000000000000000000;;				namespace:        "",
0000000000000000000000000000000000000000;;				expectedSelfLink: "/api/v1/namespaces/default/pods/foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc:             "Namespace specified",
0000000000000000000000000000000000000000;;				name:             "foo",
0000000000000000000000000000000000000000;;				namespace:        "bar",
0000000000000000000000000000000000000000;;				expectedSelfLink: "/api/v1/namespaces/bar/pods/foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			selfLink := getSelfLink(testCase.name, testCase.namespace)
0000000000000000000000000000000000000000;;			if testCase.expectedSelfLink != selfLink {
0000000000000000000000000000000000000000;;				t.Errorf("%s: getSelfLink error, expected: %s, got: %s", testCase.desc, testCase.expectedSelfLink, selfLink)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
