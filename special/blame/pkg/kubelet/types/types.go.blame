0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
4429f54c2492ddf63a602ad433457598d99bd7f0;pkg/kubelet/types/docker.go[pkg/kubelet/types/docker.go][pkg/kubelet/types/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Reconcile custom types in kubelet/types and this subpackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpGetter interface {
0000000000000000000000000000000000000000;;		Get(url string) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timestamp wraps around time.Time and offers utilities to format and parse
0000000000000000000000000000000000000000;;	// the time using RFC3339Nano
0000000000000000000000000000000000000000;;	type Timestamp struct {
0000000000000000000000000000000000000000;;		time time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTimestamp returns a Timestamp object using the current time.
0000000000000000000000000000000000000000;;	func NewTimestamp() *Timestamp {
0000000000000000000000000000000000000000;;		return &Timestamp{time.Now()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertToTimestamp takes a string, parses it using the RFC3339Nano layout,
0000000000000000000000000000000000000000;;	// and converts it to a Timestamp object.
0000000000000000000000000000000000000000;;	func ConvertToTimestamp(timeString string) *Timestamp {
0000000000000000000000000000000000000000;;		parsed, _ := time.Parse(time.RFC3339Nano, timeString)
0000000000000000000000000000000000000000;;		return &Timestamp{parsed}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns the time as time.Time.
0000000000000000000000000000000000000000;;	func (t *Timestamp) Get() time.Time {
0000000000000000000000000000000000000000;;		return t.time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetString returns the time in the string format using the RFC3339Nano
0000000000000000000000000000000000000000;;	// layout.
0000000000000000000000000000000000000000;;	func (t *Timestamp) GetString() string {
0000000000000000000000000000000000000000;;		return t.time.Format(time.RFC3339Nano)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A type to help sort container statuses based on container names.
0000000000000000000000000000000000000000;;	type SortedContainerStatuses []v1.ContainerStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SortedContainerStatuses) Len() int      { return len(s) }
0000000000000000000000000000000000000000;;	func (s SortedContainerStatuses) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SortedContainerStatuses) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return s[i].Name < s[j].Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SortInitContainerStatuses ensures that statuses are in the order that their
0000000000000000000000000000000000000000;;	// init container appears in the pod spec
0000000000000000000000000000000000000000;;	func SortInitContainerStatuses(p *v1.Pod, statuses []v1.ContainerStatus) {
0000000000000000000000000000000000000000;;		containers := p.Spec.InitContainers
0000000000000000000000000000000000000000;;		current := 0
0000000000000000000000000000000000000000;;		for _, container := range containers {
0000000000000000000000000000000000000000;;			for j := current; j < len(statuses); j++ {
0000000000000000000000000000000000000000;;				if container.Name == statuses[j].Name {
0000000000000000000000000000000000000000;;					statuses[current], statuses[j] = statuses[j], statuses[current]
0000000000000000000000000000000000000000;;					current++
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reservation represents reserved resources for non-pod components.
0000000000000000000000000000000000000000;;	type Reservation struct {
0000000000000000000000000000000000000000;;		// System represents resources reserved for non-kubernetes components.
0000000000000000000000000000000000000000;;		System v1.ResourceList
0000000000000000000000000000000000000000;;		// Kubernetes represents resources reserved for kubernetes system components.
0000000000000000000000000000000000000000;;		Kubernetes v1.ResourceList
0000000000000000000000000000000000000000;;	}
