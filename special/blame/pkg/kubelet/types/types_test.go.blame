0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d3c39753306e8040f8b4a495cfba46113010d918;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConvertToTimestamp(t *testing.T) {
0000000000000000000000000000000000000000;;		timestamp := "2017-02-17T15:34:49.830882016+08:00"
0000000000000000000000000000000000000000;;		convertedTimeStamp := ConvertToTimestamp(timestamp).GetString()
0000000000000000000000000000000000000000;;		assert.Equal(t, timestamp, convertedTimeStamp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLen(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			statuses SortedContainerStatuses
0000000000000000000000000000000000000000;;			expected int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				statuses: SortedContainerStatuses{{Name: "first"}},
0000000000000000000000000000000000000000;;				expected: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				statuses: SortedContainerStatuses{{Name: "first"}, {Name: "second"}},
0000000000000000000000000000000000000000;;				expected: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			assert.Equal(t, data.expected, data.statuses.Len())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSwap(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			statuses SortedContainerStatuses
0000000000000000000000000000000000000000;;			expected SortedContainerStatuses
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				statuses: SortedContainerStatuses{{Name: "first"}, {Name: "second"}},
0000000000000000000000000000000000000000;;				expected: SortedContainerStatuses{{Name: "second"}, {Name: "first"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			data.statuses.Swap(0, 1)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(data.statuses, data.expected) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed Swap:\n\texpected: %v\n\t  actual: %v",
0000000000000000000000000000000000000000;;					data.expected,
0000000000000000000000000000000000000000;;					data.statuses,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLess(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			statuses SortedContainerStatuses
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				statuses: SortedContainerStatuses{{Name: "first"}, {Name: "second"}},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				statuses: SortedContainerStatuses{{Name: "second"}, {Name: "first"}},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			actual := data.statuses.Less(0, 1)
0000000000000000000000000000000000000000;;			if actual != data.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed Less:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					data.expected,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSortInitContainerStatuses(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			containers     []v1.Container
0000000000000000000000000000000000000000;;			statuses       []v1.ContainerStatus
0000000000000000000000000000000000000000;;			sortedStatuses []v1.ContainerStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				containers:     []v1.Container{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;				statuses:       []v1.ContainerStatus{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;				sortedStatuses: []v1.ContainerStatus{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				containers:     []v1.Container{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;				statuses:       []v1.ContainerStatus{{Name: "second"}, {Name: "first"}, {Name: "fourth"}, {Name: "third"}},
0000000000000000000000000000000000000000;;				sortedStatuses: []v1.ContainerStatus{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				containers:     []v1.Container{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;				statuses:       []v1.ContainerStatus{{Name: "fourth"}, {Name: "first"}},
0000000000000000000000000000000000000000;;				sortedStatuses: []v1.ContainerStatus{{Name: "first"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				containers:     []v1.Container{{Name: "first"}, {Name: "second"}, {Name: "third"}, {Name: "fourth"}},
0000000000000000000000000000000000000000;;				statuses:       []v1.ContainerStatus{{Name: "first"}, {Name: "third"}},
0000000000000000000000000000000000000000;;				sortedStatuses: []v1.ContainerStatus{{Name: "first"}, {Name: "third"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			pod.Spec.InitContainers = data.containers
0000000000000000000000000000000000000000;;			SortInitContainerStatuses(&pod, data.statuses)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(data.statuses, data.sortedStatuses) {
0000000000000000000000000000000000000000;;				t.Errorf("SortInitContainerStatuses result wrong:\nContainers order: %v\nExpected order: %v\nReturne order: %v",
0000000000000000000000000000000000000000;;					data.containers, data.sortedStatuses, data.statuses)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
