0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b73a523cdeb976598fae2a3407edcffdaf170b06;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainerName(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			labels        map[string]string
0000000000000000000000000000000000000000;;			containerName string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.container.name": "c1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerName: "c1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.container.name": "c2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerName: "c2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			containerName := GetContainerName(data.labels)
0000000000000000000000000000000000000000;;			assert.Equal(t, data.containerName, containerName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodName(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			labels  map[string]string
0000000000000000000000000000000000000000;;			podName string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.name": "p1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podName: "p1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.name": "p2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podName: "p2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			podName := GetPodName(data.labels)
0000000000000000000000000000000000000000;;			assert.Equal(t, data.podName, podName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodUID(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			labels map[string]string
0000000000000000000000000000000000000000;;			podUID string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.uid": "uid1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podUID: "uid1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.uid": "uid2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podUID: "uid2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			podUID := GetPodUID(data.labels)
0000000000000000000000000000000000000000;;			assert.Equal(t, data.podUID, podUID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			labels       map[string]string
0000000000000000000000000000000000000000;;			podNamespace string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.namespace": "ns1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podNamespace: "ns1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.namespace": "ns2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podNamespace: "ns2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, data := range cases {
0000000000000000000000000000000000000000;;			podNamespace := GetPodNamespace(data.labels)
0000000000000000000000000000000000000000;;			assert.Equal(t, data.podNamespace, podNamespace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
