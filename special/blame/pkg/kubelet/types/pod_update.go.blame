0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f37e8d7605f26ab00dd5d58e7b1225475d7a741a;pkg/kubelet/types.go[pkg/kubelet/types.go][pkg/kubelet/types/pod_update.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		kubeapi "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ConfigSourceAnnotationKey    = "kubernetes.io/config.source"
0000000000000000000000000000000000000000;;		ConfigMirrorAnnotationKey    = v1.MirrorPodAnnotationKey
0000000000000000000000000000000000000000;;		ConfigFirstSeenAnnotationKey = "kubernetes.io/config.seen"
0000000000000000000000000000000000000000;;		ConfigHashAnnotationKey      = "kubernetes.io/config.hash"
0000000000000000000000000000000000000000;;		CriticalPodAnnotationKey     = "scheduler.alpha.kubernetes.io/critical-pod"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodOperation defines what changes will be made on a pod configuration.
0000000000000000000000000000000000000000;;	type PodOperation int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// This is the current pod configuration
0000000000000000000000000000000000000000;;		SET PodOperation = iota
0000000000000000000000000000000000000000;;		// Pods with the given ids are new to this source
0000000000000000000000000000000000000000;;		ADD
0000000000000000000000000000000000000000;;		// Pods with the given ids are gracefully deleted from this source
0000000000000000000000000000000000000000;;		DELETE
0000000000000000000000000000000000000000;;		// Pods with the given ids have been removed from this source
0000000000000000000000000000000000000000;;		REMOVE
0000000000000000000000000000000000000000;;		// Pods with the given ids have been updated in this source
0000000000000000000000000000000000000000;;		UPDATE
0000000000000000000000000000000000000000;;		// Pods with the given ids have unexpected status in this source,
0000000000000000000000000000000000000000;;		// kubelet should reconcile status with this source
0000000000000000000000000000000000000000;;		RECONCILE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// These constants identify the sources of pods
0000000000000000000000000000000000000000;;		// Updates from a file
0000000000000000000000000000000000000000;;		FileSource = "file"
0000000000000000000000000000000000000000;;		// Updates from querying a web page
0000000000000000000000000000000000000000;;		HTTPSource = "http"
0000000000000000000000000000000000000000;;		// Updates from Kubernetes API Server
0000000000000000000000000000000000000000;;		ApiserverSource = "api"
0000000000000000000000000000000000000000;;		// Updates from all sources
0000000000000000000000000000000000000000;;		AllSource = "*"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NamespaceDefault = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodUpdate defines an operation sent on the channel. You can add or remove single services by
0000000000000000000000000000000000000000;;	// sending an array of size one and Op == ADD|REMOVE (with REMOVE, only the ID is required).
0000000000000000000000000000000000000000;;	// For setting the state of the system to a given state for this source configuration, set
0000000000000000000000000000000000000000;;	// Pods as desired and Op to SET, which will reset the system state to that specified in this
0000000000000000000000000000000000000000;;	// operation for this source channel. To remove all pods, set Pods to empty object and Op to SET.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Additionally, Pods should never be nil - it should always point to an empty slice. While
0000000000000000000000000000000000000000;;	// functionally similar, this helps our unit tests properly check that the correct PodUpdates
0000000000000000000000000000000000000000;;	// are generated.
0000000000000000000000000000000000000000;;	type PodUpdate struct {
0000000000000000000000000000000000000000;;		Pods   []*v1.Pod
0000000000000000000000000000000000000000;;		Op     PodOperation
0000000000000000000000000000000000000000;;		Source string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all validated sources from the specified sources.
0000000000000000000000000000000000000000;;	func GetValidatedSources(sources []string) ([]string, error) {
0000000000000000000000000000000000000000;;		validated := make([]string, 0, len(sources))
0000000000000000000000000000000000000000;;		for _, source := range sources {
0000000000000000000000000000000000000000;;			switch source {
0000000000000000000000000000000000000000;;			case AllSource:
0000000000000000000000000000000000000000;;				return []string{FileSource, HTTPSource, ApiserverSource}, nil
0000000000000000000000000000000000000000;;			case FileSource, HTTPSource, ApiserverSource:
0000000000000000000000000000000000000000;;				validated = append(validated, source)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			case "":
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return []string{}, fmt.Errorf("unknown pod source %q", source)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return validated, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodSource returns the source of the pod based on the annotation.
0000000000000000000000000000000000000000;;	func GetPodSource(pod *v1.Pod) (string, error) {
0000000000000000000000000000000000000000;;		if pod.Annotations != nil {
0000000000000000000000000000000000000000;;			if source, ok := pod.Annotations[ConfigSourceAnnotationKey]; ok {
0000000000000000000000000000000000000000;;				return source, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("cannot get source of pod %q", pod.UID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SyncPodType classifies pod updates, eg: create, update.
0000000000000000000000000000000000000000;;	type SyncPodType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SyncPodSync is when the pod is synced to ensure desired state
0000000000000000000000000000000000000000;;		SyncPodSync SyncPodType = iota
0000000000000000000000000000000000000000;;		// SyncPodUpdate is when the pod is updated from source
0000000000000000000000000000000000000000;;		SyncPodUpdate
0000000000000000000000000000000000000000;;		// SyncPodCreate is when the pod is created from source
0000000000000000000000000000000000000000;;		SyncPodCreate
0000000000000000000000000000000000000000;;		// SyncPodKill is when the pod is killed based on a trigger internal to the kubelet for eviction.
0000000000000000000000000000000000000000;;		// If a SyncPodKill request is made to pod workers, the request is never dropped, and will always be processed.
0000000000000000000000000000000000000000;;		SyncPodKill
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sp SyncPodType) String() string {
0000000000000000000000000000000000000000;;		switch sp {
0000000000000000000000000000000000000000;;		case SyncPodCreate:
0000000000000000000000000000000000000000;;			return "create"
0000000000000000000000000000000000000000;;		case SyncPodUpdate:
0000000000000000000000000000000000000000;;			return "update"
0000000000000000000000000000000000000000;;		case SyncPodSync:
0000000000000000000000000000000000000000;;			return "sync"
0000000000000000000000000000000000000000;;		case SyncPodKill:
0000000000000000000000000000000000000000;;			return "kill"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCriticalPod returns true if the pod bears the critical pod annotation
0000000000000000000000000000000000000000;;	// key. Both the rescheduler and the kubelet use this key to make admission
0000000000000000000000000000000000000000;;	// and scheduling decisions.
0000000000000000000000000000000000000000;;	func IsCriticalPod(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		// Critical pods are restricted to "kube-system" namespace as of now.
0000000000000000000000000000000000000000;;		if pod.Namespace != kubeapi.NamespaceSystem {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		val, ok := pod.Annotations[CriticalPodAnnotationKey]
0000000000000000000000000000000000000000;;		if ok && val == "" {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
