0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
824f276ce443d9858b229e8870b2a57d135f3a55;pkg/kubelet/types_test.go[pkg/kubelet/types_test.go][pkg/kubelet/types/pod_update_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetValidatedSources(t *testing.T) {
0000000000000000000000000000000000000000;;		// Empty.
0000000000000000000000000000000000000000;;		sources, err := GetValidatedSources([]string{""})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		require.Len(t, sources, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Success.
0000000000000000000000000000000000000000;;		sources, err = GetValidatedSources([]string{FileSource, ApiserverSource})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		require.Len(t, sources, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// All.
0000000000000000000000000000000000000000;;		sources, err = GetValidatedSources([]string{AllSource})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		require.Len(t, sources, 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unknown source.
0000000000000000000000000000000000000000;;		sources, err = GetValidatedSources([]string{"taco"})
0000000000000000000000000000000000000000;;		require.Error(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodSource(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			pod         v1.Pod
0000000000000000000000000000000000000000;;			expected    string
0000000000000000000000000000000000000000;;			errExpected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:         v1.Pod{},
0000000000000000000000000000000000000000;;				expected:    "",
0000000000000000000000000000000000000000;;				errExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"kubernetes.io/config.source": "host-ipc-sources",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:    "host-ipc-sources",
0000000000000000000000000000000000000000;;				errExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, data := range cases {
0000000000000000000000000000000000000000;;			source, err := GetPodSource(&data.pod)
0000000000000000000000000000000000000000;;			if data.errExpected {
0000000000000000000000000000000000000000;;				assert.Error(t, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.NoError(t, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, data.expected, source, "test[%d]", i)
0000000000000000000000000000000000000000;;			t.Logf("Test case [%d]", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestString(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			sp       SyncPodType
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				sp:       SyncPodCreate,
0000000000000000000000000000000000000000;;				expected: "create",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				sp:       SyncPodUpdate,
0000000000000000000000000000000000000000;;				expected: "update",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				sp:       SyncPodSync,
0000000000000000000000000000000000000000;;				expected: "sync",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				sp:       SyncPodKill,
0000000000000000000000000000000000000000;;				expected: "kill",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				sp:       50,
0000000000000000000000000000000000000000;;				expected: "unknown",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, data := range cases {
0000000000000000000000000000000000000000;;			syncPodString := data.sp.String()
0000000000000000000000000000000000000000;;			assert.Equal(t, data.expected, syncPodString, "test[%d]", i)
0000000000000000000000000000000000000000;;			t.Logf("Test case [%d]", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsCriticalPod(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			pod      v1.Pod
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod1",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"scheduler.alpha.kubernetes.io/critical-pod": "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod2",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"scheduler.alpha.kubernetes.io/critical-pod": "abc",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod3",
0000000000000000000000000000000000000000;;						Namespace: "kube-system",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"scheduler.alpha.kubernetes.io/critical-pod": "abc",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod3",
0000000000000000000000000000000000000000;;						Namespace: "kube-system",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"scheduler.alpha.kubernetes.io/critical-pod": "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, data := range cases {
0000000000000000000000000000000000000000;;			actual := IsCriticalPod(&data.pod)
0000000000000000000000000000000000000000;;			if actual != data.expected {
0000000000000000000000000000000000000000;;				t.Errorf("IsCriticalPod result wrong:\nexpected: %v\nactual: %v for test[%d] with Annotations: %v",
0000000000000000000000000000000000000000;;					data.expected, actual, i, data.pod.Annotations)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
