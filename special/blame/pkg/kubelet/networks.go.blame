0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d37c4630c63893cfd200b6a00c0955df82481507;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This just exports required functions from kubelet proper, for use by network
0000000000000000000000000000000000000000;;	// plugins.
0000000000000000000000000000000000000000;;	// TODO(#35457): get rid of this backchannel to the kubelet. The scope of
0000000000000000000000000000000000000000;;	// the back channel is restricted to host-ports/testing, and restricted
0000000000000000000000000000000000000000;;	// to kubenet. No other network plugin wrapper needs it. Other plugins
0000000000000000000000000000000000000000;;	// only require a way to access namespace information, which they can do
0000000000000000000000000000000000000000;;	// directly through the methods implemented by criNetworkHost.
0000000000000000000000000000000000000000;;	type networkHost struct {
0000000000000000000000000000000000000000;;		kubelet *Kubelet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nh *networkHost) GetPodByName(name, namespace string) (*v1.Pod, bool) {
0000000000000000000000000000000000000000;;		return nh.kubelet.GetPodByName(name, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nh *networkHost) GetKubeClient() clientset.Interface {
0000000000000000000000000000000000000000;;		return nh.kubelet.kubeClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nh *networkHost) GetRuntime() kubecontainer.Runtime {
0000000000000000000000000000000000000000;;		return nh.kubelet.GetRuntime()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nh *networkHost) SupportsLegacyFeatures() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// criNetworkHost implements the part of network.Host required by the
0000000000000000000000000000000000000000;;	// cri (NamespaceGetter). It leechs off networkHost for all other
0000000000000000000000000000000000000000;;	// methods, because networkHost is slated for deletion.
0000000000000000000000000000000000000000;;	type criNetworkHost struct {
0000000000000000000000000000000000000000;;		*networkHost
0000000000000000000000000000000000000000;;		// criNetworkHost currently support legacy features. Hence no need to support PortMappingGetter
0000000000000000000000000000000000000000;;		*network.NoopPortMappingGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNetNS returns the network namespace of the given containerID.
0000000000000000000000000000000000000000;;	// This method satisfies the network.NamespaceGetter interface for
0000000000000000000000000000000000000000;;	// networkHost. It's only meant to be used from network plugins
0000000000000000000000000000000000000000;;	// that are directly invoked by the kubelet (aka: legacy, pre-cri).
0000000000000000000000000000000000000000;;	// Any network plugin invoked by a cri must implement NamespaceGetter
0000000000000000000000000000000000000000;;	// to talk directly to the runtime instead.
0000000000000000000000000000000000000000;;	func (c *criNetworkHost) GetNetNS(containerID string) (string, error) {
0000000000000000000000000000000000000000;;		return c.kubelet.GetRuntime().GetNetNS(kubecontainer.ContainerID{Type: "", ID: containerID})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// noOpLegacyHost implements the network.LegacyHost interface for the remote
0000000000000000000000000000000000000000;;	// runtime shim by just returning empties. It doesn't support legacy features
0000000000000000000000000000000000000000;;	// like host port and bandwidth shaping.
0000000000000000000000000000000000000000;;	type NoOpLegacyHost struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoOpLegacyHost) GetPodByName(namespace, name string) (*v1.Pod, bool) {
0000000000000000000000000000000000000000;;		return nil, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoOpLegacyHost) GetKubeClient() clientset.Interface {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoOpLegacyHost) GetRuntime() kubecontainer.Runtime {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nh *NoOpLegacyHost) SupportsLegacyFeatures() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
