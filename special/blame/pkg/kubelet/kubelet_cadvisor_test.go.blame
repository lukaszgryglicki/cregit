0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b1ee048941dfa73a34c1e10505a1a01784c67690;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		kubecontainertest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainerInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		cadvisorApiFailure := fmt.Errorf("cAdvisor failure")
0000000000000000000000000000000000000000;;		runtimeError := fmt.Errorf("List containers error")
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name                      string
0000000000000000000000000000000000000000;;			containerID               string
0000000000000000000000000000000000000000;;			containerPath             string
0000000000000000000000000000000000000000;;			cadvisorContainerInfo     cadvisorapi.ContainerInfo
0000000000000000000000000000000000000000;;			runtimeError              error
0000000000000000000000000000000000000000;;			podList                   []*kubecontainertest.FakePod
0000000000000000000000000000000000000000;;			requestedPodFullName      string
0000000000000000000000000000000000000000;;			requestedPodUid           types.UID
0000000000000000000000000000000000000000;;			requestedContainerName    string
0000000000000000000000000000000000000000;;			expectDockerContainerCall bool
0000000000000000000000000000000000000000;;			mockError                 error
0000000000000000000000000000000000000000;;			expectedError             error
0000000000000000000000000000000000000000;;			expectStats               bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "get container info",
0000000000000000000000000000000000000000;;				containerID:   "ab2cdf",
0000000000000000000000000000000000000000;;				containerPath: "/docker/ab2cdf",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo: cadvisorapi.ContainerInfo{
0000000000000000000000000000000000000000;;					ContainerReference: cadvisorapi.ContainerReference{
0000000000000000000000000000000000000000;;						Name: "/docker/ab2cdf",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				runtimeError: nil,
0000000000000000000000000000000000000000;;				podList: []*kubecontainertest.FakePod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Pod: &kubecontainer.Pod{
0000000000000000000000000000000000000000;;							ID:        "12345678",
0000000000000000000000000000000000000000;;							Name:      "qux",
0000000000000000000000000000000000000000;;							Namespace: "ns",
0000000000000000000000000000000000000000;;							Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "foo",
0000000000000000000000000000000000000000;;									ID:   kubecontainer.ContainerID{Type: "test", ID: "ab2cdf"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requestedPodFullName:      "qux_ns",
0000000000000000000000000000000000000000;;				requestedPodUid:           "",
0000000000000000000000000000000000000000;;				requestedContainerName:    "foo",
0000000000000000000000000000000000000000;;				expectDockerContainerCall: true,
0000000000000000000000000000000000000000;;				mockError:                 nil,
0000000000000000000000000000000000000000;;				expectedError:             nil,
0000000000000000000000000000000000000000;;				expectStats:               true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                  "get container info when cadvisor failed",
0000000000000000000000000000000000000000;;				containerID:           "ab2cdf",
0000000000000000000000000000000000000000;;				containerPath:         "/docker/ab2cdf",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo: cadvisorapi.ContainerInfo{},
0000000000000000000000000000000000000000;;				runtimeError:          nil,
0000000000000000000000000000000000000000;;				podList: []*kubecontainertest.FakePod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Pod: &kubecontainer.Pod{
0000000000000000000000000000000000000000;;							ID:        "uuid",
0000000000000000000000000000000000000000;;							Name:      "qux",
0000000000000000000000000000000000000000;;							Namespace: "ns",
0000000000000000000000000000000000000000;;							Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "foo",
0000000000000000000000000000000000000000;;									ID:   kubecontainer.ContainerID{Type: "test", ID: "ab2cdf"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requestedPodFullName:      "qux_ns",
0000000000000000000000000000000000000000;;				requestedPodUid:           "uuid",
0000000000000000000000000000000000000000;;				requestedContainerName:    "foo",
0000000000000000000000000000000000000000;;				expectDockerContainerCall: true,
0000000000000000000000000000000000000000;;				mockError:                 cadvisorApiFailure,
0000000000000000000000000000000000000000;;				expectedError:             cadvisorApiFailure,
0000000000000000000000000000000000000000;;				expectStats:               false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                      "get container info on non-existent container",
0000000000000000000000000000000000000000;;				containerID:               "",
0000000000000000000000000000000000000000;;				containerPath:             "",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo:     cadvisorapi.ContainerInfo{},
0000000000000000000000000000000000000000;;				runtimeError:              nil,
0000000000000000000000000000000000000000;;				podList:                   []*kubecontainertest.FakePod{},
0000000000000000000000000000000000000000;;				requestedPodFullName:      "qux",
0000000000000000000000000000000000000000;;				requestedPodUid:           "",
0000000000000000000000000000000000000000;;				requestedContainerName:    "foo",
0000000000000000000000000000000000000000;;				expectDockerContainerCall: false,
0000000000000000000000000000000000000000;;				mockError:                 nil,
0000000000000000000000000000000000000000;;				expectedError:             kubecontainer.ErrContainerNotFound,
0000000000000000000000000000000000000000;;				expectStats:               false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                   "get container info when container runtime failed",
0000000000000000000000000000000000000000;;				containerID:            "",
0000000000000000000000000000000000000000;;				containerPath:          "",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo:  cadvisorapi.ContainerInfo{},
0000000000000000000000000000000000000000;;				runtimeError:           runtimeError,
0000000000000000000000000000000000000000;;				podList:                []*kubecontainertest.FakePod{},
0000000000000000000000000000000000000000;;				requestedPodFullName:   "qux",
0000000000000000000000000000000000000000;;				requestedPodUid:        "",
0000000000000000000000000000000000000000;;				requestedContainerName: "foo",
0000000000000000000000000000000000000000;;				mockError:              nil,
0000000000000000000000000000000000000000;;				expectedError:          runtimeError,
0000000000000000000000000000000000000000;;				expectStats:            false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                   "get container info with no containers",
0000000000000000000000000000000000000000;;				containerID:            "",
0000000000000000000000000000000000000000;;				containerPath:          "",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo:  cadvisorapi.ContainerInfo{},
0000000000000000000000000000000000000000;;				runtimeError:           nil,
0000000000000000000000000000000000000000;;				podList:                []*kubecontainertest.FakePod{},
0000000000000000000000000000000000000000;;				requestedPodFullName:   "qux_ns",
0000000000000000000000000000000000000000;;				requestedPodUid:        "",
0000000000000000000000000000000000000000;;				requestedContainerName: "foo",
0000000000000000000000000000000000000000;;				mockError:              nil,
0000000000000000000000000000000000000000;;				expectedError:          kubecontainer.ErrContainerNotFound,
0000000000000000000000000000000000000000;;				expectStats:            false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                  "get container info with no matching containers",
0000000000000000000000000000000000000000;;				containerID:           "",
0000000000000000000000000000000000000000;;				containerPath:         "",
0000000000000000000000000000000000000000;;				cadvisorContainerInfo: cadvisorapi.ContainerInfo{},
0000000000000000000000000000000000000000;;				runtimeError:          nil,
0000000000000000000000000000000000000000;;				podList: []*kubecontainertest.FakePod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Pod: &kubecontainer.Pod{
0000000000000000000000000000000000000000;;							ID:        "12345678",
0000000000000000000000000000000000000000;;							Name:      "qux",
0000000000000000000000000000000000000000;;							Namespace: "ns",
0000000000000000000000000000000000000000;;							Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "bar",
0000000000000000000000000000000000000000;;									ID:   kubecontainer.ContainerID{Type: "test", ID: "fakeID"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requestedPodFullName:   "qux_ns",
0000000000000000000000000000000000000000;;				requestedPodUid:        "",
0000000000000000000000000000000000000000;;				requestedContainerName: "foo",
0000000000000000000000000000000000000000;;				mockError:              nil,
0000000000000000000000000000000000000000;;				expectedError:          kubecontainer.ErrContainerNotFound,
0000000000000000000000000000000000000000;;				expectStats:            false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			testKubelet := newTestKubelet(t, false /* controllerAttachDetachEnablec */)
0000000000000000000000000000000000000000;;			defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;			fakeRuntime := testKubelet.fakeRuntime
0000000000000000000000000000000000000000;;			kubelet := testKubelet.kubelet
0000000000000000000000000000000000000000;;			cadvisorReq := &cadvisorapi.ContainerInfoRequest{}
0000000000000000000000000000000000000000;;			mockCadvisor := testKubelet.fakeCadvisor
0000000000000000000000000000000000000000;;			if tc.expectDockerContainerCall {
0000000000000000000000000000000000000000;;				mockCadvisor.On("DockerContainer", tc.containerID, cadvisorReq).Return(tc.cadvisorContainerInfo, tc.mockError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fakeRuntime.Err = tc.runtimeError
0000000000000000000000000000000000000000;;			fakeRuntime.PodList = tc.podList
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stats, err := kubelet.GetContainerInfo(tc.requestedPodFullName, tc.requestedPodUid, tc.requestedContainerName, cadvisorReq)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expectedError, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectStats {
0000000000000000000000000000000000000000;;				require.NotNil(t, stats)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			mockCadvisor.AssertExpectations(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetRawContainerInfoRoot(t *testing.T) {
0000000000000000000000000000000000000000;;		containerPath := "/"
0000000000000000000000000000000000000000;;		containerInfo := &cadvisorapi.ContainerInfo{
0000000000000000000000000000000000000000;;			ContainerReference: cadvisorapi.ContainerReference{
0000000000000000000000000000000000000000;;				Name: containerPath,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, false /* controllerAttachDetachEnabled */)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		kubelet := testKubelet.kubelet
0000000000000000000000000000000000000000;;		mockCadvisor := testKubelet.fakeCadvisor
0000000000000000000000000000000000000000;;		cadvisorReq := &cadvisorapi.ContainerInfoRequest{}
0000000000000000000000000000000000000000;;		mockCadvisor.On("ContainerInfo", containerPath, cadvisorReq).Return(containerInfo, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := kubelet.GetRawContainerInfo(containerPath, cadvisorReq, false)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		mockCadvisor.AssertExpectations(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetRawContainerInfoSubcontainers(t *testing.T) {
0000000000000000000000000000000000000000;;		containerPath := "/kubelet"
0000000000000000000000000000000000000000;;		containerInfo := map[string]*cadvisorapi.ContainerInfo{
0000000000000000000000000000000000000000;;			containerPath: {
0000000000000000000000000000000000000000;;				ContainerReference: cadvisorapi.ContainerReference{
0000000000000000000000000000000000000000;;					Name: containerPath,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"/kubelet/sub": {
0000000000000000000000000000000000000000;;				ContainerReference: cadvisorapi.ContainerReference{
0000000000000000000000000000000000000000;;					Name: "/kubelet/sub",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, false /* controllerAttachDetachEnabled */)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		kubelet := testKubelet.kubelet
0000000000000000000000000000000000000000;;		mockCadvisor := testKubelet.fakeCadvisor
0000000000000000000000000000000000000000;;		cadvisorReq := &cadvisorapi.ContainerInfoRequest{}
0000000000000000000000000000000000000000;;		mockCadvisor.On("SubcontainerInfo", containerPath, cadvisorReq).Return(containerInfo, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err := kubelet.GetRawContainerInfo(containerPath, cadvisorReq, true)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Len(t, result, 2)
0000000000000000000000000000000000000000;;		mockCadvisor.AssertExpectations(t)
0000000000000000000000000000000000000000;;	}
