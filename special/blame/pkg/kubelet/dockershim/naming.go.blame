0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0f4d958b7be7761affe1d2fd81efeee47e606b38;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/leaky"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Container "names" are implementation details that do not concern
0000000000000000000000000000000000000000;;	// kubelet/CRI. This CRI shim uses names to fulfill the CRI requirement to
0000000000000000000000000000000000000000;;	// make sandbox/container creation idempotent. CRI states that there can
0000000000000000000000000000000000000000;;	// only exist one sandbox/container with the given metadata. To enforce this,
0000000000000000000000000000000000000000;;	// this shim constructs a name using the fields in the metadata so that
0000000000000000000000000000000000000000;;	// docker will reject the creation request if the name already exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note that changes to naming will likely break the backward compatibility.
0000000000000000000000000000000000000000;;	// Code must be added to ensure the shim knows how to recognize and extract
0000000000000000000000000000000000000000;;	// information the older containers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO: Add code to handle backward compatibility, i.e., making sure we can
0000000000000000000000000000000000000000;;	// recognize older containers and extract information from their names if
0000000000000000000000000000000000000000;;	// necessary.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// kubePrefix is used to identify the containers/sandboxes on the node managed by kubelet
0000000000000000000000000000000000000000;;		kubePrefix = "k8s"
0000000000000000000000000000000000000000;;		// sandboxContainerName is a string to include in the docker container so
0000000000000000000000000000000000000000;;		// that users can easily identify the sandboxes.
0000000000000000000000000000000000000000;;		sandboxContainerName = leaky.PodInfraContainerName
0000000000000000000000000000000000000000;;		// Delimiter used to construct docker container names.
0000000000000000000000000000000000000000;;		nameDelimiter = "_"
0000000000000000000000000000000000000000;;		// DockerImageIDPrefix is the prefix of image id in container status.
0000000000000000000000000000000000000000;;		DockerImageIDPrefix = "docker://"
0000000000000000000000000000000000000000;;		// DockerPullableImageIDPrefix is the prefix of pullable image id in container status.
0000000000000000000000000000000000000000;;		DockerPullableImageIDPrefix = "docker-pullable://"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeSandboxName(s *runtimeapi.PodSandboxConfig) string {
0000000000000000000000000000000000000000;;		return strings.Join([]string{
0000000000000000000000000000000000000000;;			kubePrefix,                            // 0
0000000000000000000000000000000000000000;;			sandboxContainerName,                  // 1
0000000000000000000000000000000000000000;;			s.Metadata.Name,                       // 2
0000000000000000000000000000000000000000;;			s.Metadata.Namespace,                  // 3
0000000000000000000000000000000000000000;;			s.Metadata.Uid,                        // 4
0000000000000000000000000000000000000000;;			fmt.Sprintf("%d", s.Metadata.Attempt), // 5
0000000000000000000000000000000000000000;;		}, nameDelimiter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeContainerName(s *runtimeapi.PodSandboxConfig, c *runtimeapi.ContainerConfig) string {
0000000000000000000000000000000000000000;;		return strings.Join([]string{
0000000000000000000000000000000000000000;;			kubePrefix,                            // 0
0000000000000000000000000000000000000000;;			c.Metadata.Name,                       // 1:
0000000000000000000000000000000000000000;;			s.Metadata.Name,                       // 2: sandbox name
0000000000000000000000000000000000000000;;			s.Metadata.Namespace,                  // 3: sandbox namesapce
0000000000000000000000000000000000000000;;			s.Metadata.Uid,                        // 4  sandbox uid
0000000000000000000000000000000000000000;;			fmt.Sprintf("%d", c.Metadata.Attempt), // 5
0000000000000000000000000000000000000000;;		}, nameDelimiter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// randomizeName randomizes the container name. This should only be used when we hit the
0000000000000000000000000000000000000000;;	// docker container name conflict bug.
0000000000000000000000000000000000000000;;	func randomizeName(name string) string {
0000000000000000000000000000000000000000;;		return strings.Join([]string{
0000000000000000000000000000000000000000;;			name,
0000000000000000000000000000000000000000;;			fmt.Sprintf("%08x", rand.Uint32()),
0000000000000000000000000000000000000000;;		}, nameDelimiter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseUint32(s string) (uint32, error) {
0000000000000000000000000000000000000000;;		n, err := strconv.ParseUint(s, 10, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint32(n), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Evaluate whether we should rely on labels completely.
0000000000000000000000000000000000000000;;	func parseSandboxName(name string) (*runtimeapi.PodSandboxMetadata, error) {
0000000000000000000000000000000000000000;;		// Docker adds a "/" prefix to names. so trim it.
0000000000000000000000000000000000000000;;		name = strings.TrimPrefix(name, "/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parts := strings.Split(name, nameDelimiter)
0000000000000000000000000000000000000000;;		// Tolerate the random suffix.
0000000000000000000000000000000000000000;;		// TODO(random-liu): Remove 7 field case when docker 1.11 is deprecated.
0000000000000000000000000000000000000000;;		if len(parts) != 6 && len(parts) != 7 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to parse the sandbox name: %q", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if parts[0] != kubePrefix {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("container is not managed by kubernetes: %q", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		attempt, err := parseUint32(parts[5])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to parse the sandbox name %q: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &runtimeapi.PodSandboxMetadata{
0000000000000000000000000000000000000000;;			Name:      parts[2],
0000000000000000000000000000000000000000;;			Namespace: parts[3],
0000000000000000000000000000000000000000;;			Uid:       parts[4],
0000000000000000000000000000000000000000;;			Attempt:   attempt,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Evaluate whether we should rely on labels completely.
0000000000000000000000000000000000000000;;	func parseContainerName(name string) (*runtimeapi.ContainerMetadata, error) {
0000000000000000000000000000000000000000;;		// Docker adds a "/" prefix to names. so trim it.
0000000000000000000000000000000000000000;;		name = strings.TrimPrefix(name, "/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parts := strings.Split(name, nameDelimiter)
0000000000000000000000000000000000000000;;		// Tolerate the random suffix.
0000000000000000000000000000000000000000;;		// TODO(random-liu): Remove 7 field case when docker 1.11 is deprecated.
0000000000000000000000000000000000000000;;		if len(parts) != 6 && len(parts) != 7 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to parse the container name: %q", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if parts[0] != kubePrefix {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("container is not managed by kubernetes: %q", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		attempt, err := parseUint32(parts[5])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to parse the container name %q: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &runtimeapi.ContainerMetadata{
0000000000000000000000000000000000000000;;			Name:    parts[1],
0000000000000000000000000000000000000000;;			Attempt: attempt,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
