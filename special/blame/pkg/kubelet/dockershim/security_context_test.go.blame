0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5306e6f746158ca09a78afaf175db3af860ba6dc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/blang/semver"
0000000000000000000000000000000000000000;;		dockercontainer "github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyContainerConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		var uid int64 = 123
0000000000000000000000000000000000000000;;		var username = "testuser"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			sc       *runtimeapi.LinuxContainerSecurityContext
0000000000000000000000000000000000000000;;			expected *dockercontainer.Config
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.RunAsUser set",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					RunAsUser: &runtimeapi.Int64Value{Value: uid},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.Config{
0000000000000000000000000000000000000000;;					User: strconv.FormatInt(uid, 10),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.RunAsUsername set",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					RunAsUsername: username,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.Config{
0000000000000000000000000000000000000000;;					User: username,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no RunAsUser value set",
0000000000000000000000000000000000000000;;				sc:       &runtimeapi.LinuxContainerSecurityContext{},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.Config{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.Config{}
0000000000000000000000000000000000000000;;			modifyContainerConfig(tc.sc, dockerCfg)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyHostConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		setNetworkHC := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;		setPrivSC := &runtimeapi.LinuxContainerSecurityContext{}
0000000000000000000000000000000000000000;;		setPrivSC.Privileged = true
0000000000000000000000000000000000000000;;		setPrivHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			Privileged: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setCapsHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			CapAdd:  []string{"addCapA", "addCapB"},
0000000000000000000000000000000000000000;;			CapDrop: []string{"dropCapA", "dropCapB"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setSELinuxHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			SecurityOpt: []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelUser('='), "user"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelRole('='), "role"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelType('='), "type"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelLevel('='), "level"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			sc       *runtimeapi.LinuxContainerSecurityContext
0000000000000000000000000000000000000000;;			expected *dockercontainer.HostConfig
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "fully set container.SecurityContext",
0000000000000000000000000000000000000000;;				sc:       fullValidSecurityContext(),
0000000000000000000000000000000000000000;;				expected: fullValidHostConfig(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "empty container.SecurityContext",
0000000000000000000000000000000000000000;;				sc:       &runtimeapi.LinuxContainerSecurityContext{},
0000000000000000000000000000000000000000;;				expected: setNetworkHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "container.SecurityContext.Privileged",
0000000000000000000000000000000000000000;;				sc:       setPrivSC,
0000000000000000000000000000000000000000;;				expected: setPrivHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.Capabilities",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: inputCapabilities(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: setCapsHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.SELinuxOptions",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					SelinuxOptions: inputSELinuxOptions(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: setSELinuxHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;			modifyHostConfig(tc.sc, dockerCfg, '=')
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyHostConfigWithGroups(t *testing.T) {
0000000000000000000000000000000000000000;;		supplementalGroupsSC := &runtimeapi.LinuxContainerSecurityContext{}
0000000000000000000000000000000000000000;;		supplementalGroupsSC.SupplementalGroups = []int64{2222}
0000000000000000000000000000000000000000;;		supplementalGroupHC := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;		supplementalGroupHC.GroupAdd = []string{"2222"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			securityContext *runtimeapi.LinuxContainerSecurityContext
0000000000000000000000000000000000000000;;			expected        *dockercontainer.HostConfig
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "nil",
0000000000000000000000000000000000000000;;				securityContext: nil,
0000000000000000000000000000000000000000;;				expected:        &dockercontainer.HostConfig{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "SupplementalGroup",
0000000000000000000000000000000000000000;;				securityContext: supplementalGroupsSC,
0000000000000000000000000000000000000000;;				expected:        supplementalGroupHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;			modifyHostConfig(tc.securityContext, dockerCfg, '=')
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyHostConfigAndNamespaceOptionsForContainer(t *testing.T) {
0000000000000000000000000000000000000000;;		priv := true
0000000000000000000000000000000000000000;;		sandboxID := "sandbox"
0000000000000000000000000000000000000000;;		sandboxNSMode := fmt.Sprintf("container:%v", sandboxID)
0000000000000000000000000000000000000000;;		setPrivSC := &runtimeapi.LinuxContainerSecurityContext{}
0000000000000000000000000000000000000000;;		setPrivSC.Privileged = priv
0000000000000000000000000000000000000000;;		setPrivHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			Privileged:  true,
0000000000000000000000000000000000000000;;			IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			PidMode:     dockercontainer.PidMode(sandboxNSMode),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setCapsHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			CapAdd:      []string{"addCapA", "addCapB"},
0000000000000000000000000000000000000000;;			CapDrop:     []string{"dropCapA", "dropCapB"},
0000000000000000000000000000000000000000;;			IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			PidMode:     dockercontainer.PidMode(sandboxNSMode),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setSELinuxHC := &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			SecurityOpt: []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelUser('='), "user"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelRole('='), "role"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelType('='), "type"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelLevel('='), "level"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;			PidMode:     dockercontainer.PidMode(sandboxNSMode),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			sc       *runtimeapi.LinuxContainerSecurityContext
0000000000000000000000000000000000000000;;			expected *dockercontainer.HostConfig
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "container.SecurityContext.Privileged",
0000000000000000000000000000000000000000;;				sc:       setPrivSC,
0000000000000000000000000000000000000000;;				expected: setPrivHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.Capabilities",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: inputCapabilities(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: setCapsHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "container.SecurityContext.SELinuxOptions",
0000000000000000000000000000000000000000;;				sc: &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;					SelinuxOptions: inputSELinuxOptions(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: setSELinuxHC,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;			modifyHostConfig(tc.sc, dockerCfg, '=')
0000000000000000000000000000000000000000;;			modifyContainerNamespaceOptions(tc.sc.GetNamespaceOptions(), sandboxID, dockerCfg)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifySandboxNamespaceOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		set := true
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			nsOpt    *runtimeapi.NamespaceOption
0000000000000000000000000000000000000000;;			expected *dockercontainer.HostConfig
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostNetwork",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostNetwork: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					NetworkMode: namespaceModeHost,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostIpc",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostIpc: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					IpcMode:     namespaceModeHost,
0000000000000000000000000000000000000000;;					NetworkMode: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostPid",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostPid: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					PidMode:     namespaceModeHost,
0000000000000000000000000000000000000000;;					NetworkMode: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;			modifySandboxNamespaceOptions(tc.nsOpt, dockerCfg, nil)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyContainerNamespaceOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		set := true
0000000000000000000000000000000000000000;;		sandboxID := "sandbox"
0000000000000000000000000000000000000000;;		sandboxNSMode := fmt.Sprintf("container:%v", sandboxID)
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			nsOpt    *runtimeapi.NamespaceOption
0000000000000000000000000000000000000000;;			expected *dockercontainer.HostConfig
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostNetwork",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostNetwork: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					UTSMode:     namespaceModeHost,
0000000000000000000000000000000000000000;;					PidMode:     dockercontainer.PidMode(sandboxNSMode),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostIpc",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostIpc: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					PidMode:     dockercontainer.PidMode(sandboxNSMode),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "NamespaceOption.HostPid",
0000000000000000000000000000000000000000;;				nsOpt: &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;					HostPid: set,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;					NetworkMode: dockercontainer.NetworkMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					IpcMode:     dockercontainer.IpcMode(sandboxNSMode),
0000000000000000000000000000000000000000;;					PidMode:     namespaceModeHost,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{}
0000000000000000000000000000000000000000;;			modifyContainerNamespaceOptions(tc.nsOpt, sandboxID, dockerCfg)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyContainerNamespacePIDOverride(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			disable         bool
0000000000000000000000000000000000000000;;			version         *semver.Version
0000000000000000000000000000000000000000;;			input, expected dockercontainer.PidMode
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.Enable",
0000000000000000000000000000000000000000;;				disable:  false,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 1, Minor: 26},
0000000000000000000000000000000000000000;;				input:    "container:sandbox",
0000000000000000000000000000000000000000;;				expected: "container:sandbox",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.Disable",
0000000000000000000000000000000000000000;;				disable:  true,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 1, Minor: 26},
0000000000000000000000000000000000000000;;				input:    "container:sandbox",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.OldDocker",
0000000000000000000000000000000000000000;;				disable:  false,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 1, Minor: 25},
0000000000000000000000000000000000000000;;				input:    "container:sandbox",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.HostPid",
0000000000000000000000000000000000000000;;				disable:  true,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 1, Minor: 27},
0000000000000000000000000000000000000000;;				input:    "host",
0000000000000000000000000000000000000000;;				expected: "host",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.DistantFuture",
0000000000000000000000000000000000000000;;				disable:  false,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 2, Minor: 10},
0000000000000000000000000000000000000000;;				input:    "container:sandbox",
0000000000000000000000000000000000000000;;				expected: "container:sandbox",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "SharedPID.EmptyPidMode",
0000000000000000000000000000000000000000;;				disable:  true,
0000000000000000000000000000000000000000;;				version:  &semver.Version{Major: 1, Minor: 25},
0000000000000000000000000000000000000000;;				input:    "",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			dockerCfg := &dockercontainer.HostConfig{PidMode: tc.input}
0000000000000000000000000000000000000000;;			modifyPIDNamespaceOverrides(tc.disable, tc.version, dockerCfg)
0000000000000000000000000000000000000000;;			assert.Equal(t, tc.expected, dockerCfg.PidMode, "[Test case %q]", tc.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fullValidSecurityContext() *runtimeapi.LinuxContainerSecurityContext {
0000000000000000000000000000000000000000;;		return &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;			Privileged:     true,
0000000000000000000000000000000000000000;;			Capabilities:   inputCapabilities(),
0000000000000000000000000000000000000000;;			SelinuxOptions: inputSELinuxOptions(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func inputCapabilities() *runtimeapi.Capability {
0000000000000000000000000000000000000000;;		return &runtimeapi.Capability{
0000000000000000000000000000000000000000;;			AddCapabilities:  []string{"addCapA", "addCapB"},
0000000000000000000000000000000000000000;;			DropCapabilities: []string{"dropCapA", "dropCapB"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func inputSELinuxOptions() *runtimeapi.SELinuxOption {
0000000000000000000000000000000000000000;;		user := "user"
0000000000000000000000000000000000000000;;		role := "role"
0000000000000000000000000000000000000000;;		stype := "type"
0000000000000000000000000000000000000000;;		level := "level"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &runtimeapi.SELinuxOption{
0000000000000000000000000000000000000000;;			User:  user,
0000000000000000000000000000000000000000;;			Role:  role,
0000000000000000000000000000000000000000;;			Type:  stype,
0000000000000000000000000000000000000000;;			Level: level,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fullValidHostConfig() *dockercontainer.HostConfig {
0000000000000000000000000000000000000000;;		return &dockercontainer.HostConfig{
0000000000000000000000000000000000000000;;			Privileged: true,
0000000000000000000000000000000000000000;;			CapAdd:     []string{"addCapA", "addCapB"},
0000000000000000000000000000000000000000;;			CapDrop:    []string{"dropCapA", "dropCapB"},
0000000000000000000000000000000000000000;;			SecurityOpt: []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelUser('='), "user"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelRole('='), "role"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelType('='), "type"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s:%s", selinuxLabelLevel('='), "level"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
