0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1bc006af6d46ac4eb14a2aae4a84e3018176607d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/docker/pkg/jsonmessage"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRemoveImage(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, fakeDocker, _ := newTestDockerService()
0000000000000000000000000000000000000000;;		id := "1111"
0000000000000000000000000000000000000000;;		fakeDocker.InjectImageInspects([]dockertypes.ImageInspect{{ID: id, RepoTags: []string{"foo"}}})
0000000000000000000000000000000000000000;;		ds.RemoveImage(&runtimeapi.ImageSpec{Image: id})
0000000000000000000000000000000000000000;;		fakeDocker.AssertCallDetails(libdocker.NewCalledDetail("inspect_image", nil),
0000000000000000000000000000000000000000;;			libdocker.NewCalledDetail("remove_image", []interface{}{id, dockertypes.ImageRemoveOptions{PruneChildren: true}}))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRemoveImageWithMultipleTags(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, fakeDocker, _ := newTestDockerService()
0000000000000000000000000000000000000000;;		id := "1111"
0000000000000000000000000000000000000000;;		fakeDocker.InjectImageInspects([]dockertypes.ImageInspect{{ID: id, RepoTags: []string{"foo", "bar"}}})
0000000000000000000000000000000000000000;;		ds.RemoveImage(&runtimeapi.ImageSpec{Image: id})
0000000000000000000000000000000000000000;;		fakeDocker.AssertCallDetails(libdocker.NewCalledDetail("inspect_image", nil),
0000000000000000000000000000000000000000;;			libdocker.NewCalledDetail("remove_image", []interface{}{"foo", dockertypes.ImageRemoveOptions{PruneChildren: true}}),
0000000000000000000000000000000000000000;;			libdocker.NewCalledDetail("remove_image", []interface{}{"bar", dockertypes.ImageRemoveOptions{PruneChildren: true}}))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPullWithJSONError(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, fakeDocker, _ := newTestDockerService()
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			image         *runtimeapi.ImageSpec
0000000000000000000000000000000000000000;;			err           error
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"Json error": {
0000000000000000000000000000000000000000;;				&runtimeapi.ImageSpec{Image: "ubuntu"},
0000000000000000000000000000000000000000;;				&jsonmessage.JSONError{Code: 50, Message: "Json error"},
0000000000000000000000000000000000000000;;				"Json error",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Bad gateway": {
0000000000000000000000000000000000000000;;				&runtimeapi.ImageSpec{Image: "ubuntu"},
0000000000000000000000000000000000000000;;				&jsonmessage.JSONError{Code: 502, Message: "<!doctype html>\n<html class=\"no-js\" lang=\"\">\n    <head>\n  </head>\n    <body>\n   <h1>Oops, there was an error!</h1>\n        <p>We have been contacted of this error, feel free to check out <a href=\"http://status.docker.com/\">status.docker.com</a>\n           to see if there is a bigger issue.</p>\n\n    </body>\n</html>"},
0000000000000000000000000000000000000000;;				"RegistryUnavailable",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, test := range tests {
0000000000000000000000000000000000000000;;			fakeDocker.InjectError("pull", test.err)
0000000000000000000000000000000000000000;;			_, err := ds.PullImage(test.image, &runtimeapi.AuthConfig{})
0000000000000000000000000000000000000000;;			assert.Error(t, err, fmt.Sprintf("TestCase [%s]", key))
0000000000000000000000000000000000000000;;			assert.Contains(t, err.Error(), test.expectedError)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
