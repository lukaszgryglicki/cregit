0000000000000000000000000000000000000000;;	// +build !linux,!windows
5732679969f991e23d68c585d5e3e100ea7b1be6;pkg/kubelet/dockertools/docker_manager_unsupported.go[pkg/kubelet/dockertools/docker_manager_unsupported.go][pkg/kubelet/dockershim/helpers_unsupported.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/blang/semver"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DefaultMemorySwap() int64 {
0000000000000000000000000000000000000000;;		return -1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) getSecurityOpts(containerName string, sandboxConfig *runtimeapi.PodSandboxConfig, separator rune) ([]string, error) {
0000000000000000000000000000000000000000;;		glog.Warningf("getSecurityOpts is unsupported in this build")
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) updateCreateConfig(
0000000000000000000000000000000000000000;;		createConfig *dockertypes.ContainerCreateConfig,
0000000000000000000000000000000000000000;;		config *runtimeapi.ContainerConfig,
0000000000000000000000000000000000000000;;		sandboxConfig *runtimeapi.PodSandboxConfig,
0000000000000000000000000000000000000000;;		podSandboxID string, securityOptSep rune, apiVersion *semver.Version) error {
0000000000000000000000000000000000000000;;		glog.Warningf("updateCreateConfig is unsupported in this build")
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) determinePodIPBySandboxID(uid string) string {
0000000000000000000000000000000000000000;;		glog.Warningf("determinePodIPBySandboxID is unsupported in this build")
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
