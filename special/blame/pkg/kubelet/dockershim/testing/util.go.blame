0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
811c96f4bb42575af2f65ad0a6181690c44ba7ee;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemStore is an implementation of CheckpointStore interface which stores checkpoint in memory.
0000000000000000000000000000000000000000;;	type MemStore struct {
0000000000000000000000000000000000000000;;		mem map[string][]byte
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMemStore() *MemStore {
0000000000000000000000000000000000000000;;		return &MemStore{mem: make(map[string][]byte)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mstore *MemStore) Write(key string, data []byte) error {
0000000000000000000000000000000000000000;;		mstore.Lock()
0000000000000000000000000000000000000000;;		defer mstore.Unlock()
0000000000000000000000000000000000000000;;		mstore.mem[key] = data
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mstore *MemStore) Read(key string) ([]byte, error) {
0000000000000000000000000000000000000000;;		mstore.Lock()
0000000000000000000000000000000000000000;;		defer mstore.Unlock()
0000000000000000000000000000000000000000;;		data, ok := mstore.mem[key]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, errors.CheckpointNotFoundError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return data, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mstore *MemStore) Delete(key string) error {
0000000000000000000000000000000000000000;;		mstore.Lock()
0000000000000000000000000000000000000000;;		defer mstore.Unlock()
0000000000000000000000000000000000000000;;		delete(mstore.mem, key)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mstore *MemStore) List() ([]string, error) {
0000000000000000000000000000000000000000;;		mstore.Lock()
0000000000000000000000000000000000000000;;		defer mstore.Unlock()
0000000000000000000000000000000000000000;;		keys := make([]string, 0)
0000000000000000000000000000000000000000;;		for key := range mstore.mem {
0000000000000000000000000000000000000000;;			keys = append(keys, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return keys, nil
0000000000000000000000000000000000000000;;	}
