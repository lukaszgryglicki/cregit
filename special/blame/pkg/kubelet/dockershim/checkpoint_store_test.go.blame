0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
811c96f4bb42575af2f65ad0a6181690c44ba7ee;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFileStore(t *testing.T) {
0000000000000000000000000000000000000000;;		path, err := ioutil.TempDir("", "FileStore")
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		defer cleanUpTestPath(t, path)
0000000000000000000000000000000000000000;;		store, err := NewFileStore(path)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Checkpoints := []struct {
0000000000000000000000000000000000000000;;			key       string
0000000000000000000000000000000000000000;;			data      string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id1",
0000000000000000000000000000000000000000;;				"data1",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id2",
0000000000000000000000000000000000000000;;				"data2",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"/id1",
0000000000000000000000000000000000000000;;				"data1",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				".id1",
0000000000000000000000000000000000000000;;				"data1",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"   ",
0000000000000000000000000000000000000000;;				"data2",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"___",
0000000000000000000000000000000000000000;;				"data2",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Add Checkpoint
0000000000000000000000000000000000000000;;		for _, c := range Checkpoints {
0000000000000000000000000000000000000000;;			_, err = store.Read(c.key)
0000000000000000000000000000000000000000;;			assert.Error(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = store.Write(c.key, []byte(c.data))
0000000000000000000000000000000000000000;;			if c.expectErr {
0000000000000000000000000000000000000000;;				assert.Error(t, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.NoError(t, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Test Read Checkpoint
0000000000000000000000000000000000000000;;			data, err := store.Read(c.key)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			assert.Equal(t, string(data), c.data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test list checkpoints.
0000000000000000000000000000000000000000;;		keys, err := store.List()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		sort.Strings(keys)
0000000000000000000000000000000000000000;;		assert.Equal(t, keys, []string{"id1", "id2"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Delete Checkpoint
0000000000000000000000000000000000000000;;		for _, c := range Checkpoints {
0000000000000000000000000000000000000000;;			if c.expectErr {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = store.Delete(c.key)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			_, err = store.Read(c.key)
0000000000000000000000000000000000000000;;			assert.EqualValues(t, errors.CheckpointNotFoundError, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test delete non existed checkpoint
0000000000000000000000000000000000000000;;		err = store.Delete("id1")
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test list checkpoints.
0000000000000000000000000000000000000000;;		keys, err = store.List()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, len(keys), 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidKey(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := []struct {
0000000000000000000000000000000000000000;;			key   string
0000000000000000000000000000000000000000;;			valid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"    ",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"/foo/bar",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				".foo",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"a78768279290d33d0b82eaea43cb8346f500057cb5bd250e88c97a5585385d66",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testcases {
0000000000000000000000000000000000000000;;			if tc.valid {
0000000000000000000000000000000000000000;;				assert.NoError(t, validateKey(tc.key))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.Error(t, validateKey(tc.key))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func cleanUpTestPath(t *testing.T, path string) {
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(path); err != nil {
0000000000000000000000000000000000000000;;				assert.NoError(t, err, "Failed to delete test directory: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
