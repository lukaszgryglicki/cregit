0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
811c96f4bb42575af2f65ad0a6181690c44ba7ee;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		utilstore "k8s.io/kubernetes/pkg/kubelet/dockershim/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTestPersistentCheckpointHandler() CheckpointHandler {
0000000000000000000000000000000000000000;;		return &PersistentCheckpointHandler{store: utilstore.NewMemStore()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPersistentCheckpointHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		handler := NewTestPersistentCheckpointHandler()
0000000000000000000000000000000000000000;;		port80 := int32(80)
0000000000000000000000000000000000000000;;		port443 := int32(443)
0000000000000000000000000000000000000000;;		proto := protocolTCP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		checkpoint1 := NewPodSandboxCheckpoint("ns1", "sandbox1")
0000000000000000000000000000000000000000;;		checkpoint1.Data.PortMappings = []*PortMapping{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				&proto,
0000000000000000000000000000000000000000;;				&port80,
0000000000000000000000000000000000000000;;				&port80,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				&proto,
0000000000000000000000000000000000000000;;				&port443,
0000000000000000000000000000000000000000;;				&port443,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		checkpoint1.Data.HostNetwork = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		checkpoints := []struct {
0000000000000000000000000000000000000000;;			podSandboxID      string
0000000000000000000000000000000000000000;;			checkpoint        *PodSandboxCheckpoint
0000000000000000000000000000000000000000;;			expectHostNetwork bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id1",
0000000000000000000000000000000000000000;;				checkpoint1,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id2",
0000000000000000000000000000000000000000;;				NewPodSandboxCheckpoint("ns2", "sandbox2"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range checkpoints {
0000000000000000000000000000000000000000;;			// Test CreateCheckpoints
0000000000000000000000000000000000000000;;			err = handler.CreateCheckpoint(tc.podSandboxID, tc.checkpoint)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Test GetCheckpoints
0000000000000000000000000000000000000000;;			checkpoint, err := handler.GetCheckpoint(tc.podSandboxID)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			assert.Equal(t, *checkpoint, *tc.checkpoint)
0000000000000000000000000000000000000000;;			assert.Equal(t, checkpoint.Data.HostNetwork, tc.expectHostNetwork)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test ListCheckpoints
0000000000000000000000000000000000000000;;		keys, err := handler.ListCheckpoints()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		sort.Strings(keys)
0000000000000000000000000000000000000000;;		assert.Equal(t, keys, []string{"id1", "id2"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test RemoveCheckpoints
0000000000000000000000000000000000000000;;		err = handler.RemoveCheckpoint("id1")
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		// Test Remove Nonexisted Checkpoints
0000000000000000000000000000000000000000;;		err = handler.RemoveCheckpoint("id1")
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test ListCheckpoints
0000000000000000000000000000000000000000;;		keys, err = handler.ListCheckpoints()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, keys, []string{"id2"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Get NonExisted Checkpoint
0000000000000000000000000000000000000000;;		_, err = handler.GetCheckpoint("id1")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	}
