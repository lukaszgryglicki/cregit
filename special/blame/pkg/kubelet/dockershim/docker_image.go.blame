0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4944363031bbc3b1d2d5b28293732f95ba44f7cf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/docker/pkg/jsonmessage"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file implements methods in ImageManagerService.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListImages lists existing images.
0000000000000000000000000000000000000000;;	func (ds *dockerService) ListImages(filter *runtimeapi.ImageFilter) ([]*runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		opts := dockertypes.ImageListOptions{}
0000000000000000000000000000000000000000;;		if filter != nil {
0000000000000000000000000000000000000000;;			if imgSpec := filter.GetImage(); imgSpec != nil {
0000000000000000000000000000000000000000;;				opts.MatchName = imgSpec.Image
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		images, err := ds.client.ListImages(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := make([]*runtimeapi.Image, 0, len(images))
0000000000000000000000000000000000000000;;		for _, i := range images {
0000000000000000000000000000000000000000;;			apiImage, err := imageToRuntimeAPIImage(&i)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// TODO: log an error message?
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, apiImage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageStatus returns the status of the image, returns nil if the image doesn't present.
0000000000000000000000000000000000000000;;	func (ds *dockerService) ImageStatus(image *runtimeapi.ImageSpec) (*runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		imageInspect, err := ds.client.InspectImageByRef(image.Image)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if libdocker.IsImageNotFoundError(err) {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return imageInspectToRuntimeAPIImage(imageInspect)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PullImage pulls an image with authentication config.
0000000000000000000000000000000000000000;;	func (ds *dockerService) PullImage(image *runtimeapi.ImageSpec, auth *runtimeapi.AuthConfig) (string, error) {
0000000000000000000000000000000000000000;;		authConfig := dockertypes.AuthConfig{}
0000000000000000000000000000000000000000;;		if auth != nil {
0000000000000000000000000000000000000000;;			authConfig.Username = auth.Username
0000000000000000000000000000000000000000;;			authConfig.Password = auth.Password
0000000000000000000000000000000000000000;;			authConfig.ServerAddress = auth.ServerAddress
0000000000000000000000000000000000000000;;			authConfig.IdentityToken = auth.IdentityToken
0000000000000000000000000000000000000000;;			authConfig.RegistryToken = auth.RegistryToken
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := ds.client.PullImage(image.Image,
0000000000000000000000000000000000000000;;			authConfig,
0000000000000000000000000000000000000000;;			dockertypes.ImagePullOptions{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", filterHTTPError(err, image.Image)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return getImageRef(ds.client, image.Image)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveImage removes the image.
0000000000000000000000000000000000000000;;	func (ds *dockerService) RemoveImage(image *runtimeapi.ImageSpec) error {
0000000000000000000000000000000000000000;;		// If the image has multiple tags, we need to remove all the tags
0000000000000000000000000000000000000000;;		// TODO: We assume image.Image is image ID here, which is true in the current implementation
0000000000000000000000000000000000000000;;		// of kubelet, but we should still clarify this in CRI.
0000000000000000000000000000000000000000;;		imageInspect, err := ds.client.InspectImageByID(image.Image)
0000000000000000000000000000000000000000;;		if err == nil && imageInspect != nil && len(imageInspect.RepoTags) > 1 {
0000000000000000000000000000000000000000;;			for _, tag := range imageInspect.RepoTags {
0000000000000000000000000000000000000000;;				if _, err := ds.client.RemoveImage(tag, dockertypes.ImageRemoveOptions{PruneChildren: true}); err != nil && !libdocker.IsImageNotFoundError(err) {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// dockerclient.InspectImageByID doesn't work with digest and repoTags,
0000000000000000000000000000000000000000;;		// it is safe to continue removing it since there is another check below.
0000000000000000000000000000000000000000;;		if err != nil && !libdocker.IsImageNotFoundError(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = ds.client.RemoveImage(image.Image, dockertypes.ImageRemoveOptions{PruneChildren: true})
0000000000000000000000000000000000000000;;		if err != nil && !libdocker.IsImageNotFoundError(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getImageRef returns the image digest if exists, or else returns the image ID.
0000000000000000000000000000000000000000;;	func getImageRef(client libdocker.Interface, image string) (string, error) {
0000000000000000000000000000000000000000;;		img, err := client.InspectImageByRef(image)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if img == nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unable to inspect image %s", image)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the digest if it exist.
0000000000000000000000000000000000000000;;		if len(img.RepoDigests) > 0 {
0000000000000000000000000000000000000000;;			return img.RepoDigests[0], nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return img.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageFsInfo returns information of the filesystem that is used to store images.
0000000000000000000000000000000000000000;;	func (ds *dockerService) ImageFsInfo(req *runtimeapi.ImageFsInfoRequest) (*runtimeapi.ImageFsInfoResponse, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func filterHTTPError(err error, image string) error {
0000000000000000000000000000000000000000;;		// docker/docker/pull/11314 prints detailed error info for docker pull.
0000000000000000000000000000000000000000;;		// When it hits 502, it returns a verbose html output including an inline svg,
0000000000000000000000000000000000000000;;		// which makes the output of kubectl get pods much harder to parse.
0000000000000000000000000000000000000000;;		// Here converts such verbose output to a concise one.
0000000000000000000000000000000000000000;;		jerr, ok := err.(*jsonmessage.JSONError)
0000000000000000000000000000000000000000;;		if ok && (jerr.Code == http.StatusBadGateway ||
0000000000000000000000000000000000000000;;			jerr.Code == http.StatusServiceUnavailable ||
0000000000000000000000000000000000000000;;			jerr.Code == http.StatusGatewayTimeout) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("RegistryUnavailable: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
