0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
088e22190941295747dbca515763974f748f3b5f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selinuxLabelUser returns the fragment of a Docker security opt that
0000000000000000000000000000000000000000;;	// describes the SELinux user. Note that strictly speaking this is not
0000000000000000000000000000000000000000;;	// actually the name of the security opt, but a fragment of the whole key-
0000000000000000000000000000000000000000;;	// value pair necessary to set the opt.
0000000000000000000000000000000000000000;;	func selinuxLabelUser(separator rune) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("label%cuser", separator)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selinuxLabelRole returns the fragment of a Docker security opt that
0000000000000000000000000000000000000000;;	// describes the SELinux role. Note that strictly speaking this is not
0000000000000000000000000000000000000000;;	// actually the name of the security opt, but a fragment of the whole key-
0000000000000000000000000000000000000000;;	// value pair necessary to set the opt.
0000000000000000000000000000000000000000;;	func selinuxLabelRole(separator rune) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("label%crole", separator)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selinuxLabelType returns the fragment of a Docker security opt that
0000000000000000000000000000000000000000;;	// describes the SELinux type. Note that strictly speaking this is not
0000000000000000000000000000000000000000;;	// actually the name of the security opt, but a fragment of the whole key-
0000000000000000000000000000000000000000;;	// value pair necessary to set the opt.
0000000000000000000000000000000000000000;;	func selinuxLabelType(separator rune) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("label%ctype", separator)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selinuxLabelLevel returns the fragment of a Docker security opt that
0000000000000000000000000000000000000000;;	// describes the SELinux level. Note that strictly speaking this is not
0000000000000000000000000000000000000000;;	// actually the name of the security opt, but a fragment of the whole key-
0000000000000000000000000000000000000000;;	// value pair necessary to set the opt.
0000000000000000000000000000000000000000;;	func selinuxLabelLevel(separator rune) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("label%clevel", separator)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dockerLaelDisable returns the Docker security opt that disables SELinux for
0000000000000000000000000000000000000000;;	// the container.
0000000000000000000000000000000000000000;;	func selinuxLabelDisable(separator rune) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("label%cdisable", separator)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// addSELinuxOptions adds SELinux options to config using the given
0000000000000000000000000000000000000000;;	// separator.
0000000000000000000000000000000000000000;;	func addSELinuxOptions(config []string, selinuxOpts *runtimeapi.SELinuxOption, separator rune) []string {
0000000000000000000000000000000000000000;;		// Note, strictly speaking, we are actually mutating the values of these
0000000000000000000000000000000000000000;;		// keys, rather than formatting name and value into a string.  Docker re-
0000000000000000000000000000000000000000;;		// uses the same option name multiple times (it's just 'label') with
0000000000000000000000000000000000000000;;		// different values which are themselves key-value pairs.  For example,
0000000000000000000000000000000000000000;;		// the SELinux type is represented by the security opt:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//   label<separator>type:<selinux_type>
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In Docker API versions before 1.23, the separator was the `:` rune; in
0000000000000000000000000000000000000000;;		// API version 1.23 it changed to the `=` rune.
0000000000000000000000000000000000000000;;		config = modifySecurityOption(config, selinuxLabelUser(separator), selinuxOpts.User)
0000000000000000000000000000000000000000;;		config = modifySecurityOption(config, selinuxLabelRole(separator), selinuxOpts.Role)
0000000000000000000000000000000000000000;;		config = modifySecurityOption(config, selinuxLabelType(separator), selinuxOpts.Type)
0000000000000000000000000000000000000000;;		config = modifySecurityOption(config, selinuxLabelLevel(separator), selinuxOpts.Level)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// modifySecurityOption adds the security option of name to the config array
0000000000000000000000000000000000000000;;	// with value in the form of name:value.
0000000000000000000000000000000000000000;;	func modifySecurityOption(config []string, name, value string) []string {
0000000000000000000000000000000000000000;;		if len(value) > 0 {
0000000000000000000000000000000000000000;;			config = append(config, fmt.Sprintf("%s:%s", name, value))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
