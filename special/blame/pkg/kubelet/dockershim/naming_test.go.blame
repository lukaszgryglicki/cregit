0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c767de0d69ac5bef429aba8cfc175d0024bdd8d1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSandboxNameRoundTrip(t *testing.T) {
0000000000000000000000000000000000000000;;		config := makeSandboxConfig("foo", "bar", "iamuid", 3)
0000000000000000000000000000000000000000;;		actualName := makeSandboxName(config)
0000000000000000000000000000000000000000;;		assert.Equal(t, "k8s_POD_foo_bar_iamuid_3", actualName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualMetadata, err := parseSandboxName(actualName)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, config.Metadata, actualMetadata)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonParsableSandboxNames(t *testing.T) {
0000000000000000000000000000000000000000;;		// All names must start with the kubernetes prefix "k8s".
0000000000000000000000000000000000000000;;		_, err := parseSandboxName("owner_POD_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// All names must contain exactly 6 parts.
0000000000000000000000000000000000000000;;		_, err = parseSandboxName("k8s_POD_dummy_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;		_, err = parseSandboxName("k8s_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should be able to parse attempt number.
0000000000000000000000000000000000000000;;		_, err = parseSandboxName("k8s_POD_foo_bar_iamuid_notanumber")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContainerNameRoundTrip(t *testing.T) {
0000000000000000000000000000000000000000;;		sConfig := makeSandboxConfig("foo", "bar", "iamuid", 3)
0000000000000000000000000000000000000000;;		name, attempt := "pause", uint32(5)
0000000000000000000000000000000000000000;;		config := &runtimeapi.ContainerConfig{
0000000000000000000000000000000000000000;;			Metadata: &runtimeapi.ContainerMetadata{
0000000000000000000000000000000000000000;;				Name:    name,
0000000000000000000000000000000000000000;;				Attempt: attempt,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualName := makeContainerName(sConfig, config)
0000000000000000000000000000000000000000;;		assert.Equal(t, "k8s_pause_foo_bar_iamuid_5", actualName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualMetadata, err := parseContainerName(actualName)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, config.Metadata, actualMetadata)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonParsableContainerNames(t *testing.T) {
0000000000000000000000000000000000000000;;		// All names must start with the kubernetes prefix "k8s".
0000000000000000000000000000000000000000;;		_, err := parseContainerName("owner_frontend_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// All names must contain exactly 6 parts.
0000000000000000000000000000000000000000;;		_, err = parseContainerName("k8s_frontend_dummy_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;		_, err = parseContainerName("k8s_foo_bar_iamuid_4")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should be able to parse attempt number.
0000000000000000000000000000000000000000;;		_, err = parseContainerName("k8s_frontend_foo_bar_iamuid_notanumber")
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseRandomizedNames(t *testing.T) {
0000000000000000000000000000000000000000;;		// Test randomized sandbox name.
0000000000000000000000000000000000000000;;		sConfig := makeSandboxConfig("foo", "bar", "iamuid", 3)
0000000000000000000000000000000000000000;;		sActualName := randomizeName(makeSandboxName(sConfig))
0000000000000000000000000000000000000000;;		sActualMetadata, err := parseSandboxName(sActualName)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, sConfig.Metadata, sActualMetadata)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test randomized container name.
0000000000000000000000000000000000000000;;		name, attempt := "pause", uint32(5)
0000000000000000000000000000000000000000;;		config := &runtimeapi.ContainerConfig{
0000000000000000000000000000000000000000;;			Metadata: &runtimeapi.ContainerMetadata{
0000000000000000000000000000000000000000;;				Name:    name,
0000000000000000000000000000000000000000;;				Attempt: attempt,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualName := randomizeName(makeContainerName(sConfig, config))
0000000000000000000000000000000000000000;;		actualMetadata, err := parseContainerName(actualName)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, config.Metadata, actualMetadata)
0000000000000000000000000000000000000000;;	}
