0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
811c96f4bb42575af2f65ad0a6181690c44ba7ee;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		tmpPrefix    = "."
0000000000000000000000000000000000000000;;		tmpSuffix    = ".tmp"
0000000000000000000000000000000000000000;;		keyMaxLength = 250
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var keyRegex = regexp.MustCompile("^[a-zA-Z0-9]+$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckpointStore provides the interface for checkpoint storage backend.
0000000000000000000000000000000000000000;;	// CheckpointStore must be thread-safe
0000000000000000000000000000000000000000;;	type CheckpointStore interface {
0000000000000000000000000000000000000000;;		// key must contain one or more characters in [A-Za-z0-9]
0000000000000000000000000000000000000000;;		// Write persists a checkpoint with key
0000000000000000000000000000000000000000;;		Write(key string, data []byte) error
0000000000000000000000000000000000000000;;		// Read retrieves a checkpoint with key
0000000000000000000000000000000000000000;;		// Read must return CheckpointNotFoundError if checkpoint is not found
0000000000000000000000000000000000000000;;		Read(key string) ([]byte, error)
0000000000000000000000000000000000000000;;		// Delete deletes a checkpoint with key
0000000000000000000000000000000000000000;;		// Delete must not return error if checkpoint does not exist
0000000000000000000000000000000000000000;;		Delete(key string) error
0000000000000000000000000000000000000000;;		// List lists all keys of existing checkpoints
0000000000000000000000000000000000000000;;		List() ([]string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileStore is an implementation of CheckpointStore interface which stores checkpoint in files.
0000000000000000000000000000000000000000;;	type FileStore struct {
0000000000000000000000000000000000000000;;		// path to the base directory for storing checkpoint files
0000000000000000000000000000000000000000;;		path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFileStore(path string) (CheckpointStore, error) {
0000000000000000000000000000000000000000;;		if err := ensurePath(path); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &FileStore{path: path}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// writeFileAndSync is copied from ioutil.WriteFile, with the extra File.Sync
0000000000000000000000000000000000000000;;	// at the end to ensure file is written on the disk.
0000000000000000000000000000000000000000;;	func writeFileAndSync(filename string, data []byte, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err := f.Write(data)
0000000000000000000000000000000000000000;;		if err == nil && n < len(data) {
0000000000000000000000000000000000000000;;			err = io.ErrShortWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Sync()
0000000000000000000000000000000000000000;;		if err1 := f.Close(); err == nil {
0000000000000000000000000000000000000000;;			err = err1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fstore *FileStore) Write(key string, data []byte) error {
0000000000000000000000000000000000000000;;		if err := validateKey(key); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ensurePath(fstore.path); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tmpfile := filepath.Join(fstore.path, fmt.Sprintf("%s%s%s", tmpPrefix, key, tmpSuffix))
0000000000000000000000000000000000000000;;		if err := writeFileAndSync(tmpfile, data, 0644); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return os.Rename(tmpfile, fstore.getCheckpointPath(key))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fstore *FileStore) Read(key string) ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := validateKey(key); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		bytes, err := ioutil.ReadFile(fstore.getCheckpointPath(key))
0000000000000000000000000000000000000000;;		if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			return bytes, errors.CheckpointNotFoundError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return bytes, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fstore *FileStore) Delete(key string) error {
0000000000000000000000000000000000000000;;		if err := validateKey(key); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := os.Remove(fstore.getCheckpointPath(key)); err != nil && !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fstore *FileStore) List() ([]string, error) {
0000000000000000000000000000000000000000;;		keys := make([]string, 0)
0000000000000000000000000000000000000000;;		files, err := ioutil.ReadDir(fstore.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return keys, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, f := range files {
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(f.Name(), tmpPrefix) {
0000000000000000000000000000000000000000;;				keys = append(keys, f.Name())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return keys, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fstore *FileStore) getCheckpointPath(key string) string {
0000000000000000000000000000000000000000;;		return filepath.Join(fstore.path, key)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ensurePath creates input directory if it does not exist
0000000000000000000000000000000000000000;;	func ensurePath(path string) error {
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); err != nil {
0000000000000000000000000000000000000000;;			// MkdirAll returns nil if directory already exists
0000000000000000000000000000000000000000;;			return os.MkdirAll(path, 0755)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateKey(key string) error {
0000000000000000000000000000000000000000;;		if len(key) <= keyMaxLength && keyRegex.MatchString(key) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("checkpoint key %q is not valid.", key)
0000000000000000000000000000000000000000;;	}
