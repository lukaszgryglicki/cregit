0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4944363031bbc3b1d2d5b28293732f95ba44f7cf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConvertDockerStatusToRuntimeAPIState(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected runtimeapi.ContainerState
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{input: "Up 5 hours", expected: runtimeapi.ContainerState_CONTAINER_RUNNING},
0000000000000000000000000000000000000000;;			{input: "Exited (0) 2 hours ago", expected: runtimeapi.ContainerState_CONTAINER_EXITED},
0000000000000000000000000000000000000000;;			{input: "Created", expected: runtimeapi.ContainerState_CONTAINER_CREATED},
0000000000000000000000000000000000000000;;			{input: "Random string", expected: runtimeapi.ContainerState_CONTAINER_UNKNOWN},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			actual := toRuntimeAPIContainerState(test.input)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConvertToPullableImageID(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			id       string
0000000000000000000000000000000000000000;;			image    *dockertypes.ImageInspect
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				id: "image-1",
0000000000000000000000000000000000000000;;				image: &dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					RepoDigests: []string{"digest-1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: DockerPullableImageIDPrefix + "digest-1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				id: "image-2",
0000000000000000000000000000000000000000;;				image: &dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					RepoDigests: []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: DockerImageIDPrefix + "image-2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			actual := toPullableImageID(test.id, test.image)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
