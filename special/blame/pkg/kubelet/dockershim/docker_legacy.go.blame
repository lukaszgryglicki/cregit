0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1c2f1fe3936112cc1cc8e15689ba43efcb504762;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		dockerfilters "github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/leaky"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are labels used by kuberuntime. Ideally, we should not rely on kuberuntime implementation
0000000000000000000000000000000000000000;;	// detail in dockershim. However, we need these labels for legacy container (containers created by
0000000000000000000000000000000000000000;;	// kubernetes 1.4 and 1.5) support.
0000000000000000000000000000000000000000;;	// TODO(random-liu): Remove this file and related code in kubernetes 1.8.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		podDeletionGracePeriodLabel    = "io.kubernetes.pod.deletionGracePeriod"
0000000000000000000000000000000000000000;;		podTerminationGracePeriodLabel = "io.kubernetes.pod.terminationGracePeriod"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		containerHashLabel                     = "io.kubernetes.container.hash"
0000000000000000000000000000000000000000;;		containerRestartCountLabel             = "io.kubernetes.container.restartCount"
0000000000000000000000000000000000000000;;		containerTerminationMessagePathLabel   = "io.kubernetes.container.terminationMessagePath"
0000000000000000000000000000000000000000;;		containerTerminationMessagePolicyLabel = "io.kubernetes.container.terminationMessagePolicy"
0000000000000000000000000000000000000000;;		containerPreStopHandlerLabel           = "io.kubernetes.container.preStopHandler"
0000000000000000000000000000000000000000;;		containerPortsLabel                    = "io.kubernetes.container.ports"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE that we can't handle the following dockershim internal labels, so they will be empty:
0000000000000000000000000000000000000000;;	// * containerLogPathLabelKey ("io.kubernetes.container.logpath"): RemoveContainer will ignore
0000000000000000000000000000000000000000;;	// the label if it's empty.
0000000000000000000000000000000000000000;;	// * sandboxIDLabelKey ("io.kubernetes.sandbox.id"): This is used in 2 places:
0000000000000000000000000000000000000000;;	//   * filter.PodSandboxId: The filter is not used in kuberuntime now.
0000000000000000000000000000000000000000;;	//   * runtimeapi.Container.PodSandboxId: toRuntimeAPIContainer retrieves PodSandboxId from the
0000000000000000000000000000000000000000;;	//   label. The field is used in kuberuntime sandbox garbage collection. Missing this may cause
0000000000000000000000000000000000000000;;	//   pod sandbox to be removed before its containers are removed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertLegacyNameAndLabels converts legacy name and labels into dockershim name and labels.
0000000000000000000000000000000000000000;;	// The function can be used to either legacy infra container or regular container.
0000000000000000000000000000000000000000;;	// NOTE that legacy infra container doesn't have restart count label, so the returned attempt for
0000000000000000000000000000000000000000;;	// sandbox will always be 0. The sandbox attempt is only used to generate new sandbox name, and
0000000000000000000000000000000000000000;;	// there is no naming conflict between legacy and new containers/sandboxes, so it should be fine.
0000000000000000000000000000000000000000;;	func convertLegacyNameAndLabels(names []string, labels map[string]string) ([]string, map[string]string, error) {
0000000000000000000000000000000000000000;;		if len(names) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("unexpected empty name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate new dockershim name.
0000000000000000000000000000000000000000;;		m, _, err := libdocker.ParseDockerName(names[0])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sandboxName, sandboxNamespace, err := kubecontainer.ParsePodFullName(m.PodFullName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newNames := []string{strings.Join([]string{
0000000000000000000000000000000000000000;;			kubePrefix,                         // 0
0000000000000000000000000000000000000000;;			m.ContainerName,                    // 1: container name
0000000000000000000000000000000000000000;;			sandboxName,                        // 2: sandbox name
0000000000000000000000000000000000000000;;			sandboxNamespace,                   // 3: sandbox namesapce
0000000000000000000000000000000000000000;;			string(m.PodUID),                   // 4: sandbox uid
0000000000000000000000000000000000000000;;			labels[containerRestartCountLabel], // 5
0000000000000000000000000000000000000000;;		}, nameDelimiter)}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate new labels.
0000000000000000000000000000000000000000;;		legacyAnnotations := sets.NewString(
0000000000000000000000000000000000000000;;			containerHashLabel,
0000000000000000000000000000000000000000;;			containerRestartCountLabel,
0000000000000000000000000000000000000000;;			containerTerminationMessagePathLabel,
0000000000000000000000000000000000000000;;			containerTerminationMessagePolicyLabel,
0000000000000000000000000000000000000000;;			containerPreStopHandlerLabel,
0000000000000000000000000000000000000000;;			containerPortsLabel,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		newLabels := map[string]string{}
0000000000000000000000000000000000000000;;		for k, v := range labels {
0000000000000000000000000000000000000000;;			if legacyAnnotations.Has(k) {
0000000000000000000000000000000000000000;;				// Add annotation prefix for all legacy labels which should be annotations in dockershim.
0000000000000000000000000000000000000000;;				newLabels[fmt.Sprintf("%s%s", annotationPrefix, k)] = v
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				newLabels[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Add containerTypeLabelKey indicating the container is sandbox or application container.
0000000000000000000000000000000000000000;;		if m.ContainerName == leaky.PodInfraContainerName {
0000000000000000000000000000000000000000;;			newLabels[containerTypeLabelKey] = containerTypeLabelSandbox
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			newLabels[containerTypeLabelKey] = containerTypeLabelContainer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newNames, newLabels, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// legacyCleanupCheckInterval is the interval legacyCleanupCheck is performed.
0000000000000000000000000000000000000000;;	const legacyCleanupCheckInterval = 10 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LegacyCleanupInit initializes the legacy cleanup flag. If necessary, it will starts a goroutine
0000000000000000000000000000000000000000;;	// which periodically checks legacy cleanup until it finishes.
0000000000000000000000000000000000000000;;	func (ds *dockerService) LegacyCleanupInit() {
0000000000000000000000000000000000000000;;		// If there is no legacy container/sandbox, just return.
0000000000000000000000000000000000000000;;		if clean, _ := ds.checkLegacyCleanup(); clean {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Or else start the cleanup routine.
0000000000000000000000000000000000000000;;		go wait.PollInfinite(legacyCleanupCheckInterval, ds.checkLegacyCleanup)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// checkLegacyCleanup lists legacy containers/sandboxes, if no legacy containers/sandboxes are found,
0000000000000000000000000000000000000000;;	// mark the legacy cleanup flag as done.
0000000000000000000000000000000000000000;;	func (ds *dockerService) checkLegacyCleanup() (bool, error) {
0000000000000000000000000000000000000000;;		// Always do legacy cleanup when list fails.
0000000000000000000000000000000000000000;;		sandboxes, err := ds.ListLegacyPodSandbox(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to list legacy pod sandboxes: %v", err)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		containers, err := ds.ListLegacyContainers(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to list legacy containers: %v", err)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(sandboxes) != 0 || len(containers) != 0 {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Found legacy sandboxes %+v, legacy containers %+v, continue legacy cleanup",
0000000000000000000000000000000000000000;;				sandboxes, containers)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ds.legacyCleanup.MarkDone()
0000000000000000000000000000000000000000;;		glog.V(2).Infof("No legacy containers found, stop performing legacy cleanup.")
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLegacyPodSandbox only lists all legacy pod sandboxes.
0000000000000000000000000000000000000000;;	func (ds *dockerService) ListLegacyPodSandbox(filter *runtimeapi.PodSandboxFilter) ([]*runtimeapi.PodSandbox, error) {
0000000000000000000000000000000000000000;;		// By default, list all containers whether they are running or not.
0000000000000000000000000000000000000000;;		opts := dockertypes.ContainerListOptions{All: true, Filter: dockerfilters.NewArgs()}
0000000000000000000000000000000000000000;;		filterOutReadySandboxes := false
0000000000000000000000000000000000000000;;		f := newDockerFilter(&opts.Filter)
0000000000000000000000000000000000000000;;		if filter != nil {
0000000000000000000000000000000000000000;;			if filter.Id != "" {
0000000000000000000000000000000000000000;;				f.Add("id", filter.Id)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if filter.State != nil {
0000000000000000000000000000000000000000;;				if filter.GetState().State == runtimeapi.PodSandboxState_SANDBOX_READY {
0000000000000000000000000000000000000000;;					// Only list running containers.
0000000000000000000000000000000000000000;;					opts.All = false
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					// runtimeapi.PodSandboxState_SANDBOX_NOTREADY can mean the
0000000000000000000000000000000000000000;;					// container is in any of the non-running state (e.g., created,
0000000000000000000000000000000000000000;;					// exited). We can't tell docker to filter out running
0000000000000000000000000000000000000000;;					// containers directly, so we'll need to filter them out
0000000000000000000000000000000000000000;;					// ourselves after getting the results.
0000000000000000000000000000000000000000;;					filterOutReadySandboxes = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if filter.LabelSelector != nil {
0000000000000000000000000000000000000000;;				for k, v := range filter.LabelSelector {
0000000000000000000000000000000000000000;;					f.AddLabel(k, v)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		containers, err := ds.client.ListContainers(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convert docker containers to runtime api sandboxes.
0000000000000000000000000000000000000000;;		result := make([]*runtimeapi.PodSandbox, 0, len(containers))
0000000000000000000000000000000000000000;;		for i := range containers {
0000000000000000000000000000000000000000;;			c := containers[i]
0000000000000000000000000000000000000000;;			// Skip new containers with containerTypeLabelKey label.
0000000000000000000000000000000000000000;;			if _, ok := c.Labels[containerTypeLabelKey]; ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// If the container has no containerTypeLabelKey label, treat it as a legacy container.
0000000000000000000000000000000000000000;;			c.Names, c.Labels, err = convertLegacyNameAndLabels(c.Names, c.Labels)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Unable to convert legacy container %+v: %v", c, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c.Labels[containerTypeLabelKey] != containerTypeLabelSandbox {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			converted, err := containerToRuntimeAPISandbox(&c)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Unable to convert docker to runtime API sandbox %+v: %v", c, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if filterOutReadySandboxes && converted.State == runtimeapi.PodSandboxState_SANDBOX_READY {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, converted)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLegacyPodSandbox only lists all legacy containers.
0000000000000000000000000000000000000000;;	func (ds *dockerService) ListLegacyContainers(filter *runtimeapi.ContainerFilter) ([]*runtimeapi.Container, error) {
0000000000000000000000000000000000000000;;		opts := dockertypes.ContainerListOptions{All: true, Filter: dockerfilters.NewArgs()}
0000000000000000000000000000000000000000;;		f := newDockerFilter(&opts.Filter)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if filter != nil {
0000000000000000000000000000000000000000;;			if filter.Id != "" {
0000000000000000000000000000000000000000;;				f.Add("id", filter.Id)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if filter.State != nil {
0000000000000000000000000000000000000000;;				f.Add("status", toDockerContainerStatus(filter.GetState().State))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// NOTE: Legacy container doesn't have sandboxIDLabelKey label, so we can't filter with
0000000000000000000000000000000000000000;;			// it. Fortunately, PodSandboxId is not used in kuberuntime now.
0000000000000000000000000000000000000000;;			if filter.LabelSelector != nil {
0000000000000000000000000000000000000000;;				for k, v := range filter.LabelSelector {
0000000000000000000000000000000000000000;;					f.AddLabel(k, v)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		containers, err := ds.client.ListContainers(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convert docker to runtime api containers.
0000000000000000000000000000000000000000;;		result := make([]*runtimeapi.Container, 0, len(containers))
0000000000000000000000000000000000000000;;		for i := range containers {
0000000000000000000000000000000000000000;;			c := containers[i]
0000000000000000000000000000000000000000;;			// Skip new containers with containerTypeLabelKey label.
0000000000000000000000000000000000000000;;			if _, ok := c.Labels[containerTypeLabelKey]; ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// If the container has no containerTypeLabelKey label, treat it as a legacy container.
0000000000000000000000000000000000000000;;			c.Names, c.Labels, err = convertLegacyNameAndLabels(c.Names, c.Labels)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Unable to convert legacy container %+v: %v", c, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c.Labels[containerTypeLabelKey] != containerTypeLabelContainer {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			converted, err := toRuntimeAPIContainer(&c)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Unable to convert docker container to runtime API container %+v: %v", c, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, converted)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// legacyCleanupFlag is the flag indicating whether legacy cleanup is done.
0000000000000000000000000000000000000000;;	type legacyCleanupFlag struct {
0000000000000000000000000000000000000000;;		done int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Done checks whether legacy cleanup is done.
0000000000000000000000000000000000000000;;	func (f *legacyCleanupFlag) Done() bool {
0000000000000000000000000000000000000000;;		return atomic.LoadInt32(&f.done) == 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkDone sets legacy cleanup as done.
0000000000000000000000000000000000000000;;	func (f *legacyCleanupFlag) MarkDone() {
0000000000000000000000000000000000000000;;		atomic.StoreInt32(&f.done, 1)
0000000000000000000000000000000000000000;;	}
