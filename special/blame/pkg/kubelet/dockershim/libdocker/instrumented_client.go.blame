0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d9a66b98f873f9dcfd3d2225ce06280b14f14fc5;pkg/kubelet/metrics/instrumented_docker.go[pkg/kubelet/metrics/instrumented_docker.go][pkg/kubelet/dockershim/libdocker/instrumented_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package libdocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// instrumentedInterface wraps the Interface and records the operations
0000000000000000000000000000000000000000;;	// and errors metrics.
0000000000000000000000000000000000000000;;	type instrumentedInterface struct {
0000000000000000000000000000000000000000;;		client Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates an instrumented Interface from an existing Interface.
0000000000000000000000000000000000000000;;	func NewInstrumentedInterface(dockerClient Interface) Interface {
0000000000000000000000000000000000000000;;		return instrumentedInterface{
0000000000000000000000000000000000000000;;			client: dockerClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// recordOperation records the duration of the operation.
0000000000000000000000000000000000000000;;	func recordOperation(operation string, start time.Time) {
0000000000000000000000000000000000000000;;		metrics.DockerOperations.WithLabelValues(operation).Inc()
0000000000000000000000000000000000000000;;		metrics.DockerOperationsLatency.WithLabelValues(operation).Observe(metrics.SinceInMicroseconds(start))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// recordError records error for metric if an error occurred.
0000000000000000000000000000000000000000;;	func recordError(operation string, err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if _, ok := err.(operationTimeout); ok {
0000000000000000000000000000000000000000;;				metrics.DockerOperationsTimeout.WithLabelValues(operation).Inc()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Docker operation timeout error is also a docker error, so we don't add else here.
0000000000000000000000000000000000000000;;			metrics.DockerOperationsErrors.WithLabelValues(operation).Inc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) ListContainers(options dockertypes.ContainerListOptions) ([]dockertypes.Container, error) {
0000000000000000000000000000000000000000;;		const operation = "list_containers"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.ListContainers(options)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) InspectContainer(id string) (*dockertypes.ContainerJSON, error) {
0000000000000000000000000000000000000000;;		const operation = "inspect_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.InspectContainer(id)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) CreateContainer(opts dockertypes.ContainerCreateConfig) (*dockertypes.ContainerCreateResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "create_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.CreateContainer(opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) StartContainer(id string) error {
0000000000000000000000000000000000000000;;		const operation = "start_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.StartContainer(id)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) StopContainer(id string, timeout int) error {
0000000000000000000000000000000000000000;;		const operation = "stop_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.StopContainer(id, timeout)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) RemoveContainer(id string, opts dockertypes.ContainerRemoveOptions) error {
0000000000000000000000000000000000000000;;		const operation = "remove_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.RemoveContainer(id, opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) InspectImageByRef(image string) (*dockertypes.ImageInspect, error) {
0000000000000000000000000000000000000000;;		const operation = "inspect_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.InspectImageByRef(image)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) InspectImageByID(image string) (*dockertypes.ImageInspect, error) {
0000000000000000000000000000000000000000;;		const operation = "inspect_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.InspectImageByID(image)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) ListImages(opts dockertypes.ImageListOptions) ([]dockertypes.Image, error) {
0000000000000000000000000000000000000000;;		const operation = "list_images"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.ListImages(opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) PullImage(imageID string, auth dockertypes.AuthConfig, opts dockertypes.ImagePullOptions) error {
0000000000000000000000000000000000000000;;		const operation = "pull_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;		err := in.client.PullImage(imageID, auth, opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) RemoveImage(image string, opts dockertypes.ImageRemoveOptions) ([]dockertypes.ImageDelete, error) {
0000000000000000000000000000000000000000;;		const operation = "remove_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imageDelete, err := in.client.RemoveImage(image, opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return imageDelete, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) Logs(id string, opts dockertypes.ContainerLogsOptions, sopts StreamOptions) error {
0000000000000000000000000000000000000000;;		const operation = "logs"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.Logs(id, opts, sopts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) Version() (*dockertypes.Version, error) {
0000000000000000000000000000000000000000;;		const operation = "version"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.Version()
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) Info() (*dockertypes.Info, error) {
0000000000000000000000000000000000000000;;		const operation = "info"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.Info()
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) CreateExec(id string, opts dockertypes.ExecConfig) (*dockertypes.ContainerExecCreateResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "create_exec"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.CreateExec(id, opts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) StartExec(startExec string, opts dockertypes.ExecStartCheck, sopts StreamOptions) error {
0000000000000000000000000000000000000000;;		const operation = "start_exec"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.StartExec(startExec, opts, sopts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) InspectExec(id string) (*dockertypes.ContainerExecInspect, error) {
0000000000000000000000000000000000000000;;		const operation = "inspect_exec"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.InspectExec(id)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) AttachToContainer(id string, opts dockertypes.ContainerAttachOptions, sopts StreamOptions) error {
0000000000000000000000000000000000000000;;		const operation = "attach"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.AttachToContainer(id, opts, sopts)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) ImageHistory(id string) ([]dockertypes.ImageHistory, error) {
0000000000000000000000000000000000000000;;		const operation = "image_history"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.client.ImageHistory(id)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) ResizeExecTTY(id string, height, width int) error {
0000000000000000000000000000000000000000;;		const operation = "resize_exec"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.ResizeExecTTY(id, height, width)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedInterface) ResizeContainerTTY(id string, height, width int) error {
0000000000000000000000000000000000000000;;		const operation = "resize_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.client.ResizeContainerTTY(id, height, width)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
