0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
555b0ccfa1ac4c9bd9e8b8900c65279469e6da33;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package libdocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockerdigest "github.com/docker/distribution/digest"
0000000000000000000000000000000000000000;;		dockerref "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseDockerTimestamp parses the timestamp returned by Interface from string to time.Time
0000000000000000000000000000000000000000;;	func ParseDockerTimestamp(s string) (time.Time, error) {
0000000000000000000000000000000000000000;;		// Timestamp returned by Docker is in time.RFC3339Nano format.
0000000000000000000000000000000000000000;;		return time.Parse(time.RFC3339Nano, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// matchImageTagOrSHA checks if the given image specifier is a valid image ref,
0000000000000000000000000000000000000000;;	// and that it matches the given image. It should fail on things like image IDs
0000000000000000000000000000000000000000;;	// (config digests) and other digest-only references, but succeed on image names
0000000000000000000000000000000000000000;;	// (`foo`), tag references (`foo:bar`), and manifest digest references
0000000000000000000000000000000000000000;;	// (`foo@sha256:xyz`).
0000000000000000000000000000000000000000;;	func matchImageTagOrSHA(inspected dockertypes.ImageInspect, image string) bool {
0000000000000000000000000000000000000000;;		// The image string follows the grammar specified here
0000000000000000000000000000000000000000;;		// https://github.com/docker/distribution/blob/master/reference/reference.go#L4
0000000000000000000000000000000000000000;;		named, err := dockerref.ParseNamed(image)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("couldn't parse image reference %q: %v", image, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, isTagged := named.(dockerref.Tagged)
0000000000000000000000000000000000000000;;		digest, isDigested := named.(dockerref.Digested)
0000000000000000000000000000000000000000;;		if !isTagged && !isDigested {
0000000000000000000000000000000000000000;;			// No Tag or SHA specified, so just return what we have
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isTagged {
0000000000000000000000000000000000000000;;			// Check the RepoTags for a match.
0000000000000000000000000000000000000000;;			for _, tag := range inspected.RepoTags {
0000000000000000000000000000000000000000;;				// An image name (without the tag/digest) can be [hostname '/'] component ['/' component]*
0000000000000000000000000000000000000000;;				// Because either the RepoTag or the name *may* contain the
0000000000000000000000000000000000000000;;				// hostname or not, we only check for the suffix match.
0000000000000000000000000000000000000000;;				if strings.HasSuffix(image, tag) || strings.HasSuffix(tag, image) {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isDigested {
0000000000000000000000000000000000000000;;			for _, repoDigest := range inspected.RepoDigests {
0000000000000000000000000000000000000000;;				named, err := dockerref.ParseNamed(repoDigest)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					glog.V(4).Infof("couldn't parse image RepoDigest reference %q: %v", repoDigest, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if d, isDigested := named.(dockerref.Digested); isDigested {
0000000000000000000000000000000000000000;;					if digest.Digest().Algorithm().String() == d.Digest().Algorithm().String() &&
0000000000000000000000000000000000000000;;						digest.Digest().Hex() == d.Digest().Hex() {
0000000000000000000000000000000000000000;;						return true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// process the ID as a digest
0000000000000000000000000000000000000000;;			id, err := dockerdigest.ParseDigest(inspected.ID)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("couldn't parse image ID reference %q: %v", id, err)
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if digest.Digest().Algorithm().String() == id.Algorithm().String() && digest.Digest().Hex() == id.Hex() {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Inspected image (%q) does not match %s", inspected.ID, image)
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// matchImageIDOnly checks that the given image specifier is a digest-only
0000000000000000000000000000000000000000;;	// reference, and that it matches the given image.
0000000000000000000000000000000000000000;;	func matchImageIDOnly(inspected dockertypes.ImageInspect, image string) bool {
0000000000000000000000000000000000000000;;		// If the image ref is literally equal to the inspected image's ID,
0000000000000000000000000000000000000000;;		// just return true here (this might be the case for Docker 1.9,
0000000000000000000000000000000000000000;;		// where we won't have a digest for the ID)
0000000000000000000000000000000000000000;;		if inspected.ID == image {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Otherwise, we should try actual parsing to be more correct
0000000000000000000000000000000000000000;;		ref, err := dockerref.Parse(image)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("couldn't parse image reference %q: %v", image, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		digest, isDigested := ref.(dockerref.Digested)
0000000000000000000000000000000000000000;;		if !isDigested {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("the image reference %q was not a digest reference", image)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		id, err := dockerdigest.ParseDigest(inspected.ID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("couldn't parse image ID reference %q: %v", id, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if digest.Digest().Algorithm().String() == id.Algorithm().String() && digest.Digest().Hex() == id.Hex() {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("The reference %s does not directly refer to the given image's ID (%q)", image, inspected.ID)
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isImageNotFoundError returns whether the err is caused by image not found in docker
0000000000000000000000000000000000000000;;	// TODO: Use native error tester once ImageNotFoundError is supported in docker-engine client(eg. ImageRemove())
0000000000000000000000000000000000000000;;	func isImageNotFoundError(err error) bool {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return strings.Contains(err.Error(), "No such image:")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
