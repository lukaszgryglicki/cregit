0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
555b0ccfa1ac4c9bd9e8b8900c65279469e6da33;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package libdocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchImageTagOrSHA(t *testing.T) {
0000000000000000000000000000000000000000;;		for i, testCase := range []struct {
0000000000000000000000000000000000000000;;			Inspected dockertypes.ImageInspect
0000000000000000000000000000000000000000;;			Image     string
0000000000000000000000000000000000000000;;			Output    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"ubuntu:latest"}},
0000000000000000000000000000000000000000;;				Image:     "ubuntu",
0000000000000000000000000000000000000000;;				Output:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"ubuntu:14.04"}},
0000000000000000000000000000000000000000;;				Image:     "ubuntu:latest",
0000000000000000000000000000000000000000;;				Output:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"colemickens/hyperkube-amd64:217.9beff63"}},
0000000000000000000000000000000000000000;;				Image:     "colemickens/hyperkube-amd64:217.9beff63",
0000000000000000000000000000000000000000;;				Output:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"colemickens/hyperkube-amd64:217.9beff63"}},
0000000000000000000000000000000000000000;;				Image:     "docker.io/colemickens/hyperkube-amd64:217.9beff63",
0000000000000000000000000000000000000000;;				Output:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"docker.io/kubernetes/pause:latest"}},
0000000000000000000000000000000000000000;;				Image:     "kubernetes/pause:latest",
0000000000000000000000000000000000000000;;				Output:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208f7a29005",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// mismatched ID is ignored
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:0000f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// invalid digest is ignored
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:unparseable",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:unparseable",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// v1 schema images can be pulled in one format and returned in another
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// RepoDigest match is is required
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:000084acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// RepoDigest match is allowed
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// RepoDigest and ID are checked
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// unparseable RepoDigests are skipped
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{
0000000000000000000000000000000000000000;;						"centos/ruby-23-centos7@sha256:unparseable",
0000000000000000000000000000000000000000;;						"docker.io/centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// unparseable RepoDigest is ignored
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:unparseable"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// unparseable image digest is ignored
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:unparseable"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:unparseable",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// prefix match is rejected for ID and RepoDigest
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:unparseable",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:unparseable"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "sha256:unparseable",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// possible SHA prefix match is rejected for ID and RepoDigest because it is not in the named format
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:0000f247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"docker.io/centos/ruby-23-centos7@sha256:0000f247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "sha256:0000",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			match := matchImageTagOrSHA(testCase.Inspected, testCase.Image)
0000000000000000000000000000000000000000;;			assert.Equal(t, testCase.Output, match, testCase.Image+fmt.Sprintf(" is not a match (%d)", i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchImageIDOnly(t *testing.T) {
0000000000000000000000000000000000000000;;		for i, testCase := range []struct {
0000000000000000000000000000000000000000;;			Inspected dockertypes.ImageInspect
0000000000000000000000000000000000000000;;			Image     string
0000000000000000000000000000000000000000;;			Output    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// shouldn't match names or tagged names
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"ubuntu:latest"}},
0000000000000000000000000000000000000000;;				Image:     "ubuntu",
0000000000000000000000000000000000000000;;				Output:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{RepoTags: []string{"colemickens/hyperkube-amd64:217.9beff63"}},
0000000000000000000000000000000000000000;;				Image:     "colemickens/hyperkube-amd64:217.9beff63",
0000000000000000000000000000000000000000;;				Output:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// should match name@digest refs if they refer to the image ID (but only the full ID)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208f7a29005",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:2208",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// should match when the IDs are literally the same
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "foobar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "foobar",
0000000000000000000000000000000000000000;;				Output: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// shouldn't match mismatched IDs
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:2208f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:0000f7a29005d226d1ee33a63e33af1f47af6156c740d7d23c7948e8d282d53d",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// shouldn't match invalid IDs or refs
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID: "sha256:unparseable",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "myimage@sha256:unparseable",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// shouldn't match against repo digests
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Inspected: dockertypes.ImageInspect{
0000000000000000000000000000000000000000;;					ID:          "sha256:9bbdf247c91345f0789c10f50a57e36a667af1189687ad1de88a6243d05a2227",
0000000000000000000000000000000000000000;;					RepoDigests: []string{"centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Image:  "centos/ruby-23-centos7@sha256:940584acbbfb0347272112d2eb95574625c0c60b4e2fdadb139de5859cf754bf",
0000000000000000000000000000000000000000;;				Output: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			match := matchImageIDOnly(testCase.Inspected, testCase.Image)
0000000000000000000000000000000000000000;;			assert.Equal(t, testCase.Output, match, fmt.Sprintf("%s is not a match (%d)", testCase.Image, i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
