0000000000000000000000000000000000000000;;	// +build linux
5657a75addab37d927e2a6278131a9b32e86f5a9;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetSeccompSecurityOpts(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "bar"
0000000000000000000000000000000000000000;;		makeConfig := func(annotations map[string]string) *runtimeapi.PodSandboxConfig {
0000000000000000000000000000000000000000;;			return makeSandboxConfigWithLabelsAndAnnotations("pod", "ns", "1234", 1, nil, annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			msg          string
0000000000000000000000000000000000000000;;			config       *runtimeapi.PodSandboxConfig
0000000000000000000000000000000000000000;;			expectedOpts []string
0000000000000000000000000000000000000000;;		}{{
0000000000000000000000000000000000000000;;			msg:          "No security annotations",
0000000000000000000000000000000000000000;;			config:       makeConfig(nil),
0000000000000000000000000000000000000000;;			expectedOpts: []string{"seccomp=unconfined"},
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			msg: "Seccomp unconfined",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompContainerAnnotationKeyPrefix + containerName: "unconfined",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: []string{"seccomp=unconfined"},
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			msg: "Seccomp default",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompContainerAnnotationKeyPrefix + containerName: "docker/default",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: nil,
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			msg: "Seccomp pod default",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompPodAnnotationKey: "docker/default",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: nil,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			opts, err := getSeccompSecurityOpts(containerName, test.config, "test/seccomp/profile/root", '=')
0000000000000000000000000000000000000000;;			assert.NoError(t, err, "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			assert.Len(t, opts, len(test.expectedOpts), "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			for _, opt := range test.expectedOpts {
0000000000000000000000000000000000000000;;				assert.Contains(t, opts, opt, "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadSeccompLocalhostProfiles(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "bar"
0000000000000000000000000000000000000000;;		makeConfig := func(annotations map[string]string) *runtimeapi.PodSandboxConfig {
0000000000000000000000000000000000000000;;			return makeSandboxConfigWithLabelsAndAnnotations("pod", "ns", "1234", 1, nil, annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			msg          string
0000000000000000000000000000000000000000;;			config       *runtimeapi.PodSandboxConfig
0000000000000000000000000000000000000000;;			expectedOpts []string
0000000000000000000000000000000000000000;;			expectErr    bool
0000000000000000000000000000000000000000;;		}{{
0000000000000000000000000000000000000000;;			msg: "Seccomp localhost/test profile",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompPodAnnotationKey: "localhost/test",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: []string{`seccomp={"foo":"bar"}`},
0000000000000000000000000000000000000000;;			expectErr:    false,
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			msg: "Seccomp localhost/sub/subtest profile",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompPodAnnotationKey: "localhost/sub/subtest",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: []string{`seccomp={"abc":"def"}`},
0000000000000000000000000000000000000000;;			expectErr:    false,
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			msg: "Seccomp non-existent",
0000000000000000000000000000000000000000;;			config: makeConfig(map[string]string{
0000000000000000000000000000000000000000;;				v1.SeccompPodAnnotationKey: "localhost/non-existent",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			expectedOpts: nil,
0000000000000000000000000000000000000000;;			expectErr:    true,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		profileRoot := path.Join("fixtures", "seccomp")
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			opts, err := getSeccompSecurityOpts(containerName, test.config, profileRoot, '=')
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				assert.Error(t, err, fmt.Sprintf("TestCase[%d]: %s", i, test.msg))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.NoError(t, err, "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			assert.Len(t, opts, len(test.expectedOpts), "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			for _, opt := range test.expectedOpts {
0000000000000000000000000000000000000000;;				assert.Contains(t, opts, opt, "TestCase[%d]: %s", i, test.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
