0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
25d159e0e0d909e3b5b3ec51f782bb89ff9311fb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/blang/semver"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/golang/mock/gomock"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		containertest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;		nettest "k8s.io/kubernetes/pkg/kubelet/network/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/util/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newTestNetworkPlugin returns a mock plugin that implements network.NetworkPlugin
0000000000000000000000000000000000000000;;	func newTestNetworkPlugin(t *testing.T) *nettest.MockNetworkPlugin {
0000000000000000000000000000000000000000;;		ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;		return nettest.NewMockNetworkPlugin(ctrl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestDockerService() (*dockerService, *libdocker.FakeDockerClient, *clock.FakeClock) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Time{})
0000000000000000000000000000000000000000;;		c := libdocker.NewFakeDockerClient().WithClock(fakeClock).WithVersion("1.11.2", "1.23")
0000000000000000000000000000000000000000;;		pm := network.NewPluginManager(&network.NoopNetworkPlugin{})
0000000000000000000000000000000000000000;;		return &dockerService{
0000000000000000000000000000000000000000;;			client:            c,
0000000000000000000000000000000000000000;;			os:                &containertest.FakeOS{},
0000000000000000000000000000000000000000;;			network:           pm,
0000000000000000000000000000000000000000;;			legacyCleanup:     legacyCleanupFlag{done: 1},
0000000000000000000000000000000000000000;;			checkpointHandler: NewTestPersistentCheckpointHandler(),
0000000000000000000000000000000000000000;;			networkReady:      make(map[string]bool),
0000000000000000000000000000000000000000;;		}, c, fakeClock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestDockerServiceWithVersionCache() (*dockerService, *libdocker.FakeDockerClient, *clock.FakeClock) {
0000000000000000000000000000000000000000;;		ds, c, fakeClock := newTestDockerService()
0000000000000000000000000000000000000000;;		ds.versionCache = cache.NewObjectCache(
0000000000000000000000000000000000000000;;			func() (interface{}, error) {
0000000000000000000000000000000000000000;;				return ds.getDockerVersion()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			time.Hour*10,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return ds, c, fakeClock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestStatus tests the runtime status logic.
0000000000000000000000000000000000000000;;	func TestStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, fDocker, _ := newTestDockerService()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assertStatus := func(expected map[string]bool, status *runtimeapi.RuntimeStatus) {
0000000000000000000000000000000000000000;;			conditions := status.GetConditions()
0000000000000000000000000000000000000000;;			assert.Equal(t, len(expected), len(conditions))
0000000000000000000000000000000000000000;;			for k, v := range expected {
0000000000000000000000000000000000000000;;				for _, c := range conditions {
0000000000000000000000000000000000000000;;					if k == c.Type {
0000000000000000000000000000000000000000;;						assert.Equal(t, v, c.Status)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should report ready status if version returns no error.
0000000000000000000000000000000000000000;;		status, err := ds.Status()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assertStatus(map[string]bool{
0000000000000000000000000000000000000000;;			runtimeapi.RuntimeReady: true,
0000000000000000000000000000000000000000;;			runtimeapi.NetworkReady: true,
0000000000000000000000000000000000000000;;		}, status)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should not report ready status if version returns error.
0000000000000000000000000000000000000000;;		fDocker.InjectError("version", errors.New("test error"))
0000000000000000000000000000000000000000;;		status, err = ds.Status()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assertStatus(map[string]bool{
0000000000000000000000000000000000000000;;			runtimeapi.RuntimeReady: false,
0000000000000000000000000000000000000000;;			runtimeapi.NetworkReady: true,
0000000000000000000000000000000000000000;;		}, status)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should not report ready status is network plugin returns error.
0000000000000000000000000000000000000000;;		mockPlugin := newTestNetworkPlugin(t)
0000000000000000000000000000000000000000;;		ds.network = network.NewPluginManager(mockPlugin)
0000000000000000000000000000000000000000;;		defer mockPlugin.Finish()
0000000000000000000000000000000000000000;;		mockPlugin.EXPECT().Status().Return(errors.New("network error"))
0000000000000000000000000000000000000000;;		status, err = ds.Status()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assertStatus(map[string]bool{
0000000000000000000000000000000000000000;;			runtimeapi.RuntimeReady: true,
0000000000000000000000000000000000000000;;			runtimeapi.NetworkReady: false,
0000000000000000000000000000000000000000;;		}, status)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, _, _ := newTestDockerService()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedVersion := &dockertypes.Version{Version: "1.11.2", APIVersion: "1.23.0"}
0000000000000000000000000000000000000000;;		v, err := ds.getDockerVersion()
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedVersion, v)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedAPIVersion := &semver.Version{Major: 1, Minor: 23, Patch: 0}
0000000000000000000000000000000000000000;;		apiVersion, err := ds.getDockerAPIVersion()
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedAPIVersion, apiVersion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIVersionWithCache(t *testing.T) {
0000000000000000000000000000000000000000;;		ds, _, _ := newTestDockerServiceWithVersionCache()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := &semver.Version{Major: 1, Minor: 23, Patch: 0}
0000000000000000000000000000000000000000;;		version, err := ds.getDockerAPIVersion()
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, expected, version)
0000000000000000000000000000000000000000;;	}
