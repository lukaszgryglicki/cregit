0000000000000000000000000000000000000000;;	// +build windows
232da3321d04711e3e14eea7d1885b4a2cdef675;pkg/kubelet/dockertools/docker_manager_windows.go[pkg/kubelet/dockertools/docker_manager_windows.go][pkg/kubelet/dockershim/helpers_windows.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dockershim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/blang/semver"
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		dockercontainer "github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		dockerfilters "github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DefaultMemorySwap() int64 {
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) getSecurityOpts(containerName string, sandboxConfig *runtimeapi.PodSandboxConfig, separator rune) ([]string, error) {
0000000000000000000000000000000000000000;;		hasSeccompSetting := false
0000000000000000000000000000000000000000;;		annotations := sandboxConfig.GetAnnotations()
0000000000000000000000000000000000000000;;		if _, ok := annotations[v1.SeccompContainerAnnotationKeyPrefix+containerName]; !ok {
0000000000000000000000000000000000000000;;			_, hasSeccompSetting = annotations[v1.SeccompPodAnnotationKey]
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			hasSeccompSetting = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if hasSeccompSetting {
0000000000000000000000000000000000000000;;			glog.Warningf("seccomp annotations found, but it is not supported on windows")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) updateCreateConfig(
0000000000000000000000000000000000000000;;		createConfig *dockertypes.ContainerCreateConfig,
0000000000000000000000000000000000000000;;		config *runtimeapi.ContainerConfig,
0000000000000000000000000000000000000000;;		sandboxConfig *runtimeapi.PodSandboxConfig,
0000000000000000000000000000000000000000;;		podSandboxID string, securityOptSep rune, apiVersion *semver.Version) error {
0000000000000000000000000000000000000000;;		if networkMode := os.Getenv("CONTAINER_NETWORK"); networkMode != "" {
0000000000000000000000000000000000000000;;			createConfig.HostConfig.NetworkMode = dockercontainer.NetworkMode(networkMode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ds *dockerService) determinePodIPBySandboxID(sandboxID string) string {
0000000000000000000000000000000000000000;;		opts := dockertypes.ContainerListOptions{
0000000000000000000000000000000000000000;;			All:    true,
0000000000000000000000000000000000000000;;			Filter: dockerfilters.NewArgs(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := newDockerFilter(&opts.Filter)
0000000000000000000000000000000000000000;;		f.AddLabel(containerTypeLabelKey, containerTypeLabelContainer)
0000000000000000000000000000000000000000;;		f.AddLabel(sandboxIDLabelKey, sandboxID)
0000000000000000000000000000000000000000;;		containers, err := ds.client.ListContainers(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range containers {
0000000000000000000000000000000000000000;;			r, err := ds.client.InspectContainer(c.ID)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if containerIP := getContainerIP(r); containerIP != "" {
0000000000000000000000000000000000000000;;				return containerIP
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getContainerIP(container *dockertypes.ContainerJSON) string {
0000000000000000000000000000000000000000;;		if container.NetworkSettings != nil {
0000000000000000000000000000000000000000;;			for _, network := range container.NetworkSettings.Networks {
0000000000000000000000000000000000000000;;				if network.IPAddress != "" {
0000000000000000000000000000000000000000;;					return network.IPAddress
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
