0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
055be32dc81877eed2716faf43dbbe5350599c51;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/lifecycle"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/status"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		reason  = "DeadlineExceeded"
0000000000000000000000000000000000000000;;		message = "Pod was active on the node longer than the specified deadline"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// activeDeadlineHandler knows how to enforce active deadlines on pods.
0000000000000000000000000000000000000000;;	type activeDeadlineHandler struct {
0000000000000000000000000000000000000000;;		// the clock to use for deadline enforcement
0000000000000000000000000000000000000000;;		clock clock.Clock
0000000000000000000000000000000000000000;;		// the provider of pod status
0000000000000000000000000000000000000000;;		podStatusProvider status.PodStatusProvider
0000000000000000000000000000000000000000;;		// the recorder to dispatch events when we identify a pod has exceeded active deadline
0000000000000000000000000000000000000000;;		recorder record.EventRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newActiveDeadlineHandler returns an active deadline handler that can enforce pod active deadline
0000000000000000000000000000000000000000;;	func newActiveDeadlineHandler(
0000000000000000000000000000000000000000;;		podStatusProvider status.PodStatusProvider,
0000000000000000000000000000000000000000;;		recorder record.EventRecorder,
0000000000000000000000000000000000000000;;		clock clock.Clock,
0000000000000000000000000000000000000000;;	) (*activeDeadlineHandler, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check for all required fields
0000000000000000000000000000000000000000;;		if clock == nil || podStatusProvider == nil || recorder == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Required arguments must not be nil: %v, %v, %v", clock, podStatusProvider, recorder)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &activeDeadlineHandler{
0000000000000000000000000000000000000000;;			clock:             clock,
0000000000000000000000000000000000000000;;			podStatusProvider: podStatusProvider,
0000000000000000000000000000000000000000;;			recorder:          recorder,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShouldSync returns true if the pod is past its active deadline.
0000000000000000000000000000000000000000;;	func (m *activeDeadlineHandler) ShouldSync(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		return m.pastActiveDeadline(pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShouldEvict returns true if the pod is past its active deadline.
0000000000000000000000000000000000000000;;	// It dispatches an event that the pod should be evicted if it is past its deadline.
0000000000000000000000000000000000000000;;	func (m *activeDeadlineHandler) ShouldEvict(pod *v1.Pod) lifecycle.ShouldEvictResponse {
0000000000000000000000000000000000000000;;		if !m.pastActiveDeadline(pod) {
0000000000000000000000000000000000000000;;			return lifecycle.ShouldEvictResponse{Evict: false}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m.recorder.Eventf(pod, v1.EventTypeNormal, reason, message)
0000000000000000000000000000000000000000;;		return lifecycle.ShouldEvictResponse{Evict: true, Reason: reason, Message: message}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// pastActiveDeadline returns true if the pod has been active for more than its ActiveDeadlineSeconds
0000000000000000000000000000000000000000;;	func (m *activeDeadlineHandler) pastActiveDeadline(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		// no active deadline was specified
0000000000000000000000000000000000000000;;		if pod.Spec.ActiveDeadlineSeconds == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// get the latest status to determine if it was started
0000000000000000000000000000000000000000;;		podStatus, ok := m.podStatusProvider.GetPodStatus(pod.UID)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			podStatus = pod.Status
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// we have no start time so just return
0000000000000000000000000000000000000000;;		if podStatus.StartTime.IsZero() {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// determine if the deadline was exceeded
0000000000000000000000000000000000000000;;		start := podStatus.StartTime.Time
0000000000000000000000000000000000000000;;		duration := m.clock.Since(start)
0000000000000000000000000000000000000000;;		allowedDuration := time.Duration(*pod.Spec.ActiveDeadlineSeconds) * time.Second
0000000000000000000000000000000000000000;;		return duration >= allowedDuration
0000000000000000000000000000000000000000;;	}
