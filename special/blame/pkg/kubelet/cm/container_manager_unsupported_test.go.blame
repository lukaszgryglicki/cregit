0000000000000000000000000000000000000000;;	// +build !linux,!windows
77b97e4ff84cde823d723b70903d3ff9dd550584;pkg/kubelet/container_manager_unsupported_test.go[pkg/kubelet/container_manager_unsupported_test.go][pkg/kubelet/cm/container_manager_unsupported_test.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeMountInterface struct {
0000000000000000000000000000000000000000;;		mountPoints []mount.MountPoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) Mount(source string, target string, fstype string, options []string) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("unsupported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) Unmount(target string) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("unsupported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) List() ([]mount.MountPoint, error) {
0000000000000000000000000000000000000000;;		return mi.mountPoints, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeMountInterface) IsMountPointMatch(mp mount.MountPoint, dir string) bool {
0000000000000000000000000000000000000000;;		return (mp.Path == dir)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeMountInterface) IsNotMountPoint(dir string) (bool, error) {
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("unsupported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) IsLikelyNotMountPoint(file string) (bool, error) {
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("unsupported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) DeviceOpened(pathname string) (bool, error) {
0000000000000000000000000000000000000000;;		for _, mp := range mi.mountPoints {
0000000000000000000000000000000000000000;;			if mp.Device == pathname {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) PathIsDevice(pathname string) (bool, error) {
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mi *fakeMountInterface) GetDeviceNameFromMount(mountPath, pluginDir string) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeContainerMgrMountInt() mount.Interface {
0000000000000000000000000000000000000000;;		return &fakeMountInterface{
0000000000000000000000000000000000000000;;			[]mount.MountPoint{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Device: "cgroup",
0000000000000000000000000000000000000000;;					Type:   "cgroup",
0000000000000000000000000000000000000000;;					Opts:   []string{"rw", "relatime", "cpuset"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Device: "cgroup",
0000000000000000000000000000000000000000;;					Type:   "cgroup",
0000000000000000000000000000000000000000;;					Opts:   []string{"rw", "relatime", "cpu"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Device: "cgroup",
0000000000000000000000000000000000000000;;					Type:   "cgroup",
0000000000000000000000000000000000000000;;					Opts:   []string{"rw", "relatime", "cpuacct"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Device: "cgroup",
0000000000000000000000000000000000000000;;					Type:   "cgroup",
0000000000000000000000000000000000000000;;					Opts:   []string{"rw", "relatime", "memory"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
