0000000000000000000000000000000000000000;;	// +build linux
e6f23756cf9d3429fd2bd1206e2a9975894f2625;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected *map[v1.ResourceName]int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "memory",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "memory=a",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "memory=a%",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "memory=200%",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: "memory=0%",
0000000000000000000000000000000000000000;;				expected: &map[v1.ResourceName]int64{
0000000000000000000000000000000000000000;;					v1.ResourceMemory: 0,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: "memory=100%",
0000000000000000000000000000000000000000;;				expected: &map[v1.ResourceName]int64{
0000000000000000000000000000000000000000;;					v1.ResourceMemory: 100,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// need to change this when CPU is added as a supported resource
0000000000000000000000000000000000000000;;				input:    "memory=100%,cpu=50%",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			m := componentconfig.ConfigurationMap{}
0000000000000000000000000000000000000000;;			m.Set(test.input)
0000000000000000000000000000000000000000;;			actual, err := ParseQOSReserved(m)
0000000000000000000000000000000000000000;;			if actual != nil && test.expected == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success, input: %v, expected: %v, actual: %v, err: %v", test.input, test.expected, actual, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual == nil && test.expected != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure, input: %v, expected: %v, actual: %v, err: %v", test.input, test.expected, actual, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (actual == nil && test.expected == nil) || reflect.DeepEqual(*actual, *test.expected) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected result, input: %v, expected: %v, actual: %v, err: %v", test.input, test.expected, actual, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
