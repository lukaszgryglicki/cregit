0000000000000000000000000000000000000000;;	// +build !linux
4a391214a4b20b9ad9639278ccafbadc66d203dd;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unsupportedCgroupManager struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Make sure that unsupportedCgroupManager implements the CgroupManager interface
0000000000000000000000000000000000000000;;	var _ CgroupManager = &unsupportedCgroupManager{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CgroupSubsystems struct {
0000000000000000000000000000000000000000;;		Mounts      []interface{}
0000000000000000000000000000000000000000;;		MountPoints map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCgroupManager(_ interface{}) CgroupManager {
0000000000000000000000000000000000000000;;		return &unsupportedCgroupManager{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Name(_ CgroupName) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Exists(_ CgroupName) bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Destroy(_ *CgroupConfig) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Update(_ *CgroupConfig) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Create(_ *CgroupConfig) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("Cgroup Manager is not supported in this build")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) GetResourceStats(name CgroupName) (*ResourceStats, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Cgroup Manager is not supported in this build")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) Pids(_ CgroupName) []int {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) CgroupName(name string) CgroupName {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *unsupportedCgroupManager) ReduceCPULimits(cgroupName CgroupName) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConvertCgroupFsNameToSystemd(cgroupfsName string) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConvertCgroupNameToSystemd(cgroupName CgroupName, outputToCgroupFs bool) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
