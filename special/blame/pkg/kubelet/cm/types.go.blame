0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4a391214a4b20b9ad9639278ccafbadc66d203dd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceConfig holds information about all the supported cgroup resource parameters.
0000000000000000000000000000000000000000;;	type ResourceConfig struct {
0000000000000000000000000000000000000000;;		// Memory limit (in bytes).
0000000000000000000000000000000000000000;;		Memory *int64
0000000000000000000000000000000000000000;;		// CPU shares (relative weight vs. other containers).
0000000000000000000000000000000000000000;;		CpuShares *int64
0000000000000000000000000000000000000000;;		// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
0000000000000000000000000000000000000000;;		CpuQuota *int64
0000000000000000000000000000000000000000;;		// CPU quota period.
0000000000000000000000000000000000000000;;		CpuPeriod *int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CgroupName is the abstract name of a cgroup prior to any driver specific conversion.
0000000000000000000000000000000000000000;;	type CgroupName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CgroupConfig holds the cgroup configuration information.
0000000000000000000000000000000000000000;;	// This is common object which is used to specify
0000000000000000000000000000000000000000;;	// cgroup information to both systemd and raw cgroup fs
0000000000000000000000000000000000000000;;	// implementation of the Cgroup Manager interface.
0000000000000000000000000000000000000000;;	type CgroupConfig struct {
0000000000000000000000000000000000000000;;		// Fully qualified name prior to any driver specific conversions.
0000000000000000000000000000000000000000;;		Name CgroupName
0000000000000000000000000000000000000000;;		// ResourceParameters contains various cgroups settings to apply.
0000000000000000000000000000000000000000;;		ResourceParameters *ResourceConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemoryStats holds the on-demand stastistics from the memory cgroup
0000000000000000000000000000000000000000;;	type MemoryStats struct {
0000000000000000000000000000000000000000;;		// Memory usage (in bytes).
0000000000000000000000000000000000000000;;		Usage int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceStats holds on-demand stastistics from various cgroup subsystems
0000000000000000000000000000000000000000;;	type ResourceStats struct {
0000000000000000000000000000000000000000;;		// Memory statistics.
0000000000000000000000000000000000000000;;		MemoryStats *MemoryStats
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CgroupManager allows for cgroup management.
0000000000000000000000000000000000000000;;	// Supports Cgroup Creation ,Deletion and Updates.
0000000000000000000000000000000000000000;;	type CgroupManager interface {
0000000000000000000000000000000000000000;;		// Create creates and applies the cgroup configurations on the cgroup.
0000000000000000000000000000000000000000;;		// It just creates the leaf cgroups.
0000000000000000000000000000000000000000;;		// It expects the parent cgroup to already exist.
0000000000000000000000000000000000000000;;		Create(*CgroupConfig) error
0000000000000000000000000000000000000000;;		// Destroy the cgroup.
0000000000000000000000000000000000000000;;		Destroy(*CgroupConfig) error
0000000000000000000000000000000000000000;;		// Update cgroup configuration.
0000000000000000000000000000000000000000;;		Update(*CgroupConfig) error
0000000000000000000000000000000000000000;;		// Exists checks if the cgroup already exists
0000000000000000000000000000000000000000;;		Exists(name CgroupName) bool
0000000000000000000000000000000000000000;;		// Name returns the literal cgroupfs name on the host after any driver specific conversions.
0000000000000000000000000000000000000000;;		// We would expect systemd implementation to make appropriate name conversion.
0000000000000000000000000000000000000000;;		// For example, if we pass /foo/bar
0000000000000000000000000000000000000000;;		// then systemd should convert the name to something like
0000000000000000000000000000000000000000;;		// foo.slice/foo-bar.slice
0000000000000000000000000000000000000000;;		Name(name CgroupName) string
0000000000000000000000000000000000000000;;		// CgroupName converts the literal cgroupfs name on the host to an internal identifier.
0000000000000000000000000000000000000000;;		CgroupName(name string) CgroupName
0000000000000000000000000000000000000000;;		// Pids scans through all subsystems to find pids associated with specified cgroup.
0000000000000000000000000000000000000000;;		Pids(name CgroupName) []int
0000000000000000000000000000000000000000;;		// ReduceCPULimits reduces the CPU CFS values to the minimum amount of shares.
0000000000000000000000000000000000000000;;		ReduceCPULimits(cgroupName CgroupName) error
0000000000000000000000000000000000000000;;		// GetResourceStats returns statistics of the specified cgroup as read from the cgroup fs.
0000000000000000000000000000000000000000;;		GetResourceStats(name CgroupName) (*ResourceStats, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QOSContainersInfo stores the names of containers per qos
0000000000000000000000000000000000000000;;	type QOSContainersInfo struct {
0000000000000000000000000000000000000000;;		Guaranteed string
0000000000000000000000000000000000000000;;		BestEffort string
0000000000000000000000000000000000000000;;		Burstable  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodContainerManager stores and manages pod level containers
0000000000000000000000000000000000000000;;	// The Pod workers interact with the PodContainerManager to create and destroy
0000000000000000000000000000000000000000;;	// containers for the pod.
0000000000000000000000000000000000000000;;	type PodContainerManager interface {
0000000000000000000000000000000000000000;;		// GetPodContainerName returns the CgroupName identifer, and its literal cgroupfs form on the host.
0000000000000000000000000000000000000000;;		GetPodContainerName(*v1.Pod) (CgroupName, string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EnsureExists takes a pod as argument and makes sure that
0000000000000000000000000000000000000000;;		// pod cgroup exists if qos cgroup hierarchy flag is enabled.
0000000000000000000000000000000000000000;;		// If the pod cgroup doesen't already exist this method creates it.
0000000000000000000000000000000000000000;;		EnsureExists(*v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Exists returns true if the pod cgroup exists.
0000000000000000000000000000000000000000;;		Exists(*v1.Pod) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Destroy takes a pod Cgroup name as argument and destroys the pod's container.
0000000000000000000000000000000000000000;;		Destroy(name CgroupName) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReduceCPULimits reduces the CPU CFS values to the minimum amount of shares.
0000000000000000000000000000000000000000;;		ReduceCPULimits(name CgroupName) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetAllPodsFromCgroups enumerates the set of pod uids to their associated cgroup based on state of cgroupfs system.
0000000000000000000000000000000000000000;;		GetAllPodsFromCgroups() (map[types.UID]CgroupName, error)
0000000000000000000000000000000000000000;;	}
