0000000000000000000000000000000000000000;;	// +build linux
8ef87e7ab2e10de9c58688025c4d61cb7dcb97a0;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		evictionapi "k8s.io/kubernetes/pkg/kubelet/eviction/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAllocatableReservationForScheduling(t *testing.T) {
0000000000000000000000000000000000000000;;		memoryEvictionThreshold := resource.MustParse("100Mi")
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			kubeReserved   v1.ResourceList
0000000000000000000000000000000000000000;;			systemReserved v1.ResourceList
0000000000000000000000000000000000000000;;			expected       v1.ResourceList
0000000000000000000000000000000000000000;;			capacity       v1.ResourceList
0000000000000000000000000000000000000000;;			hardThreshold  evictionapi.ThresholdValue
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("150m", "150Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Quantity: &memoryEvictionThreshold,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity: getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected: getResourceList("150m", "250Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Percentage: 0.05,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: getResourceList("150m", "694157320"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   v1.ResourceList{},
0000000000000000000000000000000000000000;;				systemReserved: v1.ResourceList{},
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("", ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("50m", "150Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("50m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("50m", "150Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", ""),
0000000000000000000000000000000000000000;;				expected:       getResourceList("", "150Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for idx, tc := range testCases {
0000000000000000000000000000000000000000;;			nc := NodeConfig{
0000000000000000000000000000000000000000;;				NodeAllocatableConfig: NodeAllocatableConfig{
0000000000000000000000000000000000000000;;					KubeReserved:   tc.kubeReserved,
0000000000000000000000000000000000000000;;					SystemReserved: tc.systemReserved,
0000000000000000000000000000000000000000;;					HardEvictionThresholds: []evictionapi.Threshold{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Signal:   evictionapi.SignalMemoryAvailable,
0000000000000000000000000000000000000000;;							Operator: evictionapi.OpLessThan,
0000000000000000000000000000000000000000;;							Value:    tc.hardThreshold,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cm := &containerManagerImpl{
0000000000000000000000000000000000000000;;				NodeConfig: nc,
0000000000000000000000000000000000000000;;				capacity:   tc.capacity,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range cm.GetNodeAllocatableReservation() {
0000000000000000000000000000000000000000;;				expected, exists := tc.expected[k]
0000000000000000000000000000000000000000;;				assert.True(t, exists, "test case %d expected resource %q", idx+1, k)
0000000000000000000000000000000000000000;;				assert.Equal(t, expected.MilliValue(), v.MilliValue(), "test case %d failed for resource %q", idx+1, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAllocatableWithNilHardThreshold(t *testing.T) {
0000000000000000000000000000000000000000;;		nc := NodeConfig{
0000000000000000000000000000000000000000;;			NodeAllocatableConfig: NodeAllocatableConfig{
0000000000000000000000000000000000000000;;				KubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				SystemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cm := &containerManagerImpl{
0000000000000000000000000000000000000000;;			NodeConfig: nc,
0000000000000000000000000000000000000000;;			capacity:   getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := getResourceList("150m", "150Mi")
0000000000000000000000000000000000000000;;		for k, v := range cm.GetNodeAllocatableReservation() {
0000000000000000000000000000000000000000;;			expected, exists := expected[k]
0000000000000000000000000000000000000000;;			assert.True(t, exists)
0000000000000000000000000000000000000000;;			assert.Equal(t, expected.MilliValue(), v.MilliValue(), "failed for resource %q", k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAllocatableForEnforcement(t *testing.T) {
0000000000000000000000000000000000000000;;		memoryEvictionThreshold := resource.MustParse("100Mi")
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			kubeReserved   v1.ResourceList
0000000000000000000000000000000000000000;;			systemReserved v1.ResourceList
0000000000000000000000000000000000000000;;			capacity       v1.ResourceList
0000000000000000000000000000000000000000;;			expected       v1.ResourceList
0000000000000000000000000000000000000000;;			hardThreshold  evictionapi.ThresholdValue
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("9850m", "10090Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Quantity: &memoryEvictionThreshold,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity: getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected: getResourceList("9850m", "10090Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Percentage: 0.05,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity: getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected: getResourceList("9850m", "10090Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   v1.ResourceList{},
0000000000000000000000000000000000000000;;				systemReserved: v1.ResourceList{},
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("9950m", "10090Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("50m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;				expected:       getResourceList("9950m", "10090Mi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", ""),
0000000000000000000000000000000000000000;;				expected:       getResourceList("10", ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for idx, tc := range testCases {
0000000000000000000000000000000000000000;;			nc := NodeConfig{
0000000000000000000000000000000000000000;;				NodeAllocatableConfig: NodeAllocatableConfig{
0000000000000000000000000000000000000000;;					KubeReserved:   tc.kubeReserved,
0000000000000000000000000000000000000000;;					SystemReserved: tc.systemReserved,
0000000000000000000000000000000000000000;;					HardEvictionThresholds: []evictionapi.Threshold{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Signal:   evictionapi.SignalMemoryAvailable,
0000000000000000000000000000000000000000;;							Operator: evictionapi.OpLessThan,
0000000000000000000000000000000000000000;;							Value:    tc.hardThreshold,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cm := &containerManagerImpl{
0000000000000000000000000000000000000000;;				NodeConfig: nc,
0000000000000000000000000000000000000000;;				capacity:   tc.capacity,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range cm.getNodeAllocatableAbsolute() {
0000000000000000000000000000000000000000;;				expected, exists := tc.expected[k]
0000000000000000000000000000000000000000;;				assert.True(t, exists)
0000000000000000000000000000000000000000;;				assert.Equal(t, expected.MilliValue(), v.MilliValue(), "test case %d failed for resource %q", idx+1, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAllocatableInputValidation(t *testing.T) {
0000000000000000000000000000000000000000;;		memoryEvictionThreshold := resource.MustParse("100Mi")
0000000000000000000000000000000000000000;;		highMemoryEvictionThreshold := resource.MustParse("2Gi")
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			kubeReserved         v1.ResourceList
0000000000000000000000000000000000000000;;			systemReserved       v1.ResourceList
0000000000000000000000000000000000000000;;			capacity             v1.ResourceList
0000000000000000000000000000000000000000;;			hardThreshold        evictionapi.ThresholdValue
0000000000000000000000000000000000000000;;			invalidConfiguration bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Quantity: &memoryEvictionThreshold,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity: getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("100m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Percentage: 0.05,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity: getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   v1.ResourceList{},
0000000000000000000000000000000000000000;;				systemReserved: v1.ResourceList{},
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("50m", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("50m", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", "10Gi"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("", "100Mi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("", "50Mi"),
0000000000000000000000000000000000000000;;				capacity:       getResourceList("10", ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   getResourceList("5", "10Gi"),
0000000000000000000000000000000000000000;;				systemReserved: getResourceList("5", "10Gi"),
0000000000000000000000000000000000000000;;				hardThreshold: evictionapi.ThresholdValue{
0000000000000000000000000000000000000000;;					Quantity: &highMemoryEvictionThreshold,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				capacity:             getResourceList("10", "11Gi"),
0000000000000000000000000000000000000000;;				invalidConfiguration: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			nc := NodeConfig{
0000000000000000000000000000000000000000;;				NodeAllocatableConfig: NodeAllocatableConfig{
0000000000000000000000000000000000000000;;					KubeReserved:   tc.kubeReserved,
0000000000000000000000000000000000000000;;					SystemReserved: tc.systemReserved,
0000000000000000000000000000000000000000;;					HardEvictionThresholds: []evictionapi.Threshold{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Signal:   evictionapi.SignalMemoryAvailable,
0000000000000000000000000000000000000000;;							Operator: evictionapi.OpLessThan,
0000000000000000000000000000000000000000;;							Value:    tc.hardThreshold,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cm := &containerManagerImpl{
0000000000000000000000000000000000000000;;				NodeConfig: nc,
0000000000000000000000000000000000000000;;				capacity:   tc.capacity,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := cm.validateNodeAllocatable(); err != nil && !tc.invalidConfiguration {
0000000000000000000000000000000000000000;;				t.Logf("Expected valid node allocatable configuration: %v", err)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
