0000000000000000000000000000000000000000;;	// +build linux
75d6011d7e8bd4a3d1d3b459de58b7d2308ff98c;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLibcontainerAdapterAdaptToSystemd(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/",
0000000000000000000000000000000000000000;;				expected: "-.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/system.slice",
0000000000000000000000000000000000000000;;				expected: "system.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/system.slice/Burstable",
0000000000000000000000000000000000000000;;				expected: "system-Burstable.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/Burstable.slice/Burstable-pod_123.slice",
0000000000000000000000000000000000000000;;				expected: "Burstable-pod_123.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/test.slice/test-a.slice/test-a-b.slice",
0000000000000000000000000000000000000000;;				expected: "test-a-b.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/test.slice/test-a.slice/test-a-b.slice/Burstable",
0000000000000000000000000000000000000000;;				expected: "test-a-b-Burstable.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/Burstable",
0000000000000000000000000000000000000000;;				expected: "Burstable.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/Burstable/pod_123",
0000000000000000000000000000000000000000;;				expected: "Burstable-pod_123.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/BestEffort/pod_6c1a4e95-6bb6-11e6-bc26-28d2444e470d",
0000000000000000000000000000000000000000;;				expected: "BestEffort-pod_6c1a4e95_6bb6_11e6_bc26_28d2444e470d.slice",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			f := newLibcontainerAdapter(libcontainerSystemd)
0000000000000000000000000000000000000000;;			if actual := f.adaptName(CgroupName(testCase.input), false); actual != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected result, input: %v, expected: %v, actual: %v", testCase.input, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLibcontainerAdapterAdaptToSystemdAsCgroupFs(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/",
0000000000000000000000000000000000000000;;				expected: "/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/Burstable",
0000000000000000000000000000000000000000;;				expected: "Burstable.slice/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/Burstable/pod_123",
0000000000000000000000000000000000000000;;				expected: "Burstable.slice/Burstable-pod_123.slice/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/BestEffort/pod_6c1a4e95-6bb6-11e6-bc26-28d2444e470d",
0000000000000000000000000000000000000000;;				expected: "BestEffort.slice/BestEffort-pod_6c1a4e95_6bb6_11e6_bc26_28d2444e470d.slice/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			f := newLibcontainerAdapter(libcontainerSystemd)
0000000000000000000000000000000000000000;;			if actual := f.adaptName(CgroupName(testCase.input), true); actual != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected result, input: %v, expected: %v, actual: %v", testCase.input, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
