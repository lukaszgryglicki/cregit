0000000000000000000000000000000000000000;;	// +build windows
ec016651d1a87cb8649e7a0ac95e76a8656fc0e1;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeMountsWindows(t *testing.T) {
0000000000000000000000000000000000000000;;		container := v1.Container{
0000000000000000000000000000000000000000;;			VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					MountPath: "c:/etc/hosts",
0000000000000000000000000000000000000000;;					Name:      "disk",
0000000000000000000000000000000000000000;;					ReadOnly:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					MountPath: "c:/mnt/path3",
0000000000000000000000000000000000000000;;					Name:      "disk",
0000000000000000000000000000000000000000;;					ReadOnly:  true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					MountPath: "c:/mnt/path4",
0000000000000000000000000000000000000000;;					Name:      "disk4",
0000000000000000000000000000000000000000;;					ReadOnly:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					MountPath: "c:/mnt/path5",
0000000000000000000000000000000000000000;;					Name:      "disk5",
0000000000000000000000000000000000000000;;					ReadOnly:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podVolumes := kubecontainer.VolumeMap{
0000000000000000000000000000000000000000;;			"disk":  kubecontainer.VolumeInfo{Mounter: &stubVolume{path: "c:/mnt/disk"}},
0000000000000000000000000000000000000000;;			"disk4": kubecontainer.VolumeInfo{Mounter: &stubVolume{path: "c:/mnt/host"}},
0000000000000000000000000000000000000000;;			"disk5": kubecontainer.VolumeInfo{Mounter: &stubVolume{path: "c:/var/lib/kubelet/podID/volumes/empty/disk5"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				HostNetwork: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mounts, _ := makeMounts(&pod, "/pod", &container, "fakepodname", "", "", podVolumes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedMounts := []kubecontainer.Mount{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:           "disk",
0000000000000000000000000000000000000000;;				ContainerPath:  "c:/etc/hosts",
0000000000000000000000000000000000000000;;				HostPath:       "c:/mnt/disk",
0000000000000000000000000000000000000000;;				ReadOnly:       false,
0000000000000000000000000000000000000000;;				SELinuxRelabel: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:           "disk",
0000000000000000000000000000000000000000;;				ContainerPath:  "c:/mnt/path3",
0000000000000000000000000000000000000000;;				HostPath:       "c:/mnt/disk",
0000000000000000000000000000000000000000;;				ReadOnly:       true,
0000000000000000000000000000000000000000;;				SELinuxRelabel: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:           "disk4",
0000000000000000000000000000000000000000;;				ContainerPath:  "c:/mnt/path4",
0000000000000000000000000000000000000000;;				HostPath:       "c:/mnt/host",
0000000000000000000000000000000000000000;;				ReadOnly:       false,
0000000000000000000000000000000000000000;;				SELinuxRelabel: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:           "disk5",
0000000000000000000000000000000000000000;;				ContainerPath:  "c:/mnt/path5",
0000000000000000000000000000000000000000;;				HostPath:       "c:/var/lib/kubelet/podID/volumes/empty/disk5",
0000000000000000000000000000000000000000;;				ReadOnly:       false,
0000000000000000000000000000000000000000;;				SELinuxRelabel: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedMounts, mounts, "mounts of container %+v", container)
0000000000000000000000000000000000000000;;	}
