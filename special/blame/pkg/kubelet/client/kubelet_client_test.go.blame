0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/client/container_info_test.go[pkg/client/container_info_test.go][pkg/kubelet/client/kubelet_client_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		v1core "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/typed/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure a node client can be used as a NodeGetter.
0000000000000000000000000000000000000000;;	// This allows anyone with a node client to easily construct a NewNodeConnectionInfoGetter.
0000000000000000000000000000000000000000;;	var _ = NodeGetter(v1core.NodeInterface(nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeTransportInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		config := &KubeletClientConfig{
0000000000000000000000000000000000000000;;			EnableHttps: true,
0000000000000000000000000000000000000000;;			//Invalid certificate and key path
0000000000000000000000000000000000000000;;			TLSClientConfig: restclient.TLSClientConfig{
0000000000000000000000000000000000000000;;				CertFile: "../../client/testdata/mycertinvalid.cer",
0000000000000000000000000000000000000000;;				KeyFile:  "../../client/testdata/mycertinvalid.key",
0000000000000000000000000000000000000000;;				CAFile:   "../../client/testdata/myCA.cer",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rt, err := MakeTransport(config)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rt != nil {
0000000000000000000000000000000000000000;;			t.Error("rt should be nil as we provided invalid cert file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeTransportValid(t *testing.T) {
0000000000000000000000000000000000000000;;		config := &KubeletClientConfig{
0000000000000000000000000000000000000000;;			Port:        1234,
0000000000000000000000000000000000000000;;			EnableHttps: true,
0000000000000000000000000000000000000000;;			TLSClientConfig: restclient.TLSClientConfig{
0000000000000000000000000000000000000000;;				CertFile: "../../client/testdata/mycertvalid.cer",
0000000000000000000000000000000000000000;;				// TLS Configuration, only applies if EnableHttps is true.
0000000000000000000000000000000000000000;;				KeyFile: "../../client/testdata/mycertvalid.key",
0000000000000000000000000000000000000000;;				// TLS Configuration, only applies if EnableHttps is true.
0000000000000000000000000000000000000000;;				CAFile: "../../client/testdata/myCA.cer",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rt, err := MakeTransport(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Not expecting an error #%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rt == nil {
0000000000000000000000000000000000000000;;			t.Error("rt should not be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
