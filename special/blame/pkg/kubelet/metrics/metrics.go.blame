0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7e885e27177a4d05b1740847dbfcad26c5934862;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		KubeletSubsystem           = "kubelet"
0000000000000000000000000000000000000000;;		PodWorkerLatencyKey        = "pod_worker_latency_microseconds"
0000000000000000000000000000000000000000;;		PodStartLatencyKey         = "pod_start_latency_microseconds"
0000000000000000000000000000000000000000;;		CgroupManagerOperationsKey = "cgroup_manager_latency_microseconds"
0000000000000000000000000000000000000000;;		DockerOperationsLatencyKey = "docker_operations_latency_microseconds"
0000000000000000000000000000000000000000;;		DockerOperationsKey        = "docker_operations"
0000000000000000000000000000000000000000;;		DockerOperationsErrorsKey  = "docker_operations_errors"
0000000000000000000000000000000000000000;;		DockerOperationsTimeoutKey = "docker_operations_timeout"
0000000000000000000000000000000000000000;;		PodWorkerStartLatencyKey   = "pod_worker_start_latency_microseconds"
0000000000000000000000000000000000000000;;		PLEGRelistLatencyKey       = "pleg_relist_latency_microseconds"
0000000000000000000000000000000000000000;;		PLEGRelistIntervalKey      = "pleg_relist_interval_microseconds"
0000000000000000000000000000000000000000;;		EvictionStatsAgeKey        = "eviction_stats_age_microseconds"
0000000000000000000000000000000000000000;;		// Metrics keys of remote runtime operations
0000000000000000000000000000000000000000;;		RuntimeOperationsKey        = "runtime_operations"
0000000000000000000000000000000000000000;;		RuntimeOperationsLatencyKey = "runtime_operations_latency_microseconds"
0000000000000000000000000000000000000000;;		RuntimeOperationsErrorsKey  = "runtime_operations_errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ContainersPerPodCount = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      "containers_per_pod_count",
0000000000000000000000000000000000000000;;				Help:      "The number of containers per pod.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		PodWorkerLatency = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      PodWorkerLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds to sync a single pod. Broken down by operation type: create, update, or sync",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		PodStartLatency = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      PodStartLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds for a single pod to go from pending to running. Broken down by podname.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		CgroupManagerLatency = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      CgroupManagerOperationsKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds for cgroup manager operations. Broken down by method.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		PodWorkerStartLatency = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      PodWorkerStartLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds from seeing a pod to starting a worker.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// TODO(random-liu): Move the following docker metrics into shim once dockertools is deprecated.
0000000000000000000000000000000000000000;;		DockerOperationsLatency = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      DockerOperationsLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds of Docker operations. Broken down by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		DockerOperations = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      DockerOperationsKey,
0000000000000000000000000000000000000000;;				Help:      "Cumulative number of Docker operations by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		DockerOperationsErrors = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      DockerOperationsErrorsKey,
0000000000000000000000000000000000000000;;				Help:      "Cumulative number of Docker operation errors by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		DockerOperationsTimeout = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      DockerOperationsTimeoutKey,
0000000000000000000000000000000000000000;;				Help:      "Cumulative number of Docker operation timeout by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		PLEGRelistLatency = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      PLEGRelistLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds for relisting pods in PLEG.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		PLEGRelistInterval = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      PLEGRelistIntervalKey,
0000000000000000000000000000000000000000;;				Help:      "Interval in microseconds between relisting in PLEG.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// Metrics of remote runtime operations.
0000000000000000000000000000000000000000;;		RuntimeOperations = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      RuntimeOperationsKey,
0000000000000000000000000000000000000000;;				Help:      "Cumulative number of runtime operations by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		RuntimeOperationsLatency = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      RuntimeOperationsLatencyKey,
0000000000000000000000000000000000000000;;				Help:      "Latency in microseconds of runtime operations. Broken down by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		RuntimeOperationsErrors = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      RuntimeOperationsErrorsKey,
0000000000000000000000000000000000000000;;				Help:      "Cumulative number of runtime operation errors by operation type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation_type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		EvictionStatsAge = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Subsystem: KubeletSubsystem,
0000000000000000000000000000000000000000;;				Name:      EvictionStatsAgeKey,
0000000000000000000000000000000000000000;;				Help:      "Time between when stats are collected, and when pod is evicted based on those stats by eviction signal",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"eviction_signal"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registerMetrics sync.Once
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register all metrics.
0000000000000000000000000000000000000000;;	func Register(containerCache kubecontainer.RuntimeCache) {
0000000000000000000000000000000000000000;;		// Register the metrics.
0000000000000000000000000000000000000000;;		registerMetrics.Do(func() {
0000000000000000000000000000000000000000;;			prometheus.MustRegister(PodWorkerLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(PodStartLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(DockerOperationsLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(CgroupManagerLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(PodWorkerStartLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(ContainersPerPodCount)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(DockerOperations)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(DockerOperationsErrors)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(DockerOperationsTimeout)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(newPodAndContainerCollector(containerCache))
0000000000000000000000000000000000000000;;			prometheus.MustRegister(PLEGRelistLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(PLEGRelistInterval)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(RuntimeOperations)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(RuntimeOperationsLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(RuntimeOperationsErrors)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(EvictionStatsAge)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the time since the specified start in microseconds.
0000000000000000000000000000000000000000;;	func SinceInMicroseconds(start time.Time) float64 {
0000000000000000000000000000000000000000;;		return float64(time.Since(start).Nanoseconds() / time.Microsecond.Nanoseconds())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPodAndContainerCollector(containerCache kubecontainer.RuntimeCache) *podAndContainerCollector {
0000000000000000000000000000000000000000;;		return &podAndContainerCollector{
0000000000000000000000000000000000000000;;			containerCache: containerCache,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Custom collector for current pod and container counts.
0000000000000000000000000000000000000000;;	type podAndContainerCollector struct {
0000000000000000000000000000000000000000;;		// Cache for accessing information about running containers.
0000000000000000000000000000000000000000;;		containerCache kubecontainer.RuntimeCache
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(vmarmol): Split by source?
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		runningPodCountDesc = prometheus.NewDesc(
0000000000000000000000000000000000000000;;			prometheus.BuildFQName("", KubeletSubsystem, "running_pod_count"),
0000000000000000000000000000000000000000;;			"Number of pods currently running",
0000000000000000000000000000000000000000;;			nil, nil)
0000000000000000000000000000000000000000;;		runningContainerCountDesc = prometheus.NewDesc(
0000000000000000000000000000000000000000;;			prometheus.BuildFQName("", KubeletSubsystem, "running_container_count"),
0000000000000000000000000000000000000000;;			"Number of containers currently running",
0000000000000000000000000000000000000000;;			nil, nil)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pc *podAndContainerCollector) Describe(ch chan<- *prometheus.Desc) {
0000000000000000000000000000000000000000;;		ch <- runningPodCountDesc
0000000000000000000000000000000000000000;;		ch <- runningContainerCountDesc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pc *podAndContainerCollector) Collect(ch chan<- prometheus.Metric) {
0000000000000000000000000000000000000000;;		runningPods, err := pc.containerCache.GetPods()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Warningf("Failed to get running container information while collecting metrics: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runningContainers := 0
0000000000000000000000000000000000000000;;		for _, p := range runningPods {
0000000000000000000000000000000000000000;;			runningContainers += len(p.Containers)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch <- prometheus.MustNewConstMetric(
0000000000000000000000000000000000000000;;			runningPodCountDesc,
0000000000000000000000000000000000000000;;			prometheus.GaugeValue,
0000000000000000000000000000000000000000;;			float64(len(runningPods)))
0000000000000000000000000000000000000000;;		ch <- prometheus.MustNewConstMetric(
0000000000000000000000000000000000000000;;			runningContainerCountDesc,
0000000000000000000000000000000000000000;;			prometheus.GaugeValue,
0000000000000000000000000000000000000000;;			float64(runningContainers))
0000000000000000000000000000000000000000;;	}
