0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9a0cc299ef22f0ec7bb0c4adfa4212843ec620a7;pkg/controller/volume/testing/testvolumepluginmgr.go[pkg/controller/volume/testing/testvolumepluginmgr.go][pkg/kubelet/volume_host.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/configmap"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/secret"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/io"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewInitializedVolumePluginMgr returns a new instance of
0000000000000000000000000000000000000000;;	// volume.VolumePluginMgr initialized with kubelets implementation of the
0000000000000000000000000000000000000000;;	// volume.VolumeHost interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// kubelet - used by VolumeHost methods to expose kubelet specific parameters
0000000000000000000000000000000000000000;;	// plugins - used to initialize volumePluginMgr
0000000000000000000000000000000000000000;;	func NewInitializedVolumePluginMgr(
0000000000000000000000000000000000000000;;		kubelet *Kubelet,
0000000000000000000000000000000000000000;;		secretManager secret.Manager,
0000000000000000000000000000000000000000;;		configMapManager configmap.Manager,
0000000000000000000000000000000000000000;;		plugins []volume.VolumePlugin) (*volume.VolumePluginMgr, error) {
0000000000000000000000000000000000000000;;		kvh := &kubeletVolumeHost{
0000000000000000000000000000000000000000;;			kubelet:          kubelet,
0000000000000000000000000000000000000000;;			volumePluginMgr:  volume.VolumePluginMgr{},
0000000000000000000000000000000000000000;;			secretManager:    secretManager,
0000000000000000000000000000000000000000;;			configMapManager: configMapManager,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := kvh.volumePluginMgr.InitPlugins(plugins, kvh); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf(
0000000000000000000000000000000000000000;;				"Could not initialize volume plugins for KubeletVolumePluginMgr: %v",
0000000000000000000000000000000000000000;;				err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &kvh.volumePluginMgr, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile-time check to ensure kubeletVolumeHost implements the VolumeHost interface
0000000000000000000000000000000000000000;;	var _ volume.VolumeHost = &kubeletVolumeHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetPluginDir(pluginName string) string {
0000000000000000000000000000000000000000;;		return kvh.kubelet.getPluginDir(pluginName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kubeletVolumeHost struct {
0000000000000000000000000000000000000000;;		kubelet          *Kubelet
0000000000000000000000000000000000000000;;		volumePluginMgr  volume.VolumePluginMgr
0000000000000000000000000000000000000000;;		secretManager    secret.Manager
0000000000000000000000000000000000000000;;		configMapManager configmap.Manager
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetPodVolumeDir(podUID types.UID, pluginName string, volumeName string) string {
0000000000000000000000000000000000000000;;		return kvh.kubelet.getPodVolumeDir(podUID, pluginName, volumeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetPodPluginDir(podUID types.UID, pluginName string) string {
0000000000000000000000000000000000000000;;		return kvh.kubelet.getPodPluginDir(podUID, pluginName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetKubeClient() clientset.Interface {
0000000000000000000000000000000000000000;;		return kvh.kubelet.kubeClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) NewWrapperMounter(
0000000000000000000000000000000000000000;;		volName string,
0000000000000000000000000000000000000000;;		spec volume.Spec,
0000000000000000000000000000000000000000;;		pod *v1.Pod,
0000000000000000000000000000000000000000;;		opts volume.VolumeOptions) (volume.Mounter, error) {
0000000000000000000000000000000000000000;;		// The name of wrapper volume is set to "wrapped_{wrapped_volume_name}"
0000000000000000000000000000000000000000;;		wrapperVolumeName := "wrapped_" + volName
0000000000000000000000000000000000000000;;		if spec.Volume != nil {
0000000000000000000000000000000000000000;;			spec.Volume.Name = wrapperVolumeName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return kvh.kubelet.newVolumeMounterFromPlugins(&spec, pod, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) NewWrapperUnmounter(volName string, spec volume.Spec, podUID types.UID) (volume.Unmounter, error) {
0000000000000000000000000000000000000000;;		// The name of wrapper volume is set to "wrapped_{wrapped_volume_name}"
0000000000000000000000000000000000000000;;		wrapperVolumeName := "wrapped_" + volName
0000000000000000000000000000000000000000;;		if spec.Volume != nil {
0000000000000000000000000000000000000000;;			spec.Volume.Name = wrapperVolumeName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := kvh.kubelet.volumePluginMgr.FindPluginBySpec(&spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return plugin.NewUnmounter(spec.Name(), podUID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetCloudProvider() cloudprovider.Interface {
0000000000000000000000000000000000000000;;		return kvh.kubelet.cloud
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetMounter() mount.Interface {
0000000000000000000000000000000000000000;;		return kvh.kubelet.mounter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetWriter() io.Writer {
0000000000000000000000000000000000000000;;		return kvh.kubelet.writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetHostName() string {
0000000000000000000000000000000000000000;;		return kvh.kubelet.hostname
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetHostIP() (net.IP, error) {
0000000000000000000000000000000000000000;;		return kvh.kubelet.GetHostIP()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetNodeAllocatable() (v1.ResourceList, error) {
0000000000000000000000000000000000000000;;		node, err := kvh.kubelet.getNodeAnyWay()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error retrieving node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return node.Status.Allocatable, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetSecretFunc() func(namespace, name string) (*v1.Secret, error) {
0000000000000000000000000000000000000000;;		return kvh.secretManager.GetSecret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetConfigMapFunc() func(namespace, name string) (*v1.ConfigMap, error) {
0000000000000000000000000000000000000000;;		return kvh.configMapManager.GetConfigMap
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kvh *kubeletVolumeHost) GetNodeLabels() (map[string]string, error) {
0000000000000000000000000000000000000000;;		node, err := kvh.kubelet.GetNode()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error retrieving node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return node.Labels, nil
0000000000000000000000000000000000000000;;	}
