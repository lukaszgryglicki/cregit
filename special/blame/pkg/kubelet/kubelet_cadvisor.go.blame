0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b1ee048941dfa73a34c1e10505a1a01784c67690;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerInfo returns stats (from Cadvisor) for a container.
0000000000000000000000000000000000000000;;	func (kl *Kubelet) GetContainerInfo(podFullName string, podUID types.UID, containerName string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podUID = kl.podManager.TranslatePodUID(podUID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods, err := kl.runtimeCache.GetPods()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := kubecontainer.Pods(pods).FindPod(podFullName, podUID)
0000000000000000000000000000000000000000;;		container := pod.FindContainerByName(containerName)
0000000000000000000000000000000000000000;;		if container == nil {
0000000000000000000000000000000000000000;;			return nil, kubecontainer.ErrContainerNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ci, err := kl.cadvisor.DockerContainer(container.ID.ID, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ci, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerInfoV2 returns stats (from Cadvisor) for containers.
0000000000000000000000000000000000000000;;	func (kl *Kubelet) GetContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		return kl.cadvisor.ContainerInfoV2(name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagesFsInfo returns information about docker image fs usage from
0000000000000000000000000000000000000000;;	// cadvisor.
0000000000000000000000000000000000000000;;	func (kl *Kubelet) ImagesFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		return kl.cadvisor.ImagesFsInfo()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RootFsInfo returns info about the root fs from cadvisor.
0000000000000000000000000000000000000000;;	func (kl *Kubelet) RootFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		return kl.cadvisor.RootFsInfo()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns stats (from Cadvisor) for a non-Kubernetes container.
0000000000000000000000000000000000000000;;	func (kl *Kubelet) GetRawContainerInfo(containerName string, req *cadvisorapi.ContainerInfoRequest, subcontainers bool) (map[string]*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		if subcontainers {
0000000000000000000000000000000000000000;;			return kl.cadvisor.SubcontainerInfo(containerName, req)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			containerInfo, err := kl.cadvisor.ContainerInfo(containerName, req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return map[string]*cadvisorapi.ContainerInfo{
0000000000000000000000000000000000000000;;				containerInfo.Name: containerInfo,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCachedMachineInfo assumes that the machine info can't change without a reboot
0000000000000000000000000000000000000000;;	func (kl *Kubelet) GetCachedMachineInfo() (*cadvisorapi.MachineInfo, error) {
0000000000000000000000000000000000000000;;		if kl.machineInfo == nil {
0000000000000000000000000000000000000000;;			info, err := kl.cadvisor.MachineInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kl.machineInfo = info
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return kl.machineInfo, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCachedRootFsInfo assumes that the rootfs info can't change without a reboot
0000000000000000000000000000000000000000;;	func (kl *Kubelet) GetCachedRootFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		if kl.rootfsInfo == nil {
0000000000000000000000000000000000000000;;			info, err := kl.cadvisor.RootFsInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return cadvisorapiv2.FsInfo{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kl.rootfsInfo = &info
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *kl.rootfsInfo, nil
0000000000000000000000000000000000000000;;	}
