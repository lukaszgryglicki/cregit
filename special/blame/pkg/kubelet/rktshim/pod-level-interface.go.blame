0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
78c13a4c379606555505df0bcd1ce1b9a1c67222;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rktshim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		kubeletapi "k8s.io/kubernetes/pkg/kubelet/apis/cri"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSandboxManager provides basic operations to create/delete and examine
0000000000000000000000000000000000000000;;	// the pod sandboxes in a blocking manner.
0000000000000000000000000000000000000000;;	type PodSandboxManager struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(tmrts): Fill the configuration struct fields.
0000000000000000000000000000000000000000;;	type PodSandboxManagerConfig struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPodSandboxManager creates a PodSandboxManager.
0000000000000000000000000000000000000000;;	func NewPodSandboxManager(PodSandboxManagerConfig) (kubeletapi.PodSandboxManager, error) {
0000000000000000000000000000000000000000;;		return &PodSandboxManager{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunPodSandbox creates and starts a pod sandbox given a pod sandbox configuration.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) RunPodSandbox(*runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopPodSandbox stops a pod sandbox and the apps inside the sandbox.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) StopPodSandbox(string) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemovePodSandbox deletes the pod sandbox and the apps inside the sandbox.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) RemovePodSandbox(string) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSandboxStatus queries the status of the pod sandbox.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) PodSandboxStatus(string) (*runtimeapi.PodSandboxStatus, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPodSandbox lists existing sandboxes, filtered by the PodSandboxFilter.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) ListPodSandbox(*runtimeapi.PodSandboxFilter) ([]*runtimeapi.PodSandbox, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PortForward prepares a streaming endpoint to forward ports from a PodSandbox, and returns the address.
0000000000000000000000000000000000000000;;	func (*PodSandboxManager) PortForward(*runtimeapi.PortForwardRequest) (*runtimeapi.PortForwardResponse, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
