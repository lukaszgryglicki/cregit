0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
92cce3a6dce647446ec490103a415cd0a4b2eb5f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rktshim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeletapi "k8s.io/kubernetes/pkg/kubelet/apis/cri"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Runtime provides an API for lifecycle, inspection and introspection
0000000000000000000000000000000000000000;;	// operations in a blocking manner using the App level API provided by rkt.
0000000000000000000000000000000000000000;;	type Runtime struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(tmrts): Fill out the creation configuration fields.
0000000000000000000000000000000000000000;;	type RuntimeConfig struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRuntime creates a container.Runtime instance using the Runtime.
0000000000000000000000000000000000000000;;	func NewRuntime(RuntimeConfig) (kubeletapi.ContainerManager, error) {
0000000000000000000000000000000000000000;;		return &Runtime{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateContainer creates an app inside the provided pod sandbox and returns the RawContainerID.
0000000000000000000000000000000000000000;;	func (*Runtime) CreateContainer(string, *runtimeapi.ContainerConfig, *runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartContainer starts a created app.
0000000000000000000000000000000000000000;;	func (*Runtime) StartContainer(string) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopContainer stops a running app with a grace period (i.e. timeout).
0000000000000000000000000000000000000000;;	func (*Runtime) StopContainer(string, int64) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveContainer removes the app from a pod sandbox.
0000000000000000000000000000000000000000;;	func (*Runtime) RemoveContainer(string) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListContainers lists out the apps residing inside the pod sandbox using the ContainerFilter.
0000000000000000000000000000000000000000;;	func (*Runtime) ListContainers(*runtimeapi.ContainerFilter) ([]*runtimeapi.Container, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerStatus returns the RawContainerStatus of an app inside the pod sandbox.
0000000000000000000000000000000000000000;;	func (*Runtime) ContainerStatus(string) (*runtimeapi.ContainerStatus, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExecSync executes a command in the container, and returns the stdout output.
0000000000000000000000000000000000000000;;	// If command exits with a non-zero exit code, an error is returned.
0000000000000000000000000000000000000000;;	func (*Runtime) ExecSync(containerID string, cmd []string, timeout time.Duration) (stdout []byte, stderr []byte, err error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exec prepares a streaming endpoint to execute a command in the container, and returns the address.
0000000000000000000000000000000000000000;;	func (*Runtime) Exec(*runtimeapi.ExecRequest) (*runtimeapi.ExecResponse, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attach prepares a streaming endpoint to attach to a running container, and returns the address.
0000000000000000000000000000000000000000;;	func (*Runtime) Attach(req *runtimeapi.AttachRequest) (*runtimeapi.AttachResponse, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
