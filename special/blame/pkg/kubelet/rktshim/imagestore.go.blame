0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
08a57eb3ca5564849ec21de187d1524f5597a618;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rktshim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(tmrts): Move these errors to the container API for code re-use.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrImageNotFound = errors.New("rktshim: image not found")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// var _ kubeletApi.ImageManagerService = (*ImageStore)(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageStore supports CRUD operations for images.
0000000000000000000000000000000000000000;;	type ImageStore struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(tmrts): fill the image store configuration fields.
0000000000000000000000000000000000000000;;	type ImageStoreConfig struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewImageStore creates an image storage that allows CRUD operations for images.
0000000000000000000000000000000000000000;;	func NewImageStore(ImageStoreConfig) (*ImageStore, error) {
0000000000000000000000000000000000000000;;		return &ImageStore{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists the images residing in the image store.
0000000000000000000000000000000000000000;;	func (*ImageStore) List() ([]runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pull pulls an image into the image store and uses the given authentication method.
0000000000000000000000000000000000000000;;	func (*ImageStore) Pull(runtimeapi.ImageSpec, runtimeapi.AuthConfig, *runtimeapi.PodSandboxConfig) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove removes the image from the image store.
0000000000000000000000000000000000000000;;	func (*ImageStore) Remove(runtimeapi.ImageSpec) error {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Status returns the status of the image.
0000000000000000000000000000000000000000;;	func (*ImageStore) Status(runtimeapi.ImageSpec) (runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
