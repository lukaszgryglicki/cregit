0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8ef87e7ab2e10de9c58688025c4d61cb7dcb97a0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Signal defines a signal that can trigger eviction of pods on a node.
0000000000000000000000000000000000000000;;	type Signal string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SignalMemoryAvailable is memory available (i.e. capacity - workingSet), in bytes.
0000000000000000000000000000000000000000;;		SignalMemoryAvailable Signal = "memory.available"
0000000000000000000000000000000000000000;;		// SignalNodeFsAvailable is amount of storage available on filesystem that kubelet uses for volumes, daemon logs, etc.
0000000000000000000000000000000000000000;;		SignalNodeFsAvailable Signal = "nodefs.available"
0000000000000000000000000000000000000000;;		// SignalNodeFsInodesFree is amount of inodes available on filesystem that kubelet uses for volumes, daemon logs, etc.
0000000000000000000000000000000000000000;;		SignalNodeFsInodesFree Signal = "nodefs.inodesFree"
0000000000000000000000000000000000000000;;		// SignalImageFsAvailable is amount of storage available on filesystem that container runtime uses for storing images and container writable layers.
0000000000000000000000000000000000000000;;		SignalImageFsAvailable Signal = "imagefs.available"
0000000000000000000000000000000000000000;;		// SignalImageFsInodesFree is amount of inodes available on filesystem that container runtime uses for storing images and container writeable layers.
0000000000000000000000000000000000000000;;		SignalImageFsInodesFree Signal = "imagefs.inodesFree"
0000000000000000000000000000000000000000;;		// SignalAllocatableMemoryAvailable is amount of memory available for pod allocation (i.e. allocatable - workingSet (of pods), in bytes.
0000000000000000000000000000000000000000;;		SignalAllocatableMemoryAvailable Signal = "allocatableMemory.available"
0000000000000000000000000000000000000000;;		// SignalAllocatableNodeFsAvailable is amount of local storage available for pod allocation
0000000000000000000000000000000000000000;;		SignalAllocatableNodeFsAvailable Signal = "allocatableNodeFs.available"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ThresholdOperator is the operator used to express a Threshold.
0000000000000000000000000000000000000000;;	type ThresholdOperator string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OpLessThan is the operator that expresses a less than operator.
0000000000000000000000000000000000000000;;		OpLessThan ThresholdOperator = "LessThan"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ThresholdValue is a value holder that abstracts literal versus percentage based quantity
0000000000000000000000000000000000000000;;	type ThresholdValue struct {
0000000000000000000000000000000000000000;;		// The following fields are exclusive. Only the topmost non-zero field is used.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Quantity is a quantity associated with the signal that is evaluated against the specified operator.
0000000000000000000000000000000000000000;;		Quantity *resource.Quantity
0000000000000000000000000000000000000000;;		// Percentage represents the usage percentage over the total resource that is evaluated against the specified operator.
0000000000000000000000000000000000000000;;		Percentage float32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Threshold defines a metric for when eviction should occur.
0000000000000000000000000000000000000000;;	type Threshold struct {
0000000000000000000000000000000000000000;;		// Signal defines the entity that was measured.
0000000000000000000000000000000000000000;;		Signal Signal
0000000000000000000000000000000000000000;;		// Operator represents a relationship of a signal to a value.
0000000000000000000000000000000000000000;;		Operator ThresholdOperator
0000000000000000000000000000000000000000;;		// Value is the threshold the resource is evaluated against.
0000000000000000000000000000000000000000;;		Value ThresholdValue
0000000000000000000000000000000000000000;;		// GracePeriod represents the amount of time that a threshold must be met before eviction is triggered.
0000000000000000000000000000000000000000;;		GracePeriod time.Duration
0000000000000000000000000000000000000000;;		// MinReclaim represents the minimum amount of resource to reclaim if the threshold is met.
0000000000000000000000000000000000000000;;		MinReclaim *ThresholdValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetThresholdQuantity returns the expected quantity value for a thresholdValue
0000000000000000000000000000000000000000;;	func GetThresholdQuantity(value ThresholdValue, capacity *resource.Quantity) *resource.Quantity {
0000000000000000000000000000000000000000;;		if value.Quantity != nil {
0000000000000000000000000000000000000000;;			return value.Quantity.Copy()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resource.NewQuantity(int64(float64(capacity.Value())*float64(value.Percentage)), resource.BinarySI)
0000000000000000000000000000000000000000;;	}
