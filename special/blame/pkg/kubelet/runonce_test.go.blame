0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
3f9407170f52f74a0668126e6cdf5f1bf090271d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		cadvisortest "k8s.io/kubernetes/pkg/kubelet/cadvisor/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/configmap"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		containertest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/eviction"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;		nettest "k8s.io/kubernetes/pkg/kubelet/network/testing"
0000000000000000000000000000000000000000;;		kubepod "k8s.io/kubernetes/pkg/kubelet/pod"
0000000000000000000000000000000000000000;;		podtest "k8s.io/kubernetes/pkg/kubelet/pod/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/secret"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/server/stats"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/status"
0000000000000000000000000000000000000000;;		statustest "k8s.io/kubernetes/pkg/kubelet/status/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/volumemanager"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunOnce(t *testing.T) {
0000000000000000000000000000000000000000;;		cadvisor := &cadvisortest.Mock{}
0000000000000000000000000000000000000000;;		cadvisor.On("MachineInfo").Return(&cadvisorapi.MachineInfo{}, nil)
0000000000000000000000000000000000000000;;		cadvisor.On("ImagesFsInfo").Return(cadvisorapiv2.FsInfo{
0000000000000000000000000000000000000000;;			Usage:     400 * mb,
0000000000000000000000000000000000000000;;			Capacity:  1000 * mb,
0000000000000000000000000000000000000000;;			Available: 600 * mb,
0000000000000000000000000000000000000000;;		}, nil)
0000000000000000000000000000000000000000;;		cadvisor.On("RootFsInfo").Return(cadvisorapiv2.FsInfo{
0000000000000000000000000000000000000000;;			Usage:    9 * mb,
0000000000000000000000000000000000000000;;			Capacity: 10 * mb,
0000000000000000000000000000000000000000;;		}, nil)
0000000000000000000000000000000000000000;;		fakeSecretManager := secret.NewFakeManager()
0000000000000000000000000000000000000000;;		fakeConfigMapManager := configmap.NewFakeManager()
0000000000000000000000000000000000000000;;		podManager := kubepod.NewBasicPodManager(
0000000000000000000000000000000000000000;;			podtest.NewFakeMirrorClient(), fakeSecretManager, fakeConfigMapManager)
0000000000000000000000000000000000000000;;		diskSpaceManager, _ := newDiskSpaceManager(cadvisor, DiskSpacePolicy{})
0000000000000000000000000000000000000000;;		fakeRuntime := &containertest.FakeRuntime{}
0000000000000000000000000000000000000000;;		basePath, err := utiltesting.MkTmpdir("kubelet")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp rootdir %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(basePath)
0000000000000000000000000000000000000000;;		kb := &Kubelet{
0000000000000000000000000000000000000000;;			rootDirectory:    basePath,
0000000000000000000000000000000000000000;;			recorder:         &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			cadvisor:         cadvisor,
0000000000000000000000000000000000000000;;			nodeInfo:         testNodeInfo{},
0000000000000000000000000000000000000000;;			statusManager:    status.NewManager(nil, podManager, &statustest.FakePodDeletionSafetyProvider{}),
0000000000000000000000000000000000000000;;			podManager:       podManager,
0000000000000000000000000000000000000000;;			os:               &containertest.FakeOS{},
0000000000000000000000000000000000000000;;			diskSpaceManager: diskSpaceManager,
0000000000000000000000000000000000000000;;			containerRuntime: fakeRuntime,
0000000000000000000000000000000000000000;;			reasonCache:      NewReasonCache(),
0000000000000000000000000000000000000000;;			clock:            clock.RealClock{},
0000000000000000000000000000000000000000;;			kubeClient:       &fake.Clientset{},
0000000000000000000000000000000000000000;;			hostname:         testKubeletHostname,
0000000000000000000000000000000000000000;;			nodeName:         testKubeletHostname,
0000000000000000000000000000000000000000;;			runtimeState:     newRuntimeState(time.Second),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kb.containerManager = cm.NewStubContainerManager()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug := &volumetest.FakeVolumePlugin{PluginName: "fake", Host: nil}
0000000000000000000000000000000000000000;;		kb.volumePluginMgr, err =
0000000000000000000000000000000000000000;;			NewInitializedVolumePluginMgr(kb, fakeSecretManager, fakeConfigMapManager, []volume.VolumePlugin{plug})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("failed to initialize VolumePluginMgr: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kb.volumeManager = volumemanager.NewVolumeManager(
0000000000000000000000000000000000000000;;			true,
0000000000000000000000000000000000000000;;			kb.nodeName,
0000000000000000000000000000000000000000;;			kb.podManager,
0000000000000000000000000000000000000000;;			kb.statusManager,
0000000000000000000000000000000000000000;;			kb.kubeClient,
0000000000000000000000000000000000000000;;			kb.volumePluginMgr,
0000000000000000000000000000000000000000;;			fakeRuntime,
0000000000000000000000000000000000000000;;			kb.mounter,
0000000000000000000000000000000000000000;;			kb.getPodsDir(),
0000000000000000000000000000000000000000;;			kb.recorder,
0000000000000000000000000000000000000000;;			false, /* experimentalCheckNodeCapabilitiesBeforeMount */
0000000000000000000000000000000000000000;;			false /* keepTerminatedPodVolumes */)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kb.networkPlugin, _ = network.InitNetworkPlugin([]network.NetworkPlugin{}, "", nettest.NewFakeHost(nil), componentconfig.HairpinNone, "", network.UseDefaultMTU)
0000000000000000000000000000000000000000;;		// TODO: Factor out "StatsProvider" from Kubelet so we don't have a cyclic dependency
0000000000000000000000000000000000000000;;		volumeStatsAggPeriod := time.Second * 10
0000000000000000000000000000000000000000;;		kb.resourceAnalyzer = stats.NewResourceAnalyzer(kb, volumeStatsAggPeriod, kb.containerRuntime)
0000000000000000000000000000000000000000;;		nodeRef := &clientv1.ObjectReference{
0000000000000000000000000000000000000000;;			Kind:      "Node",
0000000000000000000000000000000000000000;;			Name:      string(kb.nodeName),
0000000000000000000000000000000000000000;;			UID:       types.UID(kb.nodeName),
0000000000000000000000000000000000000000;;			Namespace: "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeKillPodFunc := func(pod *v1.Pod, podStatus v1.PodStatus, gracePeriodOverride *int64) error {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		evictionManager, evictionAdmitHandler := eviction.NewManager(kb.resourceAnalyzer, eviction.Config{}, fakeKillPodFunc, nil, nil, kb.recorder, nodeRef, kb.clock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kb.evictionManager = evictionManager
0000000000000000000000000000000000000000;;		kb.admitHandlers.AddPodAdmitHandler(evictionAdmitHandler)
0000000000000000000000000000000000000000;;		if err := kb.setupDataDirs(); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to init data dirs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods := []*v1.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					UID:       "12345678",
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					Namespace: "new",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podManager.SetPods(pods)
0000000000000000000000000000000000000000;;		// The original test here is totally meaningless, because fakeruntime will always return an empty podStatus. While
0000000000000000000000000000000000000000;;		// the original logic of isPodRunning happens to return true when podstatus is empty, so the test can always pass.
0000000000000000000000000000000000000000;;		// Now the logic in isPodRunning is changed, to let the test pass, we set the podstatus directly in fake runtime.
0000000000000000000000000000000000000000;;		// This is also a meaningless test, because the isPodRunning will also always return true after setting this. However,
0000000000000000000000000000000000000000;;		// because runonce is never used in kubernetes now, we should deprioritize the cleanup work.
0000000000000000000000000000000000000000;;		// TODO(random-liu) Fix the test, make it meaningful.
0000000000000000000000000000000000000000;;		fakeRuntime.PodStatus = kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;			ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "bar",
0000000000000000000000000000000000000000;;					State: kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		results, err := kb.runOnce(pods, time.Millisecond)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if results[0].Err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected run pod error: %v", results[0].Err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if results[0].Pod.Name != "foo" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected pod: %q", results[0].Pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
