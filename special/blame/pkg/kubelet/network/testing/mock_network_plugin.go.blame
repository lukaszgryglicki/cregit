0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
81b88e43446318c6288b29d127bece5b87150126;pkg/kubelet/network/mock_network/network_plugins.go[pkg/kubelet/network/mock_network/network_plugins.go][pkg/kubelet/network/testing/mock_network_plugin.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generated code, generated via: `mockgen k8s.io/kubernetes/pkg/kubelet/network NetworkPlugin > $GOPATH/src/k8s.io/kubernetes/pkg/kubelet/network/testing/mock_network_plugin.go`
0000000000000000000000000000000000000000;;	// Edited by hand for boilerplate and gofmt.
0000000000000000000000000000000000000000;;	// TODO, this should be autogenerated/autoupdated by scripts.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		gomock "github.com/golang/mock/gomock"
0000000000000000000000000000000000000000;;		sets "k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		componentconfig "k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;		container "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		network "k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mock of NetworkPlugin interface
0000000000000000000000000000000000000000;;	type MockNetworkPlugin struct {
0000000000000000000000000000000000000000;;		ctrl     *gomock.Controller
0000000000000000000000000000000000000000;;		recorder *_MockNetworkPluginRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Recorder for MockNetworkPlugin (not exported)
0000000000000000000000000000000000000000;;	type _MockNetworkPluginRecorder struct {
0000000000000000000000000000000000000000;;		mock *MockNetworkPlugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMockNetworkPlugin(ctrl *gomock.Controller) *MockNetworkPlugin {
0000000000000000000000000000000000000000;;		mock := &MockNetworkPlugin{ctrl: ctrl}
0000000000000000000000000000000000000000;;		mock.recorder = &_MockNetworkPluginRecorder{mock}
0000000000000000000000000000000000000000;;		return mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) EXPECT() *_MockNetworkPluginRecorder {
0000000000000000000000000000000000000000;;		return _m.recorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Capabilities() sets.Int {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Capabilities")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(sets.Int)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Finish() {
0000000000000000000000000000000000000000;;		_m.ctrl.Finish()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) Capabilities() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Capabilities")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Event(_param0 string, _param1 map[string]interface{}) {
0000000000000000000000000000000000000000;;		_m.ctrl.Call(_m, "Event", _param0, _param1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) Event(arg0, arg1 interface{}) *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Event", arg0, arg1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) GetPodNetworkStatus(_param0 string, _param1 string, _param2 container.ContainerID) (*network.PodNetworkStatus, error) {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "GetPodNetworkStatus", _param0, _param1, _param2)
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(*network.PodNetworkStatus)
0000000000000000000000000000000000000000;;		ret1, _ := ret[1].(error)
0000000000000000000000000000000000000000;;		return ret0, ret1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) GetPodNetworkStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPodNetworkStatus", arg0, arg1, arg2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Init(_param0 network.Host, _param1 componentconfig.HairpinMode, nonMasqueradeCIDR string, mtu int) error {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Init", _param0, _param1)
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(error)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Name() string {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Name")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(string)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) Name() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) SetUpPod(_param0 string, _param1 string, _param2 container.ContainerID, annotations map[string]string) error {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "SetUpPod", _param0, _param1, _param2)
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(error)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) SetUpPod(arg0, arg1, arg2 interface{}) *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUpPod", arg0, arg1, arg2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) Status() error {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Status")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(error)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) Status() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockNetworkPlugin) TearDownPod(_param0 string, _param1 string, _param2 container.ContainerID) error {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "TearDownPod", _param0, _param1, _param2)
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(error)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockNetworkPluginRecorder) TearDownPod(arg0, arg1, arg2 interface{}) *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "TearDownPod", arg0, arg1, arg2)
0000000000000000000000000000000000000000;;	}
