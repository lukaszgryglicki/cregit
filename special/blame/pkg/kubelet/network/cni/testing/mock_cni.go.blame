0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
2eb5366ec68922b8e659411da78c6fa9427451b3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mock_cni is a mock of the `libcni.CNI` interface. It's a handwritten mock
0000000000000000000000000000000000000000;;	// because there are only two functions to deal with.
0000000000000000000000000000000000000000;;	package mock_cni
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/libcni"
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/mock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MockCNI struct {
0000000000000000000000000000000000000000;;		mock.Mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MockCNI) AddNetwork(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) (types.Result, error) {
0000000000000000000000000000000000000000;;		args := m.Called(net, rt)
0000000000000000000000000000000000000000;;		return args.Get(0).(types.Result), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MockCNI) DelNetwork(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) error {
0000000000000000000000000000000000000000;;		args := m.Called(net, rt)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MockCNI) DelNetworkList(net *libcni.NetworkConfigList, rt *libcni.RuntimeConf) error {
0000000000000000000000000000000000000000;;		args := m.Called(net, rt)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MockCNI) AddNetworkList(net *libcni.NetworkConfigList, rt *libcni.RuntimeConf) (types.Result, error) {
0000000000000000000000000000000000000000;;		args := m.Called(net, rt)
0000000000000000000000000000000000000000;;		return args.Get(0).(types.Result), args.Error(1)
0000000000000000000000000000000000000000;;	}
