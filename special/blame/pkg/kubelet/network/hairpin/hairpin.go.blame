0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
50f7c6bc4f12ad04be433e839c5c4db8e3662f43;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package hairpin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sysfsNetPath            = "/sys/devices/virtual/net"
0000000000000000000000000000000000000000;;		brportRelativePath      = "brport"
0000000000000000000000000000000000000000;;		hairpinModeRelativePath = "hairpin_mode"
0000000000000000000000000000000000000000;;		hairpinEnable           = "1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ethtoolOutputRegex = regexp.MustCompile("peer_ifindex: (\\d+)")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetUpContainerPid(containerPid int, containerInterfaceName string) error {
0000000000000000000000000000000000000000;;		pidStr := fmt.Sprintf("%d", containerPid)
0000000000000000000000000000000000000000;;		nsenterArgs := []string{"-t", pidStr, "-n"}
0000000000000000000000000000000000000000;;		return setUpContainerInternal(containerInterfaceName, pidStr, nsenterArgs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetUpContainerPath(netnsPath string, containerInterfaceName string) error {
0000000000000000000000000000000000000000;;		if netnsPath[0] != '/' {
0000000000000000000000000000000000000000;;			return fmt.Errorf("netnsPath path '%s' was invalid", netnsPath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nsenterArgs := []string{"--net=" + netnsPath}
0000000000000000000000000000000000000000;;		return setUpContainerInternal(containerInterfaceName, netnsPath, nsenterArgs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setUpContainerInternal(containerInterfaceName, containerDesc string, nsenterArgs []string) error {
0000000000000000000000000000000000000000;;		e := exec.New()
0000000000000000000000000000000000000000;;		hostIfName, err := findPairInterfaceOfContainerInterface(e, containerInterfaceName, containerDesc, nsenterArgs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return setUpInterface(hostIfName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findPairInterfaceOfContainerInterface(e exec.Interface, containerInterfaceName, containerDesc string, nsenterArgs []string) (string, error) {
0000000000000000000000000000000000000000;;		nsenterPath, err := e.LookPath("nsenter")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ethtoolPath, err := e.LookPath("ethtool")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nsenterArgs = append(nsenterArgs, "-F", "--", ethtoolPath, "--statistics", containerInterfaceName)
0000000000000000000000000000000000000000;;		output, err := e.Command(nsenterPath, nsenterArgs...).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Unable to query interface %s of container %s: %v: %s", containerInterfaceName, containerDesc, err, string(output))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// look for peer_ifindex
0000000000000000000000000000000000000000;;		match := ethtoolOutputRegex.FindSubmatch(output)
0000000000000000000000000000000000000000;;		if match == nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("No peer_ifindex in interface statistics for %s of container %s", containerInterfaceName, containerDesc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		peerIfIndex, err := strconv.Atoi(string(match[1]))
0000000000000000000000000000000000000000;;		if err != nil { // seems impossible (\d+ not numeric)
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("peer_ifindex wasn't numeric: %s: %v", match[1], err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		iface, err := net.InterfaceByIndex(peerIfIndex)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return iface.Name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setUpInterface(ifName string) error {
0000000000000000000000000000000000000000;;		glog.V(3).Infof("Enabling hairpin on interface %s", ifName)
0000000000000000000000000000000000000000;;		ifPath := path.Join(sysfsNetPath, ifName)
0000000000000000000000000000000000000000;;		if _, err := os.Stat(ifPath); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		brportPath := path.Join(ifPath, brportRelativePath)
0000000000000000000000000000000000000000;;		if _, err := os.Stat(brportPath); err != nil && os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			// Device is not on a bridge, so doesn't need hairpin mode
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hairpinModeFile := path.Join(brportPath, hairpinModeRelativePath)
0000000000000000000000000000000000000000;;		return ioutil.WriteFile(hairpinModeFile, []byte(hairpinEnable), 0644)
0000000000000000000000000000000000000000;;	}
