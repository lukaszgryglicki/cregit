0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
50f7c6bc4f12ad04be433e839c5c4db8e3662f43;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package hairpin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindPairInterfaceOfContainerInterface(t *testing.T) {
0000000000000000000000000000000000000000;;		// there should be at least "lo" on any system
0000000000000000000000000000000000000000;;		interfaces, _ := net.Interfaces()
0000000000000000000000000000000000000000;;		validOutput := fmt.Sprintf("garbage\n   peer_ifindex: %d", interfaces[0].Index)
0000000000000000000000000000000000000000;;		invalidOutput := fmt.Sprintf("garbage\n   unknown: %d", interfaces[0].Index)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			output       string
0000000000000000000000000000000000000000;;			err          error
0000000000000000000000000000000000000000;;			expectedName string
0000000000000000000000000000000000000000;;			expectErr    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				output:       validOutput,
0000000000000000000000000000000000000000;;				expectedName: interfaces[0].Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				output:    invalidOutput,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				output:    validOutput,
0000000000000000000000000000000000000000;;				err:       errors.New("error"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(test.output), test.err },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd {
0000000000000000000000000000000000000000;;						return exec.InitFakeCmd(&fcmd, cmd, args...)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				LookPathFunc: func(file string) (string, error) {
0000000000000000000000000000000000000000;;					return fmt.Sprintf("/fake-bin/%s", file), nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nsenterArgs := []string{"-t", "123", "-n"}
0000000000000000000000000000000000000000;;			name, err := findPairInterfaceOfContainerInterface(&fexec, "eth0", "123", nsenterArgs)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name != test.expectedName {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected name: %s (expected: %s)", name, test.expectedName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetUpInterfaceNonExistent(t *testing.T) {
0000000000000000000000000000000000000000;;		err := setUpInterface("non-existent")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deviceDir := fmt.Sprintf("%s/%s", sysfsNetPath, "non-existent")
0000000000000000000000000000000000000000;;		if !strings.Contains(fmt.Sprintf("%v", err), deviceDir) {
0000000000000000000000000000000000000000;;			t.Errorf("should have tried to open %s", deviceDir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetUpInterfaceNotBridged(t *testing.T) {
0000000000000000000000000000000000000000;;		err := setUpInterface("lo")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				t.Skipf("'lo' device does not exist??? (%v)", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
