0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a246fa85333e4846efcf8fd0f6bf9ba93715dd18;pkg/kubelet/container/kuberuntime.go[pkg/kubelet/container/kuberuntime.go][pkg/kubelet/apis/cri/services.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cri
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuntimeVersioner contains methods for runtime name, version and API version.
0000000000000000000000000000000000000000;;	type RuntimeVersioner interface {
0000000000000000000000000000000000000000;;		// Version returns the runtime name, runtime version and runtime API version
0000000000000000000000000000000000000000;;		Version(apiVersion string) (*runtimeapi.VersionResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerManager contains methods to manipulate containers managed by a
0000000000000000000000000000000000000000;;	// container runtime. The methods are thread-safe.
0000000000000000000000000000000000000000;;	type ContainerManager interface {
0000000000000000000000000000000000000000;;		// CreateContainer creates a new container in specified PodSandbox.
0000000000000000000000000000000000000000;;		CreateContainer(podSandboxID string, config *runtimeapi.ContainerConfig, sandboxConfig *runtimeapi.PodSandboxConfig) (string, error)
0000000000000000000000000000000000000000;;		// StartContainer starts the container.
0000000000000000000000000000000000000000;;		StartContainer(containerID string) error
0000000000000000000000000000000000000000;;		// StopContainer stops a running container with a grace period (i.e., timeout).
0000000000000000000000000000000000000000;;		StopContainer(containerID string, timeout int64) error
0000000000000000000000000000000000000000;;		// RemoveContainer removes the container.
0000000000000000000000000000000000000000;;		RemoveContainer(containerID string) error
0000000000000000000000000000000000000000;;		// ListContainers lists all containers by filters.
0000000000000000000000000000000000000000;;		ListContainers(filter *runtimeapi.ContainerFilter) ([]*runtimeapi.Container, error)
0000000000000000000000000000000000000000;;		// ContainerStatus returns the status of the container.
0000000000000000000000000000000000000000;;		ContainerStatus(containerID string) (*runtimeapi.ContainerStatus, error)
0000000000000000000000000000000000000000;;		// ExecSync executes a command in the container, and returns the stdout output.
0000000000000000000000000000000000000000;;		// If command exits with a non-zero exit code, an error is returned.
0000000000000000000000000000000000000000;;		ExecSync(containerID string, cmd []string, timeout time.Duration) (stdout []byte, stderr []byte, err error)
0000000000000000000000000000000000000000;;		// Exec prepares a streaming endpoint to execute a command in the container, and returns the address.
0000000000000000000000000000000000000000;;		Exec(*runtimeapi.ExecRequest) (*runtimeapi.ExecResponse, error)
0000000000000000000000000000000000000000;;		// Attach prepares a streaming endpoint to attach to a running container, and returns the address.
0000000000000000000000000000000000000000;;		Attach(req *runtimeapi.AttachRequest) (*runtimeapi.AttachResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSandboxManager contains methods for operating on PodSandboxes. The methods
0000000000000000000000000000000000000000;;	// are thread-safe.
0000000000000000000000000000000000000000;;	type PodSandboxManager interface {
0000000000000000000000000000000000000000;;		// RunPodSandbox creates and starts a pod-level sandbox. Runtimes should ensure
0000000000000000000000000000000000000000;;		// the sandbox is in ready state.
0000000000000000000000000000000000000000;;		RunPodSandbox(config *runtimeapi.PodSandboxConfig) (string, error)
0000000000000000000000000000000000000000;;		// StopPodSandbox stops the sandbox. If there are any running containers in the
0000000000000000000000000000000000000000;;		// sandbox, they should be force terminated.
0000000000000000000000000000000000000000;;		StopPodSandbox(podSandboxID string) error
0000000000000000000000000000000000000000;;		// RemovePodSandbox removes the sandbox. If there are running containers in the
0000000000000000000000000000000000000000;;		// sandbox, they should be forcibly removed.
0000000000000000000000000000000000000000;;		RemovePodSandbox(podSandboxID string) error
0000000000000000000000000000000000000000;;		// PodSandboxStatus returns the Status of the PodSandbox.
0000000000000000000000000000000000000000;;		PodSandboxStatus(podSandboxID string) (*runtimeapi.PodSandboxStatus, error)
0000000000000000000000000000000000000000;;		// ListPodSandbox returns a list of Sandbox.
0000000000000000000000000000000000000000;;		ListPodSandbox(filter *runtimeapi.PodSandboxFilter) ([]*runtimeapi.PodSandbox, error)
0000000000000000000000000000000000000000;;		// PortForward prepares a streaming endpoint to forward ports from a PodSandbox, and returns the address.
0000000000000000000000000000000000000000;;		PortForward(*runtimeapi.PortForwardRequest) (*runtimeapi.PortForwardResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerStatsManager contains methods for retriving the container
0000000000000000000000000000000000000000;;	// statistics.
0000000000000000000000000000000000000000;;	type ContainerStatsManager interface {
0000000000000000000000000000000000000000;;		// ContainerStats returns stats of the container. If the container does not
0000000000000000000000000000000000000000;;		// exist, the call returns an error.
0000000000000000000000000000000000000000;;		ContainerStats(req *runtimeapi.ContainerStatsRequest) (*runtimeapi.ContainerStatsResponse, error)
0000000000000000000000000000000000000000;;		// ListContainerStats returns stats of all running containers.
0000000000000000000000000000000000000000;;		ListContainerStats(req *runtimeapi.ListContainerStatsRequest) (*runtimeapi.ListContainerStatsResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuntimeService interface should be implemented by a container runtime.
0000000000000000000000000000000000000000;;	// The methods should be thread-safe.
0000000000000000000000000000000000000000;;	type RuntimeService interface {
0000000000000000000000000000000000000000;;		RuntimeVersioner
0000000000000000000000000000000000000000;;		ContainerManager
0000000000000000000000000000000000000000;;		PodSandboxManager
0000000000000000000000000000000000000000;;		ContainerStatsManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdateRuntimeConfig updates runtime configuration if specified
0000000000000000000000000000000000000000;;		UpdateRuntimeConfig(runtimeConfig *runtimeapi.RuntimeConfig) error
0000000000000000000000000000000000000000;;		// Status returns the status of the runtime.
0000000000000000000000000000000000000000;;		Status() (*runtimeapi.RuntimeStatus, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageManagerService interface should be implemented by a container image
0000000000000000000000000000000000000000;;	// manager.
0000000000000000000000000000000000000000;;	// The methods should be thread-safe.
0000000000000000000000000000000000000000;;	type ImageManagerService interface {
0000000000000000000000000000000000000000;;		// ListImages lists the existing images.
0000000000000000000000000000000000000000;;		ListImages(filter *runtimeapi.ImageFilter) ([]*runtimeapi.Image, error)
0000000000000000000000000000000000000000;;		// ImageStatus returns the status of the image.
0000000000000000000000000000000000000000;;		ImageStatus(image *runtimeapi.ImageSpec) (*runtimeapi.Image, error)
0000000000000000000000000000000000000000;;		// PullImage pulls an image with the authentication config.
0000000000000000000000000000000000000000;;		PullImage(image *runtimeapi.ImageSpec, auth *runtimeapi.AuthConfig) (string, error)
0000000000000000000000000000000000000000;;		// RemoveImage removes the image.
0000000000000000000000000000000000000000;;		RemoveImage(image *runtimeapi.ImageSpec) error
0000000000000000000000000000000000000000;;		// ImageFsInfo returns information of the filesystem that is used to store images.
0000000000000000000000000000000000000000;;		ImageFsInfo(req *runtimeapi.ImageFsInfoRequest) (*runtimeapi.ImageFsInfoResponse, error)
0000000000000000000000000000000000000000;;	}
