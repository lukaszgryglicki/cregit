0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a246fa85333e4846efcf8fd0f6bf9ba93715dd18;pkg/kubelet/container/kuberuntime.go[pkg/kubelet/container/kuberuntime.go][pkg/kubelet/apis/cri/testing/fake_runtime_service.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		version = "0.1.0"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FakeRuntimeName  = "fakeRuntime"
0000000000000000000000000000000000000000;;		FakePodSandboxIP = "192.168.192.168"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakePodSandbox struct {
0000000000000000000000000000000000000000;;		// PodSandboxStatus contains the runtime information for a sandbox.
0000000000000000000000000000000000000000;;		runtimeapi.PodSandboxStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeContainer struct {
0000000000000000000000000000000000000000;;		// ContainerStatus contains the runtime information for a container.
0000000000000000000000000000000000000000;;		runtimeapi.ContainerStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the sandbox id of this container
0000000000000000000000000000000000000000;;		SandboxID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeRuntimeService struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Called []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FakeStatus *runtimeapi.RuntimeStatus
0000000000000000000000000000000000000000;;		Containers map[string]*FakeContainer
0000000000000000000000000000000000000000;;		Sandboxes  map[string]*FakePodSandbox
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) SetFakeSandboxes(sandboxes []*FakePodSandbox) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Sandboxes = make(map[string]*FakePodSandbox)
0000000000000000000000000000000000000000;;		for _, sandbox := range sandboxes {
0000000000000000000000000000000000000000;;			sandboxID := sandbox.Id
0000000000000000000000000000000000000000;;			r.Sandboxes[sandboxID] = sandbox
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) SetFakeContainers(containers []*FakeContainer) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Containers = make(map[string]*FakeContainer)
0000000000000000000000000000000000000000;;		for _, c := range containers {
0000000000000000000000000000000000000000;;			containerID := c.Id
0000000000000000000000000000000000000000;;			r.Containers[containerID] = c
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) AssertCalls(calls []string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(calls, r.Called) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected %#v, got %#v", calls, r.Called)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeRuntimeService() *FakeRuntimeService {
0000000000000000000000000000000000000000;;		return &FakeRuntimeService{
0000000000000000000000000000000000000000;;			Called:     make([]string, 0),
0000000000000000000000000000000000000000;;			Containers: make(map[string]*FakeContainer),
0000000000000000000000000000000000000000;;			Sandboxes:  make(map[string]*FakePodSandbox),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) Version(apiVersion string) (*runtimeapi.VersionResponse, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "Version")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &runtimeapi.VersionResponse{
0000000000000000000000000000000000000000;;			Version:           version,
0000000000000000000000000000000000000000;;			RuntimeName:       FakeRuntimeName,
0000000000000000000000000000000000000000;;			RuntimeVersion:    version,
0000000000000000000000000000000000000000;;			RuntimeApiVersion: version,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) Status() (*runtimeapi.RuntimeStatus, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "Status")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r.FakeStatus, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) RunPodSandbox(config *runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "RunPodSandbox")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PodSandboxID should be randomized for real container runtime, but here just use
0000000000000000000000000000000000000000;;		// fixed name from BuildSandboxName() for easily making fake sandboxes.
0000000000000000000000000000000000000000;;		podSandboxID := BuildSandboxName(config.Metadata)
0000000000000000000000000000000000000000;;		createdAt := time.Now().UnixNano()
0000000000000000000000000000000000000000;;		r.Sandboxes[podSandboxID] = &FakePodSandbox{
0000000000000000000000000000000000000000;;			PodSandboxStatus: runtimeapi.PodSandboxStatus{
0000000000000000000000000000000000000000;;				Id:        podSandboxID,
0000000000000000000000000000000000000000;;				Metadata:  config.Metadata,
0000000000000000000000000000000000000000;;				State:     runtimeapi.PodSandboxState_SANDBOX_READY,
0000000000000000000000000000000000000000;;				CreatedAt: createdAt,
0000000000000000000000000000000000000000;;				Network: &runtimeapi.PodSandboxNetworkStatus{
0000000000000000000000000000000000000000;;					Ip: FakePodSandboxIP,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Labels:      config.Labels,
0000000000000000000000000000000000000000;;				Annotations: config.Annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return podSandboxID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) StopPodSandbox(podSandboxID string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "StopPodSandbox")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s, ok := r.Sandboxes[podSandboxID]; ok {
0000000000000000000000000000000000000000;;			s.State = runtimeapi.PodSandboxState_SANDBOX_NOTREADY
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return fmt.Errorf("pod sandbox %s not found", podSandboxID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) RemovePodSandbox(podSandboxID string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "RemovePodSandbox")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove the pod sandbox
0000000000000000000000000000000000000000;;		delete(r.Sandboxes, podSandboxID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) PodSandboxStatus(podSandboxID string) (*runtimeapi.PodSandboxStatus, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "PodSandboxStatus")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, ok := r.Sandboxes[podSandboxID]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("pod sandbox %q not found", podSandboxID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status := s.PodSandboxStatus
0000000000000000000000000000000000000000;;		return &status, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ListPodSandbox(filter *runtimeapi.PodSandboxFilter) ([]*runtimeapi.PodSandbox, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "ListPodSandbox")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := make([]*runtimeapi.PodSandbox, 0)
0000000000000000000000000000000000000000;;		for id, s := range r.Sandboxes {
0000000000000000000000000000000000000000;;			if filter != nil {
0000000000000000000000000000000000000000;;				if filter.Id != "" && filter.Id != id {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if filter.State != nil && filter.GetState().State != s.State {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if filter.LabelSelector != nil && !filterInLabels(filter.LabelSelector, s.GetLabels()) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result = append(result, &runtimeapi.PodSandbox{
0000000000000000000000000000000000000000;;				Id:          s.Id,
0000000000000000000000000000000000000000;;				Metadata:    s.Metadata,
0000000000000000000000000000000000000000;;				State:       s.State,
0000000000000000000000000000000000000000;;				CreatedAt:   s.CreatedAt,
0000000000000000000000000000000000000000;;				Labels:      s.Labels,
0000000000000000000000000000000000000000;;				Annotations: s.Annotations,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) PortForward(*runtimeapi.PortForwardRequest) (*runtimeapi.PortForwardResponse, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "PortForward")
0000000000000000000000000000000000000000;;		return &runtimeapi.PortForwardResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) CreateContainer(podSandboxID string, config *runtimeapi.ContainerConfig, sandboxConfig *runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "CreateContainer")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ContainerID should be randomized for real container runtime, but here just use
0000000000000000000000000000000000000000;;		// fixed BuildContainerName() for easily making fake containers.
0000000000000000000000000000000000000000;;		containerID := BuildContainerName(config.Metadata, podSandboxID)
0000000000000000000000000000000000000000;;		createdAt := time.Now().UnixNano()
0000000000000000000000000000000000000000;;		createdState := runtimeapi.ContainerState_CONTAINER_CREATED
0000000000000000000000000000000000000000;;		imageRef := config.Image.Image
0000000000000000000000000000000000000000;;		r.Containers[containerID] = &FakeContainer{
0000000000000000000000000000000000000000;;			ContainerStatus: runtimeapi.ContainerStatus{
0000000000000000000000000000000000000000;;				Id:          containerID,
0000000000000000000000000000000000000000;;				Metadata:    config.Metadata,
0000000000000000000000000000000000000000;;				Image:       config.Image,
0000000000000000000000000000000000000000;;				ImageRef:    imageRef,
0000000000000000000000000000000000000000;;				CreatedAt:   createdAt,
0000000000000000000000000000000000000000;;				State:       createdState,
0000000000000000000000000000000000000000;;				Labels:      config.Labels,
0000000000000000000000000000000000000000;;				Annotations: config.Annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			SandboxID: podSandboxID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return containerID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) StartContainer(containerID string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "StartContainer")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c, ok := r.Containers[containerID]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("container %s not found", containerID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set container to running.
0000000000000000000000000000000000000000;;		c.State = runtimeapi.ContainerState_CONTAINER_RUNNING
0000000000000000000000000000000000000000;;		c.StartedAt = time.Now().UnixNano()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) StopContainer(containerID string, timeout int64) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "StopContainer")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c, ok := r.Containers[containerID]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("container %q not found", containerID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set container to exited state.
0000000000000000000000000000000000000000;;		finishedAt := time.Now().UnixNano()
0000000000000000000000000000000000000000;;		exitedState := runtimeapi.ContainerState_CONTAINER_EXITED
0000000000000000000000000000000000000000;;		c.State = exitedState
0000000000000000000000000000000000000000;;		c.FinishedAt = finishedAt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) RemoveContainer(containerID string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "RemoveContainer")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove the container
0000000000000000000000000000000000000000;;		delete(r.Containers, containerID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ListContainers(filter *runtimeapi.ContainerFilter) ([]*runtimeapi.Container, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "ListContainers")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := make([]*runtimeapi.Container, 0)
0000000000000000000000000000000000000000;;		for _, s := range r.Containers {
0000000000000000000000000000000000000000;;			if filter != nil {
0000000000000000000000000000000000000000;;				if filter.Id != "" && filter.Id != s.Id {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if filter.PodSandboxId != "" && filter.PodSandboxId != s.SandboxID {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if filter.State != nil && filter.GetState().State != s.State {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if filter.LabelSelector != nil && !filterInLabels(filter.LabelSelector, s.GetLabels()) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result = append(result, &runtimeapi.Container{
0000000000000000000000000000000000000000;;				Id:           s.Id,
0000000000000000000000000000000000000000;;				CreatedAt:    s.CreatedAt,
0000000000000000000000000000000000000000;;				PodSandboxId: s.SandboxID,
0000000000000000000000000000000000000000;;				Metadata:     s.Metadata,
0000000000000000000000000000000000000000;;				State:        s.State,
0000000000000000000000000000000000000000;;				Image:        s.Image,
0000000000000000000000000000000000000000;;				ImageRef:     s.ImageRef,
0000000000000000000000000000000000000000;;				Labels:       s.Labels,
0000000000000000000000000000000000000000;;				Annotations:  s.Annotations,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ContainerStatus(containerID string) (*runtimeapi.ContainerStatus, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "ContainerStatus")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c, ok := r.Containers[containerID]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("container %q not found", containerID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status := c.ContainerStatus
0000000000000000000000000000000000000000;;		return &status, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ExecSync(containerID string, cmd []string, timeout time.Duration) (stdout []byte, stderr []byte, err error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "ExecSync")
0000000000000000000000000000000000000000;;		return nil, nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) Exec(*runtimeapi.ExecRequest) (*runtimeapi.ExecResponse, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "Exec")
0000000000000000000000000000000000000000;;		return &runtimeapi.ExecResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) Attach(req *runtimeapi.AttachRequest) (*runtimeapi.AttachResponse, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Called = append(r.Called, "Attach")
0000000000000000000000000000000000000000;;		return &runtimeapi.AttachResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) UpdateRuntimeConfig(runtimeCOnfig *runtimeapi.RuntimeConfig) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ContainerStats(req *runtimeapi.ContainerStatsRequest) (*runtimeapi.ContainerStatsResponse, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FakeRuntimeService) ListContainerStats(req *runtimeapi.ListContainerStatsRequest) (*runtimeapi.ListContainerStatsResponse, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
