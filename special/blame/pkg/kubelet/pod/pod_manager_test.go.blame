0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d5235d9b54932acca15526ef5fe86f33975fdb66;pkg/kubelet/pod_manager_test.go[pkg/kubelet/pod_manager_test.go][pkg/kubelet/pod/pod_manager_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/configmap"
0000000000000000000000000000000000000000;;		podtest "k8s.io/kubernetes/pkg/kubelet/pod/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/secret"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stub out mirror client for testing purpose.
0000000000000000000000000000000000000000;;	func newTestManager() (*basicManager, *podtest.FakeMirrorClient) {
0000000000000000000000000000000000000000;;		fakeMirrorClient := podtest.NewFakeMirrorClient()
0000000000000000000000000000000000000000;;		secretManager := secret.NewFakeManager()
0000000000000000000000000000000000000000;;		configMapManager := configmap.NewFakeManager()
0000000000000000000000000000000000000000;;		manager := NewBasicPodManager(fakeMirrorClient, secretManager, configMapManager).(*basicManager)
0000000000000000000000000000000000000000;;		return manager, fakeMirrorClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tests that pods/maps are properly set after the pod update, and the basic
0000000000000000000000000000000000000000;;	// methods work correctly.
0000000000000000000000000000000000000000;;	func TestGetSetPods(t *testing.T) {
0000000000000000000000000000000000000000;;		mirrorPod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID:       "987654321",
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					kubetypes.ConfigSourceAnnotationKey: "api",
0000000000000000000000000000000000000000;;					kubetypes.ConfigMirrorAnnotationKey: "mirror",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		staticPod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID:         "123456789",
0000000000000000000000000000000000000000;;				Name:        "bar",
0000000000000000000000000000000000000000;;				Namespace:   "default",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{kubetypes.ConfigSourceAnnotationKey: "file"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedPods := []*v1.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					UID:         "999999999",
0000000000000000000000000000000000000000;;					Name:        "taco",
0000000000000000000000000000000000000000;;					Namespace:   "default",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{kubetypes.ConfigSourceAnnotationKey: "api"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			staticPod,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updates := append(expectedPods, mirrorPod)
0000000000000000000000000000000000000000;;		podManager, _ := newTestManager()
0000000000000000000000000000000000000000;;		podManager.SetPods(updates)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Tests that all regular pods are recorded correctly.
0000000000000000000000000000000000000000;;		actualPods := podManager.GetPods()
0000000000000000000000000000000000000000;;		if len(actualPods) != len(expectedPods) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %d pods, got %d pods; expected pods %#v, got pods %#v", len(expectedPods), len(actualPods),
0000000000000000000000000000000000000000;;				expectedPods, actualPods)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, expected := range expectedPods {
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for _, actual := range actualPods {
0000000000000000000000000000000000000000;;				if actual.UID == expected.UID {
0000000000000000000000000000000000000000;;					if !reflect.DeepEqual(&expected, &actual) {
0000000000000000000000000000000000000000;;						t.Errorf("pod was recorded incorrectly. expect: %#v, got: %#v", expected, actual)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				t.Errorf("pod %q was not found in %#v", expected.UID, actualPods)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Tests UID translation works as expected.
0000000000000000000000000000000000000000;;		if uid := podManager.TranslatePodUID(mirrorPod.UID); uid != staticPod.UID {
0000000000000000000000000000000000000000;;			t.Errorf("unable to translate UID %q to the static POD's UID %q; %#v",
0000000000000000000000000000000000000000;;				mirrorPod.UID, staticPod.UID, podManager.mirrorPodByUID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test the basic Get methods.
0000000000000000000000000000000000000000;;		actualPod, ok := podManager.GetPodByFullName("bar_default")
0000000000000000000000000000000000000000;;		if !ok || !reflect.DeepEqual(actualPod, staticPod) {
0000000000000000000000000000000000000000;;			t.Errorf("unable to get pod by full name; expected: %#v, got: %#v", staticPod, actualPod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualPod, ok = podManager.GetPodByName("default", "bar")
0000000000000000000000000000000000000000;;		if !ok || !reflect.DeepEqual(actualPod, staticPod) {
0000000000000000000000000000000000000000;;			t.Errorf("unable to get pod by name; expected: %#v, got: %#v", staticPod, actualPod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeletePods(t *testing.T) {
0000000000000000000000000000000000000000;;		mirrorPod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID:       types.UID("mirror-pod-uid"),
0000000000000000000000000000000000000000;;				Name:      "mirror-static-pod-name",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					kubetypes.ConfigSourceAnnotationKey: "api",
0000000000000000000000000000000000000000;;					kubetypes.ConfigMirrorAnnotationKey: "mirror",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		staticPod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID:         types.UID("static-pod-uid"),
0000000000000000000000000000000000000000;;				Name:        "mirror-static-pod-name",
0000000000000000000000000000000000000000;;				Namespace:   metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{kubetypes.ConfigSourceAnnotationKey: "file"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedPods := []*v1.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					UID:         types.UID("extra-pod-uid"),
0000000000000000000000000000000000000000;;					Name:        "extra-pod-name",
0000000000000000000000000000000000000000;;					Namespace:   metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{kubetypes.ConfigSourceAnnotationKey: "api"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			staticPod,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updates := append(expectedPods, mirrorPod)
0000000000000000000000000000000000000000;;		podManager, _ := newTestManager()
0000000000000000000000000000000000000000;;		podManager.SetPods(updates)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podManager.DeletePod(staticPod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualPods := podManager.GetPods()
0000000000000000000000000000000000000000;;		if len(actualPods) == len(expectedPods) {
0000000000000000000000000000000000000000;;			t.Fatalf("Run DeletePod() error, expected %d pods, got %d pods; ", len(expectedPods)-1, len(actualPods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		orphanedMirrorPodNames := podManager.getOrphanedMirrorPodNames()
0000000000000000000000000000000000000000;;		expectedOrphanedMirrorPodNameNum := 1
0000000000000000000000000000000000000000;;		if len(orphanedMirrorPodNames) != expectedOrphanedMirrorPodNameNum {
0000000000000000000000000000000000000000;;			t.Fatalf("Run getOrphanedMirrorPodNames() error, expected %d orphaned mirror pods, got %d orphaned mirror pods; ", expectedOrphanedMirrorPodNameNum, len(orphanedMirrorPodNames))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedOrphanedMirrorPodName := mirrorPod.Name + "_" + mirrorPod.Namespace
0000000000000000000000000000000000000000;;		if orphanedMirrorPodNames[0] != expectedOrphanedMirrorPodName {
0000000000000000000000000000000000000000;;			t.Fatalf("Run getOrphanedMirrorPodNames() error, expected orphaned mirror pod name : %s, got orphaned mirror pod name %s; ", expectedOrphanedMirrorPodName, orphanedMirrorPodNames[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
