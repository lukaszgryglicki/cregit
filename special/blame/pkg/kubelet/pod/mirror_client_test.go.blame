0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
132eb9f8b03bf035dc7955dc09b7c0641194ce3a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParsePodFullName(t *testing.T) {
0000000000000000000000000000000000000000;;		type nameTuple struct {
0000000000000000000000000000000000000000;;			Name      string
0000000000000000000000000000000000000000;;			Namespace string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successfulCases := map[string]nameTuple{
0000000000000000000000000000000000000000;;			"bar_foo":         {Name: "bar", Namespace: "foo"},
0000000000000000000000000000000000000000;;			"bar.org_foo.com": {Name: "bar.org", Namespace: "foo.com"},
0000000000000000000000000000000000000000;;			"bar-bar_foo":     {Name: "bar-bar", Namespace: "foo"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		failedCases := []string{"barfoo", "bar_foo_foo", "", "bar_", "_foo"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for podFullName, expected := range successfulCases {
0000000000000000000000000000000000000000;;			name, namespace, err := kubecontainer.ParsePodFullName(podFullName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when parsing the full name: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name != expected.Name || namespace != expected.Namespace {
0000000000000000000000000000000000000000;;				t.Errorf("expected name %q, namespace %q; got name %q, namespace %q",
0000000000000000000000000000000000000000;;					expected.Name, expected.Namespace, name, namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, podFullName := range failedCases {
0000000000000000000000000000000000000000;;			_, _, err := kubecontainer.ParsePodFullName(podFullName)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error when parsing the full name, got none")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
