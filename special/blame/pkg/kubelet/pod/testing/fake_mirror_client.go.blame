0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
df1b082e031bb23a5b73c359f1970728dfc10531;pkg/kubelet/mirror_manager_test.go[pkg/kubelet/mirror_manager_test.go][pkg/kubelet/pod/testing/fake_mirror_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeMirrorClient struct {
0000000000000000000000000000000000000000;;		mirrorPodLock sync.RWMutex
0000000000000000000000000000000000000000;;		// Note that a real mirror manager does not store the mirror pods in
0000000000000000000000000000000000000000;;		// itself. This fake manager does this to track calls.
0000000000000000000000000000000000000000;;		mirrorPods   sets.String
0000000000000000000000000000000000000000;;		createCounts map[string]int
0000000000000000000000000000000000000000;;		deleteCounts map[string]int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeMirrorClient() *FakeMirrorClient {
0000000000000000000000000000000000000000;;		m := FakeMirrorClient{}
0000000000000000000000000000000000000000;;		m.mirrorPods = sets.NewString()
0000000000000000000000000000000000000000;;		m.createCounts = make(map[string]int)
0000000000000000000000000000000000000000;;		m.deleteCounts = make(map[string]int)
0000000000000000000000000000000000000000;;		return &m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) CreateMirrorPod(pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.Lock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.Unlock()
0000000000000000000000000000000000000000;;		podFullName := kubecontainer.GetPodFullName(pod)
0000000000000000000000000000000000000000;;		fmc.mirrorPods.Insert(podFullName)
0000000000000000000000000000000000000000;;		fmc.createCounts[podFullName]++
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) DeleteMirrorPod(podFullName string) error {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.Lock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.Unlock()
0000000000000000000000000000000000000000;;		fmc.mirrorPods.Delete(podFullName)
0000000000000000000000000000000000000000;;		fmc.deleteCounts[podFullName]++
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) HasPod(podFullName string) bool {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.RLock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.RUnlock()
0000000000000000000000000000000000000000;;		return fmc.mirrorPods.Has(podFullName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) NumOfPods() int {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.RLock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.RUnlock()
0000000000000000000000000000000000000000;;		return fmc.mirrorPods.Len()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) GetPods() []string {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.RLock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.RUnlock()
0000000000000000000000000000000000000000;;		return fmc.mirrorPods.List()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fmc *FakeMirrorClient) GetCounts(podFullName string) (int, int) {
0000000000000000000000000000000000000000;;		fmc.mirrorPodLock.RLock()
0000000000000000000000000000000000000000;;		defer fmc.mirrorPodLock.RUnlock()
0000000000000000000000000000000000000000;;		return fmc.createCounts[podFullName], fmc.deleteCounts[podFullName]
0000000000000000000000000000000000000000;;	}
