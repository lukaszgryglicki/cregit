0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e11d3ce096067ddfb1188991515b7d3797cef5e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sysctl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Namespace represents a kernel namespace name.
0000000000000000000000000000000000000000;;	type Namespace string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// the Linux IPC namespace
0000000000000000000000000000000000000000;;		IpcNamespace = Namespace("ipc")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the network namespace
0000000000000000000000000000000000000000;;		NetNamespace = Namespace("net")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the zero value if no namespace is known
0000000000000000000000000000000000000000;;		UnknownNamespace = Namespace("")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var namespaces = map[string]Namespace{
0000000000000000000000000000000000000000;;		"kernel.sem": IpcNamespace,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var prefixNamespaces = map[string]Namespace{
0000000000000000000000000000000000000000;;		"kernel.shm": IpcNamespace,
0000000000000000000000000000000000000000;;		"kernel.msg": IpcNamespace,
0000000000000000000000000000000000000000;;		"fs.mqueue.": IpcNamespace,
0000000000000000000000000000000000000000;;		"net.":       NetNamespace,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespacedBy returns the namespace of the Linux kernel for a sysctl, or
0000000000000000000000000000000000000000;;	// UnknownNamespace if the sysctl is not known to be namespaced.
0000000000000000000000000000000000000000;;	func NamespacedBy(val string) Namespace {
0000000000000000000000000000000000000000;;		if ns, found := namespaces[val]; found {
0000000000000000000000000000000000000000;;			return ns
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for p, ns := range prefixNamespaces {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(val, p) {
0000000000000000000000000000000000000000;;				return ns
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return UnknownNamespace
0000000000000000000000000000000000000000;;	}
