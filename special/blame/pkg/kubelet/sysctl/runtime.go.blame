0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e11d3ce096067ddfb1188991515b7d3797cef5e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sysctl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v1helper "k8s.io/kubernetes/pkg/api/v1/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/lifecycle"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UnsupportedReason = "SysctlUnsupported"
0000000000000000000000000000000000000000;;		// CRI uses semver-compatible API version, while docker does not
0000000000000000000000000000000000000000;;		// (e.g., 1.24). Append the version with a ".0".
0000000000000000000000000000000000000000;;		dockerMinimumAPIVersion = "1.24.0"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockerTypeName = "docker"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: The admission logic in this file is runtime-dependent. It should be
0000000000000000000000000000000000000000;;	// changed to be generic and CRI-compatible.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type runtimeAdmitHandler struct {
0000000000000000000000000000000000000000;;		result lifecycle.PodAdmitResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ lifecycle.PodAdmitHandler = &runtimeAdmitHandler{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRuntimeAdmitHandler returns a sysctlRuntimeAdmitHandler which checks whether
0000000000000000000000000000000000000000;;	// the given runtime support sysctls.
0000000000000000000000000000000000000000;;	func NewRuntimeAdmitHandler(runtime container.Runtime) (*runtimeAdmitHandler, error) {
0000000000000000000000000000000000000000;;		if runtime.Type() == dockerTypeName {
0000000000000000000000000000000000000000;;			v, err := runtime.APIVersion()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("failed to get runtime version: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// only Docker >= 1.12 supports sysctls
0000000000000000000000000000000000000000;;			c, err := v.Compare(dockerMinimumAPIVersion)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("failed to compare Docker version for sysctl support: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c >= 0 {
0000000000000000000000000000000000000000;;				return &runtimeAdmitHandler{
0000000000000000000000000000000000000000;;					result: lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;						Admit: true,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return &runtimeAdmitHandler{
0000000000000000000000000000000000000000;;				result: lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;					Admit:   false,
0000000000000000000000000000000000000000;;					Reason:  UnsupportedReason,
0000000000000000000000000000000000000000;;					Message: "Docker before 1.12 does not support sysctls",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for other runtimes like rkt sysctls are not supported
0000000000000000000000000000000000000000;;		return &runtimeAdmitHandler{
0000000000000000000000000000000000000000;;			result: lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;				Admit:   false,
0000000000000000000000000000000000000000;;				Reason:  UnsupportedReason,
0000000000000000000000000000000000000000;;				Message: fmt.Sprintf("runtime %v does not support sysctls", runtime.Type()),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admit checks whether the runtime supports sysctls.
0000000000000000000000000000000000000000;;	func (w *runtimeAdmitHandler) Admit(attrs *lifecycle.PodAdmitAttributes) lifecycle.PodAdmitResult {
0000000000000000000000000000000000000000;;		sysctls, unsafeSysctls, err := v1helper.SysctlsFromPodAnnotations(attrs.Pod.Annotations)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;				Admit:   false,
0000000000000000000000000000000000000000;;				Reason:  AnnotationInvalidReason,
0000000000000000000000000000000000000000;;				Message: fmt.Sprintf("invalid sysctl annotation: %v", err),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(sysctls)+len(unsafeSysctls) > 0 {
0000000000000000000000000000000000000000;;			return w.result
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;			Admit: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
