0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e11d3ce096067ddfb1188991515b7d3797cef5e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sysctl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		v1helper "k8s.io/kubernetes/pkg/api/v1/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		extvalidation "k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/lifecycle"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AnnotationInvalidReason = "InvalidSysctlAnnotation"
0000000000000000000000000000000000000000;;		ForbiddenReason         = "SysctlForbidden"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SafeSysctlWhitelist returns the whitelist of safe sysctls and safe sysctl patterns (ending in *).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A sysctl is called safe iff
0000000000000000000000000000000000000000;;	// - it is namespaced in the container or the pod
0000000000000000000000000000000000000000;;	// - it is isolated, i.e. has no influence on any other pod on the same node.
0000000000000000000000000000000000000000;;	func SafeSysctlWhitelist() []string {
0000000000000000000000000000000000000000;;		return []string{
0000000000000000000000000000000000000000;;			"kernel.shm_rmid_forced",
0000000000000000000000000000000000000000;;			"net.ipv4.ip_local_port_range",
0000000000000000000000000000000000000000;;			"net.ipv4.tcp_syncookies",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Whitelist provides a list of allowed sysctls and sysctl patterns (ending in *)
0000000000000000000000000000000000000000;;	// and a function to check whether a given sysctl matches this list.
0000000000000000000000000000000000000000;;	type Whitelist interface {
0000000000000000000000000000000000000000;;		// Validate checks that all sysctls given in a v1.SysctlsPodAnnotationKey annotation
0000000000000000000000000000000000000000;;		// are valid according to the whitelist.
0000000000000000000000000000000000000000;;		Validate(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// patternWhitelist takes a list of sysctls or sysctl patterns (ending in *) and
0000000000000000000000000000000000000000;;	// checks validity via a sysctl and prefix map, rejecting those which are not known
0000000000000000000000000000000000000000;;	// to be namespaced.
0000000000000000000000000000000000000000;;	type patternWhitelist struct {
0000000000000000000000000000000000000000;;		sysctls       map[string]Namespace
0000000000000000000000000000000000000000;;		prefixes      map[string]Namespace
0000000000000000000000000000000000000000;;		annotationKey string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ lifecycle.PodAdmitHandler = &patternWhitelist{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewWhitelist creates a new Whitelist from a list of sysctls and sysctl pattern (ending in *).
0000000000000000000000000000000000000000;;	func NewWhitelist(patterns []string, annotationKey string) (*patternWhitelist, error) {
0000000000000000000000000000000000000000;;		w := &patternWhitelist{
0000000000000000000000000000000000000000;;			sysctls:       map[string]Namespace{},
0000000000000000000000000000000000000000;;			prefixes:      map[string]Namespace{},
0000000000000000000000000000000000000000;;			annotationKey: annotationKey,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, s := range patterns {
0000000000000000000000000000000000000000;;			if !extvalidation.IsValidSysctlPattern(s) {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("sysctl %q must have at most %d characters and match regex %s",
0000000000000000000000000000000000000000;;					s,
0000000000000000000000000000000000000000;;					validation.SysctlMaxLength,
0000000000000000000000000000000000000000;;					extvalidation.SysctlPatternFmt,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasSuffix(s, "*") {
0000000000000000000000000000000000000000;;				prefix := s[:len(s)-1]
0000000000000000000000000000000000000000;;				ns := NamespacedBy(prefix)
0000000000000000000000000000000000000000;;				if ns == UnknownNamespace {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("the sysctls %q are not known to be namespaced", s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.prefixes[prefix] = ns
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				ns := NamespacedBy(s)
0000000000000000000000000000000000000000;;				if ns == UnknownNamespace {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("the sysctl %q are not known to be namespaced", s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.sysctls[s] = ns
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return w, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validateSysctl checks that a sysctl is whitelisted because it is known
0000000000000000000000000000000000000000;;	// to be namespaced by the Linux kernel. Note that being whitelisted is required, but not
0000000000000000000000000000000000000000;;	// sufficient: the container runtime might have a stricter check and refuse to launch a pod.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The parameters hostNet and hostIPC are used to forbid sysctls for pod sharing the
0000000000000000000000000000000000000000;;	// respective namespaces with the host. This check is only possible for sysctls on
0000000000000000000000000000000000000000;;	// the static default whitelist, not those on the custom whitelist provided by the admin.
0000000000000000000000000000000000000000;;	func (w *patternWhitelist) validateSysctl(sysctl string, hostNet, hostIPC bool) error {
0000000000000000000000000000000000000000;;		nsErrorFmt := "%q not allowed with host %s enabled"
0000000000000000000000000000000000000000;;		if ns, found := w.sysctls[sysctl]; found {
0000000000000000000000000000000000000000;;			if ns == IpcNamespace && hostIPC {
0000000000000000000000000000000000000000;;				return fmt.Errorf(nsErrorFmt, sysctl, ns)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ns == NetNamespace && hostNet {
0000000000000000000000000000000000000000;;				return fmt.Errorf(nsErrorFmt, sysctl, ns)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for p, ns := range w.prefixes {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(sysctl, p) {
0000000000000000000000000000000000000000;;				if ns == IpcNamespace && hostIPC {
0000000000000000000000000000000000000000;;					return fmt.Errorf(nsErrorFmt, sysctl, ns)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ns == NetNamespace && hostNet {
0000000000000000000000000000000000000000;;					return fmt.Errorf(nsErrorFmt, sysctl, ns)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("%q not whitelisted", sysctl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admit checks that all sysctls given in a v1.SysctlsPodAnnotationKey annotation
0000000000000000000000000000000000000000;;	// are valid according to the whitelist.
0000000000000000000000000000000000000000;;	func (w *patternWhitelist) Admit(attrs *lifecycle.PodAdmitAttributes) lifecycle.PodAdmitResult {
0000000000000000000000000000000000000000;;		pod := attrs.Pod
0000000000000000000000000000000000000000;;		a := pod.Annotations[w.annotationKey]
0000000000000000000000000000000000000000;;		if a == "" {
0000000000000000000000000000000000000000;;			return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;				Admit: true,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sysctls, err := v1helper.SysctlsFromPodAnnotation(a)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;				Admit:   false,
0000000000000000000000000000000000000000;;				Reason:  AnnotationInvalidReason,
0000000000000000000000000000000000000000;;				Message: fmt.Sprintf("invalid %s annotation: %v", w.annotationKey, err),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var hostNet, hostIPC bool
0000000000000000000000000000000000000000;;		if pod.Spec.SecurityContext != nil {
0000000000000000000000000000000000000000;;			hostNet = pod.Spec.HostNetwork
0000000000000000000000000000000000000000;;			hostIPC = pod.Spec.HostIPC
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range sysctls {
0000000000000000000000000000000000000000;;			if err := w.validateSysctl(s.Name, hostNet, hostIPC); err != nil {
0000000000000000000000000000000000000000;;				return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;					Admit:   false,
0000000000000000000000000000000000000000;;					Reason:  ForbiddenReason,
0000000000000000000000000000000000000000;;					Message: fmt.Sprintf("forbidden sysctl: %v", err),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lifecycle.PodAdmitResult{
0000000000000000000000000000000000000000;;			Admit: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
