0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f3056e072b415333fc98a56dca4f7c3ce0500039;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package certificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/cert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSymlinkExistingFileError(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-update-symlink")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-current.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := fileStore{
0000000000000000000000000000000000000000;;			certDirectory:  dir,
0000000000000000000000000000000000000000;;			pairNamePrefix: "kubelet",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.updateSymlink(pairFile); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got no error, wanted to fail updating the symlink because there is a file there.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSymlinkNewFileNotExist(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-update-symlink")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		oldPairFile := filepath.Join(dir, "kubelet-oldpair.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(oldPairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", oldPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := fileStore{
0000000000000000000000000000000000000000;;			certDirectory:  dir,
0000000000000000000000000000000000000000;;			pairNamePrefix: "kubelet",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.updateSymlink(oldPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, wanted successful update of the symlink to point to %q", err, oldPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(oldPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, wanted file %q to be there.", oldPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		currentPairFile := filepath.Join(dir, "kubelet-current.pem")
0000000000000000000000000000000000000000;;		if fi, err := os.Lstat(currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, wanted file %q to be there", currentPairFile, err)
0000000000000000000000000000000000000000;;		} else if fi.Mode()&os.ModeSymlink != os.ModeSymlink {
0000000000000000000000000000000000000000;;			t.Errorf("Got %q not a symlink.", currentPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newPairFile := filepath.Join(dir, "kubelet-newpair.pem")
0000000000000000000000000000000000000000;;		if err := s.updateSymlink(newPairFile); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got no error, wanted to fail updating the symlink the file %q does not exist.", newPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSymlinkNoSymlink(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-update-symlink")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-newfile.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := fileStore{
0000000000000000000000000000000000000000;;			certDirectory:  dir,
0000000000000000000000000000000000000000;;			pairNamePrefix: "kubelet",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.updateSymlink(pairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got error %v, wanted a new symlink to be created", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(pairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got error %v, wanted file %q to be there", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currentPairFile := filepath.Join(dir, "kubelet-current.pem")
0000000000000000000000000000000000000000;;		if fi, err := os.Lstat(currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, wanted %q to be there", currentPairFile, err)
0000000000000000000000000000000000000000;;		} else if fi.Mode()&os.ModeSymlink != os.ModeSymlink {
0000000000000000000000000000000000000000;;			t.Errorf("%q not a symlink, wanted a symlink.", currentPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSymlinkReplaceExistingSymlink(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-update-symlink")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		oldPairFile := filepath.Join(dir, prefix+"-oldfile.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(oldPairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", oldPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newPairFile := filepath.Join(dir, prefix+"-newfile.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(newPairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", newPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currentPairFile := filepath.Join(dir, prefix+"-current.pem")
0000000000000000000000000000000000000000;;		if err := os.Symlink(oldPairFile, currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create a symlink from %q to %q: %v", currentPairFile, oldPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resolved, err := os.Readlink(currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v when attempting to resolve symlink %q", err, currentPairFile)
0000000000000000000000000000000000000000;;		} else if resolved != oldPairFile {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %q as resolution of symlink %q, wanted %q", resolved, currentPairFile, oldPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := fileStore{
0000000000000000000000000000000000000000;;			certDirectory:  dir,
0000000000000000000000000000000000000000;;			pairNamePrefix: prefix,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.updateSymlink(newPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got error %v, wanted a new symlink to be created", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(oldPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got error %v, wanted file %q to be there", oldPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(newPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got error %v, wanted file %q to be there", newPairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fi, err := os.Lstat(currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, wanted %q to be there", currentPairFile, err)
0000000000000000000000000000000000000000;;		} else if fi.Mode()&os.ModeSymlink != os.ModeSymlink {
0000000000000000000000000000000000000000;;			t.Errorf("%q not a symlink, wanted a symlink.", currentPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resolved, err := os.Readlink(currentPairFile); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v when attempting to resolve symlink %q", err, currentPairFile)
0000000000000000000000000000000000000000;;		} else if resolved != newPairFile {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %q as resolution of symlink %q, wanted %q", resolved, currentPairFile, newPairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadCertKeyBlocksNoFile(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-load-cert-key-blocks")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-pair.pem")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := loadCertKeyBlocks(pairFile); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got no error, but expected %q not found.", pairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadCertKeyBlocksEmptyFile(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-load-cert-key-blocks")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-pair.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, nil, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := loadCertKeyBlocks(pairFile); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got no error, but expected %q not found.", pairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadCertKeyBlocksPartialFile(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-load-cert-key-blocks")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-pair.pem")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, storeCertData.certificatePEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := loadCertKeyBlocks(pairFile); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got no error, but expected %q invalid.", pairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadCertKeyBlocks(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-load-cert-key-blocks")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-pair.pem")
0000000000000000000000000000000000000000;;		data := append(storeCertData.certificatePEM, []byte("\n")...)
0000000000000000000000000000000000000000;;		data = append(data, storeCertData.keyPEM...)
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, data, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certBlock, keyBlock, err := loadCertKeyBlocks(pairFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v, but expected no error.", pairFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if certBlock.Type != cert.CertificateBlockType {
0000000000000000000000000000000000000000;;			t.Errorf("Got %q loaded from the pair file, expected a %q.", certBlock.Type, cert.CertificateBlockType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if keyBlock.Type != cert.RSAPrivateKeyBlockType {
0000000000000000000000000000000000000000;;			t.Errorf("Got %q loaded from the pair file, expected a %q.", keyBlock.Type, cert.RSAPrivateKeyBlockType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadFile(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-load-cert-key-blocks")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, "kubelet-pair.pem")
0000000000000000000000000000000000000000;;		data := append(storeCertData.certificatePEM, []byte("\n")...)
0000000000000000000000000000000000000000;;		data = append(data, storeCertData.keyPEM...)
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, data, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := loadFile(pairFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Could not load certificate from disk: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("There was no error, but no certificate data was returned.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert.Leaf == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got an empty leaf, expected private data.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateNoRotation(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet-server"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		keyFile := filepath.Join(dir, "kubelet.key")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile, storeCertData.keyPEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", keyFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		certFile := filepath.Join(dir, "kubelet.crt")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile, storeCertData.certificatePEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", certFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, err := NewFileStore(prefix, dir, dir, certFile, keyFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v while creating a new store.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := s.Update(storeCertData.certificatePEM, storeCertData.keyPEM)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got %v while updating certificate store.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got nil certificate, expected something real.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateRotation(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet-server"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		keyFile := filepath.Join(dir, "kubelet.key")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile, storeCertData.keyPEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", keyFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		certFile := filepath.Join(dir, "kubelet.crt")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile, storeCertData.certificatePEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", certFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, err := NewFileStore(prefix, dir, dir, certFile, keyFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v while creating a new store.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := s.Update(storeCertData.certificatePEM, storeCertData.keyPEM)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v while updating certificate store.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got nil certificate, expected something real.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateWithBadCertKeyData(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet-server"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		keyFile := filepath.Join(dir, "kubelet.key")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile, storeCertData.keyPEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", keyFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		certFile := filepath.Join(dir, "kubelet.crt")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile, storeCertData.certificatePEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", certFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, err := NewFileStore(prefix, dir, dir, certFile, keyFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v while creating a new store.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := s.Update([]byte{0, 0}, storeCertData.keyPEM)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got no error while updating certificate store with invalid data.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got %v certificate returned from the update, expected nil.", cert)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentPairFile(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet-server"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		pairFile := filepath.Join(dir, prefix+"-pair.pem")
0000000000000000000000000000000000000000;;		data := append(storeCertData.certificatePEM, []byte("\n")...)
0000000000000000000000000000000000000000;;		data = append(data, storeCertData.keyPEM...)
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(pairFile, data, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currentFile := filepath.Join(dir, prefix+"-current.pem")
0000000000000000000000000000000000000000;;		if err := os.Symlink(pairFile, currentFile); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create a symlink from %q to %q: %v", currentFile, pairFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store, err := NewFileStore("kubelet-server", dir, dir, "", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to initialize certificate store: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := store.Current()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Could not load certificate from disk: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("There was no error, but no certificate data was returned.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert.Leaf == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got an empty leaf, expected private data.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentCertKeyFiles(t *testing.T) {
0000000000000000000000000000000000000000;;		prefix := "kubelet-server"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		certFile := filepath.Join(dir, "kubelet.crt")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile, storeCertData.certificatePEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", certFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keyFile := filepath.Join(dir, "kubelet.key")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile, storeCertData.keyPEM, 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the file %q: %v", keyFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store, err := NewFileStore(prefix, dir, dir, certFile, keyFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to initialize certificate store: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := store.Current()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Could not load certificate from disk: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("There was no error, but no certificate data was returned.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert.Leaf == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got an empty leaf, expected private data.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentNoFiles(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "k8s-test-certstore-current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create the test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to clean up test directory %q: %v", dir, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store, err := NewFileStore("kubelet-server", dir, dir, "", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to initialize certificate store: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := store.Current()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got no error, expected an error because the cert/key files don't exist.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := err.(*NoCertKeyError); !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Got error %v, expected NoCertKeyError.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Got certificate, expected no certificate because the cert/key files don't exist.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
