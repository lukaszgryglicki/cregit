0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8253e2578105f20f85f6eb57c24b08c01fdab4f6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fieldpath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatMap formats map[string]string to a string.
0000000000000000000000000000000000000000;;	func FormatMap(m map[string]string) (fmtStr string) {
0000000000000000000000000000000000000000;;		for key, value := range m {
0000000000000000000000000000000000000000;;			fmtStr += fmt.Sprintf("%v=%q\n", key, value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmtStr = strings.TrimSuffix(fmtStr, "\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractFieldPathAsString extracts the field from the given object
0000000000000000000000000000000000000000;;	// and returns it as a string.  The object must be a pointer to an
0000000000000000000000000000000000000000;;	// API type.
0000000000000000000000000000000000000000;;	func ExtractFieldPathAsString(obj interface{}, fieldPath string) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch fieldPath {
0000000000000000000000000000000000000000;;		case "metadata.annotations":
0000000000000000000000000000000000000000;;			return FormatMap(accessor.GetAnnotations()), nil
0000000000000000000000000000000000000000;;		case "metadata.labels":
0000000000000000000000000000000000000000;;			return FormatMap(accessor.GetLabels()), nil
0000000000000000000000000000000000000000;;		case "metadata.name":
0000000000000000000000000000000000000000;;			return accessor.GetName(), nil
0000000000000000000000000000000000000000;;		case "metadata.namespace":
0000000000000000000000000000000000000000;;			return accessor.GetNamespace(), nil
0000000000000000000000000000000000000000;;		case "metadata.uid":
0000000000000000000000000000000000000000;;			return string(accessor.GetUID()), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("unsupported fieldPath: %v", fieldPath)
0000000000000000000000000000000000000000;;	}
