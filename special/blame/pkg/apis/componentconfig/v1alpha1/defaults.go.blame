0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bd963139b3a4db1c3ed6babe2a142f2791e66c50;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		kruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/qos"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master/ports"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		defaultRootDir = "/var/lib/kubelet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoDetectCloudProvider = "auto-detect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultIPTablesMasqueradeBit = 14
0000000000000000000000000000000000000000;;		defaultIPTablesDropBit       = 15
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		zeroDuration = metav1.Duration{}
0000000000000000000000000000000000000000;;		// Refer to [Node Allocatable](https://git.k8s.io/community/contributors/design-proposals/node-allocatable.md) doc for more information.
0000000000000000000000000000000000000000;;		defaultNodeAllocatableEnforcement = []string{"pods"}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *kruntime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_KubeProxyConfiguration(obj *KubeProxyConfiguration) {
0000000000000000000000000000000000000000;;		if len(obj.BindAddress) == 0 {
0000000000000000000000000000000000000000;;			obj.BindAddress = "0.0.0.0"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HealthzBindAddress == "" {
0000000000000000000000000000000000000000;;			obj.HealthzBindAddress = fmt.Sprintf("0.0.0.0:%v", ports.ProxyHealthzPort)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(obj.HealthzBindAddress, ":") {
0000000000000000000000000000000000000000;;			obj.HealthzBindAddress += fmt.Sprintf(":%v", ports.ProxyHealthzPort)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MetricsBindAddress == "" {
0000000000000000000000000000000000000000;;			obj.MetricsBindAddress = fmt.Sprintf("127.0.0.1:%v", ports.ProxyStatusPort)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(obj.MetricsBindAddress, ":") {
0000000000000000000000000000000000000000;;			obj.MetricsBindAddress += fmt.Sprintf(":%v", ports.ProxyStatusPort)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.OOMScoreAdj == nil {
0000000000000000000000000000000000000000;;			temp := int32(qos.KubeProxyOOMScoreAdj)
0000000000000000000000000000000000000000;;			obj.OOMScoreAdj = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ResourceContainer == "" {
0000000000000000000000000000000000000000;;			obj.ResourceContainer = "/kube-proxy"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.IPTables.SyncPeriod.Duration == 0 {
0000000000000000000000000000000000000000;;			obj.IPTables.SyncPeriod = metav1.Duration{Duration: 30 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zero := metav1.Duration{}
0000000000000000000000000000000000000000;;		if obj.UDPIdleTimeout == zero {
0000000000000000000000000000000000000000;;			obj.UDPIdleTimeout = metav1.Duration{Duration: 250 * time.Millisecond}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If ConntrackMax is set, respect it.
0000000000000000000000000000000000000000;;		if obj.Conntrack.Max == 0 {
0000000000000000000000000000000000000000;;			// If ConntrackMax is *not* set, use per-core scaling.
0000000000000000000000000000000000000000;;			if obj.Conntrack.MaxPerCore == 0 {
0000000000000000000000000000000000000000;;				obj.Conntrack.MaxPerCore = 32 * 1024
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if obj.Conntrack.Min == 0 {
0000000000000000000000000000000000000000;;				obj.Conntrack.Min = 128 * 1024
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.IPTables.MasqueradeBit == nil {
0000000000000000000000000000000000000000;;			temp := int32(14)
0000000000000000000000000000000000000000;;			obj.IPTables.MasqueradeBit = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Conntrack.TCPEstablishedTimeout == zero {
0000000000000000000000000000000000000000;;			obj.Conntrack.TCPEstablishedTimeout = metav1.Duration{Duration: 24 * time.Hour} // 1 day (1/5 default)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Conntrack.TCPCloseWaitTimeout == zero {
0000000000000000000000000000000000000000;;			// See https://github.com/kubernetes/kubernetes/issues/32551.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// CLOSE_WAIT conntrack state occurs when the the Linux kernel
0000000000000000000000000000000000000000;;			// sees a FIN from the remote server. Note: this is a half-close
0000000000000000000000000000000000000000;;			// condition that persists as long as the local side keeps the
0000000000000000000000000000000000000000;;			// socket open. The condition is rare as it is typical in most
0000000000000000000000000000000000000000;;			// protocols for both sides to issue a close; this typically
0000000000000000000000000000000000000000;;			// occurs when the local socket is lazily garbage collected.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// If the CLOSE_WAIT conntrack entry expires, then FINs from the
0000000000000000000000000000000000000000;;			// local socket will not be properly SNAT'd and will not reach the
0000000000000000000000000000000000000000;;			// remote server (if the connection was subject to SNAT). If the
0000000000000000000000000000000000000000;;			// remote timeouts for FIN_WAIT* states exceed the CLOSE_WAIT
0000000000000000000000000000000000000000;;			// timeout, then there will be an inconsistency in the state of
0000000000000000000000000000000000000000;;			// the connection and a new connection reusing the SNAT (src,
0000000000000000000000000000000000000000;;			// port) pair may be rejected by the remote side with RST. This
0000000000000000000000000000000000000000;;			// can cause new calls to connect(2) to return with ECONNREFUSED.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// We set CLOSE_WAIT to one hour by default to better match
0000000000000000000000000000000000000000;;			// typical server timeouts.
0000000000000000000000000000000000000000;;			obj.Conntrack.TCPCloseWaitTimeout = metav1.Duration{Duration: 1 * time.Hour}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ConfigSyncPeriod.Duration == 0 {
0000000000000000000000000000000000000000;;			obj.ConfigSyncPeriod.Duration = 15 * time.Minute
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(obj.ClientConnection.ContentType) == 0 {
0000000000000000000000000000000000000000;;			obj.ClientConnection.ContentType = "application/vnd.kubernetes.protobuf"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ClientConnection.QPS == 0.0 {
0000000000000000000000000000000000000000;;			obj.ClientConnection.QPS = 5.0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ClientConnection.Burst == 0 {
0000000000000000000000000000000000000000;;			obj.ClientConnection.Burst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_KubeSchedulerConfiguration(obj *KubeSchedulerConfiguration) {
0000000000000000000000000000000000000000;;		if obj.Port == 0 {
0000000000000000000000000000000000000000;;			obj.Port = ports.SchedulerPort
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Address == "" {
0000000000000000000000000000000000000000;;			obj.Address = "0.0.0.0"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.AlgorithmProvider == "" {
0000000000000000000000000000000000000000;;			obj.AlgorithmProvider = "DefaultProvider"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ContentType == "" {
0000000000000000000000000000000000000000;;			obj.ContentType = "application/vnd.kubernetes.protobuf"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.KubeAPIQPS == 0 {
0000000000000000000000000000000000000000;;			obj.KubeAPIQPS = 50.0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.KubeAPIBurst == 0 {
0000000000000000000000000000000000000000;;			obj.KubeAPIBurst = 100
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SchedulerName == "" {
0000000000000000000000000000000000000000;;			obj.SchedulerName = api.DefaultSchedulerName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HardPodAffinitySymmetricWeight == 0 {
0000000000000000000000000000000000000000;;			obj.HardPodAffinitySymmetricWeight = api.DefaultHardPodAffinitySymmetricWeight
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.FailureDomains == "" {
0000000000000000000000000000000000000000;;			obj.FailureDomains = kubeletapis.DefaultFailureDomains
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.LockObjectNamespace == "" {
0000000000000000000000000000000000000000;;			obj.LockObjectNamespace = SchedulerDefaultLockObjectNamespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.LockObjectName == "" {
0000000000000000000000000000000000000000;;			obj.LockObjectName = SchedulerDefaultLockObjectName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.PolicyConfigMapNamespace == "" {
0000000000000000000000000000000000000000;;			obj.PolicyConfigMapNamespace = api.NamespaceSystem
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_LeaderElectionConfiguration(obj *LeaderElectionConfiguration) {
0000000000000000000000000000000000000000;;		zero := metav1.Duration{}
0000000000000000000000000000000000000000;;		if obj.LeaseDuration == zero {
0000000000000000000000000000000000000000;;			obj.LeaseDuration = metav1.Duration{Duration: 15 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RenewDeadline == zero {
0000000000000000000000000000000000000000;;			obj.RenewDeadline = metav1.Duration{Duration: 10 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RetryPeriod == zero {
0000000000000000000000000000000000000000;;			obj.RetryPeriod = metav1.Duration{Duration: 2 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ResourceLock == "" {
0000000000000000000000000000000000000000;;			// obj.ResourceLock = rl.EndpointsResourceLock
0000000000000000000000000000000000000000;;			obj.ResourceLock = "endpoints"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_KubeletConfiguration(obj *KubeletConfiguration) {
0000000000000000000000000000000000000000;;		if obj.Authentication.Anonymous.Enabled == nil {
0000000000000000000000000000000000000000;;			obj.Authentication.Anonymous.Enabled = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Authentication.Webhook.Enabled == nil {
0000000000000000000000000000000000000000;;			obj.Authentication.Webhook.Enabled = boolVar(false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Authentication.Webhook.CacheTTL == zeroDuration {
0000000000000000000000000000000000000000;;			obj.Authentication.Webhook.CacheTTL = metav1.Duration{Duration: 2 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Authorization.Mode == "" {
0000000000000000000000000000000000000000;;			obj.Authorization.Mode = KubeletAuthorizationModeAlwaysAllow
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Authorization.Webhook.CacheAuthorizedTTL == zeroDuration {
0000000000000000000000000000000000000000;;			obj.Authorization.Webhook.CacheAuthorizedTTL = metav1.Duration{Duration: 5 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Authorization.Webhook.CacheUnauthorizedTTL == zeroDuration {
0000000000000000000000000000000000000000;;			obj.Authorization.Webhook.CacheUnauthorizedTTL = metav1.Duration{Duration: 30 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.Address == "" {
0000000000000000000000000000000000000000;;			obj.Address = "0.0.0.0"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CloudProvider == "" {
0000000000000000000000000000000000000000;;			obj.CloudProvider = AutoDetectCloudProvider
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CAdvisorPort == nil {
0000000000000000000000000000000000000000;;			obj.CAdvisorPort = util.Int32Ptr(4194)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.VolumeStatsAggPeriod == zeroDuration {
0000000000000000000000000000000000000000;;			obj.VolumeStatsAggPeriod = metav1.Duration{Duration: time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CertDirectory == "" {
0000000000000000000000000000000000000000;;			obj.CertDirectory = "/var/run/kubernetes"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ContainerRuntime == "" {
0000000000000000000000000000000000000000;;			obj.ContainerRuntime = "docker"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RuntimeRequestTimeout == zeroDuration {
0000000000000000000000000000000000000000;;			obj.RuntimeRequestTimeout = metav1.Duration{Duration: 2 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CPUCFSQuota == nil {
0000000000000000000000000000000000000000;;			obj.CPUCFSQuota = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EventBurst == 0 {
0000000000000000000000000000000000000000;;			obj.EventBurst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EventRecordQPS == nil {
0000000000000000000000000000000000000000;;			temp := int32(5)
0000000000000000000000000000000000000000;;			obj.EventRecordQPS = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EnableControllerAttachDetach == nil {
0000000000000000000000000000000000000000;;			obj.EnableControllerAttachDetach = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EnableDebuggingHandlers == nil {
0000000000000000000000000000000000000000;;			obj.EnableDebuggingHandlers = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EnableServer == nil {
0000000000000000000000000000000000000000;;			obj.EnableServer = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.FileCheckFrequency == zeroDuration {
0000000000000000000000000000000000000000;;			obj.FileCheckFrequency = metav1.Duration{Duration: 20 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HealthzBindAddress == "" {
0000000000000000000000000000000000000000;;			obj.HealthzBindAddress = "127.0.0.1"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HealthzPort == 0 {
0000000000000000000000000000000000000000;;			obj.HealthzPort = 10248
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HostNetworkSources == nil {
0000000000000000000000000000000000000000;;			obj.HostNetworkSources = []string{kubetypes.AllSource}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HostPIDSources == nil {
0000000000000000000000000000000000000000;;			obj.HostPIDSources = []string{kubetypes.AllSource}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HostIPCSources == nil {
0000000000000000000000000000000000000000;;			obj.HostIPCSources = []string{kubetypes.AllSource}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HTTPCheckFrequency == zeroDuration {
0000000000000000000000000000000000000000;;			obj.HTTPCheckFrequency = metav1.Duration{Duration: 20 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ImageMinimumGCAge == zeroDuration {
0000000000000000000000000000000000000000;;			obj.ImageMinimumGCAge = metav1.Duration{Duration: 2 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ImageGCHighThresholdPercent == nil {
0000000000000000000000000000000000000000;;			// default is below docker's default dm.min_free_space of 90%
0000000000000000000000000000000000000000;;			temp := int32(85)
0000000000000000000000000000000000000000;;			obj.ImageGCHighThresholdPercent = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ImageGCLowThresholdPercent == nil {
0000000000000000000000000000000000000000;;			temp := int32(80)
0000000000000000000000000000000000000000;;			obj.ImageGCLowThresholdPercent = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MasterServiceNamespace == "" {
0000000000000000000000000000000000000000;;			obj.MasterServiceNamespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MaxContainerCount == nil {
0000000000000000000000000000000000000000;;			temp := int32(-1)
0000000000000000000000000000000000000000;;			obj.MaxContainerCount = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MaxPerPodContainerCount == 0 {
0000000000000000000000000000000000000000;;			obj.MaxPerPodContainerCount = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MaxOpenFiles == 0 {
0000000000000000000000000000000000000000;;			obj.MaxOpenFiles = 1000000
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MaxPods == 0 {
0000000000000000000000000000000000000000;;			obj.MaxPods = 110
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MinimumGCAge == zeroDuration {
0000000000000000000000000000000000000000;;			obj.MinimumGCAge = metav1.Duration{Duration: 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.NonMasqueradeCIDR == "" {
0000000000000000000000000000000000000000;;			obj.NonMasqueradeCIDR = "10.0.0.0/8"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.VolumePluginDir == "" {
0000000000000000000000000000000000000000;;			obj.VolumePluginDir = "/usr/libexec/kubernetes/kubelet-plugins/volume/exec/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.NodeStatusUpdateFrequency == zeroDuration {
0000000000000000000000000000000000000000;;			obj.NodeStatusUpdateFrequency = metav1.Duration{Duration: 10 * time.Second}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.OOMScoreAdj == nil {
0000000000000000000000000000000000000000;;			temp := int32(qos.KubeletOOMScoreAdj)
0000000000000000000000000000000000000000;;			obj.OOMScoreAdj = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Port == 0 {
0000000000000000000000000000000000000000;;			obj.Port = ports.KubeletPort
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ReadOnlyPort == 0 {
0000000000000000000000000000000000000000;;			obj.ReadOnlyPort = ports.KubeletReadOnlyPort
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RegisterNode == nil {
0000000000000000000000000000000000000000;;			obj.RegisterNode = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RegisterSchedulable == nil {
0000000000000000000000000000000000000000;;			obj.RegisterSchedulable = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RegistryBurst == 0 {
0000000000000000000000000000000000000000;;			obj.RegistryBurst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RegistryPullQPS == nil {
0000000000000000000000000000000000000000;;			temp := int32(5)
0000000000000000000000000000000000000000;;			obj.RegistryPullQPS = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ResolverConfig == "" {
0000000000000000000000000000000000000000;;			obj.ResolverConfig = kubetypes.ResolvConfDefault
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RootDirectory == "" {
0000000000000000000000000000000000000000;;			obj.RootDirectory = defaultRootDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SerializeImagePulls == nil {
0000000000000000000000000000000000000000;;			obj.SerializeImagePulls = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SeccompProfileRoot == "" {
0000000000000000000000000000000000000000;;			obj.SeccompProfileRoot = filepath.Join(defaultRootDir, "seccomp")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.StreamingConnectionIdleTimeout == zeroDuration {
0000000000000000000000000000000000000000;;			obj.StreamingConnectionIdleTimeout = metav1.Duration{Duration: 4 * time.Hour}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SyncFrequency == zeroDuration {
0000000000000000000000000000000000000000;;			obj.SyncFrequency = metav1.Duration{Duration: 1 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ContentType == "" {
0000000000000000000000000000000000000000;;			obj.ContentType = "application/vnd.kubernetes.protobuf"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.KubeAPIQPS == nil {
0000000000000000000000000000000000000000;;			temp := int32(5)
0000000000000000000000000000000000000000;;			obj.KubeAPIQPS = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.KubeAPIBurst == 0 {
0000000000000000000000000000000000000000;;			obj.KubeAPIBurst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.OutOfDiskTransitionFrequency == zeroDuration {
0000000000000000000000000000000000000000;;			obj.OutOfDiskTransitionFrequency = metav1.Duration{Duration: 5 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(obj.HairpinMode) == "" {
0000000000000000000000000000000000000000;;			obj.HairpinMode = PromiscuousBridge
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EvictionHard == nil {
0000000000000000000000000000000000000000;;			temp := "memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%"
0000000000000000000000000000000000000000;;			obj.EvictionHard = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EvictionPressureTransitionPeriod == zeroDuration {
0000000000000000000000000000000000000000;;			obj.EvictionPressureTransitionPeriod = metav1.Duration{Duration: 5 * time.Minute}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ExperimentalKernelMemcgNotification == nil {
0000000000000000000000000000000000000000;;			obj.ExperimentalKernelMemcgNotification = boolVar(false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SystemReserved == nil {
0000000000000000000000000000000000000000;;			obj.SystemReserved = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.KubeReserved == nil {
0000000000000000000000000000000000000000;;			obj.KubeReserved = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ExperimentalQOSReserved == nil {
0000000000000000000000000000000000000000;;			obj.ExperimentalQOSReserved = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.MakeIPTablesUtilChains == nil {
0000000000000000000000000000000000000000;;			obj.MakeIPTablesUtilChains = boolVar(true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.IPTablesMasqueradeBit == nil {
0000000000000000000000000000000000000000;;			temp := int32(defaultIPTablesMasqueradeBit)
0000000000000000000000000000000000000000;;			obj.IPTablesMasqueradeBit = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.IPTablesDropBit == nil {
0000000000000000000000000000000000000000;;			temp := int32(defaultIPTablesDropBit)
0000000000000000000000000000000000000000;;			obj.IPTablesDropBit = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CgroupsPerQOS == nil {
0000000000000000000000000000000000000000;;			temp := true
0000000000000000000000000000000000000000;;			obj.CgroupsPerQOS = &temp
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.CgroupDriver == "" {
0000000000000000000000000000000000000000;;			obj.CgroupDriver = "cgroupfs"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.EnforceNodeAllocatable == nil {
0000000000000000000000000000000000000000;;			obj.EnforceNodeAllocatable = defaultNodeAllocatableEnforcement
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RemoteRuntimeEndpoint == "" {
0000000000000000000000000000000000000000;;			if runtime.GOOS == "linux" {
0000000000000000000000000000000000000000;;				obj.RemoteRuntimeEndpoint = "unix:///var/run/dockershim.sock"
0000000000000000000000000000000000000000;;			} else if runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;				obj.RemoteRuntimeEndpoint = "tcp://localhost:3735"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boolVar(b bool) *bool {
0000000000000000000000000000000000000000;;		return &b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		defaultCfg = KubeletConfiguration{}
0000000000000000000000000000000000000000;;	)
