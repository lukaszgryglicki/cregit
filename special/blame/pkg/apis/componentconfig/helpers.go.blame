0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d89f0b958e03b64c3a8f39374b17e8339aa87069;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// used for validating command line opts
0000000000000000000000000000000000000000;;	// TODO(mikedanese): remove these when we remove command line flags
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPVar struct {
0000000000000000000000000000000000000000;;		Val *string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v IPVar) Set(s string) error {
0000000000000000000000000000000000000000;;		if net.ParseIP(s) == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%q is not a valid IP address", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.Val == nil {
0000000000000000000000000000000000000000;;			// it's okay to panic here since this is programmer error
0000000000000000000000000000000000000000;;			panic("the string pointer passed into IPVar should not be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*v.Val = s
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v IPVar) String() string {
0000000000000000000000000000000000000000;;		if v.Val == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *v.Val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v IPVar) Type() string {
0000000000000000000000000000000000000000;;		return "ip"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ProxyMode) Set(s string) error {
0000000000000000000000000000000000000000;;		*m = ProxyMode(s)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ProxyMode) String() string {
0000000000000000000000000000000000000000;;		if m != nil {
0000000000000000000000000000000000000000;;			return string(*m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ProxyMode) Type() string {
0000000000000000000000000000000000000000;;		return "ProxyMode"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PortRangeVar struct {
0000000000000000000000000000000000000000;;		Val *string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v PortRangeVar) Set(s string) error {
0000000000000000000000000000000000000000;;		if _, err := utilnet.ParsePortRange(s); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%q is not a valid port range: %v", s, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.Val == nil {
0000000000000000000000000000000000000000;;			// it's okay to panic here since this is programmer error
0000000000000000000000000000000000000000;;			panic("the string pointer passed into PortRangeVar should not be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*v.Val = s
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v PortRangeVar) String() string {
0000000000000000000000000000000000000000;;		if v.Val == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *v.Val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v PortRangeVar) Type() string {
0000000000000000000000000000000000000000;;		return "port-range"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertObjToConfigMap converts an object to a ConfigMap.
0000000000000000000000000000000000000000;;	// This is specifically meant for ComponentConfigs.
0000000000000000000000000000000000000000;;	func ConvertObjToConfigMap(name string, obj runtime.Object) (*v1.ConfigMap, error) {
0000000000000000000000000000000000000000;;		eJSONBytes, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cm := &v1.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				name: string(eJSONBytes[:]),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cm, nil
0000000000000000000000000000000000000000;;	}
