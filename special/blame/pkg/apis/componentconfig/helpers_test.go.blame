0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d89f0b958e03b64c3a8f39374b17e8339aa87069;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIPVar(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultIP := "0.0.0.0"
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			argc      string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;			expectVal string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				argc:      "blah --ip=1.2.3.4",
0000000000000000000000000000000000000000;;				expectVal: "1.2.3.4",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				argc:      "blah --ip=1.2.3.4a",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				expectVal: defaultIP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			fs := pflag.NewFlagSet("blah", pflag.PanicOnError)
0000000000000000000000000000000000000000;;			ip := defaultIP
0000000000000000000000000000000000000000;;			fs.Var(IPVar{&ip}, "ip", "the ip")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				defer func() {
0000000000000000000000000000000000000000;;					if r := recover(); r != nil {
0000000000000000000000000000000000000000;;						err = r.(error)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;				fs.Parse(strings.Split(c.argc, " "))
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if c.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("did not observe an expected error")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !c.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("observed an unexpected error")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c.expectVal != ip {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected ip: expected %q, saw %q", c.expectVal, ip)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
