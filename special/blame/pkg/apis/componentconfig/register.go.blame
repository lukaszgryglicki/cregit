0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bd963139b3a4db1c3ed6babe2a142f2791e66c50;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
0000000000000000000000000000000000000000;;		AddToScheme   = SchemeBuilder.AddToScheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name use in this package
0000000000000000000000000000000000000000;;	const GroupName = "componentconfig"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind takes an unqualified kind and returns a Group qualified GroupKind
0000000000000000000000000000000000000000;;	func Kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithKind(kind).GroupKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource takes an unqualified resource and returns a Group qualified GroupResource
0000000000000000000000000000000000000000;;	func Resource(resource string) schema.GroupResource {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithResource(resource).GroupResource()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addKnownTypes(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		// TODO this will get cleaned up with the scheme types are fixed
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&KubeProxyConfiguration{},
0000000000000000000000000000000000000000;;			&KubeSchedulerConfiguration{},
0000000000000000000000000000000000000000;;			&KubeletConfiguration{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
