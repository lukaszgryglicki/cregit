0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e4094a7ecb01440914454c983a729286743d6d26;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateScale(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []autoscaling.Scale{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 10,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 0,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateScale(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			scale autoscaling.Scale
0000000000000000000000000000000000000000;;			msg   string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				scale: autoscaling.Scale{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "frontend",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;						Replicas: -1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than or equal to 0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateScale(&c.scale); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v, expected: %s", errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateHorizontalPodAutoscaler(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myautoscaler",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;					ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;					MaxReplicas: 5,
0000000000000000000000000000000000000000;;					Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;							Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;								Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;								TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myautoscaler",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;					ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;					MaxReplicas: 5,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myautoscaler",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;					ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;					MaxReplicas: 5,
0000000000000000000000000000000000000000;;					Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;							Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;								Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;								TargetAverageValue: resource.NewMilliQuantity(300, resource.DecimalSI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myautoscaler",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;					ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;					MaxReplicas: 5,
0000000000000000000000000000000000000000;;					Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;							Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;								MetricName:         "some/metric",
0000000000000000000000000000000000000000;;								TargetAverageValue: *resource.NewMilliQuantity(300, resource.DecimalSI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myautoscaler",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;					ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;					MaxReplicas: 5,
0000000000000000000000000000000000000000;;					Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;							Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;								Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;									Kind: "ReplicationController",
0000000000000000000000000000000000000000;;									Name: "myrc",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								MetricName:  "some/metric",
0000000000000000000000000000000000000000;;								TargetValue: *resource.NewMilliQuantity(300, resource.DecimalSI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateHorizontalPodAutoscaler(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			horizontalPodAutoscaler autoscaling.HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;			msg                     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "scaleTargetRef.kind: Required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Kind: "..", Name: "myrc"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "scaleTargetRef.kind: Invalid",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "scaleTargetRef.name: Required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Kind: "ReplicationController", Name: ".."},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "scaleTargetRef.name: Invalid",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "myautoscaler",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(-1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than 0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "myautoscaler",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(7),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than or equal to `minReplicas`",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "myautoscaler",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;							Name: "myrc",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas: 5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(-70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than 0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "myautoscaler",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;									TargetAverageValue:       resource.NewMilliQuantity(300, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "may not set both a target raw value and a target utilization",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(70),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must specify a resource name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: newInt32(-10),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than 0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must set either a target raw value or a target utilization",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must specify a metric name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName: "some/metric",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must specify a positive target value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "myrc",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:  "some/metric",
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "target.kind: Required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Kind: "ReplicationController",
0000000000000000000000000000000000000000;;										Name: "myrc",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must specify a metric name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must specify a metric source type",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.MetricSourceType("InvalidType"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "type: Unsupported value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				horizontalPodAutoscaler: autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some/metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must populate the given metric source only",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateHorizontalPodAutoscaler(&c.horizontalPodAutoscaler)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %q", c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %q, expected: %q", errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sourceTypes := map[autoscaling.MetricSourceType]autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;			autoscaling.ResourceMetricSourceType: {
0000000000000000000000000000000000000000;;				Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;					Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;					TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			autoscaling.PodsMetricSourceType: {
0000000000000000000000000000000000000000;;				Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;					MetricName:         "some/metric",
0000000000000000000000000000000000000000;;					TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			autoscaling.ObjectMetricSourceType: {
0000000000000000000000000000000000000000;;				Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;					Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;						Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						Name: "myrc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MetricName:  "some/metric",
0000000000000000000000000000000000000000;;					TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for correctType, spec := range sourceTypes {
0000000000000000000000000000000000000000;;			for incorrectType := range sourceTypes {
0000000000000000000000000000000000000000;;				if correctType == incorrectType {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				spec.Type = incorrectType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				errs := ValidateHorizontalPodAutoscaler(&autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "myautoscaler", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{Name: "myrc", Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						MinReplicas:    newInt32(1),
0000000000000000000000000000000000000000;;						MaxReplicas:    5, Metrics: []autoscaling.MetricSpec{spec},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedMsg := "must populate information for the given metric source"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(errs) == 0 {
0000000000000000000000000000000000000000;;					t.Errorf("expected failure with type of %v and spec for %v", incorrectType, correctType)
0000000000000000000000000000000000000000;;				} else if !strings.Contains(errs[0].Error(), expectedMsg) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %q, expected %q", errs[0], expectedMsg)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32(val int32) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
