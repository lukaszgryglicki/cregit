0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a476b80bc49634bddc19d89ae77f881660cccb6a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/autoscaling/install"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/apis/autoscaling/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultHPA(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			hpa            autoscalingv1.HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;			expectReplicas int32
0000000000000000000000000000000000000000;;			test           string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				hpa:            autoscalingv1.HorizontalPodAutoscaler{},
0000000000000000000000000000000000000000;;				expectReplicas: 1,
0000000000000000000000000000000000000000;;				test:           "unspecified min replicas, use the default value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				hpa: autoscalingv1.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscalingv1.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						MinReplicas: newInt32(3),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectReplicas: 3,
0000000000000000000000000000000000000000;;				test:           "set min replicas to 3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			hpa := &test.hpa
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(hpa))
0000000000000000000000000000000000000000;;			hpa2, ok := obj2.(*autoscalingv1.HorizontalPodAutoscaler)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected object: %v", obj2)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if hpa2.Spec.MinReplicas == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected nil MinReplicas")
0000000000000000000000000000000000000000;;			} else if test.expectReplicas != *hpa2.Spec.MinReplicas {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %d MinReplicas, got: %d", test.expectReplicas, *hpa2.Spec.MinReplicas)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func roundTrip(t *testing.T, obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(api.Codecs.LegacyCodec(SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\n %#v", err, obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj2, err := runtime.Decode(api.Codecs.UniversalDecoder(), data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nData: %s\nSource: %#v", err, string(data), obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj3 := reflect.New(reflect.TypeOf(obj).Elem()).Interface().(runtime.Object)
0000000000000000000000000000000000000000;;		err = api.Scheme.Convert(obj2, obj3, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nSource: %#v", err, obj2)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32(val int32) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
