0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
85ca9b617b19e08f3c9272cb5b392df6006e68fe;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodDisruptionBudgetSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		minAvailable := intstr.FromString("0%")
0000000000000000000000000000000000000000;;		maxUnavailable := intstr.FromString("10%")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;			MinAvailable:   &minAvailable,
0000000000000000000000000000000000000000;;			MaxUnavailable: &maxUnavailable,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := ValidatePodDisruptionBudgetSpec(spec, field.NewPath("foo"))
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected success for %v", spec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateMinAvailablePodDisruptionBudgetSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []intstr.IntOrString{
0000000000000000000000000000000000000000;;			intstr.FromString("0%"),
0000000000000000000000000000000000000000;;			intstr.FromString("1%"),
0000000000000000000000000000000000000000;;			intstr.FromString("100%"),
0000000000000000000000000000000000000000;;			intstr.FromInt(0),
0000000000000000000000000000000000000000;;			intstr.FromInt(1),
0000000000000000000000000000000000000000;;			intstr.FromInt(100),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range successCases {
0000000000000000000000000000000000000000;;			spec := policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;				MinAvailable: &c,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs := ValidatePodDisruptionBudgetSpec(spec, field.NewPath("foo"))
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected failure %v for %v", errs, spec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		failureCases := []intstr.IntOrString{
0000000000000000000000000000000000000000;;			intstr.FromString("1.1%"),
0000000000000000000000000000000000000000;;			intstr.FromString("nope"),
0000000000000000000000000000000000000000;;			intstr.FromString("-1%"),
0000000000000000000000000000000000000000;;			intstr.FromString("101%"),
0000000000000000000000000000000000000000;;			intstr.FromInt(-1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range failureCases {
0000000000000000000000000000000000000000;;			spec := policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;				MinAvailable: &c,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs := ValidatePodDisruptionBudgetSpec(spec, field.NewPath("foo"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected success for %v", spec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateMinAvailablePodAndMaxUnavailableDisruptionBudgetSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		c1 := intstr.FromString("10%")
0000000000000000000000000000000000000000;;		c2 := intstr.FromInt(1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;			MinAvailable:   &c1,
0000000000000000000000000000000000000000;;			MaxUnavailable: &c2,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := ValidatePodDisruptionBudgetSpec(spec, field.NewPath("foo"))
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected success for %v", spec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodDisruptionBudgetStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []policy.PodDisruptionBudgetStatus{
0000000000000000000000000000000000000000;;			{PodDisruptionsAllowed: 10},
0000000000000000000000000000000000000000;;			{CurrentHealthy: 5},
0000000000000000000000000000000000000000;;			{DesiredHealthy: 3},
0000000000000000000000000000000000000000;;			{ExpectedPods: 2}}
0000000000000000000000000000000000000000;;		for _, c := range successCases {
0000000000000000000000000000000000000000;;			errors := ValidatePodDisruptionBudgetStatus(c, field.NewPath("status"))
0000000000000000000000000000000000000000;;			if len(errors) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected failure %v for %v", errors, c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		failureCases := []policy.PodDisruptionBudgetStatus{
0000000000000000000000000000000000000000;;			{PodDisruptionsAllowed: -10},
0000000000000000000000000000000000000000;;			{CurrentHealthy: -5},
0000000000000000000000000000000000000000;;			{DesiredHealthy: -3},
0000000000000000000000000000000000000000;;			{ExpectedPods: -2}}
0000000000000000000000000000000000000000;;		for _, c := range failureCases {
0000000000000000000000000000000000000000;;			errors := ValidatePodDisruptionBudgetStatus(c, field.NewPath("status"))
0000000000000000000000000000000000000000;;			if len(errors) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected success for %v", c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
