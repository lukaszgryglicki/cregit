0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b71d722f28894037f6c5f25bf7558470ad704718;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/admissionregistration"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getInitializerConfiguration(initializers []admissionregistration.Initializer) *admissionregistration.InitializerConfiguration {
0000000000000000000000000000000000000000;;		return &admissionregistration.InitializerConfiguration{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "config",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Initializers: initializers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateInitializerConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			config        *admissionregistration.InitializerConfiguration
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "0 rule is valid",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all initializers must have a fully qualified name",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `initializers[1].name: Invalid value: "k8s.io": should be a domain with at least two dots, initializers[2].name: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "APIGroups must not be empty or nil",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   nil,
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `initializers[0].rules[0].apiGroups: Required value, initializers[0].rules[1].apiGroups: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "APIVersions must not be empty or nil",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{},
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: nil,
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `initializers[0].rules[0].apiVersions: Required value, initializers[0].rules[1].apiVersions: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Resources must not be empty or nil",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   nil,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `initializers[0].rules[0].resources: Required value, initializers[0].rules[1].resources: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "\"\" is a valid APIGroup",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a", ""},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "\"\" is NOT a valid APIVersion",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a", ""},
0000000000000000000000000000000000000000;;									Resources:   []string{"a"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: "apiVersions[1]: Required value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "\"\" is NOT a valid Resource",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a", ""},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: "resources[1]: Required value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "wildcard cannot be mixed with other strings for APIGroups or APIVersions or Resources",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a", "*"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a", "*"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a", "*"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `[initializers[0].rules[0].apiGroups: Invalid value: []string{"a", "*"}: if '*' is present, must not specify other API groups, initializers[0].rules[0].apiVersions: Invalid value: []string{"a", "*"}: if '*' is present, must not specify other API versions, initializers[0].rules[0].resources: Invalid value: []string{"a", "*"}: if '*' is present, must not specify other resources]`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Subresource not allowed",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.Rule{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;									APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;									Resources:   []string{"a/b"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: ` "a/b": must not specify subresources`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "FailurePolicy can only be \"Ignore\"",
0000000000000000000000000000000000000000;;				config: getInitializerConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer.k8s.io",
0000000000000000000000000000000000000000;;							FailurePolicy: func() *admissionregistration.FailurePolicyType {
0000000000000000000000000000000000000000;;								r := admissionregistration.Fail
0000000000000000000000000000000000000000;;								return &r
0000000000000000000000000000000000000000;;							}(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `failurePolicy: Unsupported value: "Fail": supported values: Ignore`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateInitializerConfiguration(test.config)
0000000000000000000000000000000000000000;;			err := errs.ToAggregate()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if e, a := test.expectedError, err.Error(); !strings.Contains(a, e) || e == "" {
0000000000000000000000000000000000000000;;					t.Errorf("test case %s, expected to contain %s, got %s", test.name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if test.expectedError != "" {
0000000000000000000000000000000000000000;;					t.Errorf("test case %s, unexpected no error, expected to contain %s", test.name, test.expectedError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getExternalAdmissionHookConfiguration(hooks []admissionregistration.ExternalAdmissionHook) *admissionregistration.ExternalAdmissionHookConfiguration {
0000000000000000000000000000000000000000;;		return &admissionregistration.ExternalAdmissionHookConfiguration{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "config",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ExternalAdmissionHooks: hooks,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateExternalAdmissionHookConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			config        *admissionregistration.ExternalAdmissionHookConfiguration
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all ExternalAdmissionHook must have a fully qualified name",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `externalAdmissionHooks[1].name: Invalid value: "k8s.io": should be a domain with at least two dots, externalAdmissionHooks[2].name: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Operations must not be empty or nil",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: nil,
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `externalAdmissionHooks[0].rules[0].operations: Required value, externalAdmissionHooks[0].rules[1].operations: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "\"\" is NOT a valid operation",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE", ""},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `Unsupported value: ""`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "operation must be either create/update/delete/connect",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"PATCH"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `Unsupported value: "PATCH"`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "wildcard operation cannot be mixed with other strings",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE", "*"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `if '*' is present, must not specify other operations`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: `resource "*" can co-exist with resources that have subresources`,
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"*", "a/b", "a/*", "*/b"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: `resource "*" cannot mix with resources that don't have subresources`,
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"*", "a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `if '*' is present, must not specify other resources without subresources`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "resource a/* cannot mix with a/x",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a/*", "a/x"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `externalAdmissionHooks[0].rules[0].resources[1]: Invalid value: "a/x": if 'a/*' is present, must not specify a/x`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "resource a/* can mix with a",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"a/*", "a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "resource */a cannot mix with x/a",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"*/a", "x/a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `externalAdmissionHooks[0].rules[0].resources[1]: Invalid value: "x/a": if '*/a' is present, must not specify x/a`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "resource */* cannot mix with other resources",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							Rules: []admissionregistration.RuleWithOperations{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Operations: []admissionregistration.OperationType{"CREATE"},
0000000000000000000000000000000000000000;;									Rule: admissionregistration.Rule{
0000000000000000000000000000000000000000;;										APIGroups:   []string{"a"},
0000000000000000000000000000000000000000;;										APIVersions: []string{"a"},
0000000000000000000000000000000000000000;;										Resources:   []string{"*/*", "a"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `externalAdmissionHooks[0].rules[0].resources: Invalid value: []string{"*/*", "a"}: if '*/*' is present, must not specify other resources`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "FailurePolicy can only be \"Ignore\"",
0000000000000000000000000000000000000000;;				config: getExternalAdmissionHookConfiguration(
0000000000000000000000000000000000000000;;					[]admissionregistration.ExternalAdmissionHook{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "webhook.k8s.io",
0000000000000000000000000000000000000000;;							FailurePolicy: func() *admissionregistration.FailurePolicyType {
0000000000000000000000000000000000000000;;								r := admissionregistration.Fail
0000000000000000000000000000000000000000;;								return &r
0000000000000000000000000000000000000000;;							}(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				expectedError: `failurePolicy: Unsupported value: "Fail": supported values: Ignore`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateExternalAdmissionHookConfiguration(test.config)
0000000000000000000000000000000000000000;;			err := errs.ToAggregate()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if e, a := test.expectedError, err.Error(); !strings.Contains(a, e) || e == "" {
0000000000000000000000000000000000000000;;					t.Errorf("test case %s, expected to contain %s, got %s", test.name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if test.expectedError != "" {
0000000000000000000000000000000000000000;;					t.Errorf("test case %s, unexpected no error, expected to contain %s", test.name, test.expectedError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
