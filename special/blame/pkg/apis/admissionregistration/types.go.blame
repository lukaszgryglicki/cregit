0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b71d722f28894037f6c5f25bf7558470ad704718;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admissionregistration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitializerConfiguration describes the configuration of initializers.
0000000000000000000000000000000000000000;;	type InitializerConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Initializers is a list of resources and their default initializers
0000000000000000000000000000000000000000;;		// Order-sensitive.
0000000000000000000000000000000000000000;;		// When merging multiple InitializerConfigurations, we sort the initializers
0000000000000000000000000000000000000000;;		// from different InitializerConfigurations by the name of the
0000000000000000000000000000000000000000;;		// InitializerConfigurations; the order of the initializers from the same
0000000000000000000000000000000000000000;;		// InitializerConfiguration is preserved.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Initializers []Initializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitializerConfigurationList is a list of InitializerConfiguration.
0000000000000000000000000000000000000000;;	type InitializerConfigurationList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of InitializerConfiguration.
0000000000000000000000000000000000000000;;		Items []InitializerConfiguration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initializer describes the name and the failure policy of an initializer, and
0000000000000000000000000000000000000000;;	// what resources it applies to.
0000000000000000000000000000000000000000;;	type Initializer struct {
0000000000000000000000000000000000000000;;		// Name is the identifier of the initializer. It will be added to the
0000000000000000000000000000000000000000;;		// object that needs to be initialized.
0000000000000000000000000000000000000000;;		// Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where
0000000000000000000000000000000000000000;;		// "alwayspullimages" is the name of the webhook, and kubernetes.io is the name
0000000000000000000000000000000000000000;;		// of the organization.
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rules describes what resources/subresources the initializer cares about.
0000000000000000000000000000000000000000;;		// The initializer cares about an operation if it matches _any_ Rule.
0000000000000000000000000000000000000000;;		// Rule.Resources must not include subresources.
0000000000000000000000000000000000000000;;		Rules []Rule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FailurePolicy defines what happens if the responsible initializer controller
0000000000000000000000000000000000000000;;		// fails to takes action. Allowed values are Ignore, or Fail. If "Ignore" is
0000000000000000000000000000000000000000;;		// set, initializer is removed from the initializers list of an object if
0000000000000000000000000000000000000000;;		// the timeout is reached; If "Fail" is set, admissionregistration returns timeout error
0000000000000000000000000000000000000000;;		// if the timeout is reached.
0000000000000000000000000000000000000000;;		FailurePolicy *FailurePolicyType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended
0000000000000000000000000000000000000000;;	// to make sure that all the tuple expansions are valid.
0000000000000000000000000000000000000000;;	type Rule struct {
0000000000000000000000000000000000000000;;		// APIGroups is the API groups the resources belong to. '*' is all groups.
0000000000000000000000000000000000000000;;		// If '*' is present, the length of the slice must be one.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		APIGroups []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APIVersions is the API versions the resources belong to. '*' is all versions.
0000000000000000000000000000000000000000;;		// If '*' is present, the length of the slice must be one.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		APIVersions []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resources is a list of resources this rule applies to.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For example:
0000000000000000000000000000000000000000;;		// 'pods' means pods.
0000000000000000000000000000000000000000;;		// 'pods/log' means the log subresource of pods.
0000000000000000000000000000000000000000;;		// '*' means all resources, but not subresources.
0000000000000000000000000000000000000000;;		// 'pods/*' means all subresources of pods.
0000000000000000000000000000000000000000;;		// '*/scale' means all scale subresources.
0000000000000000000000000000000000000000;;		// '*/*' means all resources and their subresources.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If wildcard is present, the validation rule will ensure resources do not
0000000000000000000000000000000000000000;;		// overlap with each other.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Depending on the enclosing object, subresources might not be allowed.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		Resources []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailurePolicyType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Ignore means the initilizer is removed from the initializers list of an
0000000000000000000000000000000000000000;;		// object if the initializer is timed out.
0000000000000000000000000000000000000000;;		Ignore FailurePolicyType = "Ignore"
0000000000000000000000000000000000000000;;		// For 1.7, only "Ignore" is allowed. "Fail" will be allowed when the
0000000000000000000000000000000000000000;;		// extensible admission feature is beta.
0000000000000000000000000000000000000000;;		Fail FailurePolicyType = "Fail"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalAdmissionHookConfiguration describes the configuration of initializers.
0000000000000000000000000000000000000000;;	type ExternalAdmissionHookConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;		// ExternalAdmissionHooks is a list of external admission webhooks and the
0000000000000000000000000000000000000000;;		// affected resources and operations.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ExternalAdmissionHooks []ExternalAdmissionHook
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalAdmissionHookConfigurationList is a list of ExternalAdmissionHookConfiguration.
0000000000000000000000000000000000000000;;	type ExternalAdmissionHookConfigurationList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;		// List of ExternalAdmissionHookConfiguration.
0000000000000000000000000000000000000000;;		Items []ExternalAdmissionHookConfiguration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalAdmissionHook describes an external admission webhook and the
0000000000000000000000000000000000000000;;	// resources and operations it applies to.
0000000000000000000000000000000000000000;;	type ExternalAdmissionHook struct {
0000000000000000000000000000000000000000;;		// The name of the external admission webhook.
0000000000000000000000000000000000000000;;		// Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where
0000000000000000000000000000000000000000;;		// "imagepolicy" is the name of the webhook, and kubernetes.io is the name
0000000000000000000000000000000000000000;;		// of the organization.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClientConfig defines how to communicate with the hook.
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		ClientConfig AdmissionHookClientConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rules describes what operations on what resources/subresources the webhook cares about.
0000000000000000000000000000000000000000;;		// The webhook cares about an operation if it matches _any_ Rule.
0000000000000000000000000000000000000000;;		Rules []RuleWithOperations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FailurePolicy defines how unrecognized errors from the admission endpoint are handled -
0000000000000000000000000000000000000000;;		// allowed values are Ignore or Fail. Defaults to Ignore.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		FailurePolicy *FailurePolicyType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make
0000000000000000000000000000000000000000;;	// sure that all the tuple expansions are valid.
0000000000000000000000000000000000000000;;	type RuleWithOperations struct {
0000000000000000000000000000000000000000;;		// Operations is the operations the admission hook cares about - CREATE, UPDATE, or *
0000000000000000000000000000000000000000;;		// for all operations.
0000000000000000000000000000000000000000;;		// If '*' is present, the length of the slice must be one.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		Operations []OperationType
0000000000000000000000000000000000000000;;		// Rule is embedded, it describes other criteria of the rule, like
0000000000000000000000000000000000000000;;		// APIGroups, APIVersions, Resources, etc.
0000000000000000000000000000000000000000;;		Rule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The constants should be kept in sync with those defined in k8s.io/kubernetes/pkg/admission/interface.go.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		OperationAll OperationType = "*"
0000000000000000000000000000000000000000;;		Create       OperationType = "CREATE"
0000000000000000000000000000000000000000;;		Update       OperationType = "UPDATE"
0000000000000000000000000000000000000000;;		Delete       OperationType = "DELETE"
0000000000000000000000000000000000000000;;		Connect      OperationType = "CONNECT"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AdmissionHookClientConfig contains the information to make a TLS
0000000000000000000000000000000000000000;;	// connection with the webhook
0000000000000000000000000000000000000000;;	type AdmissionHookClientConfig struct {
0000000000000000000000000000000000000000;;		// Service is a reference to the service for this webhook. If there is only
0000000000000000000000000000000000000000;;		// one port open for the service, that port will be used. If there are multiple
0000000000000000000000000000000000000000;;		// ports open, port 443 will be used if it is open, otherwise it is an error.
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		Service ServiceReference
0000000000000000000000000000000000000000;;		// CABundle is a PEM encoded CA bundle which will be used to validate webhook's server certificate.
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		CABundle []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceReference holds a reference to Service.legacy.k8s.io
0000000000000000000000000000000000000000;;	type ServiceReference struct {
0000000000000000000000000000000000000000;;		// Namespace is the namespace of the service
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;		// Name is the name of the service
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	}
