0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
981ed6543ff879b560102d7974fa769e652a12cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/apis/abac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// allAuthenticated matches k8s.io/apiserver/pkg/authentication/user.AllAuthenticated,
0000000000000000000000000000000000000000;;	// but we don't want an client library (which must include types), depending on a server library
0000000000000000000000000000000000000000;;	const allAuthenticated = "system:authenticated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			func(in *Policy, out *api.Policy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				// Begin by copying all fields
0000000000000000000000000000000000000000;;				if err := autoConvert_v1beta1_Policy_To_abac_Policy(in, out, s); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// In v1beta1, * user or group maps to all authenticated subjects
0000000000000000000000000000000000000000;;				if in.Spec.User == "*" || in.Spec.Group == "*" {
0000000000000000000000000000000000000000;;					out.Spec.Group = allAuthenticated
0000000000000000000000000000000000000000;;					out.Spec.User = ""
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
