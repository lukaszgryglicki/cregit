0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
981ed6543ff879b560102d7974fa769e652a12cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/apis/abac"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/abac/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestV1Beta1Conversion(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			old      *v1beta1.Policy
0000000000000000000000000000000000000000;;			expected *api.Policy
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// specifying a user is preserved
0000000000000000000000000000000000000000;;			"user": {
0000000000000000000000000000000000000000;;				old:      &v1beta1.Policy{Spec: v1beta1.PolicySpec{User: "bob"}},
0000000000000000000000000000000000000000;;				expected: &api.Policy{Spec: api.PolicySpec{User: "bob"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// specifying a group is preserved
0000000000000000000000000000000000000000;;			"group": {
0000000000000000000000000000000000000000;;				old:      &v1beta1.Policy{Spec: v1beta1.PolicySpec{Group: "mygroup"}},
0000000000000000000000000000000000000000;;				expected: &api.Policy{Spec: api.PolicySpec{Group: "mygroup"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// specifying * for user or group maps to all authenticated subjects
0000000000000000000000000000000000000000;;			"* user": {
0000000000000000000000000000000000000000;;				old:      &v1beta1.Policy{Spec: v1beta1.PolicySpec{User: "*"}},
0000000000000000000000000000000000000000;;				expected: &api.Policy{Spec: api.PolicySpec{Group: user.AllAuthenticated}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"* group": {
0000000000000000000000000000000000000000;;				old:      &v1beta1.Policy{Spec: v1beta1.PolicySpec{Group: "*"}},
0000000000000000000000000000000000000000;;				expected: &api.Policy{Spec: api.PolicySpec{Group: user.AllAuthenticated}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			internal := &api.Policy{}
0000000000000000000000000000000000000000;;			if err := api.Scheme.Convert(tc.old, internal, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(internal, tc.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n\t%#v, got \n\t%#v", k, tc.expected, internal)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
