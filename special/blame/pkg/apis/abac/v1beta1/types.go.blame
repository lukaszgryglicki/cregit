0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6ca75e78d4b5d7d762903a7b5fd5764878b8cae7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:openapi-gen=true
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Policy contains a single ABAC policy rule
0000000000000000000000000000000000000000;;	type Policy struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec describes the policy rule
0000000000000000000000000000000000000000;;		Spec PolicySpec `json:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PolicySpec contains the attributes for a policy rule
0000000000000000000000000000000000000000;;	type PolicySpec struct {
0000000000000000000000000000000000000000;;		// User is the username this rule applies to.
0000000000000000000000000000000000000000;;		// Either user or group is required to match the request.
0000000000000000000000000000000000000000;;		// "*" matches all users.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		User string `json:"user,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Group is the group this rule applies to.
0000000000000000000000000000000000000000;;		// Either user or group is required to match the request.
0000000000000000000000000000000000000000;;		// "*" matches all groups.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Group string `json:"group,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Readonly matches readonly requests when true, and all requests when false
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Readonly bool `json:"readonly,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APIGroup is the name of an API group. APIGroup, Resource, and Namespace are required to match resource requests.
0000000000000000000000000000000000000000;;		// "*" matches all API groups
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		APIGroup string `json:"apiGroup,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource is the name of a resource. APIGroup, Resource, and Namespace are required to match resource requests.
0000000000000000000000000000000000000000;;		// "*" matches all resources
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Resource string `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the name of a namespace. APIGroup, Resource, and Namespace are required to match resource requests.
0000000000000000000000000000000000000000;;		// "*" matches all namespaces (including unnamespaced requests)
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NonResourcePath matches non-resource request paths.
0000000000000000000000000000000000000000;;		// "*" matches all paths
0000000000000000000000000000000000000000;;		// "/foo/*" matches all subpaths of foo
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NonResourcePath string `json:"nonResourcePath,omitempty"`
0000000000000000000000000000000000000000;;	}
