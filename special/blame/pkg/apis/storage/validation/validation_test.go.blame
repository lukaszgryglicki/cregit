0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4c41072728dc1bc6ebf5ba9afa41232c759d064e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateStorageClass(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []storage.StorageClass{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// empty parameters
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo-provisioner",
0000000000000000000000000000000000000000;;				Parameters:  map[string]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// nil parameters
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo-provisioner",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// some parameters
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo-provisioner",
0000000000000000000000000000000000000000;;				Parameters: map[string]string{
0000000000000000000000000000000000000000;;					"kubernetes.io/foo-parameter": "free/form/string",
0000000000000000000000000000000000000000;;					"foo-parameter":               "free-form-string",
0000000000000000000000000000000000000000;;					"foo-parameter2":              "{\"embedded\": \"json\", \"with\": {\"structures\":\"inside\"}}",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Success cases are expected to pass validation.
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateStorageClass(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %d, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// generate a map longer than maxProvisionerParameterSize
0000000000000000000000000000000000000000;;		longParameters := make(map[string]string)
0000000000000000000000000000000000000000;;		totalSize := 0
0000000000000000000000000000000000000000;;		for totalSize < maxProvisionerParameterSize {
0000000000000000000000000000000000000000;;			k := fmt.Sprintf("param/%d", totalSize)
0000000000000000000000000000000000000000;;			v := fmt.Sprintf("value-%d", totalSize)
0000000000000000000000000000000000000000;;			longParameters[k] = v
0000000000000000000000000000000000000000;;			totalSize = totalSize + len(k) + len(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]storage.StorageClass{
0000000000000000000000000000000000000000;;			"namespace is present": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo-provisioner",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid provisioner": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/invalid/provisioner",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid empty parameter name": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo",
0000000000000000000000000000000000000000;;				Parameters: map[string]string{
0000000000000000000000000000000000000000;;					"": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"provisioner: Required value": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"too long parameters": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Provisioner: "kubernetes.io/foo",
0000000000000000000000000000000000000000;;				Parameters:  longParameters,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Error cases are not expected to pass validation.
0000000000000000000000000000000000000000;;		for testName, storageClass := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateStorageClass(&storageClass); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected failure for test: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
