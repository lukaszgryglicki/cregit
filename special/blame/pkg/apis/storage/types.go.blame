0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4c41072728dc1bc6ebf5ba9afa41232c759d064e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageClass describes a named "class" of storage offered in a cluster.
0000000000000000000000000000000000000000;;	// Different classes might map to quality-of-service levels, or to backup policies,
0000000000000000000000000000000000000000;;	// or to arbitrary policies determined by the cluster administrators.  Kubernetes
0000000000000000000000000000000000000000;;	// itself is unopinionated about what classes represent.  This concept is sometimes
0000000000000000000000000000000000000000;;	// called "profiles" in other storage systems.
0000000000000000000000000000000000000000;;	// The name of a StorageClass object is significant, and is how users can request a particular class.
0000000000000000000000000000000000000000;;	type StorageClass struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// provisioner is the driver expected to handle this StorageClass.
0000000000000000000000000000000000000000;;		// This is an optionally-prefixed name, like a label key.
0000000000000000000000000000000000000000;;		// For example: "kubernetes.io/gce-pd" or "kubernetes.io/aws-ebs".
0000000000000000000000000000000000000000;;		// This value may not be empty.
0000000000000000000000000000000000000000;;		Provisioner string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// parameters holds parameters for the provisioner.
0000000000000000000000000000000000000000;;		// These values are opaque to the  system and are passed directly
0000000000000000000000000000000000000000;;		// to the provisioner.  The only validation done on keys is that they are
0000000000000000000000000000000000000000;;		// not empty.  The maximum number of parameters is
0000000000000000000000000000000000000000;;		// 512, with a cumulative max size of 256K
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Parameters map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageClassList is a collection of storage classes.
0000000000000000000000000000000000000000;;	type StorageClassList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Items is the list of StorageClasses
0000000000000000000000000000000000000000;;		Items []StorageClass
0000000000000000000000000000000000000000;;	}
