0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0662f350bf7d7627bb70fbddb7e6d7f125821b7d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		networkingv1 "k8s.io/api/networking/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicy_To_extensions_NetworkPolicy,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicy_To_v1_NetworkPolicy,
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicyIngressRule_To_extensions_NetworkPolicyIngressRule,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicyIngressRule_To_v1_NetworkPolicyIngressRule,
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicyList_To_extensions_NetworkPolicyList,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicyList_To_v1_NetworkPolicyList,
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicyPeer_To_extensions_NetworkPolicyPeer,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicyPeer_To_v1_NetworkPolicyPeer,
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicyPort_To_extensions_NetworkPolicyPort,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicyPort_To_v1_NetworkPolicyPort,
0000000000000000000000000000000000000000;;			Convert_v1_NetworkPolicySpec_To_extensions_NetworkPolicySpec,
0000000000000000000000000000000000000000;;			Convert_extensions_NetworkPolicySpec_To_v1_NetworkPolicySpec,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicy_To_extensions_NetworkPolicy(in *networkingv1.NetworkPolicy, out *extensions.NetworkPolicy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		return Convert_v1_NetworkPolicySpec_To_extensions_NetworkPolicySpec(&in.Spec, &out.Spec, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicy_To_v1_NetworkPolicy(in *extensions.NetworkPolicy, out *networkingv1.NetworkPolicy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		return Convert_extensions_NetworkPolicySpec_To_v1_NetworkPolicySpec(&in.Spec, &out.Spec, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicySpec_To_extensions_NetworkPolicySpec(in *networkingv1.NetworkPolicySpec, out *extensions.NetworkPolicySpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Ingress = make([]extensions.NetworkPolicyIngressRule, len(in.Ingress))
0000000000000000000000000000000000000000;;		for i := range in.Ingress {
0000000000000000000000000000000000000000;;			if err := Convert_v1_NetworkPolicyIngressRule_To_extensions_NetworkPolicyIngressRule(&in.Ingress[i], &out.Ingress[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicySpec_To_v1_NetworkPolicySpec(in *extensions.NetworkPolicySpec, out *networkingv1.NetworkPolicySpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Ingress = make([]networkingv1.NetworkPolicyIngressRule, len(in.Ingress))
0000000000000000000000000000000000000000;;		for i := range in.Ingress {
0000000000000000000000000000000000000000;;			if err := Convert_extensions_NetworkPolicyIngressRule_To_v1_NetworkPolicyIngressRule(&in.Ingress[i], &out.Ingress[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicyIngressRule_To_extensions_NetworkPolicyIngressRule(in *networkingv1.NetworkPolicyIngressRule, out *extensions.NetworkPolicyIngressRule, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Ports = make([]extensions.NetworkPolicyPort, len(in.Ports))
0000000000000000000000000000000000000000;;		for i := range in.Ports {
0000000000000000000000000000000000000000;;			if err := Convert_v1_NetworkPolicyPort_To_extensions_NetworkPolicyPort(&in.Ports[i], &out.Ports[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.From = make([]extensions.NetworkPolicyPeer, len(in.From))
0000000000000000000000000000000000000000;;		for i := range in.From {
0000000000000000000000000000000000000000;;			if err := Convert_v1_NetworkPolicyPeer_To_extensions_NetworkPolicyPeer(&in.From[i], &out.From[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicyIngressRule_To_v1_NetworkPolicyIngressRule(in *extensions.NetworkPolicyIngressRule, out *networkingv1.NetworkPolicyIngressRule, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Ports = make([]networkingv1.NetworkPolicyPort, len(in.Ports))
0000000000000000000000000000000000000000;;		for i := range in.Ports {
0000000000000000000000000000000000000000;;			if err := Convert_extensions_NetworkPolicyPort_To_v1_NetworkPolicyPort(&in.Ports[i], &out.Ports[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.From = make([]networkingv1.NetworkPolicyPeer, len(in.From))
0000000000000000000000000000000000000000;;		for i := range in.From {
0000000000000000000000000000000000000000;;			if err := Convert_extensions_NetworkPolicyPeer_To_v1_NetworkPolicyPeer(&in.From[i], &out.From[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicyPeer_To_extensions_NetworkPolicyPeer(in *networkingv1.NetworkPolicyPeer, out *extensions.NetworkPolicyPeer, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.PodSelector != nil {
0000000000000000000000000000000000000000;;			out.PodSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.PodSelector, out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.PodSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.NamespaceSelector != nil {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.NamespaceSelector, out.NamespaceSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicyPeer_To_v1_NetworkPolicyPeer(in *extensions.NetworkPolicyPeer, out *networkingv1.NetworkPolicyPeer, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.PodSelector != nil {
0000000000000000000000000000000000000000;;			out.PodSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.PodSelector, out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.PodSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.NamespaceSelector != nil {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.NamespaceSelector, out.NamespaceSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicyPort_To_extensions_NetworkPolicyPort(in *networkingv1.NetworkPolicyPort, out *extensions.NetworkPolicyPort, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Protocol != nil {
0000000000000000000000000000000000000000;;			out.Protocol = new(api.Protocol)
0000000000000000000000000000000000000000;;			*out.Protocol = api.Protocol(*in.Protocol)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Protocol = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Port = in.Port
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicyPort_To_v1_NetworkPolicyPort(in *extensions.NetworkPolicyPort, out *networkingv1.NetworkPolicyPort, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Protocol != nil {
0000000000000000000000000000000000000000;;			out.Protocol = new(v1.Protocol)
0000000000000000000000000000000000000000;;			*out.Protocol = v1.Protocol(*in.Protocol)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Protocol = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Port = in.Port
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_NetworkPolicyList_To_extensions_NetworkPolicyList(in *networkingv1.NetworkPolicyList, out *extensions.NetworkPolicyList, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ListMeta = in.ListMeta
0000000000000000000000000000000000000000;;		out.Items = make([]extensions.NetworkPolicy, len(in.Items))
0000000000000000000000000000000000000000;;		for i := range in.Items {
0000000000000000000000000000000000000000;;			if err := Convert_v1_NetworkPolicy_To_extensions_NetworkPolicy(&in.Items[i], &out.Items[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_NetworkPolicyList_To_v1_NetworkPolicyList(in *extensions.NetworkPolicyList, out *networkingv1.NetworkPolicyList, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ListMeta = in.ListMeta
0000000000000000000000000000000000000000;;		out.Items = make([]networkingv1.NetworkPolicy, len(in.Items))
0000000000000000000000000000000000000000;;		for i := range in.Items {
0000000000000000000000000000000000000000;;			if err := Convert_extensions_NetworkPolicy_To_v1_NetworkPolicy(&in.Items[i], &out.Items[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
