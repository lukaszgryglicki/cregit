0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0662f350bf7d7627bb70fbddb7e6d7f125821b7d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		unversionedvalidation "k8s.io/apimachinery/pkg/apis/meta/v1/validation"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apivalidation "k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/networking"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNetworkPolicyName can be used to check whether the given networkpolicy
0000000000000000000000000000000000000000;;	// name is valid.
0000000000000000000000000000000000000000;;	func ValidateNetworkPolicyName(name string, prefix bool) []string {
0000000000000000000000000000000000000000;;		return apivalidation.NameIsDNSSubdomain(name, prefix)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNetworkPolicySpec tests if required fields in the networkpolicy spec are set.
0000000000000000000000000000000000000000;;	func ValidateNetworkPolicySpec(spec *networking.NetworkPolicySpec, fldPath *field.Path) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, unversionedvalidation.ValidateLabelSelector(&spec.PodSelector, fldPath.Child("podSelector"))...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate ingress rules.
0000000000000000000000000000000000000000;;		for i, ingress := range spec.Ingress {
0000000000000000000000000000000000000000;;			ingressPath := fldPath.Child("ingress").Index(i)
0000000000000000000000000000000000000000;;			for i, port := range ingress.Ports {
0000000000000000000000000000000000000000;;				portPath := ingressPath.Child("ports").Index(i)
0000000000000000000000000000000000000000;;				if port.Protocol != nil && *port.Protocol != api.ProtocolTCP && *port.Protocol != api.ProtocolUDP {
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, field.NotSupported(portPath.Child("protocol"), *port.Protocol, []string{string(api.ProtocolTCP), string(api.ProtocolUDP)}))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if port.Port != nil {
0000000000000000000000000000000000000000;;					if port.Port.Type == intstr.Int {
0000000000000000000000000000000000000000;;						for _, msg := range validation.IsValidPortNum(int(port.Port.IntVal)) {
0000000000000000000000000000000000000000;;							allErrs = append(allErrs, field.Invalid(portPath.Child("port"), port.Port.IntVal, msg))
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						for _, msg := range validation.IsValidPortName(port.Port.StrVal) {
0000000000000000000000000000000000000000;;							allErrs = append(allErrs, field.Invalid(portPath.Child("port"), port.Port.StrVal, msg))
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i, from := range ingress.From {
0000000000000000000000000000000000000000;;				fromPath := ingressPath.Child("from").Index(i)
0000000000000000000000000000000000000000;;				numFroms := 0
0000000000000000000000000000000000000000;;				if from.PodSelector != nil {
0000000000000000000000000000000000000000;;					numFroms++
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, unversionedvalidation.ValidateLabelSelector(from.PodSelector, fromPath.Child("podSelector"))...)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if from.NamespaceSelector != nil {
0000000000000000000000000000000000000000;;					numFroms++
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, unversionedvalidation.ValidateLabelSelector(from.NamespaceSelector, fromPath.Child("namespaceSelector"))...)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if numFroms == 0 {
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, field.Required(fromPath, "must specify a from type"))
0000000000000000000000000000000000000000;;				} else if numFroms > 1 {
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, field.Forbidden(fromPath, "may not specify more than 1 from type"))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNetworkPolicy validates a networkpolicy.
0000000000000000000000000000000000000000;;	func ValidateNetworkPolicy(np *networking.NetworkPolicy) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := apivalidation.ValidateObjectMeta(&np.ObjectMeta, true, ValidateNetworkPolicyName, field.NewPath("metadata"))
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, ValidateNetworkPolicySpec(&np.Spec, field.NewPath("spec"))...)
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNetworkPolicyUpdate tests if an update to a NetworkPolicy is valid.
0000000000000000000000000000000000000000;;	func ValidateNetworkPolicyUpdate(update, old *networking.NetworkPolicy) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, apivalidation.ValidateObjectMetaUpdate(&update.ObjectMeta, &old.ObjectMeta, field.NewPath("metadata"))...)
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, ValidateNetworkPolicySpec(&update.Spec, field.NewPath("spec"))...)
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
