0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cfdd6d58641bf8042b29b9853e521513e4dd2e23;pkg/apis/authentication.k8s.io/types.go[pkg/apis/authentication.k8s.io/types.go][pkg/apis/authentication/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ImpersonateUserHeader is used to impersonate a particular user during an API server request
0000000000000000000000000000000000000000;;		ImpersonateUserHeader = "Impersonate-User"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImpersonateGroupHeader is used to impersonate a particular group during an API server request.
0000000000000000000000000000000000000000;;		// It can be repeated multiplied times for multiple groups.
0000000000000000000000000000000000000000;;		ImpersonateGroupHeader = "Impersonate-Group"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImpersonateUserExtraHeaderPrefix is a prefix for any header used to impersonate an entry in the
0000000000000000000000000000000000000000;;		// extra map[string][]string for user.Info.  The key will be every after the prefix.
0000000000000000000000000000000000000000;;		// It can be repeated multiplied times for multiple map keys and the same key can be repeated multiple
0000000000000000000000000000000000000000;;		// times to have multiple elements in the slice under a single key
0000000000000000000000000000000000000000;;		ImpersonateUserExtraHeaderPrefix = "Impersonate-Extra-"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenReview attempts to authenticate a token to a known user.
0000000000000000000000000000000000000000;;	type TokenReview struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// ObjectMeta fulfills the metav1.ObjectMetaAccessor interface so that the stock
0000000000000000000000000000000000000000;;		// REST handler paths work
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec holds information about the request being evaluated
0000000000000000000000000000000000000000;;		Spec TokenReviewSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is filled in by the server and indicates whether the request can be authenticated.
0000000000000000000000000000000000000000;;		Status TokenReviewStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenReviewSpec is a description of the token authentication request.
0000000000000000000000000000000000000000;;	type TokenReviewSpec struct {
0000000000000000000000000000000000000000;;		// Token is the opaque bearer token.
0000000000000000000000000000000000000000;;		Token string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenReviewStatus is the result of the token authentication request.
0000000000000000000000000000000000000000;;	// This type mirrors the authentication.Token interface
0000000000000000000000000000000000000000;;	type TokenReviewStatus struct {
0000000000000000000000000000000000000000;;		// Authenticated indicates that the token was associated with a known user.
0000000000000000000000000000000000000000;;		Authenticated bool
0000000000000000000000000000000000000000;;		// User is the UserInfo associated with the provided token.
0000000000000000000000000000000000000000;;		User UserInfo
0000000000000000000000000000000000000000;;		// Error indicates that the token couldn't be checked
0000000000000000000000000000000000000000;;		Error string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserInfo holds the information about the user needed to implement the
0000000000000000000000000000000000000000;;	// user.Info interface.
0000000000000000000000000000000000000000;;	type UserInfo struct {
0000000000000000000000000000000000000000;;		// The name that uniquely identifies this user among all active users.
0000000000000000000000000000000000000000;;		Username string
0000000000000000000000000000000000000000;;		// A unique value that identifies this user across time. If this user is
0000000000000000000000000000000000000000;;		// deleted and another user by the same name is added, they will have
0000000000000000000000000000000000000000;;		// different UIDs.
0000000000000000000000000000000000000000;;		UID string
0000000000000000000000000000000000000000;;		// The names of groups this user is a part of.
0000000000000000000000000000000000000000;;		Groups []string
0000000000000000000000000000000000000000;;		// Any additional information provided by the authenticator.
0000000000000000000000000000000000000000;;		Extra map[string]ExtraValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtraValue masks the value so protobuf can generate
0000000000000000000000000000000000000000;;	type ExtraValue []string
