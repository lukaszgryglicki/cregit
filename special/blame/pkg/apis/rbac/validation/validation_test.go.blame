0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
41d09af91494e0fe417fbc529b3fbc5cae0ac70f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateClusterRoleBinding(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateClusterRoleBinding(
0000000000000000000000000000000000000000;;			&rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "master"},
0000000000000000000000000000000000000000;;				RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;				Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{Name: "validsaname", APIGroup: "", Namespace: "foo", Kind: rbac.ServiceAccountKind},
0000000000000000000000000000000000000000;;					{Name: "valid@username", APIGroup: rbac.GroupName, Kind: rbac.UserKind},
0000000000000000000000000000000000000000;;					{Name: "valid@groupname", APIGroup: rbac.GroupName, Kind: rbac.GroupKind},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			A rbac.ClusterRoleBinding
0000000000000000000000000000000000000000;;			T field.ErrorType
0000000000000000000000000000000000000000;;			F string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"bad group": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: "rbac.GroupName", Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "roleRef.apiGroup",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad kind": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Type", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "roleRef.kind",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"reference role": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "roleRef.kind",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length name": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "metadata.name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad role": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "roleRef.name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad subject kind": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Name: "subject"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "subjects[0].kind",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad subject name": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Namespace: "foo", Name: "subject:bad", Kind: rbac.ServiceAccountKind}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				F: "subjects[0].name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing SA namespace": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Name: "good", Kind: rbac.ServiceAccountKind}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "subjects[0].namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing subject name": {
0000000000000000000000000000000000000000;;				A: rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Namespace: "foo", Kind: rbac.ServiceAccountKind}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "subjects[0].name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateClusterRoleBinding(&v.A)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure %s for %v", k, v.A)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if errs[i].Type != v.T {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have type %s: %v", k, v.T, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if errs[i].Field != v.F {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have field %s: %v", k, v.F, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleBinding(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateRoleBinding(
0000000000000000000000000000000000000000;;			&rbac.RoleBinding{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master"},
0000000000000000000000000000000000000000;;				RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;				Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{Name: "validsaname", APIGroup: "", Kind: rbac.ServiceAccountKind},
0000000000000000000000000000000000000000;;					{Name: "valid@username", APIGroup: rbac.GroupName, Kind: rbac.UserKind},
0000000000000000000000000000000000000000;;					{Name: "valid@groupname", APIGroup: rbac.GroupName, Kind: rbac.GroupKind},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			A rbac.RoleBinding
0000000000000000000000000000000000000000;;			T field.ErrorType
0000000000000000000000000000000000000000;;			F string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"bad group": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: "rbac.GroupName", Kind: "ClusterRole", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "roleRef.apiGroup",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad kind": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Type", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "roleRef.kind",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length namespace": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "metadata.namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length name": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "metadata.name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad role": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "default"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "roleRef.name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad subject kind": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Name: "subject"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				F: "subjects[0].kind",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad subject name": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Name: "subject:bad", Kind: rbac.ServiceAccountKind}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				F: "subjects[0].name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing subject name": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;					Subjects:   []rbac.Subject{{Kind: rbac.ServiceAccountKind}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				F: "subjects[0].name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateRoleBinding(&v.A)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure %s for %v", k, v.A)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if errs[i].Type != v.T {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have type %s: %v", k, v.T, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if errs[i].Field != v.F {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have field %s: %v", k, v.F, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleBindingUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		old := &rbac.RoleBinding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;			RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errs := ValidateRoleBindingUpdate(
0000000000000000000000000000000000000000;;			&rbac.RoleBinding{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "valid"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			old,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			A rbac.RoleBinding
0000000000000000000000000000000000000000;;			T field.ErrorType
0000000000000000000000000000000000000000;;			F string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"changedRef": {
0000000000000000000000000000000000000000;;				A: rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "master", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;					RoleRef:    rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: "changed"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				T: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				F: "roleRef",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateRoleBindingUpdate(&v.A, old)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure %s for %v", k, v.A)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if errs[i].Type != v.T {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have type %s: %v", k, v.T, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if errs[i].Field != v.F {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected errors to have field %s: %v", k, v.F, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateRoleTest struct {
0000000000000000000000000000000000000000;;		role    rbac.Role
0000000000000000000000000000000000000000;;		wantErr bool
0000000000000000000000000000000000000000;;		errType field.ErrorType
0000000000000000000000000000000000000000;;		field   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v ValidateRoleTest) test(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateRole(&v.role)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			if v.wantErr {
0000000000000000000000000000000000000000;;				t.Fatal("expected validation error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !v.wantErr {
0000000000000000000000000000000000000000;;			t.Errorf("didn't expect error, got %v", errs)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range errs {
0000000000000000000000000000000000000000;;			if errs[i].Type != v.errType {
0000000000000000000000000000000000000000;;				t.Errorf("expected errors to have type %s: %v", v.errType, errs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[i].Field != v.field {
0000000000000000000000000000000000000000;;				t.Errorf("expected errors to have field %s: %v", v.field, errs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateClusterRoleTest struct {
0000000000000000000000000000000000000000;;		role    rbac.ClusterRole
0000000000000000000000000000000000000000;;		wantErr bool
0000000000000000000000000000000000000000;;		errType field.ErrorType
0000000000000000000000000000000000000000;;		field   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v ValidateClusterRoleTest) test(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateClusterRole(&v.role)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			if v.wantErr {
0000000000000000000000000000000000000000;;				t.Fatal("expected validation error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !v.wantErr {
0000000000000000000000000000000000000000;;			t.Errorf("didn't expect error, got %v", errs)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range errs {
0000000000000000000000000000000000000000;;			if errs[i].Type != v.errType {
0000000000000000000000000000000000000000;;				t.Errorf("expected errors to have type %s: %v", v.errType, errs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[i].Field != v.field {
0000000000000000000000000000000000000000;;				t.Errorf("expected errors to have field %s: %v", v.field, errs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleZeroLengthNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "default"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			field:   "metadata.namespace",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleZeroLengthName(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Namespace: "default"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			field:   "metadata.name",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleValidRole(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: false,
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleValidRoleNoNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateClusterRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.ClusterRole{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: false,
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleNonResourceURL(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateClusterRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.ClusterRole{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:           []string{"get"},
0000000000000000000000000000000000000000;;						NonResourceURLs: []string{"/*"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: false,
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleNamespacedNonResourceURL(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						// non-resource URLs are invalid for namespaced rules
0000000000000000000000000000000000000000;;						Verbs:           []string{"get"},
0000000000000000000000000000000000000000;;						NonResourceURLs: []string{"/*"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			field:   "rules[0].nonResourceURLs",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleNonResourceURLNoVerbs(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateClusterRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.ClusterRole{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:           []string{},
0000000000000000000000000000000000000000;;						NonResourceURLs: []string{"/*"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			field:   "rules[0].verbs",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleMixedNonResourceAndResource(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:           []string{"get"},
0000000000000000000000000000000000000000;;						NonResourceURLs: []string{"/*"},
0000000000000000000000000000000000000000;;						APIGroups:       []string{"v1"},
0000000000000000000000000000000000000000;;						Resources:       []string{"pods"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			field:   "rules[0].nonResourceURLs",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleValidResource(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:     []string{"get"},
0000000000000000000000000000000000000000;;						APIGroups: []string{"v1"},
0000000000000000000000000000000000000000;;						Resources: []string{"pods"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: false,
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleNoAPIGroup(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:     []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []string{"pods"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			field:   "rules[0].apiGroups",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRoleNoResources(t *testing.T) {
0000000000000000000000000000000000000000;;		ValidateRoleTest{
0000000000000000000000000000000000000000;;			role: rbac.Role{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "default",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Verbs:     []string{"get"},
0000000000000000000000000000000000000000;;						APIGroups: []string{"v1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			wantErr: true,
0000000000000000000000000000000000000000;;			errType: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			field:   "rules[0].resources",
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
