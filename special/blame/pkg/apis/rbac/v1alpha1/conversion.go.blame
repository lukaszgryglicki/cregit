0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a978db1bbc3a1a14040383495237cda8c54e17e4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		rbacv1alpha1 "k8s.io/api/rbac/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// allAuthenticated matches k8s.io/apiserver/pkg/authentication/user.AllAuthenticated,
0000000000000000000000000000000000000000;;	// but we don't want an client library (which must include types), depending on a server library
0000000000000000000000000000000000000000;;	const allAuthenticated = "system:authenticated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1alpha1_Subject_To_rbac_Subject(in *rbacv1alpha1.Subject, out *api.Subject, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_v1alpha1_Subject_To_rbac_Subject(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// specifically set the APIGroup for the three subjects recognized in v1alpha1
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.ServiceAccountKind:
0000000000000000000000000000000000000000;;			out.APIGroup = ""
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.UserKind:
0000000000000000000000000000000000000000;;			out.APIGroup = GroupName
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.GroupKind:
0000000000000000000000000000000000000000;;			out.APIGroup = GroupName
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// For unrecognized kinds, use the group portion of the APIVersion if we can get it
0000000000000000000000000000000000000000;;			if gv, err := schema.ParseGroupVersion(in.APIVersion); err == nil {
0000000000000000000000000000000000000000;;				out.APIGroup = gv.Group
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User * in v1alpha1 will only match all authenticated users
0000000000000000000000000000000000000000;;		// This is only for compatibility with old RBAC bindings
0000000000000000000000000000000000000000;;		// Special treatment for * should not be included in v1beta1
0000000000000000000000000000000000000000;;		if out.Kind == rbacv1alpha1.UserKind && out.APIGroup == GroupName && out.Name == "*" {
0000000000000000000000000000000000000000;;			out.Kind = rbacv1alpha1.GroupKind
0000000000000000000000000000000000000000;;			out.Name = allAuthenticated
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_rbac_Subject_To_v1alpha1_Subject(in *api.Subject, out *rbacv1alpha1.Subject, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_rbac_Subject_To_v1alpha1_Subject(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.ServiceAccountKind && in.APIGroup == "":
0000000000000000000000000000000000000000;;			// Make service accounts v1
0000000000000000000000000000000000000000;;			out.APIVersion = "v1"
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.UserKind && in.APIGroup == GroupName:
0000000000000000000000000000000000000000;;			// users in the rbac API group get v1alpha
0000000000000000000000000000000000000000;;			out.APIVersion = SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		case in.Kind == rbacv1alpha1.GroupKind && in.APIGroup == GroupName:
0000000000000000000000000000000000000000;;			// groups in the rbac API group get v1alpha
0000000000000000000000000000000000000000;;			out.APIVersion = SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// otherwise, they get an unspecified version of a group
0000000000000000000000000000000000000000;;			out.APIVersion = schema.GroupVersion{Group: in.APIGroup}.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
