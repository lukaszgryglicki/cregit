0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a978db1bbc3a1a14040383495237cda8c54e17e4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/rbac/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		rbacapi "k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/rbac/install"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConversion(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			old      *v1alpha1.RoleBinding
0000000000000000000000000000000000000000;;			expected *rbacapi.RoleBinding
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"specific user": {
0000000000000000000000000000000000000000;;				old: &v1alpha1.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef:  v1alpha1.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []v1alpha1.Subject{{Kind: "User", APIVersion: v1alpha1.SchemeGroupVersion.String(), Name: "bob"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &rbacapi.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef:  rbacapi.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []rbacapi.Subject{{Kind: "User", APIGroup: v1alpha1.GroupName, Name: "bob"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"wildcard user matches authenticated": {
0000000000000000000000000000000000000000;;				old: &v1alpha1.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef:  v1alpha1.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []v1alpha1.Subject{{Kind: "User", APIVersion: v1alpha1.SchemeGroupVersion.String(), Name: "*"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &rbacapi.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef:  rbacapi.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []rbacapi.Subject{{Kind: "Group", APIGroup: v1alpha1.GroupName, Name: "system:authenticated"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing api group gets defaulted": {
0000000000000000000000000000000000000000;;				old: &v1alpha1.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef: v1alpha1.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []v1alpha1.Subject{
0000000000000000000000000000000000000000;;						{Kind: "User", Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &rbacapi.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef: rbacapi.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []rbacapi.Subject{
0000000000000000000000000000000000000000;;						{Kind: "User", APIGroup: v1alpha1.GroupName, Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", APIGroup: v1alpha1.GroupName, Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", APIGroup: "", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad api group gets defaulted": {
0000000000000000000000000000000000000000;;				old: &v1alpha1.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef: v1alpha1.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []v1alpha1.Subject{
0000000000000000000000000000000000000000;;						{Kind: "User", APIVersion: "rbac", Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", APIVersion: "rbac", Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", APIVersion: "rbac", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;						{Kind: "User", APIVersion: "rbac/v8", Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", APIVersion: "rbac/v8", Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", APIVersion: "rbac/v8", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &rbacapi.RoleBinding{
0000000000000000000000000000000000000000;;					RoleRef: rbacapi.RoleRef{Name: "foo", APIGroup: v1alpha1.GroupName},
0000000000000000000000000000000000000000;;					Subjects: []rbacapi.Subject{
0000000000000000000000000000000000000000;;						{Kind: "User", APIGroup: v1alpha1.GroupName, Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", APIGroup: v1alpha1.GroupName, Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", APIGroup: "", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;						{Kind: "User", APIGroup: v1alpha1.GroupName, Name: "myuser"},
0000000000000000000000000000000000000000;;						{Kind: "Group", APIGroup: v1alpha1.GroupName, Name: "mygroup"},
0000000000000000000000000000000000000000;;						{Kind: "ServiceAccount", APIGroup: "", Name: "mysa", Namespace: "myns"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			internal := &rbacapi.RoleBinding{}
0000000000000000000000000000000000000000;;			if err := api.Scheme.Convert(tc.old, internal, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(internal, tc.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n\t%#v, got \n\t%#v", k, tc.expected, internal)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
