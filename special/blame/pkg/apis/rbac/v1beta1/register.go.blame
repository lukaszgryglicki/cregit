0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1f6eed4fc42709cee994e54c06771ab739036a61;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		rbacv1beta1 "k8s.io/api/rbac/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const GroupName = "rbac.authorization.k8s.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: "v1beta1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource takes an unqualified resource and returns a Group qualified GroupResource
0000000000000000000000000000000000000000;;	func Resource(resource string) schema.GroupResource {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithResource(resource).GroupResource()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		localSchemeBuilder = &rbacv1beta1.SchemeBuilder
0000000000000000000000000000000000000000;;		AddToScheme        = localSchemeBuilder.AddToScheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// We only register manually written functions here. The registration of the
0000000000000000000000000000000000000000;;		// generated functions takes place in the generated files. The separation
0000000000000000000000000000000000000000;;		// makes the code compile even when the generated files are missing.
0000000000000000000000000000000000000000;;		localSchemeBuilder.Register(addDefaultingFuncs)
0000000000000000000000000000000000000000;;	}
