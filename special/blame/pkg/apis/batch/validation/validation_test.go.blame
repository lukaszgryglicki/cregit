0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
39b62f2813d48afd46a977ed5aa48d4cc226d406;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getValidManualSelector() *metav1.LabelSelector {
0000000000000000000000000000000000000000;;		return &metav1.LabelSelector{
0000000000000000000000000000000000000000;;			MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getValidPodTemplateSpecForManual(selector *metav1.LabelSelector) api.PodTemplateSpec {
0000000000000000000000000000000000000000;;		return api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: selector.MatchLabels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getValidGeneratedSelector() *metav1.LabelSelector {
0000000000000000000000000000000000000000;;		return &metav1.LabelSelector{
0000000000000000000000000000000000000000;;			MatchLabels: map[string]string{"controller-uid": "1a2b3c", "job-name": "myjob"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getValidPodTemplateSpecForGenerated(selector *metav1.LabelSelector) api.PodTemplateSpec {
0000000000000000000000000000000000000000;;		return api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: selector.MatchLabels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateJob(t *testing.T) {
0000000000000000000000000000000000000000;;		validManualSelector := getValidManualSelector()
0000000000000000000000000000000000000000;;		validPodTemplateSpecForManual := getValidPodTemplateSpecForManual(validManualSelector)
0000000000000000000000000000000000000000;;		validGeneratedSelector := getValidGeneratedSelector()
0000000000000000000000000000000000000000;;		validPodTemplateSpecForGenerated := getValidPodTemplateSpecForGenerated(validGeneratedSelector)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := map[string]batch.Job{
0000000000000000000000000000000000000000;;			"manual selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Selector:       validManualSelector,
0000000000000000000000000000000000000000;;					ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;					Template:       validPodTemplateSpecForManual,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"generated selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Selector: validGeneratedSelector,
0000000000000000000000000000000000000000;;					Template: validPodTemplateSpecForGenerated,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateJob(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success for %s: %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		negative := int32(-1)
0000000000000000000000000000000000000000;;		negative64 := int64(-1)
0000000000000000000000000000000000000000;;		errorCases := map[string]batch.Job{
0000000000000000000000000000000000000000;;			"spec.parallelism:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Parallelism: &negative,
0000000000000000000000000000000000000000;;					Selector:    validGeneratedSelector,
0000000000000000000000000000000000000000;;					Template:    validPodTemplateSpecForGenerated,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.completions:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Completions: &negative,
0000000000000000000000000000000000000000;;					Selector:    validGeneratedSelector,
0000000000000000000000000000000000000000;;					Template:    validPodTemplateSpecForGenerated,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.activeDeadlineSeconds:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					ActiveDeadlineSeconds: &negative64,
0000000000000000000000000000000000000000;;					Selector:              validGeneratedSelector,
0000000000000000000000000000000000000000;;					Template:              validPodTemplateSpecForGenerated,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.selector:Required value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Template: validPodTemplateSpecForGenerated,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.template.metadata.labels: Invalid value: {\"y\":\"z\"}: `selector` does not match template `labels`": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Selector:       validManualSelector,
0000000000000000000000000000000000000000;;					ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: map[string]string{"y": "z"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.template.metadata.labels: Invalid value: {\"controller-uid\":\"4d5e6f\"}: `selector` does not match template `labels`": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Selector:       validManualSelector,
0000000000000000000000000000000000000000;;					ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: map[string]string{"controller-uid": "4d5e6f"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.template.spec.restartPolicy: Unsupported value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "myjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Selector:       validManualSelector,
0000000000000000000000000000000000000000;;					ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validManualSelector.MatchLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateJob(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s := strings.Split(k, ":")
0000000000000000000000000000000000000000;;				err := errs[0]
0000000000000000000000000000000000000000;;				if err.Field != s[0] || !strings.Contains(err.Error(), s[1]) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %v, expected: %s", err, k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateJobUpdateStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			old    batch.Job
0000000000000000000000000000000000000000;;			update batch.Job
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Active:    1,
0000000000000000000000000000000000000000;;						Succeeded: 2,
0000000000000000000000000000000000000000;;						Failed:    3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Active:    1,
0000000000000000000000000000000000000000;;						Succeeded: 1,
0000000000000000000000000000000000000000;;						Failed:    3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateJobUpdateStatus(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]testcase{
0000000000000000000000000000000000000000;;			"[status.active: Invalid value: -1: must be greater than or equal to 0, status.succeeded: Invalid value: -2: must be greater than or equal to 0]": {
0000000000000000000000000000000000000000;;				old: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Active:    1,
0000000000000000000000000000000000000000;;						Succeeded: 2,
0000000000000000000000000000000000000000;;						Failed:    3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Active:    -1,
0000000000000000000000000000000000000000;;						Succeeded: -2,
0000000000000000000000000000000000000000;;						Failed:    3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateJobUpdateStatus(&errorCase.update, &errorCase.old)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs.ToAggregate().Error() != testName {
0000000000000000000000000000000000000000;;				t.Errorf("expected '%s' got '%s'", errs.ToAggregate().Error(), testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateCronJob(t *testing.T) {
0000000000000000000000000000000000000000;;		validManualSelector := getValidManualSelector()
0000000000000000000000000000000000000000;;		validPodTemplateSpec := getValidPodTemplateSpecForGenerated(getValidGeneratedSelector())
0000000000000000000000000000000000000000;;		validPodTemplateSpec.Labels = map[string]string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := map[string]batch.CronJob{
0000000000000000000000000000000000000000;;			"basic scheduled job": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"non-standard scheduled": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "@hourly",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateCronJob(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success for %s: %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		negative := int32(-1)
0000000000000000000000000000000000000000;;		negative64 := int64(-1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]batch.CronJob{
0000000000000000000000000000000000000000;;			"spec.schedule: Invalid value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "error",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.schedule: Required value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.startingDeadlineSeconds:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:                "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy:       batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					StartingDeadlineSeconds: &negative64,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.successfulJobsHistoryLimit: must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:                   "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy:          batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					SuccessfulJobsHistoryLimit: &negative,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.failedJobsHistoryLimit: must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:               "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy:      batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					FailedJobsHistoryLimit: &negative,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.concurrencyPolicy: Required value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule: "* * * * ?",
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.parallelism:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Parallelism: &negative,
0000000000000000000000000000000000000000;;							Template:    validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.completions:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Completions: &negative,
0000000000000000000000000000000000000000;;							Template:    validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.activeDeadlineSeconds:must be greater than or equal to 0": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							ActiveDeadlineSeconds: &negative64,
0000000000000000000000000000000000000000;;							Template:              validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.selector: Invalid value: {\"matchLabels\":{\"a\":\"b\"}}: `selector` will be auto-generated": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Selector: validManualSelector,
0000000000000000000000000000000000000000;;							Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.manualSelector: Unsupported value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;							Template:       validPodTemplateSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"spec.jobTemplate.spec.template.spec.restartPolicy: Unsupported value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "mycronjob",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					UID:       types.UID("1a2b3c"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;					Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;					ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;					JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;							Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;								Spec: api.PodSpec{
0000000000000000000000000000000000000000;;									RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;									DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;									Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateCronJob(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s := strings.Split(k, ":")
0000000000000000000000000000000000000000;;				err := errs[0]
0000000000000000000000000000000000000000;;				if err.Field != s[0] || !strings.Contains(err.Error(), s[1]) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %v, expected: %s", err, k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBool(val bool) *bool {
0000000000000000000000000000000000000000;;		p := new(bool)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
