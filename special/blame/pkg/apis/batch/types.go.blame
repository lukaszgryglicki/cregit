0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
39b62f2813d48afd46a977ed5aa48d4cc226d406;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package batch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Job represents the configuration of a single job.
0000000000000000000000000000000000000000;;	type Job struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of a job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec JobSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Current status of a job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status JobStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobList is a collection of jobs.
0000000000000000000000000000000000000000;;	type JobList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// items is the list of Jobs.
0000000000000000000000000000000000000000;;		Items []Job
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobTemplate describes a template for creating copies of a predefined pod.
0000000000000000000000000000000000000000;;	type JobTemplate struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Defines jobs that will be created from this template.
0000000000000000000000000000000000000000;;		// https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Template JobTemplateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobTemplateSpec describes the data a Job should have when created from a template
0000000000000000000000000000000000000000;;	type JobTemplateSpec struct {
0000000000000000000000000000000000000000;;		// Standard object's metadata of the jobs created from this template.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of the job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec JobSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobSpec describes how the job execution will look like.
0000000000000000000000000000000000000000;;	type JobSpec struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the maximum desired number of pods the job should
0000000000000000000000000000000000000000;;		// run at any given time. The actual number of pods running in steady state will
0000000000000000000000000000000000000000;;		// be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
0000000000000000000000000000000000000000;;		// i.e. when the work left to do is less than max parallelism.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Parallelism *int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the desired number of successfully finished pods the
0000000000000000000000000000000000000000;;		// job should be run with.  Setting to nil means that the success of any
0000000000000000000000000000000000000000;;		// pod signals the success of all pods, and allows parallelism to have any positive
0000000000000000000000000000000000000000;;		// value.  Setting to 1 means that parallelism is limited to 1 and the success of that
0000000000000000000000000000000000000000;;		// pod signals the success of the job.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Completions *int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional duration in seconds relative to the startTime that the job may be active
0000000000000000000000000000000000000000;;		// before the system tries to terminate it; value must be positive integer
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ActiveDeadlineSeconds *int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A label query over pods that should match the pod count.
0000000000000000000000000000000000000000;;		// Normally, the system sets this field for you.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Selector *metav1.LabelSelector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// manualSelector controls generation of pod labels and pod selectors.
0000000000000000000000000000000000000000;;		// Leave `manualSelector` unset unless you are certain what you are doing.
0000000000000000000000000000000000000000;;		// When false or unset, the system pick labels unique to this job
0000000000000000000000000000000000000000;;		// and appends those labels to the pod template.  When true,
0000000000000000000000000000000000000000;;		// the user is responsible for picking unique labels and specifying
0000000000000000000000000000000000000000;;		// the selector.  Failure to pick a unique label may cause this
0000000000000000000000000000000000000000;;		// and other jobs to not function correctly.  However, You may see
0000000000000000000000000000000000000000;;		// `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
0000000000000000000000000000000000000000;;		// API.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ManualSelector *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the pod that will be created when executing a job.
0000000000000000000000000000000000000000;;		Template api.PodTemplateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobStatus represents the current state of a Job.
0000000000000000000000000000000000000000;;	type JobStatus struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The latest available observations of an object's current state.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Conditions []JobCondition
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Represents time when the job was acknowledged by the job controller.
0000000000000000000000000000000000000000;;		// It is not guaranteed to be set in happens-before order across separate operations.
0000000000000000000000000000000000000000;;		// It is represented in RFC3339 form and is in UTC.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartTime *metav1.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Represents time when the job was completed. It is not guaranteed to
0000000000000000000000000000000000000000;;		// be set in happens-before order across separate operations.
0000000000000000000000000000000000000000;;		// It is represented in RFC3339 form and is in UTC.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CompletionTime *metav1.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of actively running pods.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Active int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of pods which reached phase Succeeded.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Succeeded int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of pods which reached phase Failed.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Failed int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JobConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid conditions of a job.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// JobComplete means the job has completed its execution.
0000000000000000000000000000000000000000;;		JobComplete JobConditionType = "Complete"
0000000000000000000000000000000000000000;;		// JobFailed means the job has failed its execution.
0000000000000000000000000000000000000000;;		JobFailed JobConditionType = "Failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobCondition describes current state of a job.
0000000000000000000000000000000000000000;;	type JobCondition struct {
0000000000000000000000000000000000000000;;		// Type of job condition, Complete or Failed.
0000000000000000000000000000000000000000;;		Type JobConditionType
0000000000000000000000000000000000000000;;		// Status of the condition, one of True, False, Unknown.
0000000000000000000000000000000000000000;;		Status api.ConditionStatus
0000000000000000000000000000000000000000;;		// Last time the condition was checked.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastProbeTime metav1.Time
0000000000000000000000000000000000000000;;		// Last time the condition transit from one status to another.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time
0000000000000000000000000000000000000000;;		// (brief) reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;		// Human readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJob represents the configuration of a single cron job.
0000000000000000000000000000000000000000;;	type CronJob struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of a cron job, including the schedule.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec CronJobSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Current status of a cron job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status CronJobStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobList is a collection of cron jobs.
0000000000000000000000000000000000000000;;	type CronJobList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// items is the list of CronJobs.
0000000000000000000000000000000000000000;;		Items []CronJob
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobSpec describes how the job execution will look like and when it will actually run.
0000000000000000000000000000000000000000;;	type CronJobSpec struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
0000000000000000000000000000000000000000;;		Schedule string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional deadline in seconds for starting the job if it misses scheduled
0000000000000000000000000000000000000000;;		// time for any reason.  Missed jobs executions will be counted as failed ones.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartingDeadlineSeconds *int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies how to treat concurrent executions of a Job.
0000000000000000000000000000000000000000;;		// Defaults to Allow.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ConcurrencyPolicy ConcurrencyPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This flag tells the controller to suspend subsequent executions, it does
0000000000000000000000000000000000000000;;		// not apply to already started executions.  Defaults to false.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Suspend *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the job that will be created when executing a CronJob.
0000000000000000000000000000000000000000;;		JobTemplate JobTemplateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of successful finished jobs to retain.
0000000000000000000000000000000000000000;;		// This is a pointer to distinguish between explicit zero and not specified.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		SuccessfulJobsHistoryLimit *int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of failed finished jobs to retain.
0000000000000000000000000000000000000000;;		// This is a pointer to distinguish between explicit zero and not specified.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		FailedJobsHistoryLimit *int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConcurrencyPolicy describes how the job will be handled.
0000000000000000000000000000000000000000;;	// Only one of the following concurrent policies may be specified.
0000000000000000000000000000000000000000;;	// If none of the following policies is specified, the default one
0000000000000000000000000000000000000000;;	// is AllowConcurrent.
0000000000000000000000000000000000000000;;	type ConcurrencyPolicy string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AllowConcurrent allows CronJobs to run concurrently.
0000000000000000000000000000000000000000;;		AllowConcurrent ConcurrencyPolicy = "Allow"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForbidConcurrent forbids concurrent runs, skipping next run if previous
0000000000000000000000000000000000000000;;		// hasn't finished yet.
0000000000000000000000000000000000000000;;		ForbidConcurrent ConcurrencyPolicy = "Forbid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReplaceConcurrent cancels currently running job and replaces it with a new one.
0000000000000000000000000000000000000000;;		ReplaceConcurrent ConcurrencyPolicy = "Replace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobStatus represents the current state of a cron job.
0000000000000000000000000000000000000000;;	type CronJobStatus struct {
0000000000000000000000000000000000000000;;		// A list of pointers to currently running jobs.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Active []api.ObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information when was the last time the job was successfully scheduled.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastScheduleTime *metav1.Time
0000000000000000000000000000000000000000;;	}
