0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
cb0bb3800581192e8c4cdb9d42a1f8d0e1764e46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		// Add non-generated conversion functions
0000000000000000000000000000000000000000;;		err := scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_batch_JobSpec_To_v1_JobSpec,
0000000000000000000000000000000000000000;;			Convert_v1_JobSpec_To_batch_JobSpec,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return scheme.AddFieldLabelConversionFunc("batch/v1", "Job",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name", "metadata.namespace", "status.successful":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label %q not supported for batchv1.Job", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_batch_JobSpec_To_v1_JobSpec(in *batch.JobSpec, out *batchv1.JobSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Parallelism = in.Parallelism
0000000000000000000000000000000000000000;;		out.Completions = in.Completions
0000000000000000000000000000000000000000;;		out.ActiveDeadlineSeconds = in.ActiveDeadlineSeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if in.ManualSelector != nil {
0000000000000000000000000000000000000000;;			out.ManualSelector = new(bool)
0000000000000000000000000000000000000000;;			*out.ManualSelector = *in.ManualSelector
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.ManualSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_JobSpec_To_batch_JobSpec(in *batchv1.JobSpec, out *batch.JobSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Parallelism = in.Parallelism
0000000000000000000000000000000000000000;;		out.Completions = in.Completions
0000000000000000000000000000000000000000;;		out.ActiveDeadlineSeconds = in.ActiveDeadlineSeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if in.ManualSelector != nil {
0000000000000000000000000000000000000000;;			out.ManualSelector = new(bool)
0000000000000000000000000000000000000000;;			*out.ManualSelector = *in.ManualSelector
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.ManualSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
