0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55547f50b65b23d08b9ff9f2e95fb38a5cde47b6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_Job(obj *batchv1.Job) {
0000000000000000000000000000000000000000;;		// For a non-parallel job, you can leave both `.spec.completions` and
0000000000000000000000000000000000000000;;		// `.spec.parallelism` unset.  When both are unset, both are defaulted to 1.
0000000000000000000000000000000000000000;;		if obj.Spec.Completions == nil && obj.Spec.Parallelism == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Completions = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Completions = 1
0000000000000000000000000000000000000000;;			obj.Spec.Parallelism = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Parallelism = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Parallelism == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Parallelism = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Parallelism = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;		if labels != nil && len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;			obj.Labels = labels
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
