0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bf1e5077a7843727621d268cce8951df51a9c0c4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/batch/install"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/apis/batch/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultJob(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultLabels := map[string]string{"default": "default"}
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			original     *batchv1.Job
0000000000000000000000000000000000000000;;			expected     *batchv1.Job
0000000000000000000000000000000000000000;;			expectLabels bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"both unspecified -> sets both to 1": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(1),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"both unspecified -> sets both to 1 and no default labels": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"mylabel": "myvalue"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(1),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"WQ: Parallelism explicitly 0 and completions unset -> no change": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: newInt32(0),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: newInt32(0),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"WQ: Parallelism explicitly 2 and completions unset -> no change": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: newInt32(2),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: newInt32(2),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Completions explicitly 2 and parallelism unset -> parallelism is defaulted": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(2),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(2),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Both set -> no change": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(10),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(11),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(10),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(11),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Both set, flipped -> no change": {
0000000000000000000000000000000000000000;;				original: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(11),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(10),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Labels: defaultLabels},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Completions: newInt32(11),
0000000000000000000000000000000000000000;;						Parallelism: newInt32(10),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			original := test.original
0000000000000000000000000000000000000000;;			expected := test.expected
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(original))
0000000000000000000000000000000000000000;;			actual, ok := obj2.(*batchv1.Job)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected object: %v", name, actual)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (actual.Spec.Completions == nil) != (expected.Spec.Completions == nil) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: got different *completions than expected: %v %v", name, actual.Spec.Completions, expected.Spec.Completions)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual.Spec.Completions != nil && expected.Spec.Completions != nil {
0000000000000000000000000000000000000000;;				if *actual.Spec.Completions != *expected.Spec.Completions {
0000000000000000000000000000000000000000;;					t.Errorf("%s: got different completions than expected: %d %d", name, *actual.Spec.Completions, *expected.Spec.Completions)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (actual.Spec.Parallelism == nil) != (expected.Spec.Parallelism == nil) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: got different *Parallelism than expected: %v %v", name, actual.Spec.Parallelism, expected.Spec.Parallelism)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual.Spec.Parallelism != nil && expected.Spec.Parallelism != nil {
0000000000000000000000000000000000000000;;				if *actual.Spec.Parallelism != *expected.Spec.Parallelism {
0000000000000000000000000000000000000000;;					t.Errorf("%s: got different parallelism than expected: %d %d", name, *actual.Spec.Parallelism, *expected.Spec.Parallelism)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectLabels != reflect.DeepEqual(actual.Labels, actual.Spec.Template.Labels) {
0000000000000000000000000000000000000000;;				if test.expectLabels {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected: %v, got: %v", name, actual.Spec.Template.Labels, actual.Labels)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected equality: %v", name, actual.Labels)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func roundTrip(t *testing.T, obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(api.Codecs.LegacyCodec(SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\n %#v", err, obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj2, err := runtime.Decode(api.Codecs.UniversalDecoder(), data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nData: %s\nSource: %#v", err, string(data), obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj3 := reflect.New(reflect.TypeOf(obj).Elem()).Interface().(runtime.Object)
0000000000000000000000000000000000000000;;		err = api.Scheme.Convert(obj2, obj3, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nSource: %#v", err, obj2)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32(val int32) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
