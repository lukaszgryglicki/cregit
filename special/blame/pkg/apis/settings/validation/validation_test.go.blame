0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4f464f4f557a394d8000d8a173a77452fc579f35;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/settings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEmptyPodPreset(t *testing.T) {
0000000000000000000000000000000000000000;;		emptyPodPreset := &settings.PodPreset{
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errList := ValidatePodPreset(emptyPodPreset)
0000000000000000000000000000000000000000;;		if errList == nil {
0000000000000000000000000000000000000000;;			t.Fatal("empty pod preset should return an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEmptyPodPresetItems(t *testing.T) {
0000000000000000000000000000000000000000;;		emptyPodPreset := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "sample",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errList := ValidatePodPreset(emptyPodPreset)
0000000000000000000000000000000000000000;;		if !strings.Contains(errList.ToAggregate().Error(), "must specify at least one") {
0000000000000000000000000000000000000000;;			t.Fatal("empty pod preset with label selector should return an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodPresets(t *testing.T) {
0000000000000000000000000000000000000000;;		p := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "sample",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Env:     []api.EnvVar{{Name: "abc", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errList := ValidatePodPreset(p)
0000000000000000000000000000000000000000;;		if errList != nil {
0000000000000000000000000000000000000000;;			if errList.ToAggregate() != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("errors: %#v", errList.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p = &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "sample",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Env:     []api.EnvVar{{Name: "abc", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				VolumeMounts: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{Name: "vol", MountPath: "/foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errList = ValidatePodPreset(p)
0000000000000000000000000000000000000000;;		if errList != nil {
0000000000000000000000000000000000000000;;			if errList.ToAggregate() != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("errors: %#v", errList.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodPresetsiVolumeMountError(t *testing.T) {
0000000000000000000000000000000000000000;;		p := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "sample",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				VolumeMounts: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{Name: "dne", MountPath: "/foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Env: []api.EnvVar{{Name: "abc", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errList := ValidatePodPreset(p)
0000000000000000000000000000000000000000;;		if !strings.Contains(errList.ToAggregate().Error(), "spec.volumeMounts[0].name: Not found") {
0000000000000000000000000000000000000000;;			t.Fatal("should have returned error for volume that does not exist")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
