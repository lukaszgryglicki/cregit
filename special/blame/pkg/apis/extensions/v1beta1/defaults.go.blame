0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b345c93715bc4fd35a6b24308379509f269ae749;pkg/expapi/v1/defaults.go[pkg/expapi/v1/defaults.go][pkg/apis/extensions/v1beta1/defaults.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_DaemonSet(obj *extensionsv1beta1.DaemonSet) {
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: support templates defined elsewhere when we support them in the API
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: labels,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateStrategy := &obj.Spec.UpdateStrategy
0000000000000000000000000000000000000000;;		if updateStrategy.Type == "" {
0000000000000000000000000000000000000000;;			updateStrategy.Type = extensionsv1beta1.OnDeleteDaemonSetStrategyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if updateStrategy.Type == extensionsv1beta1.RollingUpdateDaemonSetStrategyType {
0000000000000000000000000000000000000000;;			if updateStrategy.RollingUpdate == nil {
0000000000000000000000000000000000000000;;				rollingUpdate := extensionsv1beta1.RollingUpdateDaemonSet{}
0000000000000000000000000000000000000000;;				updateStrategy.RollingUpdate = &rollingUpdate
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if updateStrategy.RollingUpdate.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;				// Set default MaxUnavailable as 1 by default.
0000000000000000000000000000000000000000;;				maxUnavailable := intstr.FromInt(1)
0000000000000000000000000000000000000000;;				updateStrategy.RollingUpdate.MaxUnavailable = &maxUnavailable
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.RevisionHistoryLimit == nil {
0000000000000000000000000000000000000000;;			obj.Spec.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.RevisionHistoryLimit = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_Deployment(obj *extensionsv1beta1.Deployment) {
0000000000000000000000000000000000000000;;		// Default labels and selector to labels from pod template spec.
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = &metav1.LabelSelector{MatchLabels: labels}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Set extensionsv1beta1.DeploymentSpec.Replicas to 1 if it is not set.
0000000000000000000000000000000000000000;;		if obj.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Replicas = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Replicas = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		strategy := &obj.Spec.Strategy
0000000000000000000000000000000000000000;;		// Set default extensionsv1beta1.DeploymentStrategyType as RollingUpdate.
0000000000000000000000000000000000000000;;		if strategy.Type == "" {
0000000000000000000000000000000000000000;;			strategy.Type = extensionsv1beta1.RollingUpdateDeploymentStrategyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if strategy.Type == extensionsv1beta1.RollingUpdateDeploymentStrategyType || strategy.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate == nil {
0000000000000000000000000000000000000000;;				rollingUpdate := extensionsv1beta1.RollingUpdateDeployment{}
0000000000000000000000000000000000000000;;				strategy.RollingUpdate = &rollingUpdate
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;				// Set default MaxUnavailable as 1 by default.
0000000000000000000000000000000000000000;;				maxUnavailable := intstr.FromInt(1)
0000000000000000000000000000000000000000;;				strategy.RollingUpdate.MaxUnavailable = &maxUnavailable
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate.MaxSurge == nil {
0000000000000000000000000000000000000000;;				// Set default MaxSurge as 1 by default.
0000000000000000000000000000000000000000;;				maxSurge := intstr.FromInt(1)
0000000000000000000000000000000000000000;;				strategy.RollingUpdate.MaxSurge = &maxSurge
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_ReplicaSet(obj *extensionsv1beta1.ReplicaSet) {
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: support templates defined elsewhere when we support them in the API
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: labels,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Replicas = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Replicas = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_NetworkPolicy(obj *extensionsv1beta1.NetworkPolicy) {
0000000000000000000000000000000000000000;;		// Default any undefined Protocol fields to TCP.
0000000000000000000000000000000000000000;;		for _, i := range obj.Spec.Ingress {
0000000000000000000000000000000000000000;;			for _, p := range i.Ports {
0000000000000000000000000000000000000000;;				if p.Protocol == nil {
0000000000000000000000000000000000000000;;					proto := v1.ProtocolTCP
0000000000000000000000000000000000000000;;					p.Protocol = &proto
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
