0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b345c93715bc4fd35a6b24308379509f269ae749;pkg/expapi/v1/conversion.go[pkg/expapi/v1/conversion.go][pkg/apis/extensions/v1beta1/conversion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/networking"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		// Add non-generated conversion functions
0000000000000000000000000000000000000000;;		err := scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_extensions_ScaleStatus_To_v1beta1_ScaleStatus,
0000000000000000000000000000000000000000;;			Convert_v1beta1_ScaleStatus_To_extensions_ScaleStatus,
0000000000000000000000000000000000000000;;			Convert_extensions_DeploymentSpec_To_v1beta1_DeploymentSpec,
0000000000000000000000000000000000000000;;			Convert_v1beta1_DeploymentSpec_To_extensions_DeploymentSpec,
0000000000000000000000000000000000000000;;			Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy,
0000000000000000000000000000000000000000;;			Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy,
0000000000000000000000000000000000000000;;			Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment,
0000000000000000000000000000000000000000;;			Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment,
0000000000000000000000000000000000000000;;			Convert_extensions_RollingUpdateDaemonSet_To_v1beta1_RollingUpdateDaemonSet,
0000000000000000000000000000000000000000;;			Convert_v1beta1_RollingUpdateDaemonSet_To_extensions_RollingUpdateDaemonSet,
0000000000000000000000000000000000000000;;			Convert_extensions_ReplicaSetSpec_To_v1beta1_ReplicaSetSpec,
0000000000000000000000000000000000000000;;			Convert_v1beta1_ReplicaSetSpec_To_extensions_ReplicaSetSpec,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicy_To_networking_NetworkPolicy,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicy_To_v1beta1_NetworkPolicy,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicyIngressRule_To_networking_NetworkPolicyIngressRule,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicyList_To_networking_NetworkPolicyList,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicyList_To_v1beta1_NetworkPolicyList,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicyPeer_To_networking_NetworkPolicyPeer,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicyPort_To_networking_NetworkPolicyPort,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort,
0000000000000000000000000000000000000000;;			Convert_v1beta1_NetworkPolicySpec_To_networking_NetworkPolicySpec,
0000000000000000000000000000000000000000;;			Convert_networking_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add field label conversions for kinds having selectable nothing but ObjectMeta fields.
0000000000000000000000000000000000000000;;		for _, k := range []string{"DaemonSet", "Deployment", "Ingress"} {
0000000000000000000000000000000000000000;;			kind := k // don't close over range variables
0000000000000000000000000000000000000000;;			err = scheme.AddFieldLabelConversionFunc("extensions/v1beta1", kind,
0000000000000000000000000000000000000000;;				func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;					switch label {
0000000000000000000000000000000000000000;;					case "metadata.name", "metadata.namespace":
0000000000000000000000000000000000000000;;						return label, value, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						return "", "", fmt.Errorf("field label %q not supported for %q", label, kind)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ScaleStatus_To_v1beta1_ScaleStatus(in *extensions.ScaleStatus, out *extensionsv1beta1.ScaleStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = int32(in.Replicas)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out.Selector = nil
0000000000000000000000000000000000000000;;		out.TargetSelector = ""
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			if in.Selector.MatchExpressions == nil || len(in.Selector.MatchExpressions) == 0 {
0000000000000000000000000000000000000000;;				out.Selector = in.Selector.MatchLabels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(in.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("invalid label selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.TargetSelector = selector.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_ScaleStatus_To_extensions_ScaleStatus(in *extensionsv1beta1.ScaleStatus, out *extensions.ScaleStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Normally when 2 fields map to the same internal value we favor the old field, since
0000000000000000000000000000000000000000;;		// old clients can't be expected to know about new fields but clients that know about the
0000000000000000000000000000000000000000;;		// new field can be expected to know about the old field (though that's not quite true, due
0000000000000000000000000000000000000000;;		// to kubectl apply). However, these fields are readonly, so any non-nil value should work.
0000000000000000000000000000000000000000;;		if in.TargetSelector != "" {
0000000000000000000000000000000000000000;;			labelSelector, err := metav1.ParseToLabelSelector(in.TargetSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				out.Selector = nil
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse target selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Selector = labelSelector
0000000000000000000000000000000000000000;;		} else if in.Selector != nil {
0000000000000000000000000000000000000000;;			out.Selector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			selector := make(map[string]string)
0000000000000000000000000000000000000000;;			for key, val := range in.Selector {
0000000000000000000000000000000000000000;;				selector[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Selector.MatchLabels = selector
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Selector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_DeploymentSpec_To_v1beta1_DeploymentSpec(in *extensions.DeploymentSpec, out *extensionsv1beta1.DeploymentSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = &in.Replicas
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy(&in.Strategy, &out.Strategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.RevisionHistoryLimit != nil {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*out.RevisionHistoryLimit = int32(*in.RevisionHistoryLimit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.MinReadySeconds = int32(in.MinReadySeconds)
0000000000000000000000000000000000000000;;		out.Paused = in.Paused
0000000000000000000000000000000000000000;;		if in.RollbackTo != nil {
0000000000000000000000000000000000000000;;			out.RollbackTo = new(extensionsv1beta1.RollbackConfig)
0000000000000000000000000000000000000000;;			out.RollbackTo.Revision = int64(in.RollbackTo.Revision)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollbackTo = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.ProgressDeadlineSeconds != nil {
0000000000000000000000000000000000000000;;			out.ProgressDeadlineSeconds = new(int32)
0000000000000000000000000000000000000000;;			*out.ProgressDeadlineSeconds = *in.ProgressDeadlineSeconds
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_DeploymentSpec_To_extensions_DeploymentSpec(in *extensionsv1beta1.DeploymentSpec, out *extensions.DeploymentSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Replicas != nil {
0000000000000000000000000000000000000000;;			out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy(&in.Strategy, &out.Strategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.RevisionHistoryLimit = in.RevisionHistoryLimit
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Paused = in.Paused
0000000000000000000000000000000000000000;;		if in.RollbackTo != nil {
0000000000000000000000000000000000000000;;			out.RollbackTo = new(extensions.RollbackConfig)
0000000000000000000000000000000000000000;;			out.RollbackTo.Revision = in.RollbackTo.Revision
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollbackTo = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.ProgressDeadlineSeconds != nil {
0000000000000000000000000000000000000000;;			out.ProgressDeadlineSeconds = new(int32)
0000000000000000000000000000000000000000;;			*out.ProgressDeadlineSeconds = *in.ProgressDeadlineSeconds
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy(in *extensions.DeploymentStrategy, out *extensionsv1beta1.DeploymentStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = extensionsv1beta1.DeploymentStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(extensionsv1beta1.RollingUpdateDeployment)
0000000000000000000000000000000000000000;;			if err := Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment(in.RollingUpdate, out.RollingUpdate, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy(in *extensionsv1beta1.DeploymentStrategy, out *extensions.DeploymentStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = extensions.DeploymentStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(extensions.RollingUpdateDeployment)
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment(in.RollingUpdate, out.RollingUpdate, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment(in *extensions.RollingUpdateDeployment, out *extensionsv1beta1.RollingUpdateDeployment, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if out.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;			out.MaxUnavailable = &intstr.IntOrString{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.MaxUnavailable, out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if out.MaxSurge == nil {
0000000000000000000000000000000000000000;;			out.MaxSurge = &intstr.IntOrString{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.MaxSurge, out.MaxSurge, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment(in *extensionsv1beta1.RollingUpdateDeployment, out *extensions.RollingUpdateDeployment, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(in.MaxUnavailable, &out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(in.MaxSurge, &out.MaxSurge, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_RollingUpdateDaemonSet_To_v1beta1_RollingUpdateDaemonSet(in *extensions.RollingUpdateDaemonSet, out *extensionsv1beta1.RollingUpdateDaemonSet, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if out.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;			out.MaxUnavailable = &intstr.IntOrString{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.MaxUnavailable, out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_RollingUpdateDaemonSet_To_extensions_RollingUpdateDaemonSet(in *extensionsv1beta1.RollingUpdateDaemonSet, out *extensions.RollingUpdateDaemonSet, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(in.MaxUnavailable, &out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ReplicaSetSpec_To_v1beta1_ReplicaSetSpec(in *extensions.ReplicaSetSpec, out *extensionsv1beta1.ReplicaSetSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = new(int32)
0000000000000000000000000000000000000000;;		*out.Replicas = int32(in.Replicas)
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_ReplicaSetSpec_To_extensions_ReplicaSetSpec(in *extensionsv1beta1.ReplicaSetSpec, out *extensions.ReplicaSetSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Replicas != nil {
0000000000000000000000000000000000000000;;			out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicy_To_networking_NetworkPolicy(in *extensionsv1beta1.NetworkPolicy, out *networking.NetworkPolicy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		return Convert_v1beta1_NetworkPolicySpec_To_networking_NetworkPolicySpec(&in.Spec, &out.Spec, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicy_To_v1beta1_NetworkPolicy(in *networking.NetworkPolicy, out *extensionsv1beta1.NetworkPolicy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		return Convert_networking_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(&in.Spec, &out.Spec, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicySpec_To_networking_NetworkPolicySpec(in *extensionsv1beta1.NetworkPolicySpec, out *networking.NetworkPolicySpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Ingress = make([]networking.NetworkPolicyIngressRule, len(in.Ingress))
0000000000000000000000000000000000000000;;		for i := range in.Ingress {
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_NetworkPolicyIngressRule_To_networking_NetworkPolicyIngressRule(&in.Ingress[i], &out.Ingress[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(in *networking.NetworkPolicySpec, out *extensionsv1beta1.NetworkPolicySpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Ingress = make([]extensionsv1beta1.NetworkPolicyIngressRule, len(in.Ingress))
0000000000000000000000000000000000000000;;		for i := range in.Ingress {
0000000000000000000000000000000000000000;;			if err := Convert_networking_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(&in.Ingress[i], &out.Ingress[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicyIngressRule_To_networking_NetworkPolicyIngressRule(in *extensionsv1beta1.NetworkPolicyIngressRule, out *networking.NetworkPolicyIngressRule, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Ports = make([]networking.NetworkPolicyPort, len(in.Ports))
0000000000000000000000000000000000000000;;		for i := range in.Ports {
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_NetworkPolicyPort_To_networking_NetworkPolicyPort(&in.Ports[i], &out.Ports[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.From = make([]networking.NetworkPolicyPeer, len(in.From))
0000000000000000000000000000000000000000;;		for i := range in.From {
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_NetworkPolicyPeer_To_networking_NetworkPolicyPeer(&in.From[i], &out.From[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(in *networking.NetworkPolicyIngressRule, out *extensionsv1beta1.NetworkPolicyIngressRule, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Ports = make([]extensionsv1beta1.NetworkPolicyPort, len(in.Ports))
0000000000000000000000000000000000000000;;		for i := range in.Ports {
0000000000000000000000000000000000000000;;			if err := Convert_networking_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(&in.Ports[i], &out.Ports[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.From = make([]extensionsv1beta1.NetworkPolicyPeer, len(in.From))
0000000000000000000000000000000000000000;;		for i := range in.From {
0000000000000000000000000000000000000000;;			if err := Convert_networking_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(&in.From[i], &out.From[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicyPeer_To_networking_NetworkPolicyPeer(in *extensionsv1beta1.NetworkPolicyPeer, out *networking.NetworkPolicyPeer, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.PodSelector != nil {
0000000000000000000000000000000000000000;;			out.PodSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.PodSelector, out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.PodSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.NamespaceSelector != nil {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.NamespaceSelector, out.NamespaceSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in *networking.NetworkPolicyPeer, out *extensionsv1beta1.NetworkPolicyPeer, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.PodSelector != nil {
0000000000000000000000000000000000000000;;			out.PodSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.PodSelector, out.PodSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.PodSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.NamespaceSelector != nil {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(in.NamespaceSelector, out.NamespaceSelector, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.NamespaceSelector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicyPort_To_networking_NetworkPolicyPort(in *extensionsv1beta1.NetworkPolicyPort, out *networking.NetworkPolicyPort, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Protocol != nil {
0000000000000000000000000000000000000000;;			out.Protocol = new(api.Protocol)
0000000000000000000000000000000000000000;;			*out.Protocol = api.Protocol(*in.Protocol)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Protocol = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Port = in.Port
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(in *networking.NetworkPolicyPort, out *extensionsv1beta1.NetworkPolicyPort, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Protocol != nil {
0000000000000000000000000000000000000000;;			out.Protocol = new(v1.Protocol)
0000000000000000000000000000000000000000;;			*out.Protocol = v1.Protocol(*in.Protocol)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Protocol = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Port = in.Port
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_NetworkPolicyList_To_networking_NetworkPolicyList(in *extensionsv1beta1.NetworkPolicyList, out *networking.NetworkPolicyList, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ListMeta = in.ListMeta
0000000000000000000000000000000000000000;;		out.Items = make([]networking.NetworkPolicy, len(in.Items))
0000000000000000000000000000000000000000;;		for i := range in.Items {
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_NetworkPolicy_To_networking_NetworkPolicy(&in.Items[i], &out.Items[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_networking_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in *networking.NetworkPolicyList, out *extensionsv1beta1.NetworkPolicyList, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ListMeta = in.ListMeta
0000000000000000000000000000000000000000;;		out.Items = make([]extensionsv1beta1.NetworkPolicy, len(in.Items))
0000000000000000000000000000000000000000;;		for i := range in.Items {
0000000000000000000000000000000000000000;;			if err := Convert_networking_NetworkPolicy_To_v1beta1_NetworkPolicy(&in.Items[i], &out.Items[i], s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
