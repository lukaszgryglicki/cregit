0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
10c79c8f269742711eb97db00ce5916528c211fe;pkg/expapi/v1/defaults_test.go[pkg/expapi/v1/defaults_test.go][pkg/apis/extensions/v1beta1/defaults_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/extensions/install"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/apis/extensions/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultDaemonSetSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultLabels := map[string]string{"foo": "bar"}
0000000000000000000000000000000000000000;;		period := int64(v1.DefaultTerminationGracePeriodSeconds)
0000000000000000000000000000000000000000;;		defaultTemplate := v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				SecurityContext:               &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &period,
0000000000000000000000000000000000000000;;				SchedulerName:                 api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: defaultLabels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		templateNoLabel := v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				SecurityContext:               &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &period,
0000000000000000000000000000000000000000;;				SchedulerName:                 api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			original *extensionsv1beta1.DaemonSet
0000000000000000000000000000000000000000;;			expected *extensionsv1beta1.DaemonSet
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{ // Labels change/defaulting test.
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: defaultLabels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: defaultLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensionsv1beta1.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(10),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Labels change/defaulting test.
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Template:             defaultTemplate,
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: defaultLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensionsv1beta1.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Update strategy.
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.DaemonSet{},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Template: templateNoLabel,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensionsv1beta1.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(10),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Custom unique label key.
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.DaemonSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Template: templateNoLabel,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensionsv1beta1.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(10),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			original := test.original
0000000000000000000000000000000000000000;;			expected := test.expected
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(original))
0000000000000000000000000000000000000000;;			got, ok := obj2.(*extensionsv1beta1.DaemonSet)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("(%d) unexpected object: %v", i, got)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(got.Spec, expected.Spec) {
0000000000000000000000000000000000000000;;				t.Errorf("(%d) got different than expected\ngot:\n\t%+v\nexpected:\n\t%+v", i, got.Spec, expected.Spec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultIntOrString := intstr.FromInt(1)
0000000000000000000000000000000000000000;;		differentIntOrString := intstr.FromInt(5)
0000000000000000000000000000000000000000;;		period := int64(v1.DefaultTerminationGracePeriodSeconds)
0000000000000000000000000000000000000000;;		defaultTemplate := v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				SecurityContext:               &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &period,
0000000000000000000000000000000000000000;;				SchedulerName:                 api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			original *extensionsv1beta1.Deployment
0000000000000000000000000000000000000000;;			expected *extensionsv1beta1.Deployment
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.Deployment{},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(1),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &extensionsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &defaultIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							RollingUpdate: &extensionsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge: &differentIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &extensionsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &differentIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(3),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type:          extensionsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: nil,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(3),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &extensionsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &defaultIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(30),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: extensionsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: extensionsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(30),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			original := test.original
0000000000000000000000000000000000000000;;			expected := test.expected
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(original))
0000000000000000000000000000000000000000;;			got, ok := obj2.(*extensionsv1beta1.Deployment)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: %v", got)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(got.Spec, expected.Spec) {
0000000000000000000000000000000000000000;;				t.Errorf("object mismatch!\nexpected:\n\t%+v\ngot:\n\t%+v", got.Spec, expected.Spec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultReplicaSet(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			rs             *extensionsv1beta1.ReplicaSet
0000000000000000000000000000000000000000;;			expectLabels   bool
0000000000000000000000000000000000000000;;			expectSelector bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: &extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels:   true,
0000000000000000000000000000000000000000;;				expectSelector: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: &extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels:   false,
0000000000000000000000000000000000000000;;				expectSelector: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: &extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: map[string]string{
0000000000000000000000000000000000000000;;								"some": "other",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels:   false,
0000000000000000000000000000000000000000;;				expectSelector: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: &extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: map[string]string{
0000000000000000000000000000000000000000;;								"some": "other",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectLabels:   true,
0000000000000000000000000000000000000000;;				expectSelector: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			rs := test.rs
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(rs))
0000000000000000000000000000000000000000;;			rs2, ok := obj2.(*extensionsv1beta1.ReplicaSet)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: %v", rs2)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectSelector != reflect.DeepEqual(rs2.Spec.Selector.MatchLabels, rs2.Spec.Template.Labels) {
0000000000000000000000000000000000000000;;				if test.expectSelector {
0000000000000000000000000000000000000000;;					t.Errorf("expected: %v, got: %v", rs2.Spec.Template.Labels, rs2.Spec.Selector)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected equality: %v", rs.Spec.Selector)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectLabels != reflect.DeepEqual(rs2.Labels, rs2.Spec.Template.Labels) {
0000000000000000000000000000000000000000;;				if test.expectLabels {
0000000000000000000000000000000000000000;;					t.Errorf("expected: %v, got: %v", rs2.Spec.Template.Labels, rs2.Labels)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected equality: %v", rs.Labels)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultReplicaSetReplicas(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			rs             extensionsv1beta1.ReplicaSet
0000000000000000000000000000000000000000;;			expectReplicas int32
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectReplicas: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(0),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectReplicas: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rs: extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(3),
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"foo": "bar",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectReplicas: 3,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			rs := &test.rs
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(rs))
0000000000000000000000000000000000000000;;			rs2, ok := obj2.(*extensionsv1beta1.ReplicaSet)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: %v", rs2)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if rs2.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected nil Replicas")
0000000000000000000000000000000000000000;;			} else if test.expectReplicas != *rs2.Spec.Replicas {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %d replicas, got: %d", test.expectReplicas, *rs2.Spec.Replicas)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultRequestIsNotSetForReplicaSet(t *testing.T) {
0000000000000000000000000000000000000000;;		s := v1.PodSpec{}
0000000000000000000000000000000000000000;;		s.Containers = []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;					Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;						v1.ResourceCPU: resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rs := &extensionsv1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;			Spec: extensionsv1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Replicas: newInt32(3),
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: s,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output := roundTrip(t, runtime.Object(rs))
0000000000000000000000000000000000000000;;		rs2 := output.(*extensionsv1beta1.ReplicaSet)
0000000000000000000000000000000000000000;;		defaultRequest := rs2.Spec.Template.Spec.Containers[0].Resources.Requests
0000000000000000000000000000000000000000;;		requestValue := defaultRequest[v1.ResourceCPU]
0000000000000000000000000000000000000000;;		if requestValue.String() != "0" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 0 request value, got: %s", requestValue.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func roundTrip(t *testing.T, obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(api.Codecs.LegacyCodec(SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\n %#v", err, obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj2, err := runtime.Decode(api.Codecs.UniversalDecoder(), data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nData: %s\nSource: %#v", err, string(data), obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj3 := reflect.New(reflect.TypeOf(obj).Elem()).Interface().(runtime.Object)
0000000000000000000000000000000000000000;;		err = api.Scheme.Convert(obj2, obj3, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nSource: %#v", err, obj2)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32(val int32) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
