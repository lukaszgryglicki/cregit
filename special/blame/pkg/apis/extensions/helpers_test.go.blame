0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
029bd8c93165b943bef925eceda033e9bdbcc6d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package extensions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodAnnotationsFromSysctls(t *testing.T) {
0000000000000000000000000000000000000000;;		type Test struct {
0000000000000000000000000000000000000000;;			sysctls       []string
0000000000000000000000000000000000000000;;			expectedValue string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range []Test{
0000000000000000000000000000000000000000;;			{sysctls: []string{"a.b"}, expectedValue: "a.b"},
0000000000000000000000000000000000000000;;			{sysctls: []string{"a.b", "c.d"}, expectedValue: "a.b,c.d"},
0000000000000000000000000000000000000000;;			{sysctls: []string{"a.b", "a.b"}, expectedValue: "a.b,a.b"},
0000000000000000000000000000000000000000;;			{sysctls: []string{}, expectedValue: ""},
0000000000000000000000000000000000000000;;			{sysctls: nil, expectedValue: ""},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			a := PodAnnotationsFromSysctls(test.sysctls)
0000000000000000000000000000000000000000;;			if a != test.expectedValue {
0000000000000000000000000000000000000000;;				t.Errorf("wrong value for %v: got=%q wanted=%q", test.sysctls, a, test.expectedValue)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSysctlsFromPodSecurityPolicyAnnotation(t *testing.T) {
0000000000000000000000000000000000000000;;		type Test struct {
0000000000000000000000000000000000000000;;			expectedValue []string
0000000000000000000000000000000000000000;;			annotation    string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range []Test{
0000000000000000000000000000000000000000;;			{annotation: "a.b", expectedValue: []string{"a.b"}},
0000000000000000000000000000000000000000;;			{annotation: "a.b,c.d", expectedValue: []string{"a.b", "c.d"}},
0000000000000000000000000000000000000000;;			{annotation: "a.b,a.b", expectedValue: []string{"a.b", "a.b"}},
0000000000000000000000000000000000000000;;			{annotation: "", expectedValue: []string{}},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			sysctls, err := SysctlsFromPodSecurityPolicyAnnotation(test.annotation)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error for %q: %v", test.annotation, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(sysctls, test.expectedValue) {
0000000000000000000000000000000000000000;;				t.Errorf("wrong value for %q: got=%v wanted=%v", test.annotation, sysctls, test.expectedValue)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
