0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
13846cb3e451df769b70229223f1f7b0119b2321;pkg/expapi/validation/validation_test.go[pkg/expapi/validation/validation_test.go][pkg/apis/extensions/validation/validation_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/apparmor"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/seccomp"
0000000000000000000000000000000000000000;;		psputil "k8s.io/kubernetes/pkg/security/podsecuritypolicy/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDaemonSetStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type dsUpdateTest struct {
0000000000000000000000000000000000000000;;			old    extensions.DaemonSet
0000000000000000000000000000000000000000;;			update extensions.DaemonSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := []dsUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateDaemonSetStatusUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]dsUpdateTest{
0000000000000000000000000000000000000000;;			"negative values": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: -1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     -1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: -3,
0000000000000000000000000000000000000000;;						NumberReady:            -1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     -3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: -1,
0000000000000000000000000000000000000000;;						NumberAvailable:        -1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      -2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative CurrentNumberScheduled": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: -1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative NumberMisscheduled": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     -1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative DesiredNumberScheduled": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: -3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative NumberReady": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            -1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative ObservedGeneration": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     -3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative UpdatedNumberScheduled": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: -1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative NumberAvailable": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        -1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative NumberUnavailable": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "abc",
0000000000000000000000000000000000000000;;						Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberMisscheduled:     1,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						ObservedGeneration:     3,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 1,
0000000000000000000000000000000000000000;;						NumberAvailable:        1,
0000000000000000000000000000000000000000;;						NumberUnavailable:      -2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateDaemonSetStatusUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDaemonSetUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validSelector2 := map[string]string{"c": "d"}
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validPodSpecAbc := api.PodSpec{
0000000000000000000000000000000000000000;;			RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodSpecDef := api.PodSpec{
0000000000000000000000000000000000000000;;			RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			Containers:    []api.Container{{Name: "def", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodSpecNodeSelector := api.PodSpec{
0000000000000000000000000000000000000000;;			NodeSelector:  validSelector,
0000000000000000000000000000000000000000;;			NodeName:      "xyz",
0000000000000000000000000000000000000000;;			RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodSpecVolume := api.PodSpec{
0000000000000000000000000000000000000000;;			Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;			RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validPodTemplateAbc := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecAbc,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateAbcSemanticallyEqual := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecAbc,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateAbcSemanticallyEqual.Template.Spec.ImagePullSecrets = []api.LocalObjectReference{}
0000000000000000000000000000000000000000;;		validPodTemplateNodeSelector := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecNodeSelector,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateAbc2 := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector2,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecAbc,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateDef := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector2,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecDef,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					// no containers specified
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpecVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type dsUpdateTest struct {
0000000000000000000000000000000000000000;;			old            extensions.DaemonSet
0000000000000000000000000000000000000000;;			update         extensions.DaemonSet
0000000000000000000000000000000000000000;;			expectedErrNum int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := map[string]dsUpdateTest{
0000000000000000000000000000000000000000;;			"no change": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"change template and selector": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector2},
0000000000000000000000000000000000000000;;						TemplateGeneration: 3,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc2.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"change template": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 3,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 4,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateNodeSelector.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"change container image name": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector2},
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateDef.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"change update strategy": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 4,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 4,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.RollingUpdateDaemonSetStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &extensions.RollingUpdateDaemonSet{
0000000000000000000000000000000000000000;;								MaxUnavailable: intstr.FromInt(1),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unchanged templateGeneration upon semantically equal template update": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 4,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 4,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbcSemanticallyEqual.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.RollingUpdateDaemonSetStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &extensions.RollingUpdateDaemonSet{
0000000000000000000000000000000000000000;;								MaxUnavailable: intstr.FromInt(1),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, successCase := range successCases {
0000000000000000000000000000000000000000;;			// ResourceVersion is required for updates.
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "2"
0000000000000000000000000000000000000000;;			// Check test setup
0000000000000000000000000000000000000000;;			if successCase.expectedErrNum > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q has incorrect test setup with expectedErrNum %d, expected no error", testName, successCase.expectedErrNum)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(successCase.old.ObjectMeta.ResourceVersion) == 0 || len(successCase.update.ObjectMeta.ResourceVersion) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q has incorrect test setup with no resource version set", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs := ValidateDaemonSetUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected no error, but got: %v", testName, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]dsUpdateTest{
0000000000000000000000000000000000000000;;			"change daemon name": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid selector": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: invalidSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Template:           invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid read-write volume": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Template:           readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid update strategy": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: "Random",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative templateGeneration": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: -1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						TemplateGeneration: -1,
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"decreased templateGeneration": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						TemplateGeneration: 1,
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unchanged templateGeneration upon template update": {
0000000000000000000000000000000000000000;;				old: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						TemplateGeneration: 2,
0000000000000000000000000000000000000000;;						Selector:           &metav1.LabelSelector{MatchLabels: validSelector2},
0000000000000000000000000000000000000000;;						Template:           validPodTemplateAbc2.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;							Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrNum: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			// ResourceVersion is required for updates.
0000000000000000000000000000000000000000;;			errorCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errorCase.update.ObjectMeta.ResourceVersion = "2"
0000000000000000000000000000000000000000;;			// Check test setup
0000000000000000000000000000000000000000;;			if errorCase.expectedErrNum <= 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q has incorrect test setup with expectedErrNum %d, expected at least one error", testName, errorCase.expectedErrNum)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errorCase.old.ObjectMeta.ResourceVersion) == 0 || len(errorCase.update.ObjectMeta.ResourceVersion) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q has incorrect test setup with no resource version set", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Run the tests
0000000000000000000000000000000000000000;;			if errs := ValidateDaemonSetUpdate(&errorCase.update, &errorCase.old); len(errs) != errorCase.expectedErrNum {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected %d errors, but got %d error: %v", testName, errorCase.expectedErrNum, len(errs), errs)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Logf("(PASS) %q got errors %v", testName, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDaemonSet(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []extensions.DaemonSet{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;						Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy: extensions.DaemonSetUpdateStrategy{
0000000000000000000000000000000000000000;;						Type: extensions.OnDeleteDaemonSetStrategyType,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateDaemonSet(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.DaemonSet{
0000000000000000000000000000000000000000;;			"zero-length ID": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-namespace": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nil selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"selector_doesnt_match": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid template": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Template: invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_annotation": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 1": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validSelector,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyNever,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validSelector,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateDaemonSet(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				field := errs[i].Field
0000000000000000000000000000000000000000;;				if !strings.HasPrefix(field, "spec.template.") &&
0000000000000000000000000000000000000000;;					!strings.HasPrefix(field, "spec.updateStrategy") &&
0000000000000000000000000000000000000000;;					field != "metadata.name" &&
0000000000000000000000000000000000000000;;					field != "metadata.namespace" &&
0000000000000000000000000000000000000000;;					field != "spec.selector" &&
0000000000000000000000000000000000000000;;					field != "spec.template" &&
0000000000000000000000000000000000000000;;					field != "GCEPersistentDisk.ReadOnly" &&
0000000000000000000000000000000000000000;;					field != "spec.template.labels" &&
0000000000000000000000000000000000000000;;					field != "metadata.annotations" &&
0000000000000000000000000000000000000000;;					field != "metadata.labels" {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing prefix for: %v", k, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validDeployment() *extensions.Deployment {
0000000000000000000000000000000000000000;;		return &extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "abc",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "abc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Strategy: extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;					Type: extensions.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;					RollingUpdate: &extensions.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;						MaxSurge:       intstr.FromInt(1),
0000000000000000000000000000000000000000;;						MaxUnavailable: intstr.FromInt(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "abc",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"name": "abc",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSDefault,
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:                     "nginx",
0000000000000000000000000000000000000000;;								Image:                    "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy:          api.PullNever,
0000000000000000000000000000000000000000;;								TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RollbackTo: &extensions.RollbackConfig{
0000000000000000000000000000000000000000;;					Revision: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []*extensions.Deployment{
0000000000000000000000000000000000000000;;			validDeployment(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateDeployment(successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]*extensions.Deployment{}
0000000000000000000000000000000000000000;;		errorCases["metadata.name: Required value"] = &extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// selector should match the labels in pod template.
0000000000000000000000000000000000000000;;		invalidSelectorDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidSelectorDeployment.Spec.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;			MatchLabels: map[string]string{
0000000000000000000000000000000000000000;;				"name": "def",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases["`selector` does not match template `labels`"] = invalidSelectorDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RestartPolicy should be always.
0000000000000000000000000000000000000000;;		invalidRestartPolicyDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidRestartPolicyDeployment.Spec.Template.Spec.RestartPolicy = api.RestartPolicyNever
0000000000000000000000000000000000000000;;		errorCases["Unsupported value: \"Never\""] = invalidRestartPolicyDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// must have valid strategy type
0000000000000000000000000000000000000000;;		invalidStrategyDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidStrategyDeployment.Spec.Strategy.Type = extensions.DeploymentStrategyType("randomType")
0000000000000000000000000000000000000000;;		errorCases["supported values: Recreate, RollingUpdate"] = invalidStrategyDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// rollingUpdate should be nil for recreate.
0000000000000000000000000000000000000000;;		invalidRecreateDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidRecreateDeployment.Spec.Strategy = extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;			Type:          extensions.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;			RollingUpdate: &extensions.RollingUpdateDeployment{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases["may not be specified when strategy `type` is 'Recreate'"] = invalidRecreateDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MaxSurge should be in the form of 20%.
0000000000000000000000000000000000000000;;		invalidMaxSurgeDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidMaxSurgeDeployment.Spec.Strategy = extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;			Type: extensions.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;			RollingUpdate: &extensions.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;				MaxSurge: intstr.FromString("20Percent"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases["a valid percent string must be"] = invalidMaxSurgeDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MaxSurge and MaxUnavailable cannot both be zero.
0000000000000000000000000000000000000000;;		invalidRollingUpdateDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidRollingUpdateDeployment.Spec.Strategy = extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;			Type: extensions.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;			RollingUpdate: &extensions.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;				MaxSurge:       intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				MaxUnavailable: intstr.FromInt(0),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases["may not be 0 when `maxSurge` is 0"] = invalidRollingUpdateDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MaxUnavailable should not be more than 100%.
0000000000000000000000000000000000000000;;		invalidMaxUnavailableDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidMaxUnavailableDeployment.Spec.Strategy = extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;			Type: extensions.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;			RollingUpdate: &extensions.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;				MaxUnavailable: intstr.FromString("110%"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases["must not be greater than 100%"] = invalidMaxUnavailableDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rollback.Revision must be non-negative
0000000000000000000000000000000000000000;;		invalidRollbackRevisionDeployment := validDeployment()
0000000000000000000000000000000000000000;;		invalidRollbackRevisionDeployment.Spec.RollbackTo.Revision = -3
0000000000000000000000000000000000000000;;		errorCases["must be greater than or equal to 0"] = invalidRollbackRevisionDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ProgressDeadlineSeconds should be greater than MinReadySeconds
0000000000000000000000000000000000000000;;		invalidProgressDeadlineDeployment := validDeployment()
0000000000000000000000000000000000000000;;		seconds := int32(600)
0000000000000000000000000000000000000000;;		invalidProgressDeadlineDeployment.Spec.ProgressDeadlineSeconds = &seconds
0000000000000000000000000000000000000000;;		invalidProgressDeadlineDeployment.Spec.MinReadySeconds = seconds
0000000000000000000000000000000000000000;;		errorCases["must be greater than minReadySeconds"] = invalidProgressDeadlineDeployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateDeployment(v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expected failure", k)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), k) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %q, expected: %q", errs[0].Error(), k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func int64p(i int) *int64 {
0000000000000000000000000000000000000000;;		i64 := int64(i)
0000000000000000000000000000000000000000;;		return &i64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDeploymentStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			replicas           int32
0000000000000000000000000000000000000000;;			updatedReplicas    int32
0000000000000000000000000000000000000000;;			readyReplicas      int32
0000000000000000000000000000000000000000;;			availableReplicas  int32
0000000000000000000000000000000000000000;;			observedGeneration int64
0000000000000000000000000000000000000000;;			collisionCount     *int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "valid status",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				updatedReplicas:    3,
0000000000000000000000000000000000000000;;				readyReplicas:      2,
0000000000000000000000000000000000000000;;				availableReplicas:  1,
0000000000000000000000000000000000000000;;				observedGeneration: 2,
0000000000000000000000000000000000000000;;				expectedErr:        false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid replicas",
0000000000000000000000000000000000000000;;				replicas:           -1,
0000000000000000000000000000000000000000;;				updatedReplicas:    2,
0000000000000000000000000000000000000000;;				readyReplicas:      2,
0000000000000000000000000000000000000000;;				availableReplicas:  1,
0000000000000000000000000000000000000000;;				observedGeneration: 2,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid updatedReplicas",
0000000000000000000000000000000000000000;;				replicas:           2,
0000000000000000000000000000000000000000;;				updatedReplicas:    -1,
0000000000000000000000000000000000000000;;				readyReplicas:      2,
0000000000000000000000000000000000000000;;				availableReplicas:  1,
0000000000000000000000000000000000000000;;				observedGeneration: 2,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid readyReplicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      -1,
0000000000000000000000000000000000000000;;				availableReplicas:  1,
0000000000000000000000000000000000000000;;				observedGeneration: 2,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid availableReplicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      3,
0000000000000000000000000000000000000000;;				availableReplicas:  -1,
0000000000000000000000000000000000000000;;				observedGeneration: 2,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid observedGeneration",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      3,
0000000000000000000000000000000000000000;;				availableReplicas:  3,
0000000000000000000000000000000000000000;;				observedGeneration: -1,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "updatedReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				updatedReplicas:    4,
0000000000000000000000000000000000000000;;				readyReplicas:      3,
0000000000000000000000000000000000000000;;				availableReplicas:  3,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "readyReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      4,
0000000000000000000000000000000000000000;;				availableReplicas:  3,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "availableReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      3,
0000000000000000000000000000000000000000;;				availableReplicas:  4,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "availableReplicas greater than readyReplicas",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      2,
0000000000000000000000000000000000000000;;				availableReplicas:  3,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// TODO: Remove the following test case once we stop supporting upgrades from 1.5.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "don't validate readyReplicas when it's zero",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				readyReplicas:      0,
0000000000000000000000000000000000000000;;				availableReplicas:  3,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				expectedErr:        false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "invalid collisionCount",
0000000000000000000000000000000000000000;;				replicas:           3,
0000000000000000000000000000000000000000;;				observedGeneration: 1,
0000000000000000000000000000000000000000;;				collisionCount:     int64p(-3),
0000000000000000000000000000000000000000;;				expectedErr:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			status := extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;				Replicas:           test.replicas,
0000000000000000000000000000000000000000;;				UpdatedReplicas:    test.updatedReplicas,
0000000000000000000000000000000000000000;;				ReadyReplicas:      test.readyReplicas,
0000000000000000000000000000000000000000;;				AvailableReplicas:  test.availableReplicas,
0000000000000000000000000000000000000000;;				ObservedGeneration: test.observedGeneration,
0000000000000000000000000000000000000000;;				CollisionCount:     test.collisionCount,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			errs := ValidateDeploymentStatus(&status, field.NewPath("status"))
0000000000000000000000000000000000000000;;			if hasErr := len(errs) > 0; hasErr != test.expectedErr {
0000000000000000000000000000000000000000;;				errString := spew.Sprintf("%#v", errs)
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error: %t, got error: %t\nerrors: %s", test.name, test.expectedErr, hasErr, errString)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDeploymentStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			from, to extensions.DeploymentStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "increase: valid update",
0000000000000000000000000000000000000000;;				from: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: nil,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				to: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "stable: valid update",
0000000000000000000000000000000000000000;;				from: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				to: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "unset: invalid update",
0000000000000000000000000000000000000000;;				from: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				to: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: nil,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "decrease: invalid update",
0000000000000000000000000000000000000000;;				from: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(2),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				to: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;					CollisionCount: int64p(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			meta := metav1.ObjectMeta{Name: "foo", Namespace: metav1.NamespaceDefault, ResourceVersion: "1"}
0000000000000000000000000000000000000000;;			from := &extensions.Deployment{
0000000000000000000000000000000000000000;;				ObjectMeta: meta,
0000000000000000000000000000000000000000;;				Status:     test.from,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			to := &extensions.Deployment{
0000000000000000000000000000000000000000;;				ObjectMeta: meta,
0000000000000000000000000000000000000000;;				Status:     test.to,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			errs := ValidateDeploymentStatusUpdate(to, from)
0000000000000000000000000000000000000000;;			if hasErr := len(errs) > 0; hasErr != test.expectedErr {
0000000000000000000000000000000000000000;;				errString := spew.Sprintf("%#v", errs)
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error: %t, got error: %t\nerrors: %s", test.name, test.expectedErr, hasErr, errString)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validDeploymentRollback() *extensions.DeploymentRollback {
0000000000000000000000000000000000000000;;		return &extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;			Name: "abc",
0000000000000000000000000000000000000000;;			UpdatedAnnotations: map[string]string{
0000000000000000000000000000000000000000;;				"created-by": "abc",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			RollbackTo: extensions.RollbackConfig{
0000000000000000000000000000000000000000;;				Revision: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDeploymentRollback(t *testing.T) {
0000000000000000000000000000000000000000;;		noAnnotation := validDeploymentRollback()
0000000000000000000000000000000000000000;;		noAnnotation.UpdatedAnnotations = nil
0000000000000000000000000000000000000000;;		successCases := []*extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;			validDeploymentRollback(),
0000000000000000000000000000000000000000;;			noAnnotation,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateDeploymentRollback(successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]*extensions.DeploymentRollback{}
0000000000000000000000000000000000000000;;		invalidNoName := validDeploymentRollback()
0000000000000000000000000000000000000000;;		invalidNoName.Name = ""
0000000000000000000000000000000000000000;;		errorCases["name: Required value"] = invalidNoName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateDeploymentRollback(v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expected failure", k)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), k) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %q, expected: %q", errs[0].Error(), k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ingressRules map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateIngress(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultBackend := extensions.IngressBackend{
0000000000000000000000000000000000000000;;			ServiceName: "default-backend",
0000000000000000000000000000000000000000;;			ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newValid := func() extensions.Ingress {
0000000000000000000000000000000000000000;;			return extensions.Ingress{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;					Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;						ServiceName: "default-backend",
0000000000000000000000000000000000000000;;						ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []extensions.IngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Host: "foo.bar.com",
0000000000000000000000000000000000000000;;							IngressRuleValue: extensions.IngressRuleValue{
0000000000000000000000000000000000000000;;								HTTP: &extensions.HTTPIngressRuleValue{
0000000000000000000000000000000000000000;;									Paths: []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Path:    "/foo",
0000000000000000000000000000000000000000;;											Backend: defaultBackend,
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{IP: "127.0.0.1"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		servicelessBackend := newValid()
0000000000000000000000000000000000000000;;		servicelessBackend.Spec.Backend.ServiceName = ""
0000000000000000000000000000000000000000;;		invalidNameBackend := newValid()
0000000000000000000000000000000000000000;;		invalidNameBackend.Spec.Backend.ServiceName = "defaultBackend"
0000000000000000000000000000000000000000;;		noPortBackend := newValid()
0000000000000000000000000000000000000000;;		noPortBackend.Spec.Backend = &extensions.IngressBackend{ServiceName: defaultBackend.ServiceName}
0000000000000000000000000000000000000000;;		noForwardSlashPath := newValid()
0000000000000000000000000000000000000000;;		noForwardSlashPath.Spec.Rules[0].IngressRuleValue.HTTP.Paths = []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Path:    "invalid",
0000000000000000000000000000000000000000;;				Backend: defaultBackend,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noPaths := newValid()
0000000000000000000000000000000000000000;;		noPaths.Spec.Rules[0].IngressRuleValue.HTTP.Paths = []extensions.HTTPIngressPath{}
0000000000000000000000000000000000000000;;		badHost := newValid()
0000000000000000000000000000000000000000;;		badHost.Spec.Rules[0].Host = "foobar:80"
0000000000000000000000000000000000000000;;		badRegexPath := newValid()
0000000000000000000000000000000000000000;;		badPathExpr := "/invalid["
0000000000000000000000000000000000000000;;		badRegexPath.Spec.Rules[0].IngressRuleValue.HTTP.Paths = []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Path:    badPathExpr,
0000000000000000000000000000000000000000;;				Backend: defaultBackend,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		badPathErr := fmt.Sprintf("spec.rules[0].http.paths[0].path: Invalid value: '%v'", badPathExpr)
0000000000000000000000000000000000000000;;		hostIP := "127.0.0.1"
0000000000000000000000000000000000000000;;		badHostIP := newValid()
0000000000000000000000000000000000000000;;		badHostIP.Spec.Rules[0].Host = hostIP
0000000000000000000000000000000000000000;;		badHostIPErr := fmt.Sprintf("spec.rules[0].host: Invalid value: '%v'", hostIP)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.Ingress{
0000000000000000000000000000000000000000;;			"spec.backend.serviceName: Required value":        servicelessBackend,
0000000000000000000000000000000000000000;;			"spec.backend.serviceName: Invalid value":         invalidNameBackend,
0000000000000000000000000000000000000000;;			"spec.backend.servicePort: Invalid value":         noPortBackend,
0000000000000000000000000000000000000000;;			"spec.rules[0].host: Invalid value":               badHost,
0000000000000000000000000000000000000000;;			"spec.rules[0].http.paths: Required value":        noPaths,
0000000000000000000000000000000000000000;;			"spec.rules[0].http.paths[0].path: Invalid value": noForwardSlashPath,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases[badPathErr] = badRegexPath
0000000000000000000000000000000000000000;;		errorCases[badHostIPErr] = badHostIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wildcardHost := "foo.*.bar.com"
0000000000000000000000000000000000000000;;		badWildcard := newValid()
0000000000000000000000000000000000000000;;		badWildcard.Spec.Rules[0].Host = wildcardHost
0000000000000000000000000000000000000000;;		badWildcardErr := fmt.Sprintf("spec.rules[0].host: Invalid value: '%v'", wildcardHost)
0000000000000000000000000000000000000000;;		errorCases[badWildcardErr] = badWildcard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateIngress(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %q", k)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s := strings.Split(k, ":")
0000000000000000000000000000000000000000;;				err := errs[0]
0000000000000000000000000000000000000000;;				if err.Field != s[0] || !strings.Contains(err.Error(), s[1]) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %q, expected: %q", err, k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateIngressTLS(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultBackend := extensions.IngressBackend{
0000000000000000000000000000000000000000;;			ServiceName: "default-backend",
0000000000000000000000000000000000000000;;			ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newValid := func() extensions.Ingress {
0000000000000000000000000000000000000000;;			return extensions.Ingress{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;					Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;						ServiceName: "default-backend",
0000000000000000000000000000000000000000;;						ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []extensions.IngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Host: "foo.bar.com",
0000000000000000000000000000000000000000;;							IngressRuleValue: extensions.IngressRuleValue{
0000000000000000000000000000000000000000;;								HTTP: &extensions.HTTPIngressRuleValue{
0000000000000000000000000000000000000000;;									Paths: []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Path:    "/foo",
0000000000000000000000000000000000000000;;											Backend: defaultBackend,
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{IP: "127.0.0.1"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.Ingress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wildcardHost := "foo.*.bar.com"
0000000000000000000000000000000000000000;;		badWildcardTLS := newValid()
0000000000000000000000000000000000000000;;		badWildcardTLS.Spec.Rules[0].Host = "*.foo.bar.com"
0000000000000000000000000000000000000000;;		badWildcardTLS.Spec.TLS = []extensions.IngressTLS{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hosts: []string{wildcardHost},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		badWildcardTLSErr := fmt.Sprintf("spec.tls[0].hosts: Invalid value: '%v'", wildcardHost)
0000000000000000000000000000000000000000;;		errorCases[badWildcardTLSErr] = badWildcardTLS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateIngress(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %q", k)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s := strings.Split(k, ":")
0000000000000000000000000000000000000000;;				err := errs[0]
0000000000000000000000000000000000000000;;				if err.Field != s[0] || !strings.Contains(err.Error(), s[1]) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %q, expected: %q", err, k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateIngressStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultBackend := extensions.IngressBackend{
0000000000000000000000000000000000000000;;			ServiceName: "default-backend",
0000000000000000000000000000000000000000;;			ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newValid := func() extensions.Ingress {
0000000000000000000000000000000000000000;;			return extensions.Ingress{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "foo",
0000000000000000000000000000000000000000;;					Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					ResourceVersion: "9",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;					Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;						ServiceName: "default-backend",
0000000000000000000000000000000000000000;;						ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []extensions.IngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Host: "foo.bar.com",
0000000000000000000000000000000000000000;;							IngressRuleValue: extensions.IngressRuleValue{
0000000000000000000000000000000000000000;;								HTTP: &extensions.HTTPIngressRuleValue{
0000000000000000000000000000000000000000;;									Paths: []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Path:    "/foo",
0000000000000000000000000000000000000000;;											Backend: defaultBackend,
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{IP: "127.0.0.1", Hostname: "foo.bar.com"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldValue := newValid()
0000000000000000000000000000000000000000;;		newValue := newValid()
0000000000000000000000000000000000000000;;		newValue.Status = extensions.IngressStatus{
0000000000000000000000000000000000000000;;			LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;				Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;					{IP: "127.0.0.2", Hostname: "foo.com"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidIP := newValid()
0000000000000000000000000000000000000000;;		invalidIP.Status = extensions.IngressStatus{
0000000000000000000000000000000000000000;;			LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;				Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;					{IP: "abcd", Hostname: "foo.com"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidHostname := newValid()
0000000000000000000000000000000000000000;;		invalidHostname.Status = extensions.IngressStatus{
0000000000000000000000000000000000000000;;			LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;				Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;					{IP: "127.0.0.1", Hostname: "127.0.0.1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errs := ValidateIngressStatusUpdate(&newValue, &oldValue)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.Ingress{
0000000000000000000000000000000000000000;;			"status.loadBalancer.ingress[0].ip: Invalid value":       invalidIP,
0000000000000000000000000000000000000000;;			"status.loadBalancer.ingress[0].hostname: Invalid value": invalidHostname,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateIngressStatusUpdate(&v, &oldValue)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s := strings.Split(k, ":")
0000000000000000000000000000000000000000;;				err := errs[0]
0000000000000000000000000000000000000000;;				if err.Field != s[0] || !strings.Contains(err.Error(), s[1]) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %q, expected: %q", err, k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateScale(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []extensions.Scale{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 10,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "frontend",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;					Replicas: 0,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateScale(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			scale extensions.Scale
0000000000000000000000000000000000000000;;			msg   string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				scale: extensions.Scale{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "frontend",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;						Replicas: -1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be greater than or equal to 0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateScale(&c.scale); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v, expected: %s", errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicaSetStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			replicas             int32
0000000000000000000000000000000000000000;;			fullyLabeledReplicas int32
0000000000000000000000000000000000000000;;			readyReplicas        int32
0000000000000000000000000000000000000000;;			availableReplicas    int32
0000000000000000000000000000000000000000;;			observedGeneration   int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "valid status",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid replicas",
0000000000000000000000000000000000000000;;				replicas:             -1,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid fullyLabeledReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: -1,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid readyReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        -1,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid availableReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    -1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid observedGeneration",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   -1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "fullyLabeledReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 4,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "readyReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        4,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "availableReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    4,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "availableReplicas greater than readyReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			status := extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;				Replicas:             test.replicas,
0000000000000000000000000000000000000000;;				FullyLabeledReplicas: test.fullyLabeledReplicas,
0000000000000000000000000000000000000000;;				ReadyReplicas:        test.readyReplicas,
0000000000000000000000000000000000000000;;				AvailableReplicas:    test.availableReplicas,
0000000000000000000000000000000000000000;;				ObservedGeneration:   test.observedGeneration,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if hasErr := len(ValidateReplicaSetStatus(status, field.NewPath("status"))) > 0; hasErr != test.expectedErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error: %t, got error: %t", test.name, test.expectedErr, hasErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicaSetStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type rcUpdateTest struct {
0000000000000000000000000000000000000000;;			old    extensions.ReplicaSet
0000000000000000000000000000000000000000;;			update extensions.ReplicaSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []rcUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;						Replicas: 4,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateReplicaSetStatusUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]rcUpdateTest{
0000000000000000000000000000000000000000;;			"negative replicas": {
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;						Replicas: -3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicaSetStatusUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicaSetUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidLabels := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type rcUpdateTest struct {
0000000000000000000000000000000000000000;;			old    extensions.ReplicaSet
0000000000000000000000000000000000000000;;			update extensions.ReplicaSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []rcUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 1,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateReplicaSetUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]rcUpdateTest{
0000000000000000000000000000000000000000;;			"more than one read/write": {
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid selector": {
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: invalidLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod": {
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative replicas": {
0000000000000000000000000000000000000000;;				old: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: -1,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicaSetUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicaSet(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidLabels := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Replicas: 1,
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicaSet(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			"zero-length ID": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-namespace": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"selector_doesnt_match": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid manifest": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"read-write persistent disk with > 1 pod": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc"},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Replicas: 2,
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative_replicas": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Replicas: -1,
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Template: invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_annotation": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 1": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyNever,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateReplicaSet(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				field := errs[i].Field
0000000000000000000000000000000000000000;;				if !strings.HasPrefix(field, "spec.template.") &&
0000000000000000000000000000000000000000;;					field != "metadata.name" &&
0000000000000000000000000000000000000000;;					field != "metadata.namespace" &&
0000000000000000000000000000000000000000;;					field != "spec.selector" &&
0000000000000000000000000000000000000000;;					field != "spec.template" &&
0000000000000000000000000000000000000000;;					field != "GCEPersistentDisk.ReadOnly" &&
0000000000000000000000000000000000000000;;					field != "spec.replicas" &&
0000000000000000000000000000000000000000;;					field != "spec.template.labels" &&
0000000000000000000000000000000000000000;;					field != "metadata.annotations" &&
0000000000000000000000000000000000000000;;					field != "metadata.labels" &&
0000000000000000000000000000000000000000;;					field != "status.replicas" {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing prefix for: %v", k, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodSecurityPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		validPSP := func() *extensions.PodSecurityPolicy {
0000000000000000000000000000000000000000;;			return &extensions.PodSecurityPolicy{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:        "foo",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extensions.PodSecurityPolicySpec{
0000000000000000000000000000000000000000;;					SELinux: extensions.SELinuxStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.SELinuxStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RunAsUser: extensions.RunAsUserStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.RunAsUserStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					FSGroup: extensions.FSGroupStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.FSGroupStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					SupplementalGroups: extensions.SupplementalGroupsStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.SupplementalGroupsStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noUserOptions := validPSP()
0000000000000000000000000000000000000000;;		noUserOptions.Spec.RunAsUser.Rule = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noSELinuxOptions := validPSP()
0000000000000000000000000000000000000000;;		noSELinuxOptions.Spec.SELinux.Rule = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidUserStratType := validPSP()
0000000000000000000000000000000000000000;;		invalidUserStratType.Spec.RunAsUser.Rule = "invalid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSELinuxStratType := validPSP()
0000000000000000000000000000000000000000;;		invalidSELinuxStratType.Spec.SELinux.Rule = "invalid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidUIDPSP := validPSP()
0000000000000000000000000000000000000000;;		invalidUIDPSP.Spec.RunAsUser.Rule = extensions.RunAsUserStrategyMustRunAs
0000000000000000000000000000000000000000;;		invalidUIDPSP.Spec.RunAsUser.Ranges = []extensions.UserIDRange{{Min: -1, Max: 1}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		missingObjectMetaName := validPSP()
0000000000000000000000000000000000000000;;		missingObjectMetaName.ObjectMeta.Name = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noFSGroupOptions := validPSP()
0000000000000000000000000000000000000000;;		noFSGroupOptions.Spec.FSGroup.Rule = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidFSGroupStratType := validPSP()
0000000000000000000000000000000000000000;;		invalidFSGroupStratType.Spec.FSGroup.Rule = "invalid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noSupplementalGroupsOptions := validPSP()
0000000000000000000000000000000000000000;;		noSupplementalGroupsOptions.Spec.SupplementalGroups.Rule = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSupGroupStratType := validPSP()
0000000000000000000000000000000000000000;;		invalidSupGroupStratType.Spec.SupplementalGroups.Rule = "invalid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRangeMinGreaterThanMax := validPSP()
0000000000000000000000000000000000000000;;		invalidRangeMinGreaterThanMax.Spec.FSGroup.Ranges = []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;			{Min: 2, Max: 1},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRangeNegativeMin := validPSP()
0000000000000000000000000000000000000000;;		invalidRangeNegativeMin.Spec.FSGroup.Ranges = []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;			{Min: -1, Max: 10},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRangeNegativeMax := validPSP()
0000000000000000000000000000000000000000;;		invalidRangeNegativeMax.Spec.FSGroup.Ranges = []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;			{Min: 1, Max: -10},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requiredCapAddAndDrop := validPSP()
0000000000000000000000000000000000000000;;		requiredCapAddAndDrop.Spec.DefaultAddCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;		requiredCapAddAndDrop.Spec.RequiredDropCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allowedCapListedInRequiredDrop := validPSP()
0000000000000000000000000000000000000000;;		allowedCapListedInRequiredDrop.Spec.RequiredDropCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;		allowedCapListedInRequiredDrop.Spec.AllowedCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidAppArmorDefault := validPSP()
0000000000000000000000000000000000000000;;		invalidAppArmorDefault.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			apparmor.DefaultProfileAnnotationKey: "not-good",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidAppArmorAllowed := validPSP()
0000000000000000000000000000000000000000;;		invalidAppArmorAllowed.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			apparmor.AllowedProfilesAnnotationKey: apparmor.ProfileRuntimeDefault + ",not-good",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSysctlPattern := validPSP()
0000000000000000000000000000000000000000;;		invalidSysctlPattern.Annotations[extensions.SysctlsPodSecurityPolicyAnnotationKey] = "a.*.b"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSeccompDefault := validPSP()
0000000000000000000000000000000000000000;;		invalidSeccompDefault.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			seccomp.DefaultProfileAnnotationKey: "not-good",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidSeccompAllowed := validPSP()
0000000000000000000000000000000000000000;;		invalidSeccompAllowed.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			seccomp.AllowedProfilesAnnotationKey: "docker/default,not-good",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type testCase struct {
0000000000000000000000000000000000000000;;			psp         *extensions.PodSecurityPolicy
0000000000000000000000000000000000000000;;			errorType   field.ErrorType
0000000000000000000000000000000000000000;;			errorDetail string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]testCase{
0000000000000000000000000000000000000000;;			"no user options": {
0000000000000000000000000000000000000000;;				psp:         noUserOptions,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, MustRunAsNonRoot, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no selinux options": {
0000000000000000000000000000000000000000;;				psp:         noSELinuxOptions,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no fsgroup options": {
0000000000000000000000000000000000000000;;				psp:         noFSGroupOptions,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no sup group options": {
0000000000000000000000000000000000000000;;				psp:         noSupplementalGroupsOptions,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid user strategy type": {
0000000000000000000000000000000000000000;;				psp:         invalidUserStratType,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, MustRunAsNonRoot, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid selinux strategy type": {
0000000000000000000000000000000000000000;;				psp:         invalidSELinuxStratType,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid sup group strategy type": {
0000000000000000000000000000000000000000;;				psp:         invalidSupGroupStratType,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid fs group strategy type": {
0000000000000000000000000000000000000000;;				psp:         invalidFSGroupStratType,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				errorDetail: "supported values: MustRunAs, RunAsAny",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid uid": {
0000000000000000000000000000000000000000;;				psp:         invalidUIDPSP,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "min cannot be negative",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing object meta name": {
0000000000000000000000000000000000000000;;				psp:         missingObjectMetaName,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errorDetail: "name or generateName is required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid range min greater than max": {
0000000000000000000000000000000000000000;;				psp:         invalidRangeMinGreaterThanMax,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "min cannot be greater than max",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid range negative min": {
0000000000000000000000000000000000000000;;				psp:         invalidRangeNegativeMin,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "min cannot be negative",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid range negative max": {
0000000000000000000000000000000000000000;;				psp:         invalidRangeNegativeMax,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "max cannot be negative",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid required caps": {
0000000000000000000000000000000000000000;;				psp:         requiredCapAddAndDrop,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "capability is listed in defaultAddCapabilities and requiredDropCapabilities",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"allowed cap listed in required drops": {
0000000000000000000000000000000000000000;;				psp:         allowedCapListedInRequiredDrop,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "capability is listed in allowedCapabilities and requiredDropCapabilities",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid AppArmor default profile": {
0000000000000000000000000000000000000000;;				psp:         invalidAppArmorDefault,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "invalid AppArmor profile name: \"not-good\"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid AppArmor allowed profile": {
0000000000000000000000000000000000000000;;				psp:         invalidAppArmorAllowed,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "invalid AppArmor profile name: \"not-good\"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid sysctl pattern": {
0000000000000000000000000000000000000000;;				psp:         invalidSysctlPattern,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: fmt.Sprintf("must have at most 253 characters and match regex %s", SysctlPatternFmt),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid seccomp default profile": {
0000000000000000000000000000000000000000;;				psp:         invalidSeccompDefault,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "must be a valid seccomp profile",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid seccomp allowed profile": {
0000000000000000000000000000000000000000;;				psp:         invalidSeccompAllowed,
0000000000000000000000000000000000000000;;				errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errorDetail: "must be a valid seccomp profile",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidatePodSecurityPolicy(v.psp)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected errors but got none", k)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[0].Type != v.errorType {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] received an unexpected error type.  Expected: '%s' got: '%s'", k, v.errorType, errs[0].Type)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[0].Detail != v.errorDetail {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] received an unexpected error detail.  Expected '%s' got: '%s'", k, v.errorDetail, errs[0].Detail)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update error is different for 'missing object meta name'.
0000000000000000000000000000000000000000;;		errorCases["missing object meta name"] = testCase{
0000000000000000000000000000000000000000;;			psp:         errorCases["missing object meta name"].psp,
0000000000000000000000000000000000000000;;			errorType:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			errorDetail: "field is immutable",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should not be able to update to an invalid policy.
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			v.psp.ResourceVersion = "444" // Required for updates.
0000000000000000000000000000000000000000;;			errs := ValidatePodSecurityPolicyUpdate(validPSP(), v.psp)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expected update errors but got none", k)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[0].Type != v.errorType {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] received an unexpected error type.  Expected: '%s' got: '%s'", k, v.errorType, errs[0].Type)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs[0].Detail != v.errorDetail {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] received an unexpected error detail.  Expected '%s' got: '%s'", k, v.errorDetail, errs[0].Detail)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mustRunAs := validPSP()
0000000000000000000000000000000000000000;;		mustRunAs.Spec.FSGroup.Rule = extensions.FSGroupStrategyMustRunAs
0000000000000000000000000000000000000000;;		mustRunAs.Spec.SupplementalGroups.Rule = extensions.SupplementalGroupsStrategyMustRunAs
0000000000000000000000000000000000000000;;		mustRunAs.Spec.RunAsUser.Rule = extensions.RunAsUserStrategyMustRunAs
0000000000000000000000000000000000000000;;		mustRunAs.Spec.RunAsUser.Ranges = []extensions.UserIDRange{
0000000000000000000000000000000000000000;;			{Min: 1, Max: 1},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mustRunAs.Spec.SELinux.Rule = extensions.SELinuxStrategyMustRunAs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runAsNonRoot := validPSP()
0000000000000000000000000000000000000000;;		runAsNonRoot.Spec.RunAsUser.Rule = extensions.RunAsUserStrategyMustRunAsNonRoot
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		caseInsensitiveAddDrop := validPSP()
0000000000000000000000000000000000000000;;		caseInsensitiveAddDrop.Spec.DefaultAddCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;		caseInsensitiveAddDrop.Spec.RequiredDropCapabilities = []api.Capability{"FOO"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		caseInsensitiveAllowedDrop := validPSP()
0000000000000000000000000000000000000000;;		caseInsensitiveAllowedDrop.Spec.RequiredDropCapabilities = []api.Capability{"FOO"}
0000000000000000000000000000000000000000;;		caseInsensitiveAllowedDrop.Spec.AllowedCapabilities = []api.Capability{"foo"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validAppArmor := validPSP()
0000000000000000000000000000000000000000;;		validAppArmor.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			apparmor.DefaultProfileAnnotationKey:  apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;			apparmor.AllowedProfilesAnnotationKey: apparmor.ProfileRuntimeDefault + "," + apparmor.ProfileNamePrefix + "foo",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		withSysctl := validPSP()
0000000000000000000000000000000000000000;;		withSysctl.Annotations[extensions.SysctlsPodSecurityPolicyAnnotationKey] = "net.*"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validSeccomp := validPSP()
0000000000000000000000000000000000000000;;		validSeccomp.Annotations = map[string]string{
0000000000000000000000000000000000000000;;			seccomp.DefaultProfileAnnotationKey:  "docker/default",
0000000000000000000000000000000000000000;;			seccomp.AllowedProfilesAnnotationKey: "docker/default,unconfined,localhost/foo",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := map[string]struct {
0000000000000000000000000000000000000000;;			psp *extensions.PodSecurityPolicy
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"must run as": {
0000000000000000000000000000000000000000;;				psp: mustRunAs,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"run as any": {
0000000000000000000000000000000000000000;;				psp: validPSP(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"run as non-root (user only)": {
0000000000000000000000000000000000000000;;				psp: runAsNonRoot,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"comparison for add -> drop is case sensitive": {
0000000000000000000000000000000000000000;;				psp: caseInsensitiveAddDrop,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"comparison for allowed -> drop is case sensitive": {
0000000000000000000000000000000000000000;;				psp: caseInsensitiveAllowedDrop,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid AppArmor annotations": {
0000000000000000000000000000000000000000;;				psp: validAppArmor,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with network sysctls": {
0000000000000000000000000000000000000000;;				psp: withSysctl,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid seccomp annotations": {
0000000000000000000000000000000000000000;;				psp: validSeccomp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePodSecurityPolicy(v.psp); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %s, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Should be able to update to a valid PSP.
0000000000000000000000000000000000000000;;			v.psp.ResourceVersion = "444" // Required for updates.
0000000000000000000000000000000000000000;;			if errs := ValidatePodSecurityPolicyUpdate(validPSP(), v.psp); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %s update, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePSPVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		validPSP := func() *extensions.PodSecurityPolicy {
0000000000000000000000000000000000000000;;			return &extensions.PodSecurityPolicy{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				Spec: extensions.PodSecurityPolicySpec{
0000000000000000000000000000000000000000;;					SELinux: extensions.SELinuxStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.SELinuxStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RunAsUser: extensions.RunAsUserStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.RunAsUserStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					FSGroup: extensions.FSGroupStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.FSGroupStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					SupplementalGroups: extensions.SupplementalGroupsStrategyOptions{
0000000000000000000000000000000000000000;;						Rule: extensions.SupplementalGroupsStrategyRunAsAny,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumes := psputil.GetAllFSTypesAsSet()
0000000000000000000000000000000000000000;;		// add in the * value since that is a pseudo type that is not included by default
0000000000000000000000000000000000000000;;		volumes.Insert(string(extensions.All))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, strVolume := range volumes.List() {
0000000000000000000000000000000000000000;;			psp := validPSP()
0000000000000000000000000000000000000000;;			psp.Spec.Volumes = []extensions.FSType{extensions.FSType(strVolume)}
0000000000000000000000000000000000000000;;			errs := ValidatePodSecurityPolicy(psp)
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s validation expected no errors but received %v", strVolume, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNetworkPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		protocolTCP := api.ProtocolTCP
0000000000000000000000000000000000000000;;		protocolUDP := api.ProtocolUDP
0000000000000000000000000000000000000000;;		protocolICMP := api.Protocol("ICMP")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := []extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From:  []extensions.NetworkPolicyPeer{},
0000000000000000000000000000000000000000;;							Ports: []extensions.NetworkPolicyPort{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Ports: []extensions.NetworkPolicyPort{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: nil,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.Int, IntVal: 80},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolTCP,
0000000000000000000000000000000000000000;;									Port:     nil,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolTCP,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.Int, IntVal: 443},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolUDP,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.String, StrVal: "dns"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									PodSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: map[string]string{"c": "d"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									NamespaceSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: map[string]string{"c": "d"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Success cases are expected to pass validation.
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateNetworkPolicy(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %d, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		errorCases := map[string]extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;			"namespaceSelector and podSelector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									PodSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: map[string]string{"c": "d"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									NamespaceSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: map[string]string{"c": "d"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec.podSelector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: invalidSelector,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									NamespaceSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: map[string]string{"c": "d"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid ingress.ports.protocol": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Ports: []extensions.NetworkPolicyPort{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolICMP,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.Int, IntVal: 80},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid ingress.ports.port (int)": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Ports: []extensions.NetworkPolicyPort{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolTCP,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.Int, IntVal: 123456789},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid ingress.ports.port (str)": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Ports: []extensions.NetworkPolicyPort{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Protocol: &protocolTCP,
0000000000000000000000000000000000000000;;									Port:     &intstr.IntOrString{Type: intstr.String, StrVal: "!@#$"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid ingress.from.podSelector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									PodSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: invalidSelector,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid ingress.from.namespaceSelector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									NamespaceSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchLabels: invalidSelector,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Error cases are not expected to pass validation.
0000000000000000000000000000000000000000;;		for testName, networkPolicy := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateNetworkPolicy(&networkPolicy); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected failure for test: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNetworkPolicyUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type npUpdateTest struct {
0000000000000000000000000000000000000000;;			old    extensions.NetworkPolicy
0000000000000000000000000000000000000000;;			update extensions.NetworkPolicy
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []npUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ingress: []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ingress: []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateNetworkPolicyUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]npUpdateTest{
0000000000000000000000000000000000000000;;			"change name": {
0000000000000000000000000000000000000000;;				old: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;						Ingress:     []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;						Ingress:     []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"change spec": {
0000000000000000000000000000000000000000;;				old: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{},
0000000000000000000000000000000000000000;;						Ingress:     []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;					Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;						PodSelector: metav1.LabelSelector{
0000000000000000000000000000000000000000;;							MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ingress: []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateNetworkPolicyUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidSysctlPattern(t *testing.T) {
0000000000000000000000000000000000000000;;		valid := []string{
0000000000000000000000000000000000000000;;			"a.b.c.d",
0000000000000000000000000000000000000000;;			"a",
0000000000000000000000000000000000000000;;			"a_b",
0000000000000000000000000000000000000000;;			"a-b",
0000000000000000000000000000000000000000;;			"abc",
0000000000000000000000000000000000000000;;			"abc.def",
0000000000000000000000000000000000000000;;			"*",
0000000000000000000000000000000000000000;;			"a.*",
0000000000000000000000000000000000000000;;			"*",
0000000000000000000000000000000000000000;;			"abc*",
0000000000000000000000000000000000000000;;			"a.abc*",
0000000000000000000000000000000000000000;;			"a.b.*",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalid := []string{
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			"ä",
0000000000000000000000000000000000000000;;			"a_",
0000000000000000000000000000000000000000;;			"_",
0000000000000000000000000000000000000000;;			"_a",
0000000000000000000000000000000000000000;;			"_a._b",
0000000000000000000000000000000000000000;;			"__",
0000000000000000000000000000000000000000;;			"-",
0000000000000000000000000000000000000000;;			".",
0000000000000000000000000000000000000000;;			"a.",
0000000000000000000000000000000000000000;;			".a",
0000000000000000000000000000000000000000;;			"a.b.",
0000000000000000000000000000000000000000;;			"a*.b",
0000000000000000000000000000000000000000;;			"a*b",
0000000000000000000000000000000000000000;;			"*a",
0000000000000000000000000000000000000000;;			"Abc",
0000000000000000000000000000000000000000;;			func(n int) string {
0000000000000000000000000000000000000000;;				x := make([]byte, n)
0000000000000000000000000000000000000000;;				for i := range x {
0000000000000000000000000000000000000000;;					x[i] = byte('a')
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return string(x)
0000000000000000000000000000000000000000;;			}(256),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range valid {
0000000000000000000000000000000000000000;;			if !IsValidSysctlPattern(s) {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected to be a valid sysctl pattern", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range invalid {
0000000000000000000000000000000000000000;;			if IsValidSysctlPattern(s) {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected to be an invalid sysctl pattern", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
