0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c36dabf82fd9c40de5618fe0561eafb08f973e30;pkg/apis/certificates/v1alpha1/helpers.go[pkg/apis/certificates/v1alpha1/helpers.go][pkg/apis/certificates/v1beta1/helpers.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certificatesv1beta1 "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseCSR extracts the CSR from the API object and decodes it.
0000000000000000000000000000000000000000;;	func ParseCSR(obj *certificatesv1beta1.CertificateSigningRequest) (*x509.CertificateRequest, error) {
0000000000000000000000000000000000000000;;		// extract PEM from request object
0000000000000000000000000000000000000000;;		pemBytes := obj.Spec.Request
0000000000000000000000000000000000000000;;		block, _ := pem.Decode(pemBytes)
0000000000000000000000000000000000000000;;		if block == nil || block.Type != "CERTIFICATE REQUEST" {
0000000000000000000000000000000000000000;;			return nil, errors.New("PEM block type must be CERTIFICATE REQUEST")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csr, err := x509.ParseCertificateRequest(block.Bytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return csr, nil
0000000000000000000000000000000000000000;;	}
