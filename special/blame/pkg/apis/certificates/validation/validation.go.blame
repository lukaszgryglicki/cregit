0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5a7597794f104876fd4ef26edc7d65357312cd9e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		apivalidation "k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validateCSR validates the signature and formatting of a base64-wrapped,
0000000000000000000000000000000000000000;;	// PEM-encoded PKCS#10 certificate signing request. If this is invalid, we must
0000000000000000000000000000000000000000;;	// not accept the CSR for further processing.
0000000000000000000000000000000000000000;;	func validateCSR(obj *certificates.CertificateSigningRequest) error {
0000000000000000000000000000000000000000;;		csr, err := certificates.ParseCSR(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// check that the signature is valid
0000000000000000000000000000000000000000;;		err = csr.CheckSignature()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We don't care what you call your certificate requests.
0000000000000000000000000000000000000000;;	func ValidateCertificateRequestName(name string, prefix bool) []string {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ValidateCertificateSigningRequest(csr *certificates.CertificateSigningRequest) field.ErrorList {
0000000000000000000000000000000000000000;;		isNamespaced := false
0000000000000000000000000000000000000000;;		allErrs := apivalidation.ValidateObjectMeta(&csr.ObjectMeta, isNamespaced, ValidateCertificateRequestName, field.NewPath("metadata"))
0000000000000000000000000000000000000000;;		err := validateCSR(csr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specPath := field.NewPath("spec")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(specPath.Child("request"), csr.Spec.Request, fmt.Sprintf("%v", err)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(csr.Spec.Usages) == 0 {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Required(specPath.Child("usages"), "usages must be provided"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ValidateCertificateSigningRequestUpdate(newCSR, oldCSR *certificates.CertificateSigningRequest) field.ErrorList {
0000000000000000000000000000000000000000;;		validationErrorList := ValidateCertificateSigningRequest(newCSR)
0000000000000000000000000000000000000000;;		metaUpdateErrorList := apivalidation.ValidateObjectMetaUpdate(&newCSR.ObjectMeta, &oldCSR.ObjectMeta, field.NewPath("metadata"))
0000000000000000000000000000000000000000;;		return append(validationErrorList, metaUpdateErrorList...)
0000000000000000000000000000000000000000;;	}
