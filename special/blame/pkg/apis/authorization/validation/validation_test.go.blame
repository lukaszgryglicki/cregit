0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
65474ab697f89e90e979129e4be3eb06542961c8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSARSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;			{ResourceAttributes: &authorizationapi.ResourceAttributes{}, User: "me"},
0000000000000000000000000000000000000000;;			{NonResourceAttributes: &authorizationapi.NonResourceAttributes{}, Groups: []string{"my-group"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSubjectAccessReviewSpec(successCase, field.NewPath("spec")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			obj  authorizationapi.SubjectAccessReviewSpec
0000000000000000000000000000000000000000;;			msg  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "neither request",
0000000000000000000000000000000000000000;;				obj:  authorizationapi.SubjectAccessReviewSpec{User: "me"},
0000000000000000000000000000000000000000;;				msg:  "exactly one of nonResourceAttributes or resourceAttributes must be specified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "both requests",
0000000000000000000000000000000000000000;;				obj: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					ResourceAttributes:    &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;					NonResourceAttributes: &authorizationapi.NonResourceAttributes{},
0000000000000000000000000000000000000000;;					User: "me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "cannot be specified in combination with resourceAttributes",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no subject",
0000000000000000000000000000000000000000;;				obj: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					ResourceAttributes: &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: `spec.user: Invalid value: "": at least one of user or group must be specified`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateSubjectAccessReviewSpec(c.obj, field.NewPath("spec"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			errs = ValidateSubjectAccessReview(&authorizationapi.SubjectAccessReview{Spec: c.obj})
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs = ValidateLocalSubjectAccessReview(&authorizationapi.LocalSubjectAccessReview{Spec: c.obj})
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSelfSAR(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []authorizationapi.SelfSubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;			{ResourceAttributes: &authorizationapi.ResourceAttributes{}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSelfSubjectAccessReviewSpec(successCase, field.NewPath("spec")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			obj  authorizationapi.SelfSubjectAccessReviewSpec
0000000000000000000000000000000000000000;;			msg  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "neither request",
0000000000000000000000000000000000000000;;				obj:  authorizationapi.SelfSubjectAccessReviewSpec{},
0000000000000000000000000000000000000000;;				msg:  "exactly one of nonResourceAttributes or resourceAttributes must be specified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "both requests",
0000000000000000000000000000000000000000;;				obj: authorizationapi.SelfSubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					ResourceAttributes:    &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;					NonResourceAttributes: &authorizationapi.NonResourceAttributes{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "cannot be specified in combination with resourceAttributes",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateSelfSubjectAccessReviewSpec(c.obj, field.NewPath("spec"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			errs = ValidateSelfSubjectAccessReview(&authorizationapi.SelfSubjectAccessReview{Spec: c.obj})
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateLocalSAR(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					ResourceAttributes: &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;					User:               "user",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateLocalSubjectAccessReview(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			obj  *authorizationapi.LocalSubjectAccessReview
0000000000000000000000000000000000000000;;			msg  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "name",
0000000000000000000000000000000000000000;;				obj: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "a"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;						User:               "user",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must be empty except for namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "namespace conflict",
0000000000000000000000000000000000000000;;				obj: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "a"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{},
0000000000000000000000000000000000000000;;						User:               "user",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "must match metadata.namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "nonresource",
0000000000000000000000000000000000000000;;				obj: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "a"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						NonResourceAttributes: &authorizationapi.NonResourceAttributes{},
0000000000000000000000000000000000000000;;						User: "user",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "disallowed on this kind of request",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateLocalSubjectAccessReview(c.obj)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected failure for %q", c.name, c.msg)
0000000000000000000000000000000000000000;;			} else if !strings.Contains(errs[0].Error(), c.msg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %q, expected: %q", c.name, errs[0], c.msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
