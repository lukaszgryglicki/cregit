0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a07484e76fbb5f0f2029be56440de4962c3c6c8f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package imagepolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageReview checks if the set of images in a pod are allowed.
0000000000000000000000000000000000000000;;	type ImageReview struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec holds information about the pod being evaluated
0000000000000000000000000000000000000000;;		Spec ImageReviewSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is filled in by the backend and indicates whether the pod should be allowed.
0000000000000000000000000000000000000000;;		Status ImageReviewStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageReviewSpec is a description of the pod creation request.
0000000000000000000000000000000000000000;;	type ImageReviewSpec struct {
0000000000000000000000000000000000000000;;		// Containers is a list of a subset of the information in each container of the Pod being created.
0000000000000000000000000000000000000000;;		Containers []ImageReviewContainerSpec
0000000000000000000000000000000000000000;;		// Annotations is a list of key-value pairs extracted from the Pod's annotations.
0000000000000000000000000000000000000000;;		// It only includes keys which match the pattern `*.image-policy.k8s.io/*`.
0000000000000000000000000000000000000000;;		// It is up to each webhook backend to determine how to interpret these annotations, if at all.
0000000000000000000000000000000000000000;;		Annotations map[string]string
0000000000000000000000000000000000000000;;		// Namespace is the namespace the pod is being created in.
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageReviewContainerSpec is a description of a container within the pod creation request.
0000000000000000000000000000000000000000;;	type ImageReviewContainerSpec struct {
0000000000000000000000000000000000000000;;		// This can be in the form image:tag or image@SHA:012345679abcdef.
0000000000000000000000000000000000000000;;		Image string
0000000000000000000000000000000000000000;;		// In future, we may add command line overrides, exec health check command lines, and so on.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageReviewStatus is the result of the token authentication request.
0000000000000000000000000000000000000000;;	type ImageReviewStatus struct {
0000000000000000000000000000000000000000;;		// Allowed indicates that all images were allowed to be run.
0000000000000000000000000000000000000000;;		Allowed bool
0000000000000000000000000000000000000000;;		// Reason should be empty unless Allowed is false in which case it
0000000000000000000000000000000000000000;;		// may contain a short description of what is wrong.  Kubernetes
0000000000000000000000000000000000000000;;		// may truncate excessively long errors when displaying to the user.
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;	}
