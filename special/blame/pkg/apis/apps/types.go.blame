0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3153317738b4c67ab9f03b69f43680dd0ce93c63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apps
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSet represents a set of pods with consistent identities.
0000000000000000000000000000000000000000;;	// Identities are defined as:
0000000000000000000000000000000000000000;;	//  - Network: A single stable DNS and hostname.
0000000000000000000000000000000000000000;;	//  - Storage: As many VolumeClaims as requested.
0000000000000000000000000000000000000000;;	// The StatefulSet guarantees that a given network identity will always
0000000000000000000000000000000000000000;;	// map to the same storage identity.
0000000000000000000000000000000000000000;;	type StatefulSet struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec defines the desired identities of pods in this set.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec StatefulSetSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is the current status of Pods in this StatefulSet. This data
0000000000000000000000000000000000000000;;		// may be out of date by some window of time.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status StatefulSetStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodManagementPolicyType defines the policy for creating pods under a stateful set.
0000000000000000000000000000000000000000;;	type PodManagementPolicyType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OrderedReadyPodManagement will create pods in strictly increasing order on
0000000000000000000000000000000000000000;;		// scale up and strictly decreasing order on scale down, progressing only when
0000000000000000000000000000000000000000;;		// the previous pod is ready or terminated. At most one pod will be changed
0000000000000000000000000000000000000000;;		// at any time.
0000000000000000000000000000000000000000;;		OrderedReadyPodManagement PodManagementPolicyType = "OrderedReady"
0000000000000000000000000000000000000000;;		// ParallelPodManagement will create and delete pods as soon as the stateful set
0000000000000000000000000000000000000000;;		// replica count is changed, and will not wait for pods to be ready or complete
0000000000000000000000000000000000000000;;		// termination.
0000000000000000000000000000000000000000;;		ParallelPodManagement = "Parallel"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet
0000000000000000000000000000000000000000;;	// controller will use to perform updates. It includes any additional parameters
0000000000000000000000000000000000000000;;	// necessary to perform the update for the indicated strategy.
0000000000000000000000000000000000000000;;	type StatefulSetUpdateStrategy struct {
0000000000000000000000000000000000000000;;		// Type indicates the type of the StatefulSetUpdateStrategy.
0000000000000000000000000000000000000000;;		Type StatefulSetUpdateStrategyType
0000000000000000000000000000000000000000;;		// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
0000000000000000000000000000000000000000;;		RollingUpdate *RollingUpdateStatefulSetStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetUpdateStrategyType is a string enumeration type that enumerates
0000000000000000000000000000000000000000;;	// all possible update strategies for the StatefulSet controller.
0000000000000000000000000000000000000000;;	type StatefulSetUpdateStrategyType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RollingUpdateStatefulSetStrategyType indicates that update will be
0000000000000000000000000000000000000000;;		// applied to all Pods in the StatefulSet with respect to the StatefulSet
0000000000000000000000000000000000000000;;		// ordering constraints. When a scale operation is performed with this
0000000000000000000000000000000000000000;;		// strategy, new Pods will be created from the specification version indicated
0000000000000000000000000000000000000000;;		// by the StatefulSet's updateRevision.
0000000000000000000000000000000000000000;;		RollingUpdateStatefulSetStrategyType = "RollingUpdate"
0000000000000000000000000000000000000000;;		// OnDeleteStatefulSetStrategyType triggers the legacy behavior. Version
0000000000000000000000000000000000000000;;		// tracking and ordered rolling restarts are disabled. Pods are recreated
0000000000000000000000000000000000000000;;		// from the StatefulSetSpec when they are manually deleted. When a scale
0000000000000000000000000000000000000000;;		// operation is performed with this strategy,specification version indicated
0000000000000000000000000000000000000000;;		// by the StatefulSet's currentRevision.
0000000000000000000000000000000000000000;;		OnDeleteStatefulSetStrategyType = "OnDelete"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
0000000000000000000000000000000000000000;;	type RollingUpdateStatefulSetStrategy struct {
0000000000000000000000000000000000000000;;		// Partition indicates the ordinal at which the StatefulSet should be
0000000000000000000000000000000000000000;;		// partitioned.
0000000000000000000000000000000000000000;;		Partition int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A StatefulSetSpec is the specification of a StatefulSet.
0000000000000000000000000000000000000000;;	type StatefulSetSpec struct {
0000000000000000000000000000000000000000;;		// Replicas is the desired number of replicas of the given Template.
0000000000000000000000000000000000000000;;		// These are replicas in the sense that they are instantiations of the
0000000000000000000000000000000000000000;;		// same Template, but individual replicas also have a consistent identity.
0000000000000000000000000000000000000000;;		// If unspecified, defaults to 1.
0000000000000000000000000000000000000000;;		// TODO: Consider a rename of this field.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Replicas int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Selector is a label query over pods that should match the replica count.
0000000000000000000000000000000000000000;;		// If empty, defaulted to labels on the pod template.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Selector *metav1.LabelSelector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template is the object that describes the pod that will be created if
0000000000000000000000000000000000000000;;		// insufficient replicas are detected. Each pod stamped out by the StatefulSet
0000000000000000000000000000000000000000;;		// will fulfill this Template, but have a unique identity from the rest
0000000000000000000000000000000000000000;;		// of the StatefulSet.
0000000000000000000000000000000000000000;;		Template api.PodTemplateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeClaimTemplates is a list of claims that pods are allowed to reference.
0000000000000000000000000000000000000000;;		// The StatefulSet controller is responsible for mapping network identities to
0000000000000000000000000000000000000000;;		// claims in a way that maintains the identity of a pod. Every claim in
0000000000000000000000000000000000000000;;		// this list must have at least one matching (by name) volumeMount in one
0000000000000000000000000000000000000000;;		// container in the template. A claim in this list takes precedence over
0000000000000000000000000000000000000000;;		// any volumes in the template, with the same name.
0000000000000000000000000000000000000000;;		// TODO: Define the behavior if a claim already exists with the same name.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		VolumeClaimTemplates []api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceName is the name of the service that governs this StatefulSet.
0000000000000000000000000000000000000000;;		// This service must exist before the StatefulSet, and is responsible for
0000000000000000000000000000000000000000;;		// the network identity of the set. Pods get DNS/hostnames that follow the
0000000000000000000000000000000000000000;;		// pattern: pod-specific-string.serviceName.default.svc.cluster.local
0000000000000000000000000000000000000000;;		// where "pod-specific-string" is managed by the StatefulSet controller.
0000000000000000000000000000000000000000;;		ServiceName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PodManagementPolicy controls how pods are created during initial scale up,
0000000000000000000000000000000000000000;;		// when replacing pods on nodes, or when scaling down. The default policy is
0000000000000000000000000000000000000000;;		// `OrderedReady`, where pods are created in increasing order (pod-0, then
0000000000000000000000000000000000000000;;		// pod-1, etc) and the controller will wait until each pod is ready before
0000000000000000000000000000000000000000;;		// continuing. When scaling down, the pods are removed in the opposite order.
0000000000000000000000000000000000000000;;		// The alternative policy is `Parallel` which will create pods in parallel
0000000000000000000000000000000000000000;;		// to match the desired scale without waiting, and on scale down will delete
0000000000000000000000000000000000000000;;		// all pods at once.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		PodManagementPolicy PodManagementPolicyType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// updateStrategy indicates the StatefulSetUpdateStrategy that will be
0000000000000000000000000000000000000000;;		// employed to update Pods in the StatefulSet when a revision is made to
0000000000000000000000000000000000000000;;		// Template.
0000000000000000000000000000000000000000;;		UpdateStrategy StatefulSetUpdateStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// revisionHistoryLimit is the maximum number of revisions that will
0000000000000000000000000000000000000000;;		// be maintained in the StatefulSet's revision history. The revision history
0000000000000000000000000000000000000000;;		// consists of all revisions not represented by a currently applied
0000000000000000000000000000000000000000;;		// StatefulSetSpec version. The default value is 10.
0000000000000000000000000000000000000000;;		RevisionHistoryLimit *int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetStatus represents the current state of a StatefulSet.
0000000000000000000000000000000000000000;;	type StatefulSetStatus struct {
0000000000000000000000000000000000000000;;		// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the
0000000000000000000000000000000000000000;;		// StatefulSet's generation, which is updated on mutation by the API Server.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ObservedGeneration *int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// replicas is the number of Pods created by the StatefulSet controller.
0000000000000000000000000000000000000000;;		Replicas int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
0000000000000000000000000000000000000000;;		ReadyReplicas int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version
0000000000000000000000000000000000000000;;		// indicated by currentRevision.
0000000000000000000000000000000000000000;;		CurrentReplicas int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version
0000000000000000000000000000000000000000;;		// indicated by updateRevision.
0000000000000000000000000000000000000000;;		UpdatedReplicas int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the
0000000000000000000000000000000000000000;;		// sequence [0,currentReplicas).
0000000000000000000000000000000000000000;;		CurrentRevision string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence
0000000000000000000000000000000000000000;;		// [replicas-updatedReplicas,replicas)
0000000000000000000000000000000000000000;;		UpdateRevision string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetList is a collection of StatefulSets.
0000000000000000000000000000000000000000;;	type StatefulSetList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;		Items []StatefulSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerRevision implements an immutable snapshot of state data. Clients
0000000000000000000000000000000000000000;;	// are responsible for serializing and deserializing the objects that contain
0000000000000000000000000000000000000000;;	// their internal state.
0000000000000000000000000000000000000000;;	// Once a ControllerRevision has been successfully created, it can not be updated.
0000000000000000000000000000000000000000;;	// The API Server will fail validation of all requests that attempt to mutate
0000000000000000000000000000000000000000;;	// the Data field. ControllerRevisions may, however, be deleted.
0000000000000000000000000000000000000000;;	type ControllerRevision struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Data is the Object representing the state.
0000000000000000000000000000000000000000;;		Data runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Revision indicates the revision of the state represented by Data.
0000000000000000000000000000000000000000;;		Revision int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
0000000000000000000000000000000000000000;;	type ControllerRevisionList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Items is the list of ControllerRevision objects.
0000000000000000000000000000000000000000;;		Items []ControllerRevision
0000000000000000000000000000000000000000;;	}
