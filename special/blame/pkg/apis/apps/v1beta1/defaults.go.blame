0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3153317738b4c67ab9f03b69f43680dd0ce93c63;pkg/apis/apps/v1alpha1/defaulting.go[pkg/apis/apps/v1alpha1/defaulting.go][pkg/apis/apps/v1beta1/defaults.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_StatefulSet(obj *appsv1beta1.StatefulSet) {
0000000000000000000000000000000000000000;;		if len(obj.Spec.PodManagementPolicy) == 0 {
0000000000000000000000000000000000000000;;			obj.Spec.PodManagementPolicy = appsv1beta1.OrderedReadyPodManagement
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.Spec.UpdateStrategy.Type == "" {
0000000000000000000000000000000000000000;;			obj.Spec.UpdateStrategy.Type = appsv1beta1.OnDeleteStatefulSetStrategyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: labels,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Replicas = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Replicas = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.RevisionHistoryLimit == nil {
0000000000000000000000000000000000000000;;			obj.Spec.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.RevisionHistoryLimit = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.UpdateStrategy.Type == appsv1beta1.RollingUpdateStatefulSetStrategyType &&
0000000000000000000000000000000000000000;;			obj.Spec.UpdateStrategy.RollingUpdate != nil &&
0000000000000000000000000000000000000000;;			obj.Spec.UpdateStrategy.RollingUpdate.Partition == nil {
0000000000000000000000000000000000000000;;			obj.Spec.UpdateStrategy.RollingUpdate.Partition = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.UpdateStrategy.RollingUpdate.Partition = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDefaults_Deployment sets additional defaults compared to its counterpart
0000000000000000000000000000000000000000;;	// in extensions. These addons are:
0000000000000000000000000000000000000000;;	// - MaxUnavailable during rolling update set to 25% (1 in extensions)
0000000000000000000000000000000000000000;;	// - MaxSurge value during rolling update set to 25% (1 in extensions)
0000000000000000000000000000000000000000;;	// - RevisionHistoryLimit set to 2 (not set in extensions)
0000000000000000000000000000000000000000;;	// - ProgressDeadlineSeconds set to 600s (not set in extensions)
0000000000000000000000000000000000000000;;	func SetDefaults_Deployment(obj *appsv1beta1.Deployment) {
0000000000000000000000000000000000000000;;		// Default labels and selector to labels from pod template spec.
0000000000000000000000000000000000000000;;		labels := obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = &metav1.LabelSelector{MatchLabels: labels}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Set appsv1beta1.DeploymentSpec.Replicas to 1 if it is not set.
0000000000000000000000000000000000000000;;		if obj.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Replicas = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Replicas = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		strategy := &obj.Spec.Strategy
0000000000000000000000000000000000000000;;		// Set default appsv1beta1.DeploymentStrategyType as RollingUpdate.
0000000000000000000000000000000000000000;;		if strategy.Type == "" {
0000000000000000000000000000000000000000;;			strategy.Type = appsv1beta1.RollingUpdateDeploymentStrategyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if strategy.Type == appsv1beta1.RollingUpdateDeploymentStrategyType {
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate == nil {
0000000000000000000000000000000000000000;;				rollingUpdate := appsv1beta1.RollingUpdateDeployment{}
0000000000000000000000000000000000000000;;				strategy.RollingUpdate = &rollingUpdate
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;				// Set default MaxUnavailable as 25% by default.
0000000000000000000000000000000000000000;;				maxUnavailable := intstr.FromString("25%")
0000000000000000000000000000000000000000;;				strategy.RollingUpdate.MaxUnavailable = &maxUnavailable
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strategy.RollingUpdate.MaxSurge == nil {
0000000000000000000000000000000000000000;;				// Set default MaxSurge as 25% by default.
0000000000000000000000000000000000000000;;				maxSurge := intstr.FromString("25%")
0000000000000000000000000000000000000000;;				strategy.RollingUpdate.MaxSurge = &maxSurge
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.RevisionHistoryLimit == nil {
0000000000000000000000000000000000000000;;			obj.Spec.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.RevisionHistoryLimit = 2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.ProgressDeadlineSeconds == nil {
0000000000000000000000000000000000000000;;			obj.Spec.ProgressDeadlineSeconds = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.ProgressDeadlineSeconds = 600
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
