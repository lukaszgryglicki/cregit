0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
cf5c2282d7443a2056ed725a9afa6ce2a8d62c2b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/apps/install"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/apis/apps/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetDefaultDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultIntOrString := intstr.FromString("25%")
0000000000000000000000000000000000000000;;		differentIntOrString := intstr.FromInt(5)
0000000000000000000000000000000000000000;;		period := int64(v1.DefaultTerminationGracePeriodSeconds)
0000000000000000000000000000000000000000;;		defaultTemplate := v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				DNSPolicy:                     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				SecurityContext:               &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &period,
0000000000000000000000000000000000000000;;				SchedulerName:                 api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			original *appsv1beta1.Deployment
0000000000000000000000000000000000000000;;			expected *appsv1beta1.Deployment
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &appsv1beta1.Deployment{},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(1),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &appsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &defaultIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(2),
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(600),
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							RollingUpdate: &appsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge: &differentIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &appsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &differentIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(2),
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(600),
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(3),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type:          appsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: nil,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(3),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;							RollingUpdate: &appsv1beta1.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;								MaxSurge:       &defaultIntOrString,
0000000000000000000000000000000000000000;;								MaxUnavailable: &defaultIntOrString,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(2),
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(600),
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit: newInt32(0),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(0),
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(600),
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				original: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(30),
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(2),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: newInt32(5),
0000000000000000000000000000000000000000;;						Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;							Type: appsv1beta1.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ProgressDeadlineSeconds: newInt32(30),
0000000000000000000000000000000000000000;;						RevisionHistoryLimit:    newInt32(2),
0000000000000000000000000000000000000000;;						Template:                defaultTemplate,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			original := test.original
0000000000000000000000000000000000000000;;			expected := test.expected
0000000000000000000000000000000000000000;;			obj2 := roundTrip(t, runtime.Object(original))
0000000000000000000000000000000000000000;;			got, ok := obj2.(*appsv1beta1.Deployment)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: %v", got)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(got.Spec, expected.Spec) {
0000000000000000000000000000000000000000;;				t.Errorf("object mismatch!\nexpected:\n\t%+v\ngot:\n\t%+v", got.Spec, expected.Spec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultDeploymentAvailability(t *testing.T) {
0000000000000000000000000000000000000000;;		d := roundTrip(t, runtime.Object(&appsv1beta1.Deployment{})).(*appsv1beta1.Deployment)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		maxUnavailable, err := intstr.GetValueFromIntOrPercent(d.Spec.Strategy.RollingUpdate.MaxUnavailable, int(*(d.Spec.Replicas)), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *(d.Spec.Replicas)-int32(maxUnavailable) <= 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("the default value of maxUnavailable can lead to no active replicas during rolling update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func roundTrip(t *testing.T, obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(api.Codecs.LegacyCodec(SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\n %#v", err, obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj2, err := runtime.Decode(api.Codecs.UniversalDecoder(), data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nData: %s\nSource: %#v", err, string(data), obj)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj3 := reflect.New(reflect.TypeOf(obj).Elem()).Interface().(runtime.Object)
0000000000000000000000000000000000000000;;		err = api.Scheme.Convert(obj2, obj3, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v\nSource: %#v", err, obj2)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32(val int32) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
