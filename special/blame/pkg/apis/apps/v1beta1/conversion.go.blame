0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3153317738b4c67ab9f03b69f43680dd0ce93c63;pkg/apis/apps/v1alpha1/conversion.go[pkg/apis/apps/v1alpha1/conversion.go][pkg/apis/apps/v1beta1/conversion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		// Add non-generated conversion functions to handle the *int32 -> int32
0000000000000000000000000000000000000000;;		// conversion. A pointer is useful in the versioned type so we can default
0000000000000000000000000000000000000000;;		// it, but a plain int32 is more convenient in the internal type. These
0000000000000000000000000000000000000000;;		// functions are the same as the autogenerated ones in every other way.
0000000000000000000000000000000000000000;;		err := scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_v1beta1_StatefulSetSpec_To_apps_StatefulSetSpec,
0000000000000000000000000000000000000000;;			Convert_apps_StatefulSetSpec_To_v1beta1_StatefulSetSpec,
0000000000000000000000000000000000000000;;			Convert_v1beta1_StatefulSetUpdateStrategy_To_apps_StatefulSetUpdateStrategy,
0000000000000000000000000000000000000000;;			Convert_apps_StatefulSetUpdateStrategy_To_v1beta1_StatefulSetUpdateStrategy,
0000000000000000000000000000000000000000;;			// extensions
0000000000000000000000000000000000000000;;			// TODO: below conversions should be dropped in favor of auto-generated
0000000000000000000000000000000000000000;;			// ones, see https://github.com/kubernetes/kubernetextensionsssues/39865
0000000000000000000000000000000000000000;;			Convert_v1beta1_ScaleStatus_To_extensions_ScaleStatus,
0000000000000000000000000000000000000000;;			Convert_extensions_ScaleStatus_To_v1beta1_ScaleStatus,
0000000000000000000000000000000000000000;;			Convert_v1beta1_DeploymentSpec_To_extensions_DeploymentSpec,
0000000000000000000000000000000000000000;;			Convert_extensions_DeploymentSpec_To_v1beta1_DeploymentSpec,
0000000000000000000000000000000000000000;;			Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy,
0000000000000000000000000000000000000000;;			Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy,
0000000000000000000000000000000000000000;;			Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment,
0000000000000000000000000000000000000000;;			Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add field label conversions for kinds having selectable nothing but ObjectMeta fields.
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("apps/v1beta1", "StatefulSet",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name", "metadata.namespace", "status.successful":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported for appsv1beta1.StatefulSet: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("apps/v1beta1", "Deployment",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name", "metadata.namespace":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label %q not supported for appsv1beta1.Deployment", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_StatefulSetSpec_To_apps_StatefulSetSpec(in *appsv1beta1.StatefulSetSpec, out *apps.StatefulSetSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Replicas != nil {
0000000000000000000000000000000000000000;;			out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			in, out := &in.Selector, &out.Selector
0000000000000000000000000000000000000000;;			*out = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(*in, *out, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Selector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.Template, &out.Template, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.VolumeClaimTemplates != nil {
0000000000000000000000000000000000000000;;			in, out := &in.VolumeClaimTemplates, &out.VolumeClaimTemplates
0000000000000000000000000000000000000000;;			*out = make([]api.PersistentVolumeClaim, len(*in))
0000000000000000000000000000000000000000;;			for i := range *in {
0000000000000000000000000000000000000000;;				if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.VolumeClaimTemplates = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_v1beta1_StatefulSetUpdateStrategy_To_apps_StatefulSetUpdateStrategy(&in.UpdateStrategy, &out.UpdateStrategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.RevisionHistoryLimit != nil {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*out.RevisionHistoryLimit = *in.RevisionHistoryLimit
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.ServiceName = in.ServiceName
0000000000000000000000000000000000000000;;		out.PodManagementPolicy = apps.PodManagementPolicyType(in.PodManagementPolicy)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_apps_StatefulSetSpec_To_v1beta1_StatefulSetSpec(in *apps.StatefulSetSpec, out *appsv1beta1.StatefulSetSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = new(int32)
0000000000000000000000000000000000000000;;		*out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			in, out := &in.Selector, &out.Selector
0000000000000000000000000000000000000000;;			*out = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			if err := s.Convert(*in, *out, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Selector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.Template, &out.Template, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.VolumeClaimTemplates != nil {
0000000000000000000000000000000000000000;;			in, out := &in.VolumeClaimTemplates, &out.VolumeClaimTemplates
0000000000000000000000000000000000000000;;			*out = make([]v1.PersistentVolumeClaim, len(*in))
0000000000000000000000000000000000000000;;			for i := range *in {
0000000000000000000000000000000000000000;;				if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.VolumeClaimTemplates = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.RevisionHistoryLimit != nil {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*out.RevisionHistoryLimit = *in.RevisionHistoryLimit
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.ServiceName = in.ServiceName
0000000000000000000000000000000000000000;;		out.PodManagementPolicy = appsv1beta1.PodManagementPolicyType(in.PodManagementPolicy)
0000000000000000000000000000000000000000;;		if err := Convert_apps_StatefulSetUpdateStrategy_To_v1beta1_StatefulSetUpdateStrategy(&in.UpdateStrategy, &out.UpdateStrategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_StatefulSetUpdateStrategy_To_apps_StatefulSetUpdateStrategy(in *appsv1beta1.StatefulSetUpdateStrategy, out *apps.StatefulSetUpdateStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = apps.StatefulSetUpdateStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(apps.RollingUpdateStatefulSetStrategy)
0000000000000000000000000000000000000000;;			out.RollingUpdate.Partition = *in.RollingUpdate.Partition
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_apps_StatefulSetUpdateStrategy_To_v1beta1_StatefulSetUpdateStrategy(in *apps.StatefulSetUpdateStrategy, out *appsv1beta1.StatefulSetUpdateStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = appsv1beta1.StatefulSetUpdateStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(appsv1beta1.RollingUpdateStatefulSetStrategy)
0000000000000000000000000000000000000000;;			out.RollingUpdate.Partition = new(int32)
0000000000000000000000000000000000000000;;			*out.RollingUpdate.Partition = in.RollingUpdate.Partition
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ScaleStatus_To_v1beta1_ScaleStatus(in *extensions.ScaleStatus, out *appsv1beta1.ScaleStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = int32(in.Replicas)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out.Selector = nil
0000000000000000000000000000000000000000;;		out.TargetSelector = ""
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			if in.Selector.MatchExpressions == nil || len(in.Selector.MatchExpressions) == 0 {
0000000000000000000000000000000000000000;;				out.Selector = in.Selector.MatchLabels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(in.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("invalid label selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.TargetSelector = selector.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_ScaleStatus_To_extensions_ScaleStatus(in *appsv1beta1.ScaleStatus, out *extensions.ScaleStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Normally when 2 fields map to the same internal value we favor the old field, since
0000000000000000000000000000000000000000;;		// old clients can't be expected to know about new fields but clients that know about the
0000000000000000000000000000000000000000;;		// new field can be expected to know about the old field (though that's not quite true, due
0000000000000000000000000000000000000000;;		// to kubectl apply). However, these fields are readonly, so any non-nil value should work.
0000000000000000000000000000000000000000;;		if in.TargetSelector != "" {
0000000000000000000000000000000000000000;;			labelSelector, err := metav1.ParseToLabelSelector(in.TargetSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				out.Selector = nil
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse target selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Selector = labelSelector
0000000000000000000000000000000000000000;;		} else if in.Selector != nil {
0000000000000000000000000000000000000000;;			out.Selector = new(metav1.LabelSelector)
0000000000000000000000000000000000000000;;			selector := make(map[string]string)
0000000000000000000000000000000000000000;;			for key, val := range in.Selector {
0000000000000000000000000000000000000000;;				selector[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Selector.MatchLabels = selector
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Selector = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_DeploymentSpec_To_extensions_DeploymentSpec(in *appsv1beta1.DeploymentSpec, out *extensions.DeploymentSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Replicas != nil {
0000000000000000000000000000000000000000;;			out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy(&in.Strategy, &out.Strategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.RevisionHistoryLimit = in.RevisionHistoryLimit
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Paused = in.Paused
0000000000000000000000000000000000000000;;		if in.RollbackTo != nil {
0000000000000000000000000000000000000000;;			out.RollbackTo = new(extensions.RollbackConfig)
0000000000000000000000000000000000000000;;			out.RollbackTo.Revision = in.RollbackTo.Revision
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollbackTo = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.ProgressDeadlineSeconds != nil {
0000000000000000000000000000000000000000;;			out.ProgressDeadlineSeconds = new(int32)
0000000000000000000000000000000000000000;;			*out.ProgressDeadlineSeconds = *in.ProgressDeadlineSeconds
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_DeploymentSpec_To_v1beta1_DeploymentSpec(in *extensions.DeploymentSpec, out *appsv1beta1.DeploymentSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = &in.Replicas
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy(&in.Strategy, &out.Strategy, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.RevisionHistoryLimit != nil {
0000000000000000000000000000000000000000;;			out.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;			*out.RevisionHistoryLimit = int32(*in.RevisionHistoryLimit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.MinReadySeconds = int32(in.MinReadySeconds)
0000000000000000000000000000000000000000;;		out.Paused = in.Paused
0000000000000000000000000000000000000000;;		if in.RollbackTo != nil {
0000000000000000000000000000000000000000;;			out.RollbackTo = new(appsv1beta1.RollbackConfig)
0000000000000000000000000000000000000000;;			out.RollbackTo.Revision = int64(in.RollbackTo.Revision)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollbackTo = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.ProgressDeadlineSeconds != nil {
0000000000000000000000000000000000000000;;			out.ProgressDeadlineSeconds = new(int32)
0000000000000000000000000000000000000000;;			*out.ProgressDeadlineSeconds = *in.ProgressDeadlineSeconds
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_DeploymentStrategy_To_v1beta1_DeploymentStrategy(in *extensions.DeploymentStrategy, out *appsv1beta1.DeploymentStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = appsv1beta1.DeploymentStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(appsv1beta1.RollingUpdateDeployment)
0000000000000000000000000000000000000000;;			if err := Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment(in.RollingUpdate, out.RollingUpdate, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_DeploymentStrategy_To_extensions_DeploymentStrategy(in *appsv1beta1.DeploymentStrategy, out *extensions.DeploymentStrategy, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Type = extensions.DeploymentStrategyType(in.Type)
0000000000000000000000000000000000000000;;		if in.RollingUpdate != nil {
0000000000000000000000000000000000000000;;			out.RollingUpdate = new(extensions.RollingUpdateDeployment)
0000000000000000000000000000000000000000;;			if err := Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment(in.RollingUpdate, out.RollingUpdate, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.RollingUpdate = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1beta1_RollingUpdateDeployment_To_extensions_RollingUpdateDeployment(in *appsv1beta1.RollingUpdateDeployment, out *extensions.RollingUpdateDeployment, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := s.Convert(in.MaxUnavailable, &out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(in.MaxSurge, &out.MaxSurge, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_RollingUpdateDeployment_To_v1beta1_RollingUpdateDeployment(in *extensions.RollingUpdateDeployment, out *appsv1beta1.RollingUpdateDeployment, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if out.MaxUnavailable == nil {
0000000000000000000000000000000000000000;;			out.MaxUnavailable = &intstr.IntOrString{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.MaxUnavailable, out.MaxUnavailable, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if out.MaxSurge == nil {
0000000000000000000000000000000000000000;;			out.MaxSurge = &intstr.IntOrString{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Convert(&in.MaxSurge, out.MaxSurge, 0); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
