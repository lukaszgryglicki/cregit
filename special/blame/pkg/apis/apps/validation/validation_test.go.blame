0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3153317738b4c67ab9f03b69f43680dd0ce93c63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateStatefulSet(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidLabels := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []apps.StatefulSet{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.ParallelPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.OnDeleteStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					Replicas:            3,
0000000000000000000000000000000000000000;;					UpdateStrategy: apps.StatefulSetUpdateStrategy{
0000000000000000000000000000000000000000;;						Type: apps.RollingUpdateStatefulSetStrategyType,
0000000000000000000000000000000000000000;;						RollingUpdate: func() *apps.RollingUpdateStatefulSetStrategy {
0000000000000000000000000000000000000000;;							return &apps.RollingUpdateStatefulSetStrategy{Partition: 2}
0000000000000000000000000000000000000000;;						}()},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateStatefulSet(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]apps.StatefulSet{
0000000000000000000000000000000000000000;;			"zero-length ID": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-namespace": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"selector_doesnt_match": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid manifest": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative_replicas": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Replicas:            -1,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Template:            invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_annotation": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 1": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyNever,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid udpate strategy": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					Replicas:            3,
0000000000000000000000000000000000000000;;					UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative parition": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;					PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;					Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;					Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;					Replicas:            3,
0000000000000000000000000000000000000000;;					UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType,
0000000000000000000000000000000000000000;;						RollingUpdate: func() *apps.RollingUpdateStatefulSetStrategy {
0000000000000000000000000000000000000000;;							return &apps.RollingUpdateStatefulSetStrategy{Partition: -1}
0000000000000000000000000000000000000000;;						}()},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateStatefulSet(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				field := errs[i].Field
0000000000000000000000000000000000000000;;				if !strings.HasPrefix(field, "spec.template.") &&
0000000000000000000000000000000000000000;;					field != "metadata.name" &&
0000000000000000000000000000000000000000;;					field != "metadata.namespace" &&
0000000000000000000000000000000000000000;;					field != "spec.selector" &&
0000000000000000000000000000000000000000;;					field != "spec.template" &&
0000000000000000000000000000000000000000;;					field != "GCEPersistentDisk.ReadOnly" &&
0000000000000000000000000000000000000000;;					field != "spec.replicas" &&
0000000000000000000000000000000000000000;;					field != "spec.template.labels" &&
0000000000000000000000000000000000000000;;					field != "metadata.annotations" &&
0000000000000000000000000000000000000000;;					field != "metadata.labels" &&
0000000000000000000000000000000000000000;;					field != "status.replicas" &&
0000000000000000000000000000000000000000;;					field != "spec.updateStrategy" &&
0000000000000000000000000000000000000000;;					field != "spec.updateStrategy.rollingUpate" &&
0000000000000000000000000000000000000000;;					field != "spec.updateStrategy.rollingUpdate.partition" {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing prefix for: %v", k, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateStatefulSetUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidLabels := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidLabels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type psUpdateTest struct {
0000000000000000000000000000000000000000;;			old    apps.StatefulSet
0000000000000000000000000000000000000000;;			update apps.StatefulSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []psUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Replicas:            3,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateStatefulSetUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]psUpdateTest{
0000000000000000000000000000000000000000;;			"more than one read/write": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Replicas:            2,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty pod creation policy": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Replicas:       3,
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod creation policy": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.PodManagementPolicyType("Other"),
0000000000000000000000000000000000000000;;						Replicas:            3,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid selector": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Replicas:            2,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: invalidLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Replicas:       2,
0000000000000000000000000000000000000000;;						Selector:       &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:       invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy: apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative replicas": {
0000000000000000000000000000000000000000;;				old: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						PodManagementPolicy: apps.OrderedReadyPodManagement,
0000000000000000000000000000000000000000;;						Replicas:            -1,
0000000000000000000000000000000000000000;;						Selector:            &metav1.LabelSelector{MatchLabels: validLabels},
0000000000000000000000000000000000000000;;						Template:            validPodTemplate.Template,
0000000000000000000000000000000000000000;;						UpdateStrategy:      apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateStatefulSetUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		newControllerRevision := func(name, namespace string, data runtime.Object, revision int64) apps.ControllerRevision {
0000000000000000000000000000000000000000;;			return apps.ControllerRevision{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      name,
0000000000000000000000000000000000000000;;					Namespace: namespace,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data:     data,
0000000000000000000000000000000000000000;;				Revision: revision,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss := apps.StatefulSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			valid       = newControllerRevision("validname", "validns", &ss, 0)
0000000000000000000000000000000000000000;;			badRevision = newControllerRevision("validname", "validns", &ss, -1)
0000000000000000000000000000000000000000;;			emptyName   = newControllerRevision("", "validns", &ss, 0)
0000000000000000000000000000000000000000;;			invalidName = newControllerRevision("NoUppercaseOrSpecialCharsLike=Equals", "validns", &ss, 0)
0000000000000000000000000000000000000000;;			emptyNs     = newControllerRevision("validname", "", &ss, 100)
0000000000000000000000000000000000000000;;			invalidNs   = newControllerRevision("validname", "NoUppercaseOrSpecialCharsLike=Equals", &ss, 100)
0000000000000000000000000000000000000000;;			nilData     = newControllerRevision("validname", "NoUppercaseOrSpecialCharsLike=Equals", nil, 100)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			history apps.ControllerRevision
0000000000000000000000000000000000000000;;			isValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid":             {valid, true},
0000000000000000000000000000000000000000;;			"negative revision": {badRevision, false},
0000000000000000000000000000000000000000;;			"empty name":        {emptyName, false},
0000000000000000000000000000000000000000;;			"invalid name":      {invalidName, false},
0000000000000000000000000000000000000000;;			"empty namespace":   {emptyNs, false},
0000000000000000000000000000000000000000;;			"invalid namespace": {invalidNs, false},
0000000000000000000000000000000000000000;;			"nil data":          {nilData, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateControllerRevision(&tc.history)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateControllerRevisionUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		newControllerRevision := func(version, name, namespace string, data runtime.Object, revision int64) apps.ControllerRevision {
0000000000000000000000000000000000000000;;			return apps.ControllerRevision{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            name,
0000000000000000000000000000000000000000;;					Namespace:       namespace,
0000000000000000000000000000000000000000;;					ResourceVersion: version,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data:     data,
0000000000000000000000000000000000000000;;				Revision: revision,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss := apps.StatefulSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		modifiedss := apps.StatefulSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "cdf", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			valid           = newControllerRevision("1", "validname", "validns", &ss, 0)
0000000000000000000000000000000000000000;;			noVersion       = newControllerRevision("", "validname", "validns", &ss, 0)
0000000000000000000000000000000000000000;;			changedData     = newControllerRevision("1", "validname", "validns", &modifiedss, 0)
0000000000000000000000000000000000000000;;			changedRevision = newControllerRevision("1", "validname", "validns", &ss, 1)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			newHistory apps.ControllerRevision
0000000000000000000000000000000000000000;;			oldHistory apps.ControllerRevision
0000000000000000000000000000000000000000;;			isValid    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "valid",
0000000000000000000000000000000000000000;;				newHistory: valid,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "invalid",
0000000000000000000000000000000000000000;;				newHistory: noVersion,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "changed data",
0000000000000000000000000000000000000000;;				newHistory: changedData,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "changed revision",
0000000000000000000000000000000000000000;;				newHistory: changedRevision,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			errs := ValidateControllerRevisionUpdate(&tc.newHistory, &tc.oldHistory)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", tc.name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
