0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5c303a828532053fb49a84862205723e0a78b895;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO these tests don't add much value for testing things that have groups
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourcePathWithPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			prefix    string
0000000000000000000000000000000000000000;;			resource  string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			expected  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"prefix", "resource", "mynamespace", "myresource", "/api/" + Default.GroupVersion().Version + "/prefix/namespaces/mynamespace/resource/myresource"},
0000000000000000000000000000000000000000;;			{"prefix", "resource", "", "myresource", "/api/" + Default.GroupVersion().Version + "/prefix/resource/myresource"},
0000000000000000000000000000000000000000;;			{"prefix", "resource", "mynamespace", "", "/api/" + Default.GroupVersion().Version + "/prefix/namespaces/mynamespace/resource"},
0000000000000000000000000000000000000000;;			{"prefix", "resource", "", "", "/api/" + Default.GroupVersion().Version + "/prefix/resource"},
0000000000000000000000000000000000000000;;			{"", "resource", "mynamespace", "myresource", "/api/" + Default.GroupVersion().Version + "/namespaces/mynamespace/resource/myresource"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, item := range testCases {
0000000000000000000000000000000000000000;;			if actual := Default.ResourcePathWithPrefix(item.prefix, item.resource, item.namespace, item.name); actual != item.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %s, got: %s for prefix: %s, resource: %s, namespace: %s and name: %s", item.expected, actual, item.prefix, item.resource, item.namespace, item.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourcePath(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			resource  string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			expected  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"resource", "mynamespace", "myresource", "/api/" + Default.GroupVersion().Version + "/namespaces/mynamespace/resource/myresource"},
0000000000000000000000000000000000000000;;			{"resource", "", "myresource", "/api/" + Default.GroupVersion().Version + "/resource/myresource"},
0000000000000000000000000000000000000000;;			{"resource", "mynamespace", "", "/api/" + Default.GroupVersion().Version + "/namespaces/mynamespace/resource"},
0000000000000000000000000000000000000000;;			{"resource", "", "", "/api/" + Default.GroupVersion().Version + "/resource"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, item := range testCases {
0000000000000000000000000000000000000000;;			if actual := Default.ResourcePath(item.resource, item.namespace, item.name); actual != item.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %s, got: %s for resource: %s, namespace: %s and name: %s", item.expected, actual, item.resource, item.namespace, item.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var status = &metav1.Status{
0000000000000000000000000000000000000000;;		Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;		Code:    200,
0000000000000000000000000000000000000000;;		Reason:  metav1.StatusReasonUnknown,
0000000000000000000000000000000000000000;;		Message: "",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestV1EncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		v1Codec := Default.Codec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		encoded, err := runtime.Encode(v1Codec, status)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeMeta := metav1.TypeMeta{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(encoded, &typeMeta); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.Kind != "Status" {
0000000000000000000000000000000000000000;;			t.Errorf("Kind is not set to \"Status\". Got %v", string(encoded))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.APIVersion != "v1" {
0000000000000000000000000000000000000000;;			t.Errorf("APIVersion is not set to \"v1\". Got %v", string(encoded))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoded, err := runtime.Decode(v1Codec, encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(status, decoded) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %#v, got: %#v", status, decoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testEncodeDecodeStatus(t *testing.T, codec runtime.Codec) {
0000000000000000000000000000000000000000;;		encoded, err := runtime.Encode(codec, status)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeMeta := metav1.TypeMeta{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(encoded, &typeMeta); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.Kind != "Status" {
0000000000000000000000000000000000000000;;			t.Errorf("Kind is not set to \"Status\". Got %s", encoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.APIVersion != "v1" {
0000000000000000000000000000000000000000;;			t.Errorf("APIVersion is not set to \"\". Got %s", encoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoded, err := runtime.Decode(codec, encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(status, decoded) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, got: %v", status, decoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAutoscalingEncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		testEncodeDecodeStatus(t, Autoscaling.Codec())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBatchEncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		testEncodeDecodeStatus(t, Batch.Codec())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExperimentalEncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		testEncodeDecodeStatus(t, Extensions.Codec())
0000000000000000000000000000000000000000;;	}
