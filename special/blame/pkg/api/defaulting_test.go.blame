0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8b637c32437036529dd9901c840a83aea5ad6880;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/gofuzz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		k8s_batchv2alpha1 "k8s.io/kubernetes/pkg/apis/batch/v2alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type orderedGroupVersionKinds []schema.GroupVersionKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o orderedGroupVersionKinds) Len() int      { return len(o) }
0000000000000000000000000000000000000000;;	func (o orderedGroupVersionKinds) Swap(i, j int) { o[i], o[j] = o[j], o[i] }
0000000000000000000000000000000000000000;;	func (o orderedGroupVersionKinds) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return o[i].String() < o[j].String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerifyDefaulting(t *testing.T) {
0000000000000000000000000000000000000000;;		job := &batchv2alpha1.JobTemplate{}
0000000000000000000000000000000000000000;;		k8s_batchv2alpha1.SetObjectDefaults_JobTemplate(job)
0000000000000000000000000000000000000000;;		if job.Template.Spec.Template.Spec.DNSPolicy != apiv1.DNSClusterFirst {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected defaulting: %#v", job)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: add a reflexive test that verifies that all SetDefaults functions are registered
0000000000000000000000000000000000000000;;	func TestDefaulting(t *testing.T) {
0000000000000000000000000000000000000000;;		// these are the known types with defaulters - you must add to this list if you add a top level defaulter
0000000000000000000000000000000000000000;;		typesWithDefaulting := map[schema.GroupVersionKind]struct{}{
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "ConfigMap"}:                                             {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "ConfigMapList"}:                                         {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Endpoints"}:                                             {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "EndpointsList"}:                                         {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Namespace"}:                                             {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "NamespaceList"}:                                         {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Node"}:                                                  {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "NodeList"}:                                              {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PersistentVolume"}:                                      {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PersistentVolumeList"}:                                  {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PersistentVolumeClaim"}:                                 {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PersistentVolumeClaimList"}:                             {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PodAttachOptions"}:                                      {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PodExecOptions"}:                                        {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Pod"}:                                                   {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PodList"}:                                               {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PodTemplate"}:                                           {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "PodTemplateList"}:                                       {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "ReplicationController"}:                                 {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "ReplicationControllerList"}:                             {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Secret"}:                                                {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "SecretList"}:                                            {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "Service"}:                                               {},
0000000000000000000000000000000000000000;;			{Group: "", Version: "v1", Kind: "ServiceList"}:                                           {},
0000000000000000000000000000000000000000;;			{Group: "apps", Version: "v1beta1", Kind: "StatefulSet"}:                                  {},
0000000000000000000000000000000000000000;;			{Group: "apps", Version: "v1beta1", Kind: "StatefulSetList"}:                              {},
0000000000000000000000000000000000000000;;			{Group: "autoscaling", Version: "v1", Kind: "HorizontalPodAutoscaler"}:                    {},
0000000000000000000000000000000000000000;;			{Group: "autoscaling", Version: "v1", Kind: "HorizontalPodAutoscalerList"}:                {},
0000000000000000000000000000000000000000;;			{Group: "autoscaling", Version: "v2alpha1", Kind: "HorizontalPodAutoscaler"}:              {},
0000000000000000000000000000000000000000;;			{Group: "autoscaling", Version: "v2alpha1", Kind: "HorizontalPodAutoscalerList"}:          {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v1", Kind: "Job"}:                                              {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v1", Kind: "JobList"}:                                          {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "CronJob"}:                                    {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "CronJobList"}:                                {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "Job"}:                                        {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "JobList"}:                                    {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "JobTemplate"}:                                {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "ScheduledJob"}:                               {},
0000000000000000000000000000000000000000;;			{Group: "batch", Version: "v2alpha1", Kind: "ScheduledJobList"}:                           {},
0000000000000000000000000000000000000000;;			{Group: "certificates.k8s.io", Version: "v1beta1", Kind: "CertificateSigningRequest"}:     {},
0000000000000000000000000000000000000000;;			{Group: "certificates.k8s.io", Version: "v1beta1", Kind: "CertificateSigningRequestList"}: {},
0000000000000000000000000000000000000000;;			{Group: "componentconfig", Version: "v1alpha1", Kind: "KubeProxyConfiguration"}:           {},
0000000000000000000000000000000000000000;;			{Group: "componentconfig", Version: "v1alpha1", Kind: "KubeSchedulerConfiguration"}:       {},
0000000000000000000000000000000000000000;;			{Group: "componentconfig", Version: "v1alpha1", Kind: "KubeletConfiguration"}:             {},
0000000000000000000000000000000000000000;;			{Group: "kubeadm.k8s.io", Version: "v1alpha1", Kind: "MasterConfiguration"}:               {},
0000000000000000000000000000000000000000;;			// This object contains only int fields which currently breaks the defaulting test because
0000000000000000000000000000000000000000;;			// it's pretty stupid. Once we add non integer fields, we should uncomment this.
0000000000000000000000000000000000000000;;			// {Group: "kubeadm.k8s.io", Version: "v1alpha1", Kind: "NodeConfiguration"}:                 {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "DaemonSet"}:                                                 {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "DaemonSetList"}:                                             {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "Deployment"}:                                                {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "DeploymentList"}:                                            {},
0000000000000000000000000000000000000000;;			{Group: "apps", Version: "v1beta1", Kind: "Deployment"}:                                                      {},
0000000000000000000000000000000000000000;;			{Group: "apps", Version: "v1beta1", Kind: "DeploymentList"}:                                                  {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "ReplicaSet"}:                                                {},
0000000000000000000000000000000000000000;;			{Group: "extensions", Version: "v1beta1", Kind: "ReplicaSetList"}:                                            {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1alpha1", Kind: "ClusterRoleBinding"}:                        {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1alpha1", Kind: "ClusterRoleBindingList"}:                    {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1alpha1", Kind: "RoleBinding"}:                               {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1alpha1", Kind: "RoleBindingList"}:                           {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1beta1", Kind: "ClusterRoleBinding"}:                         {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1beta1", Kind: "ClusterRoleBindingList"}:                     {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1beta1", Kind: "RoleBinding"}:                                {},
0000000000000000000000000000000000000000;;			{Group: "rbac.authorization.k8s.io", Version: "v1beta1", Kind: "RoleBindingList"}:                            {},
0000000000000000000000000000000000000000;;			{Group: "settings.k8s.io", Version: "v1alpha1", Kind: "PodPreset"}:                                           {},
0000000000000000000000000000000000000000;;			{Group: "settings.k8s.io", Version: "v1alpha1", Kind: "PodPresetList"}:                                       {},
0000000000000000000000000000000000000000;;			{Group: "admissionregistration.k8s.io", Version: "v1alpha1", Kind: "InitializerConfiguration"}:               {},
0000000000000000000000000000000000000000;;			{Group: "admissionregistration.k8s.io", Version: "v1alpha1", Kind: "InitializerConfigurationList"}:           {},
0000000000000000000000000000000000000000;;			{Group: "admissionregistration.k8s.io", Version: "v1alpha1", Kind: "ExternalAdmissionHookConfiguration"}:     {},
0000000000000000000000000000000000000000;;			{Group: "admissionregistration.k8s.io", Version: "v1alpha1", Kind: "ExternalAdmissionHookConfigurationList"}: {},
0000000000000000000000000000000000000000;;			{Group: "networking.k8s.io", Version: "v1", Kind: "NetworkPolicy"}:                                           {},
0000000000000000000000000000000000000000;;			{Group: "networking.k8s.io", Version: "v1", Kind: "NetworkPolicyList"}:                                       {},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := fuzz.New().NilChance(.5).NumElements(1, 1).RandSource(rand.NewSource(1))
0000000000000000000000000000000000000000;;		f.Funcs(
0000000000000000000000000000000000000000;;			func(s *runtime.RawExtension, c fuzz.Continue) {},
0000000000000000000000000000000000000000;;			func(s *metav1.LabelSelector, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				s.MatchExpressions = nil // need to fuzz this specially
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *apiv1.ListOptions, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				s.LabelSelector = "" // need to fuzz requirement strings specially
0000000000000000000000000000000000000000;;				s.FieldSelector = "" // need to fuzz requirement strings specially
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *extensionsv1beta1.ScaleStatus, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				s.TargetSelector = "" // need to fuzz requirement strings specially
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := api.Scheme
0000000000000000000000000000000000000000;;		var testTypes orderedGroupVersionKinds
0000000000000000000000000000000000000000;;		for gvk := range scheme.AllKnownTypes() {
0000000000000000000000000000000000000000;;			if gvk.Version == runtime.APIVersionInternal {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testTypes = append(testTypes, gvk)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(testTypes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, gvk := range testTypes {
0000000000000000000000000000000000000000;;			_, expectedChanged := typesWithDefaulting[gvk]
0000000000000000000000000000000000000000;;			iter := 0
0000000000000000000000000000000000000000;;			changedOnce := false
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				if iter > *apitesting.FuzzIters {
0000000000000000000000000000000000000000;;					if !expectedChanged || changedOnce {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if iter > 300 {
0000000000000000000000000000000000000000;;						t.Errorf("expected %s to trigger defaulting due to fuzzing", gvk)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					// if we expected defaulting, continue looping until the fuzzer gives us one
0000000000000000000000000000000000000000;;					// at worst, we will timeout
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				iter++
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				src, err := scheme.New(gvk)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				f.Fuzz(src)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				src.GetObjectKind().SetGroupVersionKind(schema.GroupVersionKind{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				original, err := scheme.DeepCopy(src)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// get internal
0000000000000000000000000000000000000000;;				withDefaults, _ := scheme.DeepCopy(src)
0000000000000000000000000000000000000000;;				scheme.Default(withDefaults.(runtime.Object))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(original, withDefaults) {
0000000000000000000000000000000000000000;;					changedOnce = true
0000000000000000000000000000000000000000;;					if !expectedChanged {
0000000000000000000000000000000000000000;;						t.Errorf("{Group: \"%s\", Version: \"%s\", Kind: \"%s\"} did not expect defaults to be set - update expected or check defaulter registering: %s", gvk.Group, gvk.Version, gvk.Kind, diff.ObjectReflectDiff(original, withDefaults))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkPodDefaulting(b *testing.B) {
0000000000000000000000000000000000000000;;		f := fuzz.New().NilChance(.5).NumElements(1, 1).RandSource(rand.NewSource(1))
0000000000000000000000000000000000000000;;		items := make([]apiv1.Pod, 100)
0000000000000000000000000000000000000000;;		for i := range items {
0000000000000000000000000000000000000000;;			f.Fuzz(&items[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := api.Scheme
0000000000000000000000000000000000000000;;		b.ResetTimer()
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			pod := &items[i%len(items)]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			scheme.Default(pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.StopTimer()
0000000000000000000000000000000000000000;;	}
