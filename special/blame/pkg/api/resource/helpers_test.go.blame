0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f686603a9da50098833e197bc19ca6f7e1007c4e;pkg/api/resource_helpers_test.go[pkg/api/resource_helpers_test.go][pkg/api/resource/helpers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceHelpers(t *testing.T) {
0000000000000000000000000000000000000000;;		cpuLimit := resource.MustParse("10")
0000000000000000000000000000000000000000;;		memoryLimit := resource.MustParse("10G")
0000000000000000000000000000000000000000;;		resourceSpec := api.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: api.ResourceList{
0000000000000000000000000000000000000000;;				"cpu":             cpuLimit,
0000000000000000000000000000000000000000;;				"memory":          memoryLimit,
0000000000000000000000000000000000000000;;				"kube.io/storage": memoryLimit,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Cpu(); res.Cmp(cpuLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected cpulimit %v, got %v", cpuLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Memory(); res.Cmp(memoryLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected memorylimit %v, got %v", memoryLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceSpec = api.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: api.ResourceList{
0000000000000000000000000000000000000000;;				"memory":          memoryLimit,
0000000000000000000000000000000000000000;;				"kube.io/storage": memoryLimit,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Cpu(); res.Value() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected cpulimit %v, got %v", 0, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Memory(); res.Cmp(memoryLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected memorylimit %v, got %v", memoryLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultResourceHelpers(t *testing.T) {
0000000000000000000000000000000000000000;;		resourceList := api.ResourceList{}
0000000000000000000000000000000000000000;;		if resourceList.Cpu().Format != resource.DecimalSI {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, actual %v", resource.DecimalSI, resourceList.Cpu().Format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resourceList.Memory().Format != resource.BinarySI {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, actual %v", resource.BinarySI, resourceList.Memory().Format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(now metav1.Time, ready bool, beforeSec int) *api.Pod {
0000000000000000000000000000000000000000;;		conditionStatus := api.ConditionFalse
0000000000000000000000000000000000000000;;		if ready {
0000000000000000000000000000000000000000;;			conditionStatus = api.ConditionTrue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Conditions: []api.PodCondition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type:               api.PodReady,
0000000000000000000000000000000000000000;;						LastTransitionTime: metav1.NewTime(now.Time.Add(-1 * time.Duration(beforeSec) * time.Second)),
0000000000000000000000000000000000000000;;						Status:             conditionStatus,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
