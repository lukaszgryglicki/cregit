0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
ab4e3d060a557298d0d732efee091b382b1f0ecf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/gofuzz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		runtimeserializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		kubeadmfuzzer "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/fuzzer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/admissionregistration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/kubernetes/pkg/apis/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// overrideGenericFuncs override some generic fuzzer funcs from k8s.io/apiserver in order to have more realistic
0000000000000000000000000000000000000000;;	// values in a Kubernetes context.
0000000000000000000000000000000000000000;;	func overrideGenericFuncs(t apitesting.TestingCommon, codecs runtimeserializer.CodecFactory) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(j *runtime.Object, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// TODO: uncomment when round trip starts from a versioned object
0000000000000000000000000000000000000000;;				if true { //c.RandBool() {
0000000000000000000000000000000000000000;;					*j = &runtime.Unknown{
0000000000000000000000000000000000000000;;						// We do not set TypeMeta here because it is not carried through a round trip
0000000000000000000000000000000000000000;;						Raw:         []byte(`{"apiVersion":"unknown.group/unknown","kind":"Something","someKey":"someValue"}`),
0000000000000000000000000000000000000000;;						ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					types := []runtime.Object{&api.Pod{}, &api.ReplicationController{}}
0000000000000000000000000000000000000000;;					t := types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;					c.Fuzz(t)
0000000000000000000000000000000000000000;;					*j = t
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(r *runtime.RawExtension, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// Pick an arbitrary type and fuzz it
0000000000000000000000000000000000000000;;				types := []runtime.Object{&api.Pod{}, &extensions.Deployment{}, &api.Service{}}
0000000000000000000000000000000000000000;;				obj := types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;				c.Fuzz(obj)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var codec runtime.Codec
0000000000000000000000000000000000000000;;				switch obj.(type) {
0000000000000000000000000000000000000000;;				case *extensions.Deployment:
0000000000000000000000000000000000000000;;					codec = apitesting.TestCodec(codecs, extensionsv1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					codec = apitesting.TestCodec(codecs, v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Convert the object to raw bytes
0000000000000000000000000000000000000000;;				bytes, err := runtime.Encode(codec, obj)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Failed to encode object: %v", err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Set the bytes field on the RawExtension
0000000000000000000000000000000000000000;;				r.Raw = bytes
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func coreFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(q *resource.Quantity, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				*q = *resource.NewQuantity(c.Int63n(1000), resource.DecimalExponent)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.ObjectReference, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// We have to customize the randomization of TypeMetas because their
0000000000000000000000000000000000000000;;				// APIVersion and Kind must remain blank in memory.
0000000000000000000000000000000000000000;;				j.APIVersion = c.RandString()
0000000000000000000000000000000000000000;;				j.Kind = c.RandString()
0000000000000000000000000000000000000000;;				j.Namespace = c.RandString()
0000000000000000000000000000000000000000;;				j.Name = c.RandString()
0000000000000000000000000000000000000000;;				j.ResourceVersion = strconv.FormatUint(c.RandUint64(), 10)
0000000000000000000000000000000000000000;;				j.FieldPath = c.RandString()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.ListOptions, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				label, _ := labels.Parse("a=b")
0000000000000000000000000000000000000000;;				j.LabelSelector = label
0000000000000000000000000000000000000000;;				field, _ := fields.ParseSelector("a=b")
0000000000000000000000000000000000000000;;				j.FieldSelector = field
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.PodExecOptions, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				j.Stdout = true
0000000000000000000000000000000000000000;;				j.Stderr = true
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.PodAttachOptions, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				j.Stdout = true
0000000000000000000000000000000000000000;;				j.Stderr = true
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.PodPortForwardOptions, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					j.Ports = make([]int32, c.Intn(10))
0000000000000000000000000000000000000000;;					for i := range j.Ports {
0000000000000000000000000000000000000000;;						j.Ports[i] = c.Int31n(65535)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.PodSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				// has a default value
0000000000000000000000000000000000000000;;				ttl := int64(30)
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					ttl = int64(c.Uint32())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s.TerminationGracePeriodSeconds = &ttl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				c.Fuzz(s.SecurityContext)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if s.SecurityContext == nil {
0000000000000000000000000000000000000000;;					s.SecurityContext = new(api.PodSecurityContext)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if s.Affinity == nil {
0000000000000000000000000000000000000000;;					s.Affinity = new(api.Affinity)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if s.SchedulerName == "" {
0000000000000000000000000000000000000000;;					s.SchedulerName = api.DefaultSchedulerName
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.PodPhase, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				statuses := []api.PodPhase{api.PodPending, api.PodRunning, api.PodFailed, api.PodUnknown}
0000000000000000000000000000000000000000;;				*j = statuses[c.Rand.Intn(len(statuses))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.Binding, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.Fuzz(&j.ObjectMeta)
0000000000000000000000000000000000000000;;				j.Target.Name = c.RandString()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.ReplicationControllerSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				//j.TemplateRef = nil // this is required for round trip
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *api.List, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				// TODO: uncomment when round trip starts from a versioned object
0000000000000000000000000000000000000000;;				if false { //j.Items == nil {
0000000000000000000000000000000000000000;;					j.Items = []runtime.Object{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(q *api.ResourceRequirements, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				randomQuantity := func() resource.Quantity {
0000000000000000000000000000000000000000;;					var q resource.Quantity
0000000000000000000000000000000000000000;;					c.Fuzz(&q)
0000000000000000000000000000000000000000;;					// precalc the string for benchmarking purposes
0000000000000000000000000000000000000000;;					_ = q.String()
0000000000000000000000000000000000000000;;					return q
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				q.Limits = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.Requests = make(api.ResourceList)
0000000000000000000000000000000000000000;;				cpuLimit := randomQuantity()
0000000000000000000000000000000000000000;;				q.Limits[api.ResourceCPU] = *cpuLimit.Copy()
0000000000000000000000000000000000000000;;				q.Requests[api.ResourceCPU] = *cpuLimit.Copy()
0000000000000000000000000000000000000000;;				memoryLimit := randomQuantity()
0000000000000000000000000000000000000000;;				q.Limits[api.ResourceMemory] = *memoryLimit.Copy()
0000000000000000000000000000000000000000;;				q.Requests[api.ResourceMemory] = *memoryLimit.Copy()
0000000000000000000000000000000000000000;;				storageLimit := randomQuantity()
0000000000000000000000000000000000000000;;				q.Limits[api.ResourceStorage] = *storageLimit.Copy()
0000000000000000000000000000000000000000;;				q.Requests[api.ResourceStorage] = *storageLimit.Copy()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(q *api.LimitRangeItem, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				var cpuLimit resource.Quantity
0000000000000000000000000000000000000000;;				c.Fuzz(&cpuLimit)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				q.Type = api.LimitTypeContainer
0000000000000000000000000000000000000000;;				q.Default = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.Default[api.ResourceCPU] = *(cpuLimit.Copy())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				q.DefaultRequest = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.DefaultRequest[api.ResourceCPU] = *(cpuLimit.Copy())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				q.Max = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.Max[api.ResourceCPU] = *(cpuLimit.Copy())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				q.Min = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.Min[api.ResourceCPU] = *(cpuLimit.Copy())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				q.MaxLimitRequestRatio = make(api.ResourceList)
0000000000000000000000000000000000000000;;				q.MaxLimitRequestRatio[api.ResourceCPU] = resource.MustParse("10")
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.PullPolicy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				policies := []api.PullPolicy{api.PullAlways, api.PullNever, api.PullIfNotPresent}
0000000000000000000000000000000000000000;;				*p = policies[c.Rand.Intn(len(policies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(rp *api.RestartPolicy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				policies := []api.RestartPolicy{api.RestartPolicyAlways, api.RestartPolicyNever, api.RestartPolicyOnFailure}
0000000000000000000000000000000000000000;;				*rp = policies[c.Rand.Intn(len(policies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// api.DownwardAPIVolumeFile needs to have a specific func since FieldRef has to be
0000000000000000000000000000000000000000;;			// defaulted to a version otherwise roundtrip will fail
0000000000000000000000000000000000000000;;			func(m *api.DownwardAPIVolumeFile, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				m.Path = c.RandString()
0000000000000000000000000000000000000000;;				versions := []string{"v1"}
0000000000000000000000000000000000000000;;				m.FieldRef = &api.ObjectFieldSelector{}
0000000000000000000000000000000000000000;;				m.FieldRef.APIVersion = versions[c.Rand.Intn(len(versions))]
0000000000000000000000000000000000000000;;				m.FieldRef.FieldPath = c.RandString()
0000000000000000000000000000000000000000;;				c.Fuzz(m.Mode)
0000000000000000000000000000000000000000;;				if m.Mode != nil {
0000000000000000000000000000000000000000;;					*m.Mode &= 0777
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.SecretVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					opt := c.RandBool()
0000000000000000000000000000000000000000;;					s.Optional = &opt
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// DefaultMode should always be set, it has a default
0000000000000000000000000000000000000000;;				// value and it is expected to be between 0 and 0777
0000000000000000000000000000000000000000;;				var mode int32
0000000000000000000000000000000000000000;;				c.Fuzz(&mode)
0000000000000000000000000000000000000000;;				mode &= 0777
0000000000000000000000000000000000000000;;				s.DefaultMode = &mode
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(cm *api.ConfigMapVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(cm) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					opt := c.RandBool()
0000000000000000000000000000000000000000;;					cm.Optional = &opt
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// DefaultMode should always be set, it has a default
0000000000000000000000000000000000000000;;				// value and it is expected to be between 0 and 0777
0000000000000000000000000000000000000000;;				var mode int32
0000000000000000000000000000000000000000;;				c.Fuzz(&mode)
0000000000000000000000000000000000000000;;				mode &= 0777
0000000000000000000000000000000000000000;;				cm.DefaultMode = &mode
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(d *api.DownwardAPIVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(d) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// DefaultMode should always be set, it has a default
0000000000000000000000000000000000000000;;				// value and it is expected to be between 0 and 0777
0000000000000000000000000000000000000000;;				var mode int32
0000000000000000000000000000000000000000;;				c.Fuzz(&mode)
0000000000000000000000000000000000000000;;				mode &= 0777
0000000000000000000000000000000000000000;;				d.DefaultMode = &mode
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.ProjectedVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// DefaultMode should always be set, it has a default
0000000000000000000000000000000000000000;;				// value and it is expected to be between 0 and 0777
0000000000000000000000000000000000000000;;				var mode int32
0000000000000000000000000000000000000000;;				c.Fuzz(&mode)
0000000000000000000000000000000000000000;;				mode &= 0777
0000000000000000000000000000000000000000;;				s.DefaultMode = &mode
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(k *api.KeyToPath, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(k) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				k.Key = c.RandString()
0000000000000000000000000000000000000000;;				k.Path = c.RandString()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Mode is not mandatory, but if it is set, it should be
0000000000000000000000000000000000000000;;				// a value between 0 and 0777
0000000000000000000000000000000000000000;;				if k.Mode != nil {
0000000000000000000000000000000000000000;;					*k.Mode &= 0777
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(vs *api.VolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// Exactly one of the fields must be set.
0000000000000000000000000000000000000000;;				v := reflect.ValueOf(vs).Elem()
0000000000000000000000000000000000000000;;				i := int(c.RandUint64() % uint64(v.NumField()))
0000000000000000000000000000000000000000;;				t := v.Field(i).Addr()
0000000000000000000000000000000000000000;;				for v.Field(i).IsNil() {
0000000000000000000000000000000000000000;;					c.Fuzz(t.Interface())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(i *api.ISCSIVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				i.ISCSIInterface = c.RandString()
0000000000000000000000000000000000000000;;				if i.ISCSIInterface == "" {
0000000000000000000000000000000000000000;;					i.ISCSIInterface = "default"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(d *api.DNSPolicy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				policies := []api.DNSPolicy{api.DNSClusterFirst, api.DNSDefault}
0000000000000000000000000000000000000000;;				*d = policies[c.Rand.Intn(len(policies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.Protocol, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				protocols := []api.Protocol{api.ProtocolTCP, api.ProtocolUDP}
0000000000000000000000000000000000000000;;				*p = protocols[c.Rand.Intn(len(protocols))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.ServiceAffinity, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				types := []api.ServiceAffinity{api.ServiceAffinityClientIP, api.ServiceAffinityNone}
0000000000000000000000000000000000000000;;				*p = types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.ServiceType, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				types := []api.ServiceType{api.ServiceTypeClusterIP, api.ServiceTypeNodePort, api.ServiceTypeLoadBalancer}
0000000000000000000000000000000000000000;;				*p = types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.ServiceExternalTrafficPolicyType, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				types := []api.ServiceExternalTrafficPolicyType{api.ServiceExternalTrafficPolicyTypeCluster, api.ServiceExternalTrafficPolicyTypeLocal}
0000000000000000000000000000000000000000;;				*p = types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(ct *api.Container, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(ct)                                          // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				ct.TerminationMessagePath = "/" + ct.TerminationMessagePath // Must be non-empty
0000000000000000000000000000000000000000;;				ct.TerminationMessagePolicy = "File"
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(p *api.Probe, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(p)
0000000000000000000000000000000000000000;;				// These fields have default values.
0000000000000000000000000000000000000000;;				intFieldsWithDefaults := [...]string{"TimeoutSeconds", "PeriodSeconds", "SuccessThreshold", "FailureThreshold"}
0000000000000000000000000000000000000000;;				v := reflect.ValueOf(p).Elem()
0000000000000000000000000000000000000000;;				for _, field := range intFieldsWithDefaults {
0000000000000000000000000000000000000000;;					f := v.FieldByName(field)
0000000000000000000000000000000000000000;;					if f.Int() == 0 {
0000000000000000000000000000000000000000;;						f.SetInt(1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(ev *api.EnvVar, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				ev.Name = c.RandString()
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					ev.Value = c.RandString()
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					ev.ValueFrom = &api.EnvVarSource{}
0000000000000000000000000000000000000000;;					ev.ValueFrom.FieldRef = &api.ObjectFieldSelector{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					var versions []schema.GroupVersion
0000000000000000000000000000000000000000;;					for _, testGroup := range testapi.Groups {
0000000000000000000000000000000000000000;;						versions = append(versions, *testGroup.GroupVersion())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					ev.ValueFrom.FieldRef.APIVersion = versions[c.Rand.Intn(len(versions))].String()
0000000000000000000000000000000000000000;;					ev.ValueFrom.FieldRef.FieldPath = c.RandString()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(ev *api.EnvFromSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					ev.Prefix = "p_"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					c.Fuzz(&ev.ConfigMapRef)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					c.Fuzz(&ev.SecretRef)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(cm *api.ConfigMapEnvSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(cm) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					opt := c.RandBool()
0000000000000000000000000000000000000000;;					cm.Optional = &opt
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.SecretEnvSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(sc *api.SecurityContext, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(sc) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					priv := c.RandBool()
0000000000000000000000000000000000000000;;					sc.Privileged = &priv
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					sc.Capabilities = &api.Capabilities{
0000000000000000000000000000000000000000;;						Add:  make([]api.Capability, 0),
0000000000000000000000000000000000000000;;						Drop: make([]api.Capability, 0),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					c.Fuzz(&sc.Capabilities.Add)
0000000000000000000000000000000000000000;;					c.Fuzz(&sc.Capabilities.Drop)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.Secret, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				s.Type = api.SecretTypeOpaque
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(r *api.RBDVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				r.RBDPool = c.RandString()
0000000000000000000000000000000000000000;;				if r.RBDPool == "" {
0000000000000000000000000000000000000000;;					r.RBDPool = "rbd"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				r.RadosUser = c.RandString()
0000000000000000000000000000000000000000;;				if r.RadosUser == "" {
0000000000000000000000000000000000000000;;					r.RadosUser = "admin"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				r.Keyring = c.RandString()
0000000000000000000000000000000000000000;;				if r.Keyring == "" {
0000000000000000000000000000000000000000;;					r.Keyring = "/etc/ceph/keyring"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(pv *api.PersistentVolume, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(pv) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				types := []api.PersistentVolumePhase{api.VolumeAvailable, api.VolumePending, api.VolumeBound, api.VolumeReleased, api.VolumeFailed}
0000000000000000000000000000000000000000;;				pv.Status.Phase = types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;				pv.Status.Message = c.RandString()
0000000000000000000000000000000000000000;;				reclamationPolicies := []api.PersistentVolumeReclaimPolicy{api.PersistentVolumeReclaimRecycle, api.PersistentVolumeReclaimRetain}
0000000000000000000000000000000000000000;;				pv.Spec.PersistentVolumeReclaimPolicy = reclamationPolicies[c.Rand.Intn(len(reclamationPolicies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(pvc *api.PersistentVolumeClaim, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(pvc) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				types := []api.PersistentVolumeClaimPhase{api.ClaimBound, api.ClaimPending, api.ClaimLost}
0000000000000000000000000000000000000000;;				pvc.Status.Phase = types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj *api.AzureDiskVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				if obj.CachingMode == nil {
0000000000000000000000000000000000000000;;					obj.CachingMode = new(api.AzureDataDiskCachingMode)
0000000000000000000000000000000000000000;;					*obj.CachingMode = api.AzureDataDiskCachingReadWrite
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if obj.Kind == nil {
0000000000000000000000000000000000000000;;					obj.Kind = new(api.AzureDataDiskKind)
0000000000000000000000000000000000000000;;					*obj.Kind = api.AzureSharedBlobDisk
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if obj.FSType == nil {
0000000000000000000000000000000000000000;;					obj.FSType = new(string)
0000000000000000000000000000000000000000;;					*obj.FSType = "ext4"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if obj.ReadOnly == nil {
0000000000000000000000000000000000000000;;					obj.ReadOnly = new(bool)
0000000000000000000000000000000000000000;;					*obj.ReadOnly = false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(sio *api.ScaleIOVolumeSource, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				sio.ProtectionDomain = c.RandString()
0000000000000000000000000000000000000000;;				if sio.ProtectionDomain == "" {
0000000000000000000000000000000000000000;;					sio.ProtectionDomain = "default"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sio.StoragePool = c.RandString()
0000000000000000000000000000000000000000;;				if sio.StoragePool == "" {
0000000000000000000000000000000000000000;;					sio.StoragePool = "default"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sio.StorageMode = c.RandString()
0000000000000000000000000000000000000000;;				if sio.StorageMode == "" {
0000000000000000000000000000000000000000;;					sio.StorageMode = "ThinProvisioned"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sio.FSType = c.RandString()
0000000000000000000000000000000000000000;;				if sio.FSType == "" {
0000000000000000000000000000000000000000;;					sio.FSType = "xfs"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.NamespaceSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				s.Finalizers = []api.FinalizerName{api.FinalizerKubernetes}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.NamespaceStatus, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				s.Phase = api.NamespaceActive
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(http *api.HTTPGetAction, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(http)            // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				http.Path = "/" + http.Path     // can't be blank
0000000000000000000000000000000000000000;;				http.Scheme = "x" + http.Scheme // can't be blank
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(ss *api.ServiceSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(ss) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				if len(ss.Ports) == 0 {
0000000000000000000000000000000000000000;;					// There must be at least 1 port.
0000000000000000000000000000000000000000;;					ss.Ports = append(ss.Ports, api.ServicePort{})
0000000000000000000000000000000000000000;;					c.Fuzz(&ss.Ports[0])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for i := range ss.Ports {
0000000000000000000000000000000000000000;;					switch ss.Ports[i].TargetPort.Type {
0000000000000000000000000000000000000000;;					case intstr.Int:
0000000000000000000000000000000000000000;;						ss.Ports[i].TargetPort.IntVal = 1 + ss.Ports[i].TargetPort.IntVal%65535 // non-zero
0000000000000000000000000000000000000000;;					case intstr.String:
0000000000000000000000000000000000000000;;						ss.Ports[i].TargetPort.StrVal = "x" + ss.Ports[i].TargetPort.StrVal // non-empty
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(n *api.Node, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(n)
0000000000000000000000000000000000000000;;				n.Spec.ExternalID = "external"
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *api.NodeStatus, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				s.Allocatable = s.Capacity
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func extensionFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(j *extensions.DeploymentSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				rhl := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				pds := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				j.RevisionHistoryLimit = &rhl
0000000000000000000000000000000000000000;;				j.ProgressDeadlineSeconds = &pds
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *extensions.DeploymentStrategy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				// Ensure that strategyType is one of valid values.
0000000000000000000000000000000000000000;;				strategyTypes := []extensions.DeploymentStrategyType{extensions.RecreateDeploymentStrategyType, extensions.RollingUpdateDeploymentStrategyType}
0000000000000000000000000000000000000000;;				j.Type = strategyTypes[c.Rand.Intn(len(strategyTypes))]
0000000000000000000000000000000000000000;;				if j.Type != extensions.RollingUpdateDeploymentStrategyType {
0000000000000000000000000000000000000000;;					j.RollingUpdate = nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					rollingUpdate := extensions.RollingUpdateDeployment{}
0000000000000000000000000000000000000000;;					if c.RandBool() {
0000000000000000000000000000000000000000;;						rollingUpdate.MaxUnavailable = intstr.FromInt(int(c.Rand.Int31()))
0000000000000000000000000000000000000000;;						rollingUpdate.MaxSurge = intstr.FromInt(int(c.Rand.Int31()))
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						rollingUpdate.MaxSurge = intstr.FromString(fmt.Sprintf("%d%%", c.Rand.Int31()))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					j.RollingUpdate = &rollingUpdate
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(psp *extensions.PodSecurityPolicySpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(psp) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				runAsUserRules := []extensions.RunAsUserStrategy{extensions.RunAsUserStrategyMustRunAsNonRoot, extensions.RunAsUserStrategyMustRunAs, extensions.RunAsUserStrategyRunAsAny}
0000000000000000000000000000000000000000;;				psp.RunAsUser.Rule = runAsUserRules[c.Rand.Intn(len(runAsUserRules))]
0000000000000000000000000000000000000000;;				seLinuxRules := []extensions.SELinuxStrategy{extensions.SELinuxStrategyRunAsAny, extensions.SELinuxStrategyMustRunAs}
0000000000000000000000000000000000000000;;				psp.SELinux.Rule = seLinuxRules[c.Rand.Intn(len(seLinuxRules))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *extensions.Scale, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				// TODO: Implement a fuzzer to generate valid keys, values and operators for
0000000000000000000000000000000000000000;;				// selector requirements.
0000000000000000000000000000000000000000;;				if s.Status.Selector != nil {
0000000000000000000000000000000000000000;;					s.Status.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchLabels: map[string]string{
0000000000000000000000000000000000000000;;							"testlabelkey": "testlabelval",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:      "testkey",
0000000000000000000000000000000000000000;;								Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;								Values:   []string{"val1", "val2", "val3"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *extensions.DaemonSetSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				rhl := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				j.RevisionHistoryLimit = &rhl
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *extensions.DaemonSetUpdateStrategy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				// Ensure that strategyType is one of valid values.
0000000000000000000000000000000000000000;;				strategyTypes := []extensions.DaemonSetUpdateStrategyType{extensions.RollingUpdateDaemonSetStrategyType, extensions.OnDeleteDaemonSetStrategyType}
0000000000000000000000000000000000000000;;				j.Type = strategyTypes[c.Rand.Intn(len(strategyTypes))]
0000000000000000000000000000000000000000;;				if j.Type != extensions.RollingUpdateDaemonSetStrategyType {
0000000000000000000000000000000000000000;;					j.RollingUpdate = nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					rollingUpdate := extensions.RollingUpdateDaemonSet{}
0000000000000000000000000000000000000000;;					if c.RandBool() {
0000000000000000000000000000000000000000;;						if c.RandBool() {
0000000000000000000000000000000000000000;;							rollingUpdate.MaxUnavailable = intstr.FromInt(1 + int(c.Rand.Int31()))
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							rollingUpdate.MaxUnavailable = intstr.FromString(fmt.Sprintf("%d%%", 1+c.Rand.Int31()))
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					j.RollingUpdate = &rollingUpdate
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func batchFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(j *batch.JobSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(j) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				completions := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				parallelism := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				j.Completions = &completions
0000000000000000000000000000000000000000;;				j.Parallelism = &parallelism
0000000000000000000000000000000000000000;;				if c.Rand.Int31()%2 == 0 {
0000000000000000000000000000000000000000;;					j.ManualSelector = newBool(true)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					j.ManualSelector = nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(sj *batch.CronJobSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(sj)
0000000000000000000000000000000000000000;;				suspend := c.RandBool()
0000000000000000000000000000000000000000;;				sj.Suspend = &suspend
0000000000000000000000000000000000000000;;				sds := int64(c.RandUint64())
0000000000000000000000000000000000000000;;				sj.StartingDeadlineSeconds = &sds
0000000000000000000000000000000000000000;;				sj.Schedule = c.RandString()
0000000000000000000000000000000000000000;;				if hasSuccessLimit := c.RandBool(); hasSuccessLimit {
0000000000000000000000000000000000000000;;					successfulJobsHistoryLimit := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;					sj.SuccessfulJobsHistoryLimit = &successfulJobsHistoryLimit
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if hasFailedLimit := c.RandBool(); hasFailedLimit {
0000000000000000000000000000000000000000;;					failedJobsHistoryLimit := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;					sj.FailedJobsHistoryLimit = &failedJobsHistoryLimit
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(cp *batch.ConcurrencyPolicy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				policies := []batch.ConcurrencyPolicy{batch.AllowConcurrent, batch.ForbidConcurrent, batch.ReplaceConcurrent}
0000000000000000000000000000000000000000;;				*cp = policies[c.Rand.Intn(len(policies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func autoscalingFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(s *autoscaling.HorizontalPodAutoscalerSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				minReplicas := int32(c.Rand.Int31())
0000000000000000000000000000000000000000;;				s.MinReplicas = &minReplicas
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				randomQuantity := func() resource.Quantity {
0000000000000000000000000000000000000000;;					var q resource.Quantity
0000000000000000000000000000000000000000;;					c.Fuzz(&q)
0000000000000000000000000000000000000000;;					// precalc the string for benchmarking purposes
0000000000000000000000000000000000000000;;					_ = q.String()
0000000000000000000000000000000000000000;;					return q
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				targetUtilization := int32(c.RandUint64())
0000000000000000000000000000000000000000;;				s.Metrics = []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;						Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;							MetricName:         c.RandString(),
0000000000000000000000000000000000000000;;							TargetAverageValue: randomQuantity(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;						Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;							Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;							TargetAverageUtilization: &targetUtilization,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(s *autoscaling.HorizontalPodAutoscalerStatus, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				randomQuantity := func() resource.Quantity {
0000000000000000000000000000000000000000;;					var q resource.Quantity
0000000000000000000000000000000000000000;;					c.Fuzz(&q)
0000000000000000000000000000000000000000;;					// precalc the string for benchmarking purposes
0000000000000000000000000000000000000000;;					_ = q.String()
0000000000000000000000000000000000000000;;					return q
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				currentUtilization := int32(c.RandUint64())
0000000000000000000000000000000000000000;;				s.CurrentMetrics = []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;						Pods: &autoscaling.PodsMetricStatus{
0000000000000000000000000000000000000000;;							MetricName:          c.RandString(),
0000000000000000000000000000000000000000;;							CurrentAverageValue: randomQuantity(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;						Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;							Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;							CurrentAverageUtilization: &currentUtilization,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func rbacFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(r *rbac.RoleRef, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(r) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// match defaulter
0000000000000000000000000000000000000000;;				if len(r.APIGroup) == 0 {
0000000000000000000000000000000000000000;;					r.APIGroup = rbac.GroupName
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(r *rbac.Subject, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				switch c.Int31n(3) {
0000000000000000000000000000000000000000;;				case 0:
0000000000000000000000000000000000000000;;					r.Kind = rbac.ServiceAccountKind
0000000000000000000000000000000000000000;;					r.APIGroup = ""
0000000000000000000000000000000000000000;;					c.FuzzNoCustom(&r.Name)
0000000000000000000000000000000000000000;;					c.FuzzNoCustom(&r.Namespace)
0000000000000000000000000000000000000000;;				case 1:
0000000000000000000000000000000000000000;;					r.Kind = rbac.UserKind
0000000000000000000000000000000000000000;;					r.APIGroup = rbac.GroupName
0000000000000000000000000000000000000000;;					c.FuzzNoCustom(&r.Name)
0000000000000000000000000000000000000000;;					// user "*" won't round trip because we convert it to the system:authenticated group. try again.
0000000000000000000000000000000000000000;;					for r.Name == "*" {
0000000000000000000000000000000000000000;;						c.FuzzNoCustom(&r.Name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case 2:
0000000000000000000000000000000000000000;;					r.Kind = rbac.GroupKind
0000000000000000000000000000000000000000;;					r.APIGroup = rbac.GroupName
0000000000000000000000000000000000000000;;					c.FuzzNoCustom(&r.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func appsFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(s *apps.StatefulSet, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// match defaulter
0000000000000000000000000000000000000000;;				if len(s.Spec.PodManagementPolicy) == 0 {
0000000000000000000000000000000000000000;;					s.Spec.PodManagementPolicy = apps.OrderedReadyPodManagement
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(s.Spec.UpdateStrategy.Type) == 0 {
0000000000000000000000000000000000000000;;					s.Spec.UpdateStrategy.Type = apps.RollingUpdateStatefulSetStrategyType
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if s.Spec.RevisionHistoryLimit == nil {
0000000000000000000000000000000000000000;;					s.Spec.RevisionHistoryLimit = new(int32)
0000000000000000000000000000000000000000;;					*s.Spec.RevisionHistoryLimit = 10
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func policyFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(s *policy.PodDisruptionBudgetStatus, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				s.PodDisruptionsAllowed = int32(c.Rand.Intn(2))
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func certificateFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(obj *certificates.CertificateSigningRequestSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(obj) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				obj.Usages = []certificates.KeyUsage{certificates.UsageKeyEncipherment}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func admissionregistrationFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(obj *admissionregistration.ExternalAdmissionHook, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(obj) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				p := admissionregistration.FailurePolicyType("Fail")
0000000000000000000000000000000000000000;;				obj.FailurePolicy = &p
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj *admissionregistration.Initializer, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(obj) // fuzz self without calling this function again
0000000000000000000000000000000000000000;;				p := admissionregistration.FailurePolicyType("Fail")
0000000000000000000000000000000000000000;;				obj.FailurePolicy = &p
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FuzzerFuncs(t apitesting.TestingCommon, codecs runtimeserializer.CodecFactory) []interface{} {
0000000000000000000000000000000000000000;;		return apitesting.MergeFuzzerFuncs(t,
0000000000000000000000000000000000000000;;			apitesting.GenericFuzzerFuncs(t, codecs),
0000000000000000000000000000000000000000;;			overrideGenericFuncs(t, codecs),
0000000000000000000000000000000000000000;;			coreFuncs(t),
0000000000000000000000000000000000000000;;			extensionFuncs(t),
0000000000000000000000000000000000000000;;			appsFuncs(t),
0000000000000000000000000000000000000000;;			batchFuncs(t),
0000000000000000000000000000000000000000;;			autoscalingFuncs(t),
0000000000000000000000000000000000000000;;			rbacFuncs(t),
0000000000000000000000000000000000000000;;			kubeadmfuzzer.KubeadmFuzzerFuncs(t),
0000000000000000000000000000000000000000;;			policyFuncs(t),
0000000000000000000000000000000000000000;;			certificateFuncs(t),
0000000000000000000000000000000000000000;;			admissionregistrationFuncs(t),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBool(val bool) *bool {
0000000000000000000000000000000000000000;;		p := new(bool)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
