0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
11e301188a918b082f8191e08397522c664e02cc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestSelectableFieldLabelConversions verifies that given resource have field
0000000000000000000000000000000000000000;;	// label conversion defined for each its selectable field.
0000000000000000000000000000000000000000;;	// fields contains selectable fields of the resource.
0000000000000000000000000000000000000000;;	// labelMap maps deprecated labels to their canonical names.
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversionsOfKind(t *testing.T, apiVersion string, kind string, fields fields.Set, labelMap map[string]string) {
0000000000000000000000000000000000000000;;		badFieldLabels := []string{
0000000000000000000000000000000000000000;;			"name",
0000000000000000000000000000000000000000;;			".name",
0000000000000000000000000000000000000000;;			"bad",
0000000000000000000000000000000000000000;;			"metadata",
0000000000000000000000000000000000000000;;			"foo.bar",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		value := "value"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(fields) == 0 {
0000000000000000000000000000000000000000;;			t.Logf("no selectable fields for kind %q, skipping", kind)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for label := range fields {
0000000000000000000000000000000000000000;;			if label == "name" {
0000000000000000000000000000000000000000;;				t.Logf("FIXME: \"name\" is deprecated by \"metadata.name\", it should be removed from selectable fields of kind=%s", kind)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newLabel, newValue, err := api.Scheme.ConvertFieldLabel(apiVersion, kind, label, value)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("kind=%s label=%s: got unexpected error: %v", kind, label, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				expectedLabel := label
0000000000000000000000000000000000000000;;				if l, exists := labelMap[label]; exists {
0000000000000000000000000000000000000000;;					expectedLabel = l
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if newLabel != expectedLabel {
0000000000000000000000000000000000000000;;					t.Errorf("kind=%s label=%s: got unexpected label name (%q != %q)", kind, label, newLabel, expectedLabel)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if newValue != value {
0000000000000000000000000000000000000000;;					t.Errorf("kind=%s label=%s: got unexpected new value (%q != %q)", kind, label, newValue, value)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, label := range badFieldLabels {
0000000000000000000000000000000000000000;;			_, _, err := api.Scheme.ConvertFieldLabel(apiVersion, kind, label, "value")
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("kind=%s label=%s: got unexpected non-error", kind, label)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
