0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c4174314285cb6946e1f8917b3b2f6f06337a3a6;pkg/api/ref_test.go[pkg/api/ref_test.go][pkg/api/ref/ref_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ref
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeAPIObject struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *FakeAPIObject) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionAPIObject struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetReference(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// when vendoring kube, if you don't force the set of registered versions (like make test does)
0000000000000000000000000000000000000000;;		// then you run into trouble because the types aren't registered in the scheme by anything.  This does the
0000000000000000000000000000000000000000;;		// register manually to allow unit test execution
0000000000000000000000000000000000000000;;		if _, _, err := api.Scheme.ObjectKinds(&api.Pod{}); err != nil {
0000000000000000000000000000000000000000;;			api.AddToScheme(api.Scheme)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := map[string]struct {
0000000000000000000000000000000000000000;;			obj       runtime.Object
0000000000000000000000000000000000000000;;			ref       *api.ObjectReference
0000000000000000000000000000000000000000;;			fieldPath string
0000000000000000000000000000000000000000;;			shouldErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"pod": {
0000000000000000000000000000000000000000;;				obj: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						UID:             "bar",
0000000000000000000000000000000000000000;;						ResourceVersion: "42",
0000000000000000000000000000000000000000;;						SelfLink:        "/api/version1/pods/foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldPath: ".desiredState.containers[0]",
0000000000000000000000000000000000000000;;				ref: &api.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "Pod",
0000000000000000000000000000000000000000;;					APIVersion:      "version1",
0000000000000000000000000000000000000000;;					Name:            "foo",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					FieldPath:       ".desiredState.containers[0]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"serviceList": {
0000000000000000000000000000000000000000;;				obj: &api.ServiceList{
0000000000000000000000000000000000000000;;					ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "42",
0000000000000000000000000000000000000000;;						SelfLink:        "/api/version2/services",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ref: &api.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "ServiceList",
0000000000000000000000000000000000000000;;					APIVersion:      "version2",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"extensionAPIObject": {
0000000000000000000000000000000000000000;;				obj: &ExtensionAPIObject{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;						Kind: "ExtensionAPIObject",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						UID:             "bar",
0000000000000000000000000000000000000000;;						ResourceVersion: "42",
0000000000000000000000000000000000000000;;						SelfLink:        "/custom_prefix/version1/extensions/foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ref: &api.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "ExtensionAPIObject",
0000000000000000000000000000000000000000;;					APIVersion:      "version1",
0000000000000000000000000000000000000000;;					Name:            "foo",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"badSelfLink": {
0000000000000000000000000000000000000000;;				obj: &api.ServiceList{
0000000000000000000000000000000000000000;;					ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "42",
0000000000000000000000000000000000000000;;						SelfLink:        "version2/services",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"error": {
0000000000000000000000000000000000000000;;				obj:       &FakeAPIObject{},
0000000000000000000000000000000000000000;;				ref:       nil,
0000000000000000000000000000000000000000;;				shouldErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"errorNil": {
0000000000000000000000000000000000000000;;				obj:       nil,
0000000000000000000000000000000000000000;;				ref:       nil,
0000000000000000000000000000000000000000;;				shouldErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, item := range table {
0000000000000000000000000000000000000000;;			ref, err := GetPartialReference(api.Scheme, item.obj, item.fieldPath)
0000000000000000000000000000000000000000;;			if e, a := item.shouldErr, (err != nil); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v, err %v", name, e, a, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.ref, ref; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %#v, got %#v", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
