0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f3da736b3d9c74062b18f72bebb2bec88c238231;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: This GetVersion/GetGroup arrangement is temporary and will be replaced
0000000000000000000000000000000000000000;;	// with a GroupAndVersion type.
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetVersion(groupVersion string) string {
0000000000000000000000000000000000000000;;		s := strings.Split(groupVersion, "/")
0000000000000000000000000000000000000000;;		if len(s) != 2 {
0000000000000000000000000000000000000000;;			// e.g. return "v1" for groupVersion="v1"
0000000000000000000000000000000000000000;;			return s[len(s)-1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s[1]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetGroup(groupVersion string) string {
0000000000000000000000000000000000000000;;		s := strings.Split(groupVersion, "/")
0000000000000000000000000000000000000000;;		if len(s) == 1 {
0000000000000000000000000000000000000000;;			// e.g. return "" for groupVersion="v1"
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGroupVersion returns the "group/version". It returns "version" is if group
0000000000000000000000000000000000000000;;	// is empty. It returns "group/" if version is empty.
0000000000000000000000000000000000000000;;	func GetGroupVersion(group, version string) string {
0000000000000000000000000000000000000000;;		if len(group) == 0 {
0000000000000000000000000000000000000000;;			return version
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return group + "/" + version
0000000000000000000000000000000000000000;;	}
