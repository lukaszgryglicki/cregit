0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a1b6f3a1b99f8f1b9900da66be78aa9668ea8467;pkg/kubectl/sorted_event_list_test.go[pkg/kubectl/sorted_event_list_test.go][pkg/api/events/sorted_event_list_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package events
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSortableEvents(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		list := SortableEvents([]api.Event{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;				Message:        "Item 1",
0000000000000000000000000000000000000000;;				FirstTimestamp: metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				LastTimestamp:  metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				Count:          1,
0000000000000000000000000000000000000000;;				Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Source:         api.EventSource{Component: "scheduler"},
0000000000000000000000000000000000000000;;				Message:        "Item 2",
0000000000000000000000000000000000000000;;				FirstTimestamp: metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				LastTimestamp:  metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				Count:          1,
0000000000000000000000000000000000000000;;				Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;				Message:        "Item 3",
0000000000000000000000000000000000000000;;				FirstTimestamp: metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				LastTimestamp:  metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;				Count:          1,
0000000000000000000000000000000000000000;;				Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		sort.Sort(list)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if list[0].Message != "Item 2" ||
0000000000000000000000000000000000000000;;			list[1].Message != "Item 3" ||
0000000000000000000000000000000000000000;;			list[2].Message != "Item 1" {
0000000000000000000000000000000000000000;;			t.Fatal("List is not sorted by time. List: ", list)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
