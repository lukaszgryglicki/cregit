0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
65fe3265cf42423e7f01f543d23e8c7ffb5efc0c;pkg/api/validation_test.go[pkg/api/validation_test.go][pkg/api/validation/validation_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		utilfeature "k8s.io/apiserver/pkg/util/feature"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/capabilities"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/apparmor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		dnsLabelErrMsg          = "a DNS-1123 label must consist of"
0000000000000000000000000000000000000000;;		dnsSubdomainLabelErrMsg = "a DNS-1123 subdomain"
0000000000000000000000000000000000000000;;		labelErrMsg             = "a valid label must be an empty string or consist of"
0000000000000000000000000000000000000000;;		lowerCaseLabelErrMsg    = "a valid label must consist of"
0000000000000000000000000000000000000000;;		maxLengthErrMsg         = "must be no more than"
0000000000000000000000000000000000000000;;		namePartErrMsg          = "name part must consist of"
0000000000000000000000000000000000000000;;		nameErrMsg              = "a qualified name must consist of"
0000000000000000000000000000000000000000;;		idErrMsg                = "a valid C identifier must"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolume(name string, namespace string, spec api.PersistentVolumeSpec) *api.PersistentVolume {
0000000000000000000000000000000000000000;;		objMeta := metav1.ObjectMeta{Name: name}
0000000000000000000000000000000000000000;;		if namespace != "" {
0000000000000000000000000000000000000000;;			objMeta.Namespace = namespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: objMeta,
0000000000000000000000000000000000000000;;			Spec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeWithNodeAffinity(t *testing.T, name string, namespace string, affinity *api.NodeAffinity, spec api.PersistentVolumeSpec) *api.PersistentVolume {
0000000000000000000000000000000000000000;;		objMeta := metav1.ObjectMeta{Name: name}
0000000000000000000000000000000000000000;;		if namespace != "" {
0000000000000000000000000000000000000000;;			objMeta.Namespace = namespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objMeta.Annotations = map[string]string{}
0000000000000000000000000000000000000000;;		err := helper.StorageNodeAffinityToAlphaAnnotation(objMeta.Annotations, affinity)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to get node affinity annotation: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: objMeta,
0000000000000000000000000000000000000000;;			Spec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePersistentVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		scenarios := map[string]struct {
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;			volume            *api.PersistentVolume
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"good-volume": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: "valid",
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"good-volume-with-retain-policy": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeReclaimPolicy: api.PersistentVolumeReclaimRetain,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-accessmode": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{"fakemode"},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-reclaimpolicy": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeReclaimPolicy: "fakeReclaimPolicy",
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unexpected-namespace": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "unexpected-namespace", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-name": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("123*Bad(Name", "unexpected-namespace", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-name": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-capacity": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume:            testVolume("foo", "", api.PersistentVolumeSpec{}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-accessmodes": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("goodname", "missing-accessmodes", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"too-many-sources": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("5G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath:          &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;						GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "foo", FSType: "ext4"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"host mount of / with recycle reclaim policy": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("bad-recycle-do-not-want", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeReclaimPolicy: api.PersistentVolumeReclaimRecycle,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"host mount of / with recycle reclaim policy 2": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("bad-recycle-do-not-want", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/a/.."},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PersistentVolumeReclaimPolicy: api.PersistentVolumeReclaimRecycle,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-storage-class-name": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("invalid-storage-class-name", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: "-invalid-",
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// LocalVolume alpha feature disabled
0000000000000000000000000000000000000000;;			// TODO: remove when no longer alpha
0000000000000000000000000000000000000000;;			"alpha disabled valid local volume": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolumeWithNodeAffinity(
0000000000000000000000000000000000000000;;					t,
0000000000000000000000000000000000000000;;					"valid-local-volume",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					&api.NodeAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;							NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "test-label-key",
0000000000000000000000000000000000000000;;											Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"test-label-value"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-hostpath-volume-backsteps": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/foo/.."},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: "backstep-hostpath",
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-local-volume-backsteps": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume("foo", "", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;							Path: "/foo/..",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: "backstep-local",
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, scenario := range scenarios {
0000000000000000000000000000000000000000;;			errs := ValidatePersistentVolume(scenario.volume)
0000000000000000000000000000000000000000;;			if len(errs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateLocalVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		scenarios := map[string]struct {
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;			volume            *api.PersistentVolume
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid local volume": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				volume: testVolumeWithNodeAffinity(
0000000000000000000000000000000000000000;;					t,
0000000000000000000000000000000000000000;;					"valid-local-volume",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					&api.NodeAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;							NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "test-label-key",
0000000000000000000000000000000000000000;;											Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"test-label-value"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid local volume nil annotations": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolume(
0000000000000000000000000000000000000000;;					"invalid-local-volume-nil-annotations",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid local volume empty affinity": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolumeWithNodeAffinity(
0000000000000000000000000000000000000000;;					t,
0000000000000000000000000000000000000000;;					"invalid-local-volume-empty-affinity",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					&api.NodeAffinity{},
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid local volume preferred affinity": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolumeWithNodeAffinity(
0000000000000000000000000000000000000000;;					t,
0000000000000000000000000000000000000000;;					"invalid-local-volume-preferred-affinity",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					&api.NodeAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;							NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "test-label-key",
0000000000000000000000000000000000000000;;											Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"test-label-value"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.PreferredSchedulingTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 10,
0000000000000000000000000000000000000000;;								Preference: api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;									MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "test-label-key",
0000000000000000000000000000000000000000;;											Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"test-label-value"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid local volume empty path": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolumeWithNodeAffinity(
0000000000000000000000000000000000000000;;					t,
0000000000000000000000000000000000000000;;					"invalid-local-volume-empty-path",
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					&api.NodeAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;							NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "test-label-key",
0000000000000000000000000000000000000000;;											Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"test-label-value"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;						PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Local: &api.LocalVolumeSource{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						StorageClassName: "test-storage-class",
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := utilfeature.DefaultFeatureGate.Set("PersistentLocalVolumes=true")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to enable feature gate for LocalPersistentVolumes: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, scenario := range scenarios {
0000000000000000000000000000000000000000;;			errs := ValidatePersistentVolume(scenario.volume)
0000000000000000000000000000000000000000;;			if len(errs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeClaim(name string, namespace string, spec api.PersistentVolumeClaimSpec) *api.PersistentVolumeClaim {
0000000000000000000000000000000000000000;;		return &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeClaimStorageClass(name string, namespace string, annval string, spec api.PersistentVolumeClaimSpec) *api.PersistentVolumeClaim {
0000000000000000000000000000000000000000;;		annotations := map[string]string{
0000000000000000000000000000000000000000;;			v1.BetaStorageClassAnnotation: annval,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:        name,
0000000000000000000000000000000000000000;;				Namespace:   namespace,
0000000000000000000000000000000000000000;;				Annotations: annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeClaimAnnotation(name string, namespace string, ann string, annval string, spec api.PersistentVolumeClaimSpec) *api.PersistentVolumeClaim {
0000000000000000000000000000000000000000;;		annotations := map[string]string{
0000000000000000000000000000000000000000;;			ann: annval,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:        name,
0000000000000000000000000000000000000000;;				Namespace:   namespace,
0000000000000000000000000000000000000000;;				Annotations: annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePersistentVolumeClaim(t *testing.T) {
0000000000000000000000000000000000000000;;		invalidClassName := "-invalid-"
0000000000000000000000000000000000000000;;		validClassName := "valid"
0000000000000000000000000000000000000000;;		scenarios := map[string]struct {
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;			claim             *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"good-claim": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:      "key2",
0000000000000000000000000000000000000000;;								Operator: "Exists",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;						api.ReadOnlyMany,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: &validClassName,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-label-selector": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:      "key2",
0000000000000000000000000000000000000000;;								Operator: "InvalidOp",
0000000000000000000000000000000000000000;;								Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;						api.ReadOnlyMany,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-accessmode": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{"fakemode"},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-namespace": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;						api.ReadOnlyMany,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no-access-modes": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no-resource-requests": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-resource-requests": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative-storage-request": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:      "key2",
0000000000000000000000000000000000000000;;								Operator: "Exists",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;						api.ReadOnlyMany,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("-10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-storage-class-name": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				claim: testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;						MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:      "key2",
0000000000000000000000000000000000000000;;								Operator: "Exists",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;						api.ReadWriteOnce,
0000000000000000000000000000000000000000;;						api.ReadOnlyMany,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					StorageClassName: &invalidClassName,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, scenario := range scenarios {
0000000000000000000000000000000000000000;;			errs := ValidatePersistentVolumeClaim(scenario.claim)
0000000000000000000000000000000000000000;;			if len(errs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePersistentVolumeClaimUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validClaim := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validClaimStorageClass := testVolumeClaimStorageClass("foo", "ns", "fast", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validClaimAnnotation := testVolumeClaimAnnotation("foo", "ns", "description", "foo-description", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validUpdateClaim := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		invalidUpdateClaimResources := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("20G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		invalidUpdateClaimAccessModes := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		invalidUpdateClaimStorageClass := testVolumeClaimStorageClass("foo", "ns", "fast2", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validUpdateClaimMutableAnnotation := testVolumeClaimAnnotation("foo", "ns", "description", "updated-or-added-foo-description", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validAddClaimAnnotation := testVolumeClaimAnnotation("foo", "ns", "description", "updated-or-added-foo-description", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VolumeName: "volume",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		scenarios := map[string]struct {
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;			oldClaim          *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			newClaim          *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid-update-volumeName-only": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				oldClaim:          validClaim,
0000000000000000000000000000000000000000;;				newClaim:          validUpdateClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-no-op-update": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				oldClaim:          validUpdateClaim,
0000000000000000000000000000000000000000;;				newClaim:          validUpdateClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-update-change-resources-on-bound-claim": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				oldClaim:          validUpdateClaim,
0000000000000000000000000000000000000000;;				newClaim:          invalidUpdateClaimResources,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-update-change-access-modes-on-bound-claim": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				oldClaim:          validUpdateClaim,
0000000000000000000000000000000000000000;;				newClaim:          invalidUpdateClaimAccessModes,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-update-change-storage-class-annotation-after-creation": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				oldClaim:          validClaimStorageClass,
0000000000000000000000000000000000000000;;				newClaim:          invalidUpdateClaimStorageClass,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-update-mutable-annotation": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				oldClaim:          validClaimAnnotation,
0000000000000000000000000000000000000000;;				newClaim:          validUpdateClaimMutableAnnotation,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-update-add-annotation": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				oldClaim:          validClaim,
0000000000000000000000000000000000000000;;				newClaim:          validAddClaimAnnotation,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, scenario := range scenarios {
0000000000000000000000000000000000000000;;			// ensure we have a resource version specified for updates
0000000000000000000000000000000000000000;;			scenario.oldClaim.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			scenario.newClaim.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidatePersistentVolumeClaimUpdate(scenario.newClaim, scenario.oldClaim)
0000000000000000000000000000000000000000;;			if len(errs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateKeyToPath(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			kp      api.KeyToPath
0000000000000000000000000000000000000000;;			ok      bool
0000000000000000000000000000000000000000;;			errtype field.ErrorType
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp: api.KeyToPath{Key: "k", Path: "p"},
0000000000000000000000000000000000000000;;				ok: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp: api.KeyToPath{Key: "k", Path: "p/p/p/p"},
0000000000000000000000000000000000000000;;				ok: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp: api.KeyToPath{Key: "k", Path: "p/..p/p../p..p"},
0000000000000000000000000000000000000000;;				ok: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp: api.KeyToPath{Key: "k", Path: "p", Mode: newInt32(0644)},
0000000000000000000000000000000000000000;;				ok: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "", Path: "p"},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: ""},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "..p"},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "../p"},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "p/../p"},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "p/.."},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "p", Mode: newInt32(01000)},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kp:      api.KeyToPath{Key: "k", Path: "p", Mode: newInt32(-1)},
0000000000000000000000000000000000000000;;				ok:      false,
0000000000000000000000000000000000000000;;				errtype: field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			errs := validateKeyToPath(&tc.kp, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if tc.ok && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] unexpected errors: %v", i, errs)
0000000000000000000000000000000000000000;;			} else if !tc.ok && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] expected error type %v", i, tc.errtype)
0000000000000000000000000000000000000000;;			} else if len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] expected only one error, got %d", i, len(errs))
0000000000000000000000000000000000000000;;			} else if !tc.ok {
0000000000000000000000000000000000000000;;				if errs[0].Type != tc.errtype {
0000000000000000000000000000000000000000;;					t.Errorf("[%d] expected error type %v, got %v", i, tc.errtype, errs[0].Type)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNFSVolumeSource(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			nfs       *api.NFSVolumeSource
0000000000000000000000000000000000000000;;			errtype   field.ErrorType
0000000000000000000000000000000000000000;;			errfield  string
0000000000000000000000000000000000000000;;			errdetail string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing server",
0000000000000000000000000000000000000000;;				nfs:      &api.NFSVolumeSource{Server: "", Path: "/tmp"},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "server",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing path",
0000000000000000000000000000000000000000;;				nfs:      &api.NFSVolumeSource{Server: "my-server", Path: ""},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "abs path",
0000000000000000000000000000000000000000;;				nfs:       &api.NFSVolumeSource{Server: "my-server", Path: "tmp"},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "path",
0000000000000000000000000000000000000000;;				errdetail: "must be an absolute path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			errs := validateNFSVolumeSource(tc.nfs, field.NewPath("field"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(errs) > 0 && tc.errtype == "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] unexpected error(s): %v", i, tc.name, errs)
0000000000000000000000000000000000000000;;			} else if len(errs) == 0 && tc.errtype != "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] expected error type %v", i, tc.name, tc.errtype)
0000000000000000000000000000000000000000;;			} else if len(errs) >= 1 {
0000000000000000000000000000000000000000;;				if errs[0].Type != tc.errtype {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error type %v, got %v", i, tc.name, tc.errtype, errs[0].Type)
0000000000000000000000000000000000000000;;				} else if !strings.HasSuffix(errs[0].Field, "."+tc.errfield) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error on field %q, got %q", i, tc.name, tc.errfield, errs[0].Field)
0000000000000000000000000000000000000000;;				} else if !strings.Contains(errs[0].Detail, tc.errdetail) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error detail %q, got %q", i, tc.name, tc.errdetail, errs[0].Detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateGlusterfs(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			gfs      *api.GlusterfsVolumeSource
0000000000000000000000000000000000000000;;			errtype  field.ErrorType
0000000000000000000000000000000000000000;;			errfield string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing endpointname",
0000000000000000000000000000000000000000;;				gfs:      &api.GlusterfsVolumeSource{EndpointsName: "", Path: "/tmp"},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "endpoints",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing path",
0000000000000000000000000000000000000000;;				gfs:      &api.GlusterfsVolumeSource{EndpointsName: "my-endpoint", Path: ""},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing endpintname and path",
0000000000000000000000000000000000000000;;				gfs:      &api.GlusterfsVolumeSource{EndpointsName: "", Path: ""},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "endpoints",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			errs := validateGlusterfs(tc.gfs, field.NewPath("field"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(errs) > 0 && tc.errtype == "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] unexpected error(s): %v", i, tc.name, errs)
0000000000000000000000000000000000000000;;			} else if len(errs) == 0 && tc.errtype != "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] expected error type %v", i, tc.name, tc.errtype)
0000000000000000000000000000000000000000;;			} else if len(errs) >= 1 {
0000000000000000000000000000000000000000;;				if errs[0].Type != tc.errtype {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error type %v, got %v", i, tc.name, tc.errtype, errs[0].Type)
0000000000000000000000000000000000000000;;				} else if !strings.HasSuffix(errs[0].Field, "."+tc.errfield) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error on field %q, got %q", i, tc.name, tc.errfield, errs[0].Field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// helper
0000000000000000000000000000000000000000;;	func newInt32(val int) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		*p = int32(val)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This test is a little too top-to-bottom.  Ideally we would test each volume
0000000000000000000000000000000000000000;;	// type on its own, but we want to also make sure that the logic works through
0000000000000000000000000000000000000000;;	// the one-of wrapper, so we just do it all in one place.
0000000000000000000000000000000000000000;;	func TestValidateVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			vol       api.Volume
0000000000000000000000000000000000000000;;			errtype   field.ErrorType
0000000000000000000000000000000000000000;;			errfield  string
0000000000000000000000000000000000000000;;			errdetail string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// EmptyDir and basic volume names
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid alpha name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "empty",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						EmptyDir: &api.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid num name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "123",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						EmptyDir: &api.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid alphanum name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "empty-123",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						EmptyDir: &api.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid numalpha name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "123-empty",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						EmptyDir: &api.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "zero-length name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name:         "",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "name > 63 characters",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name:         strings.Repeat("a", 64),
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "name",
0000000000000000000000000000000000000000;;				errdetail: "must be no more than",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "name not a DNS label",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name:         "a.b.c",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "name",
0000000000000000000000000000000000000000;;				errdetail: dnsLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// More than one source field specified.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "more than one source",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "dups",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						EmptyDir: &api.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{
0000000000000000000000000000000000000000;;							Path: "/mnt/path",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeForbidden,
0000000000000000000000000000000000000000;;				errfield:  "hostPath",
0000000000000000000000000000000000000000;;				errdetail: "may not specify more than 1 volume",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// HostPath
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid HostPath",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "hostpath",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{
0000000000000000000000000000000000000000;;							Path: "/mnt/path",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid HostPath backsteps",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "hostpath",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{
0000000000000000000000000000000000000000;;							Path: "/mnt/path/..",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "path",
0000000000000000000000000000000000000000;;				errdetail: "must not contain '..'",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// GcePersistentDisk
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid GcePersistentDisk",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "gce-pd",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{
0000000000000000000000000000000000000000;;							PDName:    "my-PD",
0000000000000000000000000000000000000000;;							FSType:    "ext4",
0000000000000000000000000000000000000000;;							Partition: 1,
0000000000000000000000000000000000000000;;							ReadOnly:  false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// AWSElasticBlockStore
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid AWSElasticBlockStore",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "aws-ebs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AWSElasticBlockStore: &api.AWSElasticBlockStoreVolumeSource{
0000000000000000000000000000000000000000;;							VolumeID:  "my-PD",
0000000000000000000000000000000000000000;;							FSType:    "ext4",
0000000000000000000000000000000000000000;;							Partition: 1,
0000000000000000000000000000000000000000;;							ReadOnly:  false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// GitRepo
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid GitRepo",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "git-repo",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "my-repo",
0000000000000000000000000000000000000000;;							Revision:   "hashstring",
0000000000000000000000000000000000000000;;							Directory:  "target",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid GitRepo in .",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "git-repo-dot",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "my-repo",
0000000000000000000000000000000000000000;;							Directory:  ".",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid GitRepo with .. in name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "git-repo-dot-dot-foo",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "my-repo",
0000000000000000000000000000000000000000;;							Directory:  "..foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "GitRepo starts with ../",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "gitrepo",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "foo",
0000000000000000000000000000000000000000;;							Directory:  "../dots/bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "gitRepo.directory",
0000000000000000000000000000000000000000;;				errdetail: `must not contain '..'`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "GitRepo contains ..",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "gitrepo",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "foo",
0000000000000000000000000000000000000000;;							Directory:  "dots/../bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "gitRepo.directory",
0000000000000000000000000000000000000000;;				errdetail: `must not contain '..'`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "GitRepo absolute target",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "gitrepo",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &api.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: "foo",
0000000000000000000000000000000000000000;;							Directory:  "/abstarget",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "gitRepo.directory",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// ISCSI
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ISCSI",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "iscsi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{
0000000000000000000000000000000000000000;;							TargetPortal: "127.0.0.1",
0000000000000000000000000000000000000000;;							IQN:          "iqn.2015-02.example.com:test",
0000000000000000000000000000000000000000;;							Lun:          1,
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:     false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty portal",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "iscsi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{
0000000000000000000000000000000000000000;;							TargetPortal: "",
0000000000000000000000000000000000000000;;							IQN:          "iqn.2015-02.example.com:test",
0000000000000000000000000000000000000000;;							Lun:          1,
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:     false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "iscsi.targetPortal",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty iqn",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "iscsi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{
0000000000000000000000000000000000000000;;							TargetPortal: "127.0.0.1",
0000000000000000000000000000000000000000;;							IQN:          "",
0000000000000000000000000000000000000000;;							Lun:          1,
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:     false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "iscsi.iqn",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty secret",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "iscsi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{
0000000000000000000000000000000000000000;;							TargetPortal:      "127.0.0.1",
0000000000000000000000000000000000000000;;							IQN:               "iqn.2015-02.example.com:test",
0000000000000000000000000000000000000000;;							Lun:               1,
0000000000000000000000000000000000000000;;							FSType:            "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:          false,
0000000000000000000000000000000000000000;;							DiscoveryCHAPAuth: true,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "iscsi.secretRef",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty secret",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "iscsi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{
0000000000000000000000000000000000000000;;							TargetPortal:    "127.0.0.1",
0000000000000000000000000000000000000000;;							IQN:             "iqn.2015-02.example.com:test",
0000000000000000000000000000000000000000;;							Lun:             1,
0000000000000000000000000000000000000000;;							FSType:          "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:        false,
0000000000000000000000000000000000000000;;							SessionCHAPAuth: true,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "iscsi.secretRef",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Secret
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Secret",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "my-secret",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Secret with defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName:  "my-secret",
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(0644),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Secret with projection and mode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "my-secret",
0000000000000000000000000000000000000000;;							Items: []api.KeyToPath{{
0000000000000000000000000000000000000000;;								Key:  "key",
0000000000000000000000000000000000000000;;								Path: "filename",
0000000000000000000000000000000000000000;;								Mode: newInt32(0644),
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Secret with subdir projection",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "my-secret",
0000000000000000000000000000000000000000;;							Items: []api.KeyToPath{{
0000000000000000000000000000000000000000;;								Key:  "key",
0000000000000000000000000000000000000000;;								Path: "dir/filename",
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "secret with missing path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "s",
0000000000000000000000000000000000000000;;							Items:      []api.KeyToPath{{Key: "key", Path: ""}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "secret.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "secret with leading ..",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "s",
0000000000000000000000000000000000000000;;							Items:      []api.KeyToPath{{Key: "key", Path: "../foo"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "secret.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "secret with .. inside",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "s",
0000000000000000000000000000000000000000;;							Items:      []api.KeyToPath{{Key: "key", Path: "foo/../bar"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "secret.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "secret with invalid positive defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName:  "s",
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(01000),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "secret.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "secret with invalid negative defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "secret",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Secret: &api.SecretVolumeSource{
0000000000000000000000000000000000000000;;							SecretName:  "s",
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(-1),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "secret.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// ConfigMap
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ConfigMap",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "my-cfgmap",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ConfigMap with defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "my-cfgmap",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(0644),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ConfigMap with projection and mode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "my-cfgmap"},
0000000000000000000000000000000000000000;;							Items: []api.KeyToPath{{
0000000000000000000000000000000000000000;;								Key:  "key",
0000000000000000000000000000000000000000;;								Path: "filename",
0000000000000000000000000000000000000000;;								Mode: newInt32(0644),
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ConfigMap with subdir projection",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "my-cfgmap"},
0000000000000000000000000000000000000000;;							Items: []api.KeyToPath{{
0000000000000000000000000000000000000000;;								Key:  "key",
0000000000000000000000000000000000000000;;								Path: "dir/filename",
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "configmap with missing path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "c"},
0000000000000000000000000000000000000000;;							Items:                []api.KeyToPath{{Key: "key", Path: ""}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "configMap.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "configmap with leading ..",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "c"},
0000000000000000000000000000000000000000;;							Items:                []api.KeyToPath{{Key: "key", Path: "../foo"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "configMap.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "configmap with .. inside",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "c"},
0000000000000000000000000000000000000000;;							Items:                []api.KeyToPath{{Key: "key", Path: "foo/../bar"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "configMap.items[0].path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "configmap with invalid positive defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "c"},
0000000000000000000000000000000000000000;;							DefaultMode:          newInt32(01000),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "configMap.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "configmap with invalid negative defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cfgmap",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ConfigMap: &api.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "c"},
0000000000000000000000000000000000000000;;							DefaultMode:          newInt32(-1),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "configMap.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Glusterfs
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Glusterfs",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "glusterfs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Glusterfs: &api.GlusterfsVolumeSource{
0000000000000000000000000000000000000000;;							EndpointsName: "host1",
0000000000000000000000000000000000000000;;							Path:          "path",
0000000000000000000000000000000000000000;;							ReadOnly:      false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty hosts",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "glusterfs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Glusterfs: &api.GlusterfsVolumeSource{
0000000000000000000000000000000000000000;;							EndpointsName: "",
0000000000000000000000000000000000000000;;							Path:          "path",
0000000000000000000000000000000000000000;;							ReadOnly:      false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "glusterfs.endpoints",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "glusterfs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Glusterfs: &api.GlusterfsVolumeSource{
0000000000000000000000000000000000000000;;							EndpointsName: "host",
0000000000000000000000000000000000000000;;							Path:          "",
0000000000000000000000000000000000000000;;							ReadOnly:      false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "glusterfs.path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Flocker
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Flocker -- datasetUUID",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flocker",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &api.FlockerVolumeSource{
0000000000000000000000000000000000000000;;							DatasetUUID: "d846b09d-223d-43df-ab5b-d6db2206a0e4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Flocker -- datasetName",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flocker",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &api.FlockerVolumeSource{
0000000000000000000000000000000000000000;;							DatasetName: "datasetName",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "both empty",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flocker",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &api.FlockerVolumeSource{
0000000000000000000000000000000000000000;;							DatasetName: "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "flocker",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "both specified",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flocker",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &api.FlockerVolumeSource{
0000000000000000000000000000000000000000;;							DatasetName: "datasetName",
0000000000000000000000000000000000000000;;							DatasetUUID: "d846b09d-223d-43df-ab5b-d6db2206a0e4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "flocker",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "slash in flocker datasetName",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flocker",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &api.FlockerVolumeSource{
0000000000000000000000000000000000000000;;							DatasetName: "foo/bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "flocker.datasetName",
0000000000000000000000000000000000000000;;				errdetail: "must not contain '/'",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// RBD
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid RBD",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "rbd",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						RBD: &api.RBDVolumeSource{
0000000000000000000000000000000000000000;;							CephMonitors: []string{"foo"},
0000000000000000000000000000000000000000;;							RBDImage:     "bar",
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty rbd monitors",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "rbd",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						RBD: &api.RBDVolumeSource{
0000000000000000000000000000000000000000;;							CephMonitors: []string{},
0000000000000000000000000000000000000000;;							RBDImage:     "bar",
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "rbd.monitors",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty image",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "rbd",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						RBD: &api.RBDVolumeSource{
0000000000000000000000000000000000000000;;							CephMonitors: []string{"foo"},
0000000000000000000000000000000000000000;;							RBDImage:     "",
0000000000000000000000000000000000000000;;							FSType:       "ext4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "rbd.image",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Cinder
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Cinder",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cinder",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Cinder: &api.CinderVolumeSource{
0000000000000000000000000000000000000000;;							VolumeID: "29ea5088-4f60-4757-962e-dba678767887",
0000000000000000000000000000000000000000;;							FSType:   "ext4",
0000000000000000000000000000000000000000;;							ReadOnly: false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// CephFS
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid CephFS",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cephfs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						CephFS: &api.CephFSVolumeSource{
0000000000000000000000000000000000000000;;							Monitors: []string{"foo"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty cephfs monitors",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "cephfs",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						CephFS: &api.CephFSVolumeSource{
0000000000000000000000000000000000000000;;							Monitors: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "cephfs.monitors",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// DownwardAPI
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid DownwardAPI",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downwardapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "labels",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "annotations",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.annotations",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "namespace",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.namespace",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "name",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "path/with/subdirs",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "path/./withdot",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "path/with/embedded..dotdot",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "path/with/leading/..dotdot",
0000000000000000000000000000000000000000;;									FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;										APIVersion: "v1",
0000000000000000000000000000000000000000;;										FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "cpu_limit",
0000000000000000000000000000000000000000;;									ResourceFieldRef: &api.ResourceFieldSelector{
0000000000000000000000000000000000000000;;										ContainerName: "test-container",
0000000000000000000000000000000000000000;;										Resource:      "limits.cpu",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "cpu_request",
0000000000000000000000000000000000000000;;									ResourceFieldRef: &api.ResourceFieldSelector{
0000000000000000000000000000000000000000;;										ContainerName: "test-container",
0000000000000000000000000000000000000000;;										Resource:      "requests.cpu",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "memory_limit",
0000000000000000000000000000000000000000;;									ResourceFieldRef: &api.ResourceFieldSelector{
0000000000000000000000000000000000000000;;										ContainerName: "test-container",
0000000000000000000000000000000000000000;;										Resource:      "limits.memory",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Path: "memory_request",
0000000000000000000000000000000000000000;;									ResourceFieldRef: &api.ResourceFieldSelector{
0000000000000000000000000000000000000000;;										ContainerName: "test-container",
0000000000000000000000000000000000000000;;										Resource:      "requests.memory",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi valid defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(0644),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi valid item mode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Mode: newInt32(0644),
0000000000000000000000000000000000000000;;								Path: "path",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi invalid positive item mode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Mode: newInt32(01000),
0000000000000000000000000000000000000000;;								Path: "path",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.mode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi invalid negative item mode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Mode: newInt32(-1),
0000000000000000000000000000000000000000;;								Path: "path",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.mode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi empty metatada path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi absolute path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "/absolutepath",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.path",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi dot dot path",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "../../passwd",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "downwardAPI.path",
0000000000000000000000000000000000000000;;				errdetail: `must not contain '..'`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi dot dot file name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "..badFileName",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "downwardAPI.path",
0000000000000000000000000000000000000000;;				errdetail: `must not start with '..'`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi dot dot first level dirent",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "..badDirName/goodFileName",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "downwardAPI.path",
0000000000000000000000000000000000000000;;				errdetail: `must not start with '..'`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi fieldRef and ResourceFieldRef together",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							Items: []api.DownwardAPIVolumeFile{{
0000000000000000000000000000000000000000;;								Path: "test",
0000000000000000000000000000000000000000;;								FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;									APIVersion: "v1",
0000000000000000000000000000000000000000;;									FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								ResourceFieldRef: &api.ResourceFieldSelector{
0000000000000000000000000000000000000000;;									ContainerName: "test-container",
0000000000000000000000000000000000000000;;									Resource:      "requests.memory",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:   field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield:  "downwardAPI",
0000000000000000000000000000000000000000;;				errdetail: "fieldRef and resourceFieldRef can not be specified simultaneously",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi invalid positive defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(01000),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "downapi invalid negative defaultMode",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "downapi",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						DownwardAPI: &api.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;							DefaultMode: newInt32(-1),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "downwardAPI.defaultMode",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// FC
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid FC",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "fc",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						FC: &api.FCVolumeSource{
0000000000000000000000000000000000000000;;							TargetWWNs: []string{"some_wwn"},
0000000000000000000000000000000000000000;;							Lun:        newInt32(1),
0000000000000000000000000000000000000000;;							FSType:     "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "fc empty wwn",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "fc",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						FC: &api.FCVolumeSource{
0000000000000000000000000000000000000000;;							TargetWWNs: []string{},
0000000000000000000000000000000000000000;;							Lun:        newInt32(1),
0000000000000000000000000000000000000000;;							FSType:     "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "fc.targetWWNs",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "fc empty lun",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "fc",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						FC: &api.FCVolumeSource{
0000000000000000000000000000000000000000;;							TargetWWNs: []string{"wwn"},
0000000000000000000000000000000000000000;;							Lun:        nil,
0000000000000000000000000000000000000000;;							FSType:     "ext4",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "fc.lun",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// FlexVolume
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid FlexVolume",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "flex-volume",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						FlexVolume: &api.FlexVolumeSource{
0000000000000000000000000000000000000000;;							Driver: "kubernetes.io/blue",
0000000000000000000000000000000000000000;;							FSType: "ext4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// AzureFile
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid AzureFile",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-file",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureFile: &api.AzureFileVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "key",
0000000000000000000000000000000000000000;;							ShareName:  "share",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "AzureFile empty secret",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-file",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureFile: &api.AzureFileVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "",
0000000000000000000000000000000000000000;;							ShareName:  "share",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "azureFile.secretName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "AzureFile empty share",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-file",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureFile: &api.AzureFileVolumeSource{
0000000000000000000000000000000000000000;;							SecretName: "name",
0000000000000000000000000000000000000000;;							ShareName:  "",
0000000000000000000000000000000000000000;;							ReadOnly:   false,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "azureFile.shareName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Quobyte
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid Quobyte",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "quobyte",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;							Registry: "registry:7861",
0000000000000000000000000000000000000000;;							Volume:   "volume",
0000000000000000000000000000000000000000;;							ReadOnly: false,
0000000000000000000000000000000000000000;;							User:     "root",
0000000000000000000000000000000000000000;;							Group:    "root",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty registry quobyte",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "quobyte",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;							Volume: "/test",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "quobyte.registry",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "wrong format registry quobyte",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "quobyte",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;							Registry: "registry7861",
0000000000000000000000000000000000000000;;							Volume:   "/test",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "quobyte.registry",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "wrong format multiple registries quobyte",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "quobyte",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;							Registry: "registry:7861,reg2",
0000000000000000000000000000000000000000;;							Volume:   "/test",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				errfield: "quobyte.registry",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty volume quobyte",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "quobyte",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;							Registry: "registry:7861",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "quobyte.volume",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// AzureDisk
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid AzureDisk",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-disk",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureDisk: &api.AzureDiskVolumeSource{
0000000000000000000000000000000000000000;;							DiskName:    "foo",
0000000000000000000000000000000000000000;;							DataDiskURI: "https://blob/vhds/bar.vhd",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "AzureDisk empty disk name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-disk",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureDisk: &api.AzureDiskVolumeSource{
0000000000000000000000000000000000000000;;							DiskName:    "",
0000000000000000000000000000000000000000;;							DataDiskURI: "https://blob/vhds/bar.vhd",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "azureDisk.diskName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "AzureDisk empty disk uri",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "azure-disk",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						AzureDisk: &api.AzureDiskVolumeSource{
0000000000000000000000000000000000000000;;							DiskName:    "foo",
0000000000000000000000000000000000000000;;							DataDiskURI: "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "azureDisk.diskURI",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// ScaleIO
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid scaleio volume",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "scaleio-volume",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;							Gateway:    "http://abcd/efg",
0000000000000000000000000000000000000000;;							System:     "test-system",
0000000000000000000000000000000000000000;;							VolumeName: "test-vol-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ScaleIO with empty name",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "scaleio-volume",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;							Gateway:    "http://abcd/efg",
0000000000000000000000000000000000000000;;							System:     "test-system",
0000000000000000000000000000000000000000;;							VolumeName: "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "scaleIO.volumeName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ScaleIO with empty gateway",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "scaleio-volume",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;							Gateway:    "",
0000000000000000000000000000000000000000;;							System:     "test-system",
0000000000000000000000000000000000000000;;							VolumeName: "test-vol-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "scaleIO.gateway",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ScaleIO with empty system",
0000000000000000000000000000000000000000;;				vol: api.Volume{
0000000000000000000000000000000000000000;;					Name: "scaleio-volume",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;							Gateway:    "http://agc/efg/gateway",
0000000000000000000000000000000000000000;;							System:     "",
0000000000000000000000000000000000000000;;							VolumeName: "test-vol-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errtype:  field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				errfield: "scaleIO.system",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			names, errs := ValidateVolumes([]api.Volume{tc.vol}, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) > 0 && tc.errtype == "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] unexpected error(s): %v", i, tc.name, errs)
0000000000000000000000000000000000000000;;			} else if len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] expected 1 error, got %d: %v", i, tc.name, len(errs), errs)
0000000000000000000000000000000000000000;;			} else if len(errs) == 0 && tc.errtype != "" {
0000000000000000000000000000000000000000;;				t.Errorf("[%d: %q] expected error type %v", i, tc.name, tc.errtype)
0000000000000000000000000000000000000000;;			} else if len(errs) == 1 {
0000000000000000000000000000000000000000;;				if errs[0].Type != tc.errtype {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error type %v, got %v", i, tc.name, tc.errtype, errs[0].Type)
0000000000000000000000000000000000000000;;				} else if !strings.HasSuffix(errs[0].Field, "."+tc.errfield) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error on field %q, got %q", i, tc.name, tc.errfield, errs[0].Field)
0000000000000000000000000000000000000000;;				} else if !strings.Contains(errs[0].Detail, tc.errdetail) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] expected error detail %q, got %q", i, tc.name, tc.errdetail, errs[0].Detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if len(names) != 1 || !names.Has(tc.vol.Name) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d: %q] wrong names result: %v", i, tc.name, names)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dupsCase := []api.Volume{
0000000000000000000000000000000000000000;;			{Name: "abc", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;			{Name: "abc", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, errs := ValidateVolumes(dupsCase, field.NewPath("field"))
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected error")
0000000000000000000000000000000000000000;;		} else if len(errs) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 error, got %d: %v", len(errs), errs)
0000000000000000000000000000000000000000;;		} else if errs[0].Type != field.ErrorTypeDuplicate {
0000000000000000000000000000000000000000;;			t.Errorf("expected error type %v, got %v", field.ErrorTypeDuplicate, errs[0].Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAlphaLocalStorageCapacityIsolation(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []api.VolumeSource{
0000000000000000000000000000000000000000;;			{EmptyDir: &api.EmptyDirVolumeSource{SizeLimit: *resource.NewQuantity(int64(5), resource.BinarySI)}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Enable alpha feature LocalStorageCapacityIsolation
0000000000000000000000000000000000000000;;		err := utilfeature.DefaultFeatureGate.Set("LocalStorageCapacityIsolation=true")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to enable feature gate for LocalStorageCapacityIsolation: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if errs := validateVolumeSource(&tc, field.NewPath("spec")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Disable alpha feature LocalStorageCapacityIsolation
0000000000000000000000000000000000000000;;		err = utilfeature.DefaultFeatureGate.Set("LocalStorageCapacityIsolation=false")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to disable feature gate for LocalStorageCapacityIsolation: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if errs := validateVolumeSource(&tc, field.NewPath("spec")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		containerLimitCase := api.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceStorageOverlay: *resource.NewMilliQuantity(
0000000000000000000000000000000000000000;;					int64(40000),
0000000000000000000000000000000000000000;;					resource.BinarySI),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Enable alpha feature LocalStorageCapacityIsolation
0000000000000000000000000000000000000000;;		err = utilfeature.DefaultFeatureGate.Set("LocalStorageCapacityIsolation=true")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to enable feature gate for LocalStorageCapacityIsolation: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateResourceRequirements(&containerLimitCase, field.NewPath("resources")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Disable alpha feature LocalStorageCapacityIsolation
0000000000000000000000000000000000000000;;		err = utilfeature.DefaultFeatureGate.Set("LocalStorageCapacityIsolation=false")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to disable feature gate for LocalStorageCapacityIsolation: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateResourceRequirements(&containerLimitCase, field.NewPath("resources")); len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected failure: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePorts(t *testing.T) {
0000000000000000000000000000000000000000;;		successCase := []api.ContainerPort{
0000000000000000000000000000000000000000;;			{Name: "abc", ContainerPort: 80, HostPort: 80, Protocol: "TCP"},
0000000000000000000000000000000000000000;;			{Name: "easy", ContainerPort: 82, Protocol: "TCP"},
0000000000000000000000000000000000000000;;			{Name: "as", ContainerPort: 83, Protocol: "UDP"},
0000000000000000000000000000000000000000;;			{Name: "do-re-me", ContainerPort: 84, Protocol: "UDP"},
0000000000000000000000000000000000000000;;			{ContainerPort: 85, Protocol: "TCP"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validateContainerPorts(successCase, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonCanonicalCase := []api.ContainerPort{
0000000000000000000000000000000000000000;;			{ContainerPort: 80, Protocol: "TCP"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validateContainerPorts(nonCanonicalCase, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			P []api.ContainerPort
0000000000000000000000000000000000000000;;			T field.ErrorType
0000000000000000000000000000000000000000;;			F string
0000000000000000000000000000000000000000;;			D string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"name > 15 characters": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{Name: strings.Repeat("a", 16), ContainerPort: 80, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				"name", "15",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"name contains invalid characters": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{Name: "a.b.c", ContainerPort: 80, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				"name", "alpha-numeric",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"name is a number": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{Name: "80", ContainerPort: 80, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				"name", "at least one letter",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"name not unique": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{
0000000000000000000000000000000000000000;;					{Name: "abc", ContainerPort: 80, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "abc", ContainerPort: 81, Protocol: "TCP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field.ErrorTypeDuplicate,
0000000000000000000000000000000000000000;;				"[1].name", "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero container port": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{ContainerPort: 0, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				"containerPort", "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid container port": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{ContainerPort: 65536, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				"containerPort", "between",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid host port": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{ContainerPort: 80, HostPort: 65536, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeInvalid,
0000000000000000000000000000000000000000;;				"hostPort", "between",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid protocol case": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{ContainerPort: 80, Protocol: "tcp"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				"protocol", "supported values: TCP, UDP",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid protocol": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{ContainerPort: 80, Protocol: "ICMP"}},
0000000000000000000000000000000000000000;;				field.ErrorTypeNotSupported,
0000000000000000000000000000000000000000;;				"protocol", "supported values: TCP, UDP",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"protocol required": {
0000000000000000000000000000000000000000;;				[]api.ContainerPort{{Name: "abc", ContainerPort: 80}},
0000000000000000000000000000000000000000;;				field.ErrorTypeRequired,
0000000000000000000000000000000000000000;;				"protocol", "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := validateContainerPorts(v.P, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if errs[i].Type != v.T {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error to have type %q: %q", k, v.T, errs[i].Type)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(errs[i].Field, v.F) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error field %q: %q", k, v.F, errs[i].Field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(errs[i].Detail, v.D) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error detail %q, got %q", k, v.D, errs[i].Detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		successCase := []api.EnvVar{
0000000000000000000000000000000000000000;;			{Name: "abc", Value: "value"},
0000000000000000000000000000000000000000;;			{Name: "ABC", Value: "value"},
0000000000000000000000000000000000000000;;			{Name: "AbC_123", Value: "value"},
0000000000000000000000000000000000000000;;			{Name: "abc", Value: ""},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "metadata.namespace",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "metadata.uid",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "spec.nodeName",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "spec.serviceAccountName",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "status.hostIP",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "abc",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;						APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						FieldPath:  "status.podIP",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "secret_value",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					SecretKeyRef: &api.SecretKeySelector{
0000000000000000000000000000000000000000;;						LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-secret",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Key: "secret-key",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "ENV_VAR_1",
0000000000000000000000000000000000000000;;				ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;					ConfigMapKeyRef: &api.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;						LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-config-map",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Key: "some-key",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateEnv(successCase, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			envs          []api.EnvVar
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "zero-length name",
0000000000000000000000000000000000000000;;				envs:          []api.EnvVar{{Name: ""}},
0000000000000000000000000000000000000000;;				expectedError: "[0].name: Required value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "name not a C identifier",
0000000000000000000000000000000000000000;;				envs:          []api.EnvVar{{Name: "a.b.c"}},
0000000000000000000000000000000000000000;;				expectedError: `[0].name: Invalid value: "a.b.c": ` + idErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "value and valueFrom specified",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name:  "abc",
0000000000000000000000000000000000000000;;					Value: "foo",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: "[0].valueFrom: Invalid value: \"\": may not be specified when `value` is not empty",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom without a source",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: "[0].valueFrom: Invalid value: \"\": must specify one of: `fieldRef`, `resourceFieldRef`, `configMapKeyRef` or `secretKeyRef`",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom.fieldRef and valueFrom.secretKeyRef specified",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretKeyRef: &api.SecretKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "a-secret",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "a-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: "[0].valueFrom: Invalid value: \"\": may not have more than one field specified at a time",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom.fieldRef and valueFrom.configMapKeyRef set",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "some_var_name",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ConfigMapKeyRef: &api.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "some-config-map",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "some-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom: Invalid value: "": may not have more than one field specified at a time`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom.fieldRef and valueFrom.secretKeyRef specified",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretKeyRef: &api.SecretKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "a-secret",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "a-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ConfigMapKeyRef: &api.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "some-config-map",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "some-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom: Invalid value: "": may not have more than one field specified at a time`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom.secretKeyRef.name invalid",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						SecretKeyRef: &api.SecretKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "$%^&*#",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "a-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valueFrom.configMapKeyRef.name invalid",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						ConfigMapKeyRef: &api.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "$%^&*#",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Key: "some-key",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing FieldPath on ObjectFieldSelector",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom.fieldRef.fieldPath: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing APIVersion on ObjectFieldSelector",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							FieldPath: "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom.fieldRef.apiVersion: Required value`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid fieldPath",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.whoops",
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom.fieldRef.fieldPath: Invalid value: "metadata.whoops": error converting fieldPath`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid fieldPath labels",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "labels",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom.fieldRef.fieldPath: Unsupported value: "metadata.labels": supported values: metadata.name, metadata.namespace, metadata.uid, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid fieldPath annotations",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.annotations",
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `[0].valueFrom.fieldRef.fieldPath: Unsupported value: "metadata.annotations": supported values: metadata.name, metadata.namespace, metadata.uid, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "unsupported fieldPath",
0000000000000000000000000000000000000000;;				envs: []api.EnvVar{{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					ValueFrom: &api.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &api.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							FieldPath:  "status.phase",
0000000000000000000000000000000000000000;;							APIVersion: api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				expectedError: `valueFrom.fieldRef.fieldPath: Unsupported value: "status.phase": supported values: metadata.name, metadata.namespace, metadata.uid, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateEnv(tc.envs, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", tc.name)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for i := range errs {
0000000000000000000000000000000000000000;;					str := errs[i].Error()
0000000000000000000000000000000000000000;;					if str != "" && !strings.Contains(str, tc.expectedError) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error detail either empty or %q, got %q", tc.name, tc.expectedError, str)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEnvFrom(t *testing.T) {
0000000000000000000000000000000000000000;;		successCase := []api.EnvFromSource{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;					LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Prefix: "pre_",
0000000000000000000000000000000000000000;;				ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;					LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;					LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Prefix: "pre_",
0000000000000000000000000000000000000000;;				SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;					LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateEnvFrom(successCase, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			envs          []api.EnvFromSource
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "zero-length name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: ""}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].configMapRef.name: Required value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "$"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].configMapRef.name: Invalid value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid prefix",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "a.b",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `field[0].prefix: Invalid value: "a.b": ` + idErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "zero-length name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: ""}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].secretRef.name: Required value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "&"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].secretRef.name: Invalid value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid prefix",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "a.b",
0000000000000000000000000000000000000000;;						SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `field[0].prefix: Invalid value: "a.b": ` + idErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no refs",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field: Invalid value: \"\": must specify one of: `configMapRef` or `secretRef`",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "multiple refs",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"}},
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field: Invalid value: \"\": may not have more than one field specified at a time",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid secret ref name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						SecretRef: &api.SecretEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "$%^&*#"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].secretRef.name: Invalid value: \"$%^&*#\": " + dnsSubdomainLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid config ref name",
0000000000000000000000000000000000000000;;				envs: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "$%^&*#"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "field[0].configMapRef.name: Invalid value: \"$%^&*#\": " + dnsSubdomainLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateEnvFrom(tc.envs, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", tc.name)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for i := range errs {
0000000000000000000000000000000000000000;;					str := errs[i].Error()
0000000000000000000000000000000000000000;;					if str != "" && !strings.Contains(str, tc.expectedError) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error detail either empty or %q, got %q", tc.name, tc.expectedError, str)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateVolumeMounts(t *testing.T) {
0000000000000000000000000000000000000000;;		volumes := sets.NewString("abc", "123", "abc-123")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCase := []api.VolumeMount{
0000000000000000000000000000000000000000;;			{Name: "abc", MountPath: "/foo"},
0000000000000000000000000000000000000000;;			{Name: "123", MountPath: "/bar"},
0000000000000000000000000000000000000000;;			{Name: "abc-123", MountPath: "/baz"},
0000000000000000000000000000000000000000;;			{Name: "abc-123", MountPath: "/baa", SubPath: ""},
0000000000000000000000000000000000000000;;			{Name: "abc-123", MountPath: "/bab", SubPath: "baz"},
0000000000000000000000000000000000000000;;			{Name: "abc-123", MountPath: "/bac", SubPath: ".baz"},
0000000000000000000000000000000000000000;;			{Name: "abc-123", MountPath: "/bad", SubPath: "..baz"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateVolumeMounts(successCase, volumes, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string][]api.VolumeMount{
0000000000000000000000000000000000000000;;			"empty name":          {{Name: "", MountPath: "/foo"}},
0000000000000000000000000000000000000000;;			"name not found":      {{Name: "", MountPath: "/foo"}},
0000000000000000000000000000000000000000;;			"empty mountpath":     {{Name: "abc", MountPath: ""}},
0000000000000000000000000000000000000000;;			"relative mountpath":  {{Name: "abc", MountPath: "bar"}},
0000000000000000000000000000000000000000;;			"mountpath collision": {{Name: "foo", MountPath: "/path/a"}, {Name: "bar", MountPath: "/path/a"}},
0000000000000000000000000000000000000000;;			"absolute subpath":    {{Name: "abc", MountPath: "/bar", SubPath: "/baz"}},
0000000000000000000000000000000000000000;;			"subpath in ..":       {{Name: "abc", MountPath: "/bar", SubPath: "../baz"}},
0000000000000000000000000000000000000000;;			"subpath contains ..": {{Name: "abc", MountPath: "/bar", SubPath: "baz/../bat"}},
0000000000000000000000000000000000000000;;			"subpath ends in ..":  {{Name: "abc", MountPath: "/bar", SubPath: "./.."}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateVolumeMounts(v, volumes, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateProbe(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := api.Handler{Exec: &api.ExecAction{Command: []string{"echo"}}}
0000000000000000000000000000000000000000;;		// These fields must be positive.
0000000000000000000000000000000000000000;;		positiveFields := [...]string{"InitialDelaySeconds", "TimeoutSeconds", "PeriodSeconds", "SuccessThreshold", "FailureThreshold"}
0000000000000000000000000000000000000000;;		successCases := []*api.Probe{nil}
0000000000000000000000000000000000000000;;		for _, field := range positiveFields {
0000000000000000000000000000000000000000;;			probe := &api.Probe{Handler: handler}
0000000000000000000000000000000000000000;;			reflect.ValueOf(probe).Elem().FieldByName(field).SetInt(10)
0000000000000000000000000000000000000000;;			successCases = append(successCases, probe)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, p := range successCases {
0000000000000000000000000000000000000000;;			if errs := validateProbe(p, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []*api.Probe{{TimeoutSeconds: 10, InitialDelaySeconds: 10}}
0000000000000000000000000000000000000000;;		for _, field := range positiveFields {
0000000000000000000000000000000000000000;;			probe := &api.Probe{Handler: handler}
0000000000000000000000000000000000000000;;			reflect.ValueOf(probe).Elem().FieldByName(field).SetInt(-10)
0000000000000000000000000000000000000000;;			errorCases = append(errorCases, probe)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, p := range errorCases {
0000000000000000000000000000000000000000;;			if errs := validateProbe(p, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %v", p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []api.Handler{
0000000000000000000000000000000000000000;;			{Exec: &api.ExecAction{Command: []string{"echo"}}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromInt(1), Host: "", Scheme: "HTTP"}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/foo", Port: intstr.FromInt(65535), Host: "host", Scheme: "HTTP"}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromString("port"), Host: "", Scheme: "HTTP"}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromString("port"), Host: "", Scheme: "HTTP", HTTPHeaders: []api.HTTPHeader{{Name: "Host", Value: "foo.example.com"}}}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromString("port"), Host: "", Scheme: "HTTP", HTTPHeaders: []api.HTTPHeader{{Name: "X-Forwarded-For", Value: "1.2.3.4"}, {Name: "X-Forwarded-For", Value: "5.6.7.8"}}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, h := range successCases {
0000000000000000000000000000000000000000;;			if errs := validateHandler(&h, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []api.Handler{
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			{Exec: &api.ExecAction{Command: []string{}}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "", Port: intstr.FromInt(0), Host: ""}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/foo", Port: intstr.FromInt(65536), Host: "host"}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "", Port: intstr.FromString(""), Host: ""}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromString("port"), Host: "", Scheme: "HTTP", HTTPHeaders: []api.HTTPHeader{{Name: "Host:", Value: "foo.example.com"}}}},
0000000000000000000000000000000000000000;;			{HTTPGet: &api.HTTPGetAction{Path: "/", Port: intstr.FromString("port"), Host: "", Scheme: "HTTP", HTTPHeaders: []api.HTTPHeader{{Name: "X_Forwarded_For", Value: "foo.example.com"}}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, h := range errorCases {
0000000000000000000000000000000000000000;;			if errs := validateHandler(&h, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %#v", h)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePullPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		type T struct {
0000000000000000000000000000000000000000;;			Container      api.Container
0000000000000000000000000000000000000000;;			ExpectedPolicy api.PullPolicy
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testCases := map[string]T{
0000000000000000000000000000000000000000;;			"NotPresent1": {
0000000000000000000000000000000000000000;;				api.Container{Name: "abc", Image: "image:latest", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;				api.PullIfNotPresent,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"NotPresent2": {
0000000000000000000000000000000000000000;;				api.Container{Name: "abc1", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;				api.PullIfNotPresent,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Always1": {
0000000000000000000000000000000000000000;;				api.Container{Name: "123", Image: "image:latest", ImagePullPolicy: "Always"},
0000000000000000000000000000000000000000;;				api.PullAlways,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Always2": {
0000000000000000000000000000000000000000;;				api.Container{Name: "1234", Image: "image", ImagePullPolicy: "Always"},
0000000000000000000000000000000000000000;;				api.PullAlways,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Never1": {
0000000000000000000000000000000000000000;;				api.Container{Name: "abc-123", Image: "image:latest", ImagePullPolicy: "Never"},
0000000000000000000000000000000000000000;;				api.PullNever,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Never2": {
0000000000000000000000000000000000000000;;				api.Container{Name: "abc-1234", Image: "image", ImagePullPolicy: "Never"},
0000000000000000000000000000000000000000;;				api.PullNever,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range testCases {
0000000000000000000000000000000000000000;;			ctr := &v.Container
0000000000000000000000000000000000000000;;			errs := validatePullPolicy(ctr.ImagePullPolicy, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%s] expected success, got %#v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ctr.ImagePullPolicy != v.ExpectedPolicy {
0000000000000000000000000000000000000000;;				t.Errorf("case[%s] expected policy %v, got %v", k, v.ExpectedPolicy, ctr.ImagePullPolicy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceLimits(cpu, memory string) api.ResourceList {
0000000000000000000000000000000000000000;;		res := api.ResourceList{}
0000000000000000000000000000000000000000;;		res[api.ResourceCPU] = resource.MustParse(cpu)
0000000000000000000000000000000000000000;;		res[api.ResourceMemory] = resource.MustParse(memory)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateContainers(t *testing.T) {
0000000000000000000000000000000000000000;;		volumes := sets.String{}
0000000000000000000000000000000000000000;;		capabilities.SetForTests(capabilities.Capabilities{
0000000000000000000000000000000000000000;;			AllowPrivileged: true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCase := []api.Container{
0000000000000000000000000000000000000000;;			{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			// backwards compatibility to ensure containers in pod template spec do not check for this
0000000000000000000000000000000000000000;;			{Name: "def", Image: " ", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			{Name: "ghi", Image: " some  ", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			{Name: "123", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			{Name: "abc-123", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "life-123",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;					PreStop: &api.Handler{
0000000000000000000000000000000000000000;;						Exec: &api.ExecAction{Command: []string{"ls", "-l"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-test",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName("my.org/resource"):  resource.MustParse("10m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-test-with-gpu-with-request",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory):    resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceNvidiaGPU): resource.MustParse("1"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory):    resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceNvidiaGPU): resource.MustParse("1"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-test-with-gpu-without-request",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory):    resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceNvidiaGPU): resource.MustParse("1"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-request-limit-simple",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU): resource.MustParse("8"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU): resource.MustParse("10"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-request-limit-edge",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName("my.org/resource"):  resource.MustParse("10m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName("my.org/resource"):  resource.MustParse("10m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-request-limit-partials",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("9.5"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):   resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName("my.org/resource"): resource.MustParse("10m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "resources-request",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("9.5"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "same-host-port-different-protocol",
0000000000000000000000000000000000000000;;				Image: "image",
0000000000000000000000000000000000000000;;				Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;					{ContainerPort: 80, HostPort: 80, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{ContainerPort: 80, HostPort: 80, Protocol: "UDP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:                     "fallback-to-logs-termination-message",
0000000000000000000000000000000000000000;;				Image:                    "image",
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "FallbackToLogsOnError",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:                     "file-termination-message",
0000000000000000000000000000000000000000;;				Image:                    "image",
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:                     "env-from-source",
0000000000000000000000000000000000000000;;				Image:                    "image",
0000000000000000000000000000000000000000;;				ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;								Name: "test",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{Name: "abc-1234", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File", SecurityContext: fakeValidSecurityContext(true)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validateContainers(successCase, volumes, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capabilities.SetForTests(capabilities.Capabilities{
0000000000000000000000000000000000000000;;			AllowPrivileged: false,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		errorCases := map[string][]api.Container{
0000000000000000000000000000000000000000;;			"zero-length name":     {{Name: "", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			"zero-length-image":    {{Name: "abc", Image: "", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			"name > 63 characters": {{Name: strings.Repeat("a", 64), Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			"name not a DNS label": {{Name: "a.b.c", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			"name not unique": {
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length image": {{Name: "abc", Image: "", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			"host port not unique": {
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", Ports: []api.ContainerPort{{ContainerPort: 80, HostPort: 80, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;				{Name: "def", Image: "image", Ports: []api.ContainerPort{{ContainerPort: 81, HostPort: 80, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid env var name": {
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", Env: []api.EnvVar{{Name: "ev.1"}}, ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unknown volume name": {
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", VolumeMounts: []api.VolumeMount{{Name: "anything", MountPath: "/foo"}},
0000000000000000000000000000000000000000;;					ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid lifecycle, no exec command.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;						PreStop: &api.Handler{
0000000000000000000000000000000000000000;;							Exec: &api.ExecAction{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid lifecycle, no http path.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;						PreStop: &api.Handler{
0000000000000000000000000000000000000000;;							HTTPGet: &api.HTTPGetAction{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid lifecycle, no tcp socket port.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;						PreStop: &api.Handler{
0000000000000000000000000000000000000000;;							TCPSocket: &api.TCPSocketAction{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid lifecycle, zero tcp socket port.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;						PreStop: &api.Handler{
0000000000000000000000000000000000000000;;							TCPSocket: &api.TCPSocketAction{
0000000000000000000000000000000000000000;;								Port: intstr.FromInt(0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid lifecycle, no action.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Lifecycle: &api.Lifecycle{
0000000000000000000000000000000000000000;;						PreStop: &api.Handler{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid liveness probe, no tcp socket port.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					LivenessProbe: &api.Probe{
0000000000000000000000000000000000000000;;						Handler: api.Handler{
0000000000000000000000000000000000000000;;							TCPSocket: &api.TCPSocketAction{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid liveness probe, no action.": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "life-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					LivenessProbe: &api.Probe{
0000000000000000000000000000000000000000;;						Handler: api.Handler{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid message termination policy": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:                     "life-123",
0000000000000000000000000000000000000000;;					Image:                    "image",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "Unknown",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty message termination policy": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:                     "life-123",
0000000000000000000000000000000000000000;;					Image:                    "image",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"privilege disabled": {
0000000000000000000000000000000000000000;;				{Name: "abc", Image: "image", SecurityContext: fakeValidSecurityContext(true)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid compute resource": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits: api.ResourceList{
0000000000000000000000000000000000000000;;							"disk": resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Resource CPU invalid": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits: getResourceLimits("-10", "0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Resource Requests CPU invalid": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: getResourceLimits("-10", "0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Resource Memory invalid": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits: getResourceLimits("0", "-10"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Resource GPU limit must match request": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "gpu-resource-request-limit",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceCPU):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceMemory):    resource.MustParse("10G"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceNvidiaGPU): resource.MustParse("0"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Limits: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceCPU):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceMemory):    resource.MustParse("10G"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceNvidiaGPU): resource.MustParse("1"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Request limit simple invalid": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits:   getResourceLimits("5", "3"),
0000000000000000000000000000000000000000;;						Requests: getResourceLimits("6", "3"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Request limit multiple invalid": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "abc-123",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits:   getResourceLimits("5", "3"),
0000000000000000000000000000000000000000;;						Requests: getResourceLimits("6", "4"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Invalid env from": {
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:                     "env-from-source",
0000000000000000000000000000000000000000;;					Image:                    "image",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          "IfNotPresent",
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;					EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;								LocalObjectReference: api.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: "$%^&*#",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := validateContainers(v, volumes, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateRestartPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []api.RestartPolicy{
0000000000000000000000000000000000000000;;			api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;			api.RestartPolicyNever,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, policy := range successCases {
0000000000000000000000000000000000000000;;			if errs := validateRestartPolicy(&policy, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []api.RestartPolicy{"", "newpolicy"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, policy := range errorCases {
0000000000000000000000000000000000000000;;			if errs := validateRestartPolicy(&policy, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %d", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDNSPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []api.DNSPolicy{api.DNSClusterFirst, api.DNSDefault, api.DNSPolicy(api.DNSClusterFirst)}
0000000000000000000000000000000000000000;;		for _, policy := range successCases {
0000000000000000000000000000000000000000;;			if errs := validateDNSPolicy(&policy, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []api.DNSPolicy{api.DNSPolicy("invalid")}
0000000000000000000000000000000000000000;;		for _, policy := range errorCases {
0000000000000000000000000000000000000000;;			if errs := validateDNSPolicy(&policy, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %v", policy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		activeDeadlineSeconds := int64(30)
0000000000000000000000000000000000000000;;		activeDeadlineSecondsMax := int64(math.MaxInt32)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		minUserID := int64(0)
0000000000000000000000000000000000000000;;		maxUserID := int64(2147483647)
0000000000000000000000000000000000000000;;		minGroupID := int64(0)
0000000000000000000000000000000000000000;;		maxGroupID := int64(2147483647)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		priorityEnabled := utilfeature.DefaultFeatureGate.Enabled("PodPriority")
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			// restoring the old value
0000000000000000000000000000000000000000;;			if priorityEnabled {
0000000000000000000000000000000000000000;;				err = utilfeature.DefaultFeatureGate.Set("PodPriority=true")
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = utilfeature.DefaultFeatureGate.Set("PodPriority=false")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to restore feature gate for PodPriority: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		err := utilfeature.DefaultFeatureGate.Set("PodPriority=true")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to enable feature gate for PodPriority: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []api.PodSpec{
0000000000000000000000000000000000000000;;			{ // Populate basic fields, leave defaults for most.
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate all fields.
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers:     []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				InitContainers: []api.Container{{Name: "ictr", Image: "iimage", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:  api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				NodeName:              "foobar",
0000000000000000000000000000000000000000;;				DNSPolicy:             api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				ActiveDeadlineSeconds: &activeDeadlineSeconds,
0000000000000000000000000000000000000000;;				ServiceAccountName:    "acct",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate all fields with larger active deadline.
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers:     []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				InitContainers: []api.Container{{Name: "ictr", Image: "iimage", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:  api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				NodeName:              "foobar",
0000000000000000000000000000000000000000;;				DNSPolicy:             api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				ActiveDeadlineSeconds: &activeDeadlineSecondsMax,
0000000000000000000000000000000000000000;;				ServiceAccountName:    "acct",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate HostNetwork.
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;						Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;							{HostPort: 8080, ContainerPort: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate RunAsUser SupplementalGroups FSGroup with minID 0
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{minGroupID},
0000000000000000000000000000000000000000;;					RunAsUser:          &minUserID,
0000000000000000000000000000000000000000;;					FSGroup:            &minGroupID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate RunAsUser SupplementalGroups FSGroup with maxID 2147483647
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{maxGroupID},
0000000000000000000000000000000000000000;;					RunAsUser:          &maxUserID,
0000000000000000000000000000000000000000;;					FSGroup:            &maxGroupID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate HostIPC.
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostIPC: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate HostPID.
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostPID: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate Affinity.
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate HostAliases.
0000000000000000000000000000000000000000;;				HostAliases:   []api.HostAlias{{IP: "12.34.56.78", Hostnames: []string{"host1", "host2"}}},
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate HostAliases with `foo.bar` hostnames .
0000000000000000000000000000000000000000;;				HostAliases:   []api.HostAlias{{IP: "12.34.56.78", Hostnames: []string{"host1.foo", "host2.bar"}}},
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Populate PriorityClassName.
0000000000000000000000000000000000000000;;				Volumes:           []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:        []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:     api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:         api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				PriorityClassName: "valid-name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePodSpec(&successCases[i], field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		activeDeadlineSeconds = int64(0)
0000000000000000000000000000000000000000;;		activeDeadlineSecondsTooLarge := int64(math.MaxInt32 + 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		minUserID = int64(-1)
0000000000000000000000000000000000000000;;		maxUserID = int64(2147483648)
0000000000000000000000000000000000000000;;		minGroupID = int64(-1)
0000000000000000000000000000000000000000;;		maxGroupID = int64(2147483648)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		failureCases := map[string]api.PodSpec{
0000000000000000000000000000000000000000;;			"bad volume": {
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no containers": {
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad container": {
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad init container": {
0000000000000000000000000000000000000000;;				Containers:     []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				InitContainers: []api.Container{{}},
0000000000000000000000000000000000000000;;				RestartPolicy:  api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:      api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad DNS policy": {
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSPolicy("invalid"),
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad service account name": {
0000000000000000000000000000000000000000;;				Containers:         []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:      api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:          api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				ServiceAccountName: "invalidName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad restart policy": {
0000000000000000000000000000000000000000;;				RestartPolicy: "UnknowPolicy",
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with hostNetwork hostPort not equal to containerPort": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;						{HostPort: 8080, ContainerPort: 2600, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with hostNetwork and hostAliases": {
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				HostAliases: []api.HostAlias{{IP: "12.34.56.78", Hostnames: []string{"host1", "host2"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with hostAliases with invalid IP": {
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				HostAliases: []api.HostAlias{{IP: "999.999.999.999", Hostnames: []string{"host1", "host2"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with hostAliases with invalid hostname": {
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				HostAliases: []api.HostAlias{{IP: "12.34.56.78", Hostnames: []string{"@#$^#@#$"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad supplementalGroups large than math.MaxInt32": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork:        false,
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{maxGroupID, 1234},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad supplementalGroups less than 0": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork:        false,
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{minGroupID, 1234},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad runAsUser large than math.MaxInt32": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;					RunAsUser:   &maxUserID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad runAsUser less than 0": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;					RunAsUser:   &minUserID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad fsGroup large than math.MaxInt32": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;					FSGroup:     &maxGroupID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad fsGroup less than 0": {
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{
0000000000000000000000000000000000000000;;					HostNetwork: false,
0000000000000000000000000000000000000000;;					FSGroup:     &minGroupID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-active-deadline-seconds": {
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				NodeName:              "foobar",
0000000000000000000000000000000000000000;;				DNSPolicy:             api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				ActiveDeadlineSeconds: &activeDeadlineSeconds,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"active-deadline-seconds-too-large": {
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				NodeName:              "foobar",
0000000000000000000000000000000000000000;;				DNSPolicy:             api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				ActiveDeadlineSeconds: &activeDeadlineSecondsTooLarge,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad nodeName": {
0000000000000000000000000000000000000000;;				NodeName:      "node name",
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad PriorityClassName": {
0000000000000000000000000000000000000000;;				Volumes:           []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:        []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:     api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:         api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				PriorityClassName: "InvalidName",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range failureCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePodSpec(&v, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %q", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = utilfeature.DefaultFeatureGate.Set("PodPriority=false")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to disable feature gate for PodPriority: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		priority := int32(100)
0000000000000000000000000000000000000000;;		featuregatedCases := map[string]api.PodSpec{
0000000000000000000000000000000000000000;;			"set PriorityClassName": {
0000000000000000000000000000000000000000;;				Volumes:           []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:        []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy:     api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:         api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				PriorityClassName: "valid-name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"set Priority": {
0000000000000000000000000000000000000000;;				Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Priority:      &priority,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range featuregatedCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePodSpec(&v, field.NewPath("field")); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure due to gated feature: %q", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func extendPodSpecwithTolerations(in api.PodSpec, tolerations []api.Toleration) api.PodSpec {
0000000000000000000000000000000000000000;;		var out api.PodSpec
0000000000000000000000000000000000000000;;		out.Containers = in.Containers
0000000000000000000000000000000000000000;;		out.RestartPolicy = in.RestartPolicy
0000000000000000000000000000000000000000;;		out.DNSPolicy = in.DNSPolicy
0000000000000000000000000000000000000000;;		out.Tolerations = tolerations
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePod(t *testing.T) {
0000000000000000000000000000000000000000;;		validPodSpec := func(affinity *api.Affinity) api.PodSpec {
0000000000000000000000000000000000000000;;			spec := api.PodSpec{
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if affinity != nil {
0000000000000000000000000000000000000000;;				spec.Affinity = affinity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return spec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := []api.Pod{
0000000000000000000000000000000000000000;;			{ // Basic fields.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Just about everything.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc.123.do-re-mi", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Volumes: []api.Volume{
0000000000000000000000000000000000000000;;						{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						"key": "value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					NodeName: "foobar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Serialized node affinity requirements.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(
0000000000000000000000000000000000000000;;					// TODO: Uncomment and move this block and move inside NodeAffinity once
0000000000000000000000000000000000000000;;					// RequiredDuringSchedulingRequiredDuringExecution is implemented
0000000000000000000000000000000000000000;;					//		RequiredDuringSchedulingRequiredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;					//			NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;					//				{
0000000000000000000000000000000000000000;;					//					MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;					//						{
0000000000000000000000000000000000000000;;					//							Key: "key1",
0000000000000000000000000000000000000000;;					//							Operator: api.NodeSelectorOpExists
0000000000000000000000000000000000000000;;					//						},
0000000000000000000000000000000000000000;;					//					},
0000000000000000000000000000000000000000;;					//				},
0000000000000000000000000000000000000000;;					//			},
0000000000000000000000000000000000000000;;					//		},
0000000000000000000000000000000000000000;;					&api.Affinity{
0000000000000000000000000000000000000000;;						NodeAffinity: &api.NodeAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;								NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.PreferredSchedulingTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 10,
0000000000000000000000000000000000000000;;									Preference: api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;										MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "foo",
0000000000000000000000000000000000000000;;												Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"bar"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Serialized pod affinity in affinity requirements in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					// TODO: Uncomment and move this block into Annotations map once
0000000000000000000000000000000000000000;;					// RequiredDuringSchedulingRequiredDuringExecution is implemented
0000000000000000000000000000000000000000;;					//		"requiredDuringSchedulingRequiredDuringExecution": [{
0000000000000000000000000000000000000000;;					//			"labelSelector": {
0000000000000000000000000000000000000000;;					//				"matchExpressions": [{
0000000000000000000000000000000000000000;;					//					"key": "key2",
0000000000000000000000000000000000000000;;					//					"operator": "In",
0000000000000000000000000000000000000000;;					//					"values": ["value1", "value2"]
0000000000000000000000000000000000000000;;					//				}]
0000000000000000000000000000000000000000;;					//			},
0000000000000000000000000000000000000000;;					//			"namespaces":["ns"],
0000000000000000000000000000000000000000;;					//			"topologyKey": "zone"
0000000000000000000000000000000000000000;;					//		}]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;					PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "key2",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: "zone",
0000000000000000000000000000000000000000;;								Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 10,
0000000000000000000000000000000000000000;;								PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpNotIn,
0000000000000000000000000000000000000000;;												Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;									TopologyKey: "region",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // Serialized pod anti affinity with different Label Operators in affinity requirements in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					// TODO: Uncomment and move this block into Annotations map once
0000000000000000000000000000000000000000;;					// RequiredDuringSchedulingRequiredDuringExecution is implemented
0000000000000000000000000000000000000000;;					//		"requiredDuringSchedulingRequiredDuringExecution": [{
0000000000000000000000000000000000000000;;					//			"labelSelector": {
0000000000000000000000000000000000000000;;					//				"matchExpressions": [{
0000000000000000000000000000000000000000;;					//					"key": "key2",
0000000000000000000000000000000000000000;;					//					"operator": "In",
0000000000000000000000000000000000000000;;					//					"values": ["value1", "value2"]
0000000000000000000000000000000000000000;;					//				}]
0000000000000000000000000000000000000000;;					//			},
0000000000000000000000000000000000000000;;					//			"namespaces":["ns"],
0000000000000000000000000000000000000000;;					//			"topologyKey": "zone"
0000000000000000000000000000000000000000;;					//		}]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "key2",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpExists,
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: "zone",
0000000000000000000000000000000000000000;;								Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 10,
0000000000000000000000000000000000000000;;								PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpDoesNotExist,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;									TopologyKey: "region",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // populate forgiveness tolerations with exists operator in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "Exists", Value: "", Effect: "NoExecute", TolerationSeconds: &[]int64{60}[0]}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // populate forgiveness tolerations with equal operator in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "Equal", Value: "bar", Effect: "NoExecute", TolerationSeconds: &[]int64{60}[0]}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // populate tolerations equal operator in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "Equal", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // populate tolerations exists operator in annotations.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // empty key with Exists operator is OK for toleration, empty toleration key means match all taint keys.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Operator: "Exists", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // empty operator is OK for toleration, defaults to Equal.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // empty effect is OK for toleration, empty toleration effect means match all taint effects.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "Equal", Value: "bar"}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // negative tolerationSeconds is OK for toleration.
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "pod-forgiveness-invalid",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "node.alpha.kubernetes.io/notReady", Operator: "Exists", Effect: "NoExecute", TolerationSeconds: &[]int64{-2}[0]}}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // docker default seccomp profile
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.SeccompPodAnnotationKey: "docker/default",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // unconfined seccomp profile
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.SeccompPodAnnotationKey: "unconfined",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // localhost seccomp profile
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.SeccompPodAnnotationKey: "localhost/foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // localhost seccomp profile for a container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.SeccompContainerAnnotationKeyPrefix + "foo": "localhost/foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // default AppArmor profile for a container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						apparmor.ContainerAnnotationKeyPrefix + "ctr": apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // default AppArmor profile for an init container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						apparmor.ContainerAnnotationKeyPrefix + "init-ctr": apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					InitContainers: []api.Container{{Name: "init-ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					Containers:     []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					RestartPolicy:  api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:      api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // localhost AppArmor profile for a container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						apparmor.ContainerAnnotationKeyPrefix + "ctr": apparmor.ProfileNamePrefix + "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // syntactically valid sysctls
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "123",
0000000000000000000000000000000000000000;;					Namespace: "ns",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.SysctlsPodAnnotationKey:       "kernel.shmmni=32768,kernel.shmmax=1000000000",
0000000000000000000000000000000000000000;;						api.UnsafeSysctlsPodAnnotationKey: "knet.ipv4.route.min_pmtu=1000",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // valid opaque integer resources for init container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "valid-opaque-int", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					InitContainers: []api.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:            "valid-opaque-int",
0000000000000000000000000000000000000000;;							Image:           "image",
0000000000000000000000000000000000000000;;							ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{
0000000000000000000000000000000000000000;;									helper.OpaqueIntResourceName("A"): resource.MustParse("10"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Limits: api.ResourceList{
0000000000000000000000000000000000000000;;									helper.OpaqueIntResourceName("A"): resource.MustParse("20"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // valid opaque integer resources for regular container
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "valid-opaque-int", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					InitContainers: []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					Containers: []api.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:            "valid-opaque-int",
0000000000000000000000000000000000000000;;							Image:           "image",
0000000000000000000000000000000000000000;;							ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{
0000000000000000000000000000000000000000;;									helper.OpaqueIntResourceName("A"): resource.MustParse("10"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Limits: api.ResourceList{
0000000000000000000000000000000000000000;;									helper.OpaqueIntResourceName("A"): resource.MustParse("20"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							TerminationMessagePolicy: "File",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, pod := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePod(&pod); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			spec          api.Pod
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"bad name": {
0000000000000000000000000000000000000000;;				expectedError: "metadata.name",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"image whitespace": {
0000000000000000000000000000000000000000;;				expectedError: "spec.containers[0].image",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: " ", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"image leading and trailing whitespace": {
0000000000000000000000000000000000000000;;				expectedError: "spec.containers[0].image",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: " something ", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad namespace": {
0000000000000000000000000000000000000000;;				expectedError: "metadata.namespace",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: ""},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad spec": {
0000000000000000000000000000000000000000;;				expectedError: "spec.containers[0].name",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{{}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad label": {
0000000000000000000000000000000000000000;;				expectedError: "NoUppercaseOrSpecialCharsLike=Equals",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "abc",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid node selector requirement in node affinity, operator can't be null": {
0000000000000000000000000000000000000000;;				expectedError: "spec.affinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].operator",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						NodeAffinity: &api.NodeAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;								NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key: "key1",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid preferredSchedulingTerm in node affinity, weight should be in range 1-100": {
0000000000000000000000000000000000000000;;				expectedError: "must be in the range 1-100",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						NodeAffinity: &api.NodeAffinity{
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.PreferredSchedulingTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 199,
0000000000000000000000000000000000000000;;									Preference: api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;										MatchExpressions: []api.NodeSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "foo",
0000000000000000000000000000000000000000;;												Operator: api.NodeSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"bar"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid requiredDuringSchedulingIgnoredDuringExecution node selector, nodeSelectorTerms must have at least one term": {
0000000000000000000000000000000000000000;;				expectedError: "spec.affinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						NodeAffinity: &api.NodeAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;								NodeSelectorTerms: []api.NodeSelectorTerm{},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid requiredDuringSchedulingIgnoredDuringExecution node selector term, matchExpressions must have at least one node selector requirement": {
0000000000000000000000000000000000000000;;				expectedError: "spec.affinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						NodeAffinity: &api.NodeAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: &api.NodeSelector{
0000000000000000000000000000000000000000;;								NodeSelectorTerms: []api.NodeSelectorTerm{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										MatchExpressions: []api.NodeSelectorRequirement{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid weight in preferredDuringSchedulingIgnoredDuringExecution in pod affinity annotations, weight should be in range 1-100": {
0000000000000000000000000000000000000000;;				expectedError: "must be in the range 1-100",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 109,
0000000000000000000000000000000000000000;;									PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;										LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;											MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;												{
0000000000000000000000000000000000000000;;													Key:      "key2",
0000000000000000000000000000000000000000;;													Operator: metav1.LabelSelectorOpNotIn,
0000000000000000000000000000000000000000;;													Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;										TopologyKey: "region",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid labelSelector in preferredDuringSchedulingIgnoredDuringExecution in podaffinity annotations, values should be empty if the operator is Exists": {
0000000000000000000000000000000000000000;;				expectedError: "spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.matchExpressions.matchExpressions[0].values",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 10,
0000000000000000000000000000000000000000;;									PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;										LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;											MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;												{
0000000000000000000000000000000000000000;;													Key:      "key2",
0000000000000000000000000000000000000000;;													Operator: metav1.LabelSelectorOpExists,
0000000000000000000000000000000000000000;;													Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;										TopologyKey: "region",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid name space in preferredDuringSchedulingIgnoredDuringExecution in podaffinity annotations, name space shouldbe valid": {
0000000000000000000000000000000000000000;;				expectedError: "spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.namespace",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 10,
0000000000000000000000000000000000000000;;									PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;										LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;											MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;												{
0000000000000000000000000000000000000000;;													Key:      "key2",
0000000000000000000000000000000000000000;;													Operator: metav1.LabelSelectorOpExists,
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Namespaces:  []string{"INVALID_NAMESPACE"},
0000000000000000000000000000000000000000;;										TopologyKey: "region",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod affinity, empty topologyKey is not allowed for hard pod affinity": {
0000000000000000000000000000000000000000;;				expectedError: "can only be empty for PreferredDuringScheduling pod anti affinity",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Namespaces: []string{"ns"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod anti-affinity, empty topologyKey is not allowed for hard pod anti-affinity": {
0000000000000000000000000000000000000000;;				expectedError: "can only be empty for PreferredDuringScheduling pod anti affinity",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;							RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Namespaces: []string{"ns"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod anti-affinity, empty topologyKey is not allowed for soft pod affinity": {
0000000000000000000000000000000000000000;;				expectedError: "can only be empty for PreferredDuringScheduling pod anti affinity",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;						PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;							PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Weight: 10,
0000000000000000000000000000000000000000;;									PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;										LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;											MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;												{
0000000000000000000000000000000000000000;;													Key:      "key2",
0000000000000000000000000000000000000000;;													Operator: metav1.LabelSelectorOpNotIn,
0000000000000000000000000000000000000000;;													Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Namespaces: []string{"ns"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid toleration key": {
0000000000000000000000000000000000000000;;				expectedError: "spec.tolerations[0].key",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "nospecialchars^=@", Operator: "Equal", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid toleration operator": {
0000000000000000000000000000000000000000;;				expectedError: "spec.tolerations[0].operator",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "In", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"value must be empty when `operator` is 'Exists'": {
0000000000000000000000000000000000000000;;				expectedError: "spec.tolerations[0].operator",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "foo", Operator: "Exists", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"operator must be 'Exists' when `key` is empty": {
0000000000000000000000000000000000000000;;				expectedError: "spec.tolerations[0].operator",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Operator: "Equal", Value: "bar", Effect: "NoSchedule"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"effect must be 'NoExecute' when `TolerationSeconds` is set": {
0000000000000000000000000000000000000000;;				expectedError: "spec.tolerations[0].effect",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod-forgiveness-invalid",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extendPodSpecwithTolerations(validPodSpec(nil), []api.Toleration{{Key: "node.alpha.kubernetes.io/notReady", Operator: "Exists", Effect: "NoSchedule", TolerationSeconds: &[]int64{20}[0]}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must be a valid pod seccomp profile": {
0000000000000000000000000000000000000000;;				expectedError: "must be a valid seccomp profile",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must be a valid container seccomp profile": {
0000000000000000000000000000000000000000;;				expectedError: "must be a valid seccomp profile",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompContainerAnnotationKeyPrefix + "foo": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must be a non-empty container name in seccomp annotation": {
0000000000000000000000000000000000000000;;				expectedError: "name part must be non-empty",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompContainerAnnotationKeyPrefix: "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must be a non-empty container profile in seccomp annotation": {
0000000000000000000000000000000000000000;;				expectedError: "must be a valid seccomp profile",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompContainerAnnotationKeyPrefix + "foo": "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must be a relative path in a node-local seccomp profile annotation": {
0000000000000000000000000000000000000000;;				expectedError: "must be a relative path",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompPodAnnotationKey: "localhost//foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"must not start with '../'": {
0000000000000000000000000000000000000000;;				expectedError: "must not contain '..'",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SeccompPodAnnotationKey: "localhost/../foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"AppArmor profile must apply to a container": {
0000000000000000000000000000000000000000;;				expectedError: "metadata.annotations[container.apparmor.security.beta.kubernetes.io/fake-ctr]",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							apparmor.ContainerAnnotationKeyPrefix + "ctr":      apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;							apparmor.ContainerAnnotationKeyPrefix + "init-ctr": apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;							apparmor.ContainerAnnotationKeyPrefix + "fake-ctr": apparmor.ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{{Name: "init-ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						Containers:     []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						RestartPolicy:  api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:      api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"AppArmor profile format must be valid": {
0000000000000000000000000000000000000000;;				expectedError: "invalid AppArmor profile name",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							apparmor.ContainerAnnotationKeyPrefix + "ctr": "bad-name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"only default AppArmor profile may start with runtime/": {
0000000000000000000000000000000000000000;;				expectedError: "invalid AppArmor profile name",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							apparmor.ContainerAnnotationKeyPrefix + "ctr": "runtime/foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid sysctl annotation": {
0000000000000000000000000000000000000000;;				expectedError: "metadata.annotations[security.alpha.kubernetes.io/sysctls]",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SysctlsPodAnnotationKey: "foo:",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid comma-separated sysctl annotation": {
0000000000000000000000000000000000000000;;				expectedError: "not of the format sysctl_name=value",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SysctlsPodAnnotationKey: "kernel.msgmax,",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid unsafe sysctl annotation": {
0000000000000000000000000000000000000000;;				expectedError: "metadata.annotations[security.alpha.kubernetes.io/sysctls]",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SysctlsPodAnnotationKey: "foo:",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"intersecting safe sysctls and unsafe sysctls annotations": {
0000000000000000000000000000000000000000;;				expectedError: "can not be safe and unsafe",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "123",
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							api.SysctlsPodAnnotationKey:       "kernel.shmmax=10000000",
0000000000000000000000000000000000000000;;							api.UnsafeSysctlsPodAnnotationKey: "kernel.shmmax=10000000",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: validPodSpec(nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid opaque integer resource requirement: request must be <= limit": {
0000000000000000000000000000000000000000;;				expectedError: "must be greater than or equal to pod.alpha.kubernetes.io/opaque-int-resource-A",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "invalid",
0000000000000000000000000000000000000000;;								Image:           "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("2"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("1"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid fractional opaque integer resource in container request": {
0000000000000000000000000000000000000000;;				expectedError: "must be an integer",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "invalid",
0000000000000000000000000000000000000000;;								Image:           "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("500m"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid fractional opaque integer resource in init container request": {
0000000000000000000000000000000000000000;;				expectedError: "must be an integer",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "invalid",
0000000000000000000000000000000000000000;;								Image:           "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("500m"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid fractional opaque integer resource in container limit": {
0000000000000000000000000000000000000000;;				expectedError: "must be an integer",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "invalid",
0000000000000000000000000000000000000000;;								Image:           "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("5"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("2.5"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid fractional opaque integer resource in init container limit": {
0000000000000000000000000000000000000000;;				expectedError: "must be an integer",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "invalid",
0000000000000000000000000000000000000000;;								Image:           "image",
0000000000000000000000000000000000000000;;								ImagePullPolicy: "IfNotPresent",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("5"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										helper.OpaqueIntResourceName("A"): resource.MustParse("2.5"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"mirror-pod present without nodeName": {
0000000000000000000000000000000000000000;;				expectedError: "mirror",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns", Annotations: map[string]string{api.MirrorPodAnnotationKey: ""}},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"mirror-pod populated without nodeName": {
0000000000000000000000000000000000000000;;				expectedError: "mirror",
0000000000000000000000000000000000000000;;				spec: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns", Annotations: map[string]string{api.MirrorPodAnnotationKey: "foo"}},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePod(&v.spec); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %q", k)
0000000000000000000000000000000000000000;;			} else if v.expectedError == "" {
0000000000000000000000000000000000000000;;				t.Errorf("missing expectedError for %q, got %q", k, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			} else if actualError := errs.ToAggregate().Error(); !strings.Contains(actualError, v.expectedError) {
0000000000000000000000000000000000000000;;				t.Errorf("expected error for %q to contain %q, got %q", k, v.expectedError, actualError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodWithAffinity(t *testing.T) {
0000000000000000000000000000000000000000;;		validPodSpec := func(affinity *api.Affinity) api.PodSpec {
0000000000000000000000000000000000000000;;			spec := api.PodSpec{
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if affinity != nil {
0000000000000000000000000000000000000000;;				spec.Affinity = affinity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return spec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []api.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;					PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "key2",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: "",
0000000000000000000000000000000000000000;;								Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;					PodAffinity: &api.PodAffinity{
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 10,
0000000000000000000000000000000000000000;;								PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "key2",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpNotIn,
0000000000000000000000000000000000000000;;												Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;									TopologyKey: "",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;				Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "key2",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: "",
0000000000000000000000000000000000000000;;								Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;			/* TODO: Re-enable if/when topologykey is required.
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: "ns"},
0000000000000000000000000000000000000000;;			Spec: validPodSpec(&api.Affinity{
0000000000000000000000000000000000000000;;				PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;					PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Weight: 10,
0000000000000000000000000000000000000000;;							PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "key2",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpNotIn,
0000000000000000000000000000000000000000;;											Values:   []string{"value1", "value2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Namespaces:  []string{"ns"},
0000000000000000000000000000000000000000;;								TopologyKey: "",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}),*/
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePod(&v); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePodUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			activeDeadlineSecondsZero     = int64(0)
0000000000000000000000000000000000000000;;			activeDeadlineSecondsNegative = int64(-30)
0000000000000000000000000000000000000000;;			activeDeadlineSecondsPositive = int64(30)
0000000000000000000000000000000000000000;;			activeDeadlineSecondsLarger   = int64(31)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			now    = metav1.Now()
0000000000000000000000000000000000000000;;			grace  = int64(30)
0000000000000000000000000000000000000000;;			grace2 = int64(31)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			a    api.Pod
0000000000000000000000000000000000000000;;			b    api.Pod
0000000000000000000000000000000000000000;;			err  string
0000000000000000000000000000000000000000;;			test string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.Pod{}, api.Pod{}, "", "nothing"},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"metadata.name",
0000000000000000000000000000000000000000;;				"ids",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"labels",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"annotations",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "bar:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"may not add or remove containers",
0000000000000000000000000000000000000000;;				"more containers",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "bar:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"may not add or remove containers",
0000000000000000000000000000000000000000;;				"more init containers",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: []api.Container{{Image: "foo:V1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: []api.Container{{Image: "foo:V1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"deletion timestamp filled out",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", DeletionTimestamp: &now, DeletionGracePeriodSeconds: &grace},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: []api.Container{{Image: "foo:V1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", DeletionTimestamp: &now, DeletionGracePeriodSeconds: &grace2},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: []api.Container{{Image: "foo:V1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"metadata.deletionGracePeriodSeconds",
0000000000000000000000000000000000000000;;				"deletion grace period seconds cleared",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"image change",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"init container image change",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.containers[0].image",
0000000000000000000000000000000000000000;;				"image change to empty",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.initContainers[0].image",
0000000000000000000000000000000000000000;;				"init container image change to empty",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds no change, nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds no change, set",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to positive from nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsLarger,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to smaller positive",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsLarger,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.activeDeadlineSeconds",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to larger positive",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsNegative,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{},
0000000000000000000000000000000000000000;;				"spec.activeDeadlineSeconds",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to negative from nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsNegative,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.activeDeadlineSeconds",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to negative from positive",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsZero,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to zero from positive",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsZero,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to zero from nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						ActiveDeadlineSeconds: &activeDeadlineSecondsPositive,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.activeDeadlineSeconds",
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds change to nil from positive",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Limits: getResourceLimits("100m", "0"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Limits: getResourceLimits("1000m", "0"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec: Forbidden: pod updates may not change fields",
0000000000000000000000000000000000000000;;				"cpu change",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V1",
0000000000000000000000000000000000000000;;								Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;									{HostPort: 8080, ContainerPort: 80},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image: "foo:V2",
0000000000000000000000000000000000000000;;								Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;									{HostPort: 8000, ContainerPort: 80},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec: Forbidden: pod updates may not change fields",
0000000000000000000000000000000000000000;;				"port change",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"Bar": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"bad label change",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value2"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.tolerations: Forbidden",
0000000000000000000000000000000000000000;;				"existing toleration value modified in pod spec updates",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value2", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: nil}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{10}[0]}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.tolerations: Forbidden",
0000000000000000000000000000000000000000;;				"existing toleration value modified in pod spec updates with modified tolerationSeconds",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{10}[0]}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{20}[0]}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"modified tolerationSeconds in existing toleration value in pod spec updates",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value2"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec.tolerations: Forbidden",
0000000000000000000000000000000000000000;;				"toleration modified in updates to an unscheduled pod",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"tolerations unmodified in updates to a scheduled pod",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName: "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{20}[0]},
0000000000000000000000000000000000000000;;							{Key: "key2", Value: "value2", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{30}[0]},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:    "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{10}[0]}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"added valid new toleration to existing tolerations in pod spec updates",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName: "node1",
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{20}[0]},
0000000000000000000000000000000000000000;;							{Key: "key2", Value: "value2", Operator: "Equal", Effect: "NoSchedule", TolerationSeconds: &[]int64{30}[0]},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName: "node1", Tolerations: []api.Toleration{{Key: "key1", Value: "value1", Operator: "Equal", Effect: "NoExecute", TolerationSeconds: &[]int64{10}[0]}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				"spec.tolerations[1].effect",
0000000000000000000000000000000000000000;;				"added invalid new toleration to existing tolerations in pod spec updates",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}},
0000000000000000000000000000000000000000;;				"spec: Forbidden: pod updates may not change fields",
0000000000000000000000000000000000000000;;				"removed nodeName from pod spec",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", Annotations: map[string]string{api.MirrorPodAnnotationKey: ""}}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				"metadata.annotations[kubernetes.io/config.mirror]",
0000000000000000000000000000000000000000;;				"removed mirror pod annotation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", Annotations: map[string]string{api.MirrorPodAnnotationKey: ""}}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				"metadata.annotations[kubernetes.io/config.mirror]",
0000000000000000000000000000000000000000;;				"added mirror pod annotation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", Annotations: map[string]string{api.MirrorPodAnnotationKey: "foo"}}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", Annotations: map[string]string{api.MirrorPodAnnotationKey: "bar"}}, Spec: api.PodSpec{NodeName: "foo"}},
0000000000000000000000000000000000000000;;				"metadata.annotations[kubernetes.io/config.mirror]",
0000000000000000000000000000000000000000;;				"changed mirror pod annotation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:          "node1",
0000000000000000000000000000000000000000;;						PriorityClassName: "bar-priority",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:          "node1",
0000000000000000000000000000000000000000;;						PriorityClassName: "foo-priority",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec: Forbidden: pod updates",
0000000000000000000000000000000000000000;;				"changed priority class name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:          "node1",
0000000000000000000000000000000000000000;;						PriorityClassName: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName:          "node1",
0000000000000000000000000000000000000000;;						PriorityClassName: "foo-priority",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"spec: Forbidden: pod updates",
0000000000000000000000000000000000000000;;				"removed priority class name",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			test.a.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			test.b.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidatePodUpdate(&test.a, &test.b)
0000000000000000000000000000000000000000;;			if test.err == "" {
0000000000000000000000000000000000000000;;				if len(errs) != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected invalid: %s (%+v)\nA: %+v\nB: %+v", test.test, errs, test.a, test.b)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if len(errs) == 0 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected valid: %s\nA: %+v\nB: %+v", test.test, test.a, test.b)
0000000000000000000000000000000000000000;;				} else if actualErr := errs.ToAggregate().Error(); !strings.Contains(actualErr, test.err) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error message: %s\nExpected error: %s\nActual error: %s", test.test, test.err, actualErr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeValidService() api.Service {
0000000000000000000000000000000000000000;;		return api.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "valid",
0000000000000000000000000000000000000000;;				Namespace:       "valid",
0000000000000000000000000000000000000000;;				Labels:          map[string]string{},
0000000000000000000000000000000000000000;;				Annotations:     map[string]string{},
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;				Selector:        map[string]string{"key": "val"},
0000000000000000000000000000000000000000;;				SessionAffinity: "None",
0000000000000000000000000000000000000000;;				Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				Ports:           []api.ServicePort{{Name: "p", Protocol: "TCP", Port: 8675, TargetPort: intstr.FromInt(8675)}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateService(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			tweakSvc func(svc *api.Service) // given a basic valid service, each test case can customize it
0000000000000000000000000000000000000000;;			numErrs  int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing namespace",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Namespace = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid namespace",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Namespace = "-123"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Name = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Name = "-123"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "too long name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Name = strings.Repeat("a", 64)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid generateName",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.GenerateName = "-123"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "too long generateName",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.GenerateName = strings.Repeat("a", 64)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid label",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Labels["NoUppercaseOrSpecialCharsLike=Equals"] = "bar"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Annotations["NoSpecialCharsLike=Equals"] = "bar"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "nil selector",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Selector = nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid selector",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Selector["NoSpecialCharsLike=Equals"] = "bar"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing session affinity",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.SessionAffinity = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing type",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing ports",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports = nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing ports but headless",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports = nil
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = api.ClusterIPNone
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty port[0] name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Name = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty port[1] name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "", Protocol: "TCP", Port: 12345, TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty multi-port port[0] name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Name = ""
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "p", Protocol: "TCP", Port: 12345, TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid port name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Name = "INVALID"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing protocol",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Protocol = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid protocol",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Protocol = "INVALID"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid cluster ip",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "invalid"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing port",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Port = 0
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid port",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Port = 65536
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid TargetPort int",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromInt(65536)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid port headless",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Port = 11722
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromInt(11722)
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = api.ClusterIPNone
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid port headless 1",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Port = 11722
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromInt(11721)
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = api.ClusterIPNone
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// in the v1 API, targetPorts on headless services were tolerated.
0000000000000000000000000000000000000000;;				// once we have version-specific validation, we can reject this on newer API versions, but until then, we have to tolerate it for compatibility.
0000000000000000000000000000000000000000;;				// numErrs: 1,
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid port headless 2",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Port = 11722
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromString("target")
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = api.ClusterIPNone
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// in the v1 API, targetPorts on headless services were tolerated.
0000000000000000000000000000000000000000;;				// once we have version-specific validation, we can reject this on newer API versions, but until then, we have to tolerate it for compatibility.
0000000000000000000000000000000000000000;;				// numErrs: 1,
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid publicIPs localhost",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ExternalIPs = []string{"127.0.0.1"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid publicIPs unspecified",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ExternalIPs = []string{"0.0.0.0"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid publicIPs loopback",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ExternalIPs = []string{"127.0.0.1"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid publicIPs host",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ExternalIPs = []string{"myhost.mydomain"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "dup port name",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Name = "p"
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "p", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid load balancer protocol UDP 1",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Protocol = "UDP"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid load balancer protocol UDP 2",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports[0] = api.ServicePort{Name: "q", Port: 12345, Protocol: "UDP", TargetPort: intstr.FromInt(12345)}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid load balancer with mix protocol",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "UDP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid 1",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					// do nothing
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid 2",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].Protocol = "UDP"
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromInt(12345)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid 3",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromString("http")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid cluster ip - none ",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid cluster ip - empty",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					s.Spec.Ports[0].TargetPort = intstr.FromString("http")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type - cluster",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type - loadbalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type loadbalancer 2 ports",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid external load balancer 2 ports",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "duplicate nodeports",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(2)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "duplicate nodeports (different protocols)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "UDP", NodePort: 1, TargetPort: intstr.FromInt(2)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid duplicate targetports (number with same protocol)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", TargetPort: intstr.FromInt(8080)})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "TCP", TargetPort: intstr.FromInt(8080)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid duplicate targetports (name with same protocol)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", TargetPort: intstr.FromString("http")})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "TCP", TargetPort: intstr.FromString("http")})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid duplicate targetports (number with different protocols)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", TargetPort: intstr.FromInt(8080)})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "UDP", TargetPort: intstr.FromInt(8080)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid duplicate targetports (name with different protocols)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", TargetPort: intstr.FromString("http")})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "r", Port: 2, Protocol: "UDP", TargetPort: intstr.FromString("http")})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type - cluster",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type - nodeport",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type - loadbalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type loadbalancer 2 ports",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type loadbalancer with NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", NodePort: 12345, TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type=NodePort service with NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", NodePort: 12345, TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type=NodePort service without NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid cluster service without NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid cluster service with NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", NodePort: 12345, TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid public service with duplicate NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "p1", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "p2", Port: 2, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(2)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid type=LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 12345, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// For now we open firewalls, and its insecure if we open 10250, remove this
0000000000000000000000000000000000000000;;				// when we have better protections in place.
0000000000000000000000000000000000000000;;				name: "invalid port type=LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "kubelet", Port: 10250, Protocol: "TCP", TargetPort: intstr.FromInt(12345)})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid LoadBalancer source range annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.AnnotationLoadBalancerSourceRangesKey] = "1.2.3.4/8,  5.6.7.8/16"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty LoadBalancer source range annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.AnnotationLoadBalancerSourceRangesKey] = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid LoadBalancer source range annotation (hostname)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Annotations[api.AnnotationLoadBalancerSourceRangesKey] = "foo.bar"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid LoadBalancer source range annotation (invalid CIDR)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.AnnotationLoadBalancerSourceRangesKey] = "1.2.3.4/33"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid source range for non LoadBalancer type service",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.LoadBalancerSourceRanges = []string{"1.2.3.4/8", "5.6.7.8/16"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid LoadBalancer source range",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.LoadBalancerSourceRanges = []string{"1.2.3.4/8", "5.6.7.8/16"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty LoadBalancer source range",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.LoadBalancerSourceRanges = []string{"   "}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid LoadBalancer source range",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.LoadBalancerSourceRanges = []string{"foo.bar"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid ExternalName",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					s.Spec.ExternalName = "foo.bar.example.com"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid ExternalName clusterIP (valid IP)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					s.Spec.ExternalName = "foo.bar.example.com"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid ExternalName clusterIP (None)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;					s.Spec.ExternalName = "foo.bar.example.com"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid ExternalName (not a DNS name)",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					s.Spec.ExternalName = "-123"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "LoadBalancer type cannot have None ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid node port with clusterIP None",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.Ports = append(s.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;					s.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// ESIPP section begins.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "LoadBalancer allows onlyLocal beta annotations",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid externalTraffic beta annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = "invalid"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "nagative healthCheckNodePort beta annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationHealthCheckNodePort] = "-1"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid healthCheckNodePort beta annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationHealthCheckNodePort] = "whatisthis"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid healthCheckNodePort beta annotation",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationHealthCheckNodePort] = "31100"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid externalTraffic field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = "invalid"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "nagative healthCheckNodePort field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = -1
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "nagative healthCheckNodePort field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 31100
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallows use ExternalTraffic beta annotation with first class field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 3001
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallows duplicated ExternalTraffic beta annotation with first class field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallows use HealthCheckNodePort beta annotation with first class field",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Annotations[api.BetaAnnotationHealthCheckNodePort] = "3001"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// ESIPP section ends.
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			svc := makeValidService()
0000000000000000000000000000000000000000;;			tc.tweakSvc(&svc)
0000000000000000000000000000000000000000;;			errs := ValidateService(&svc)
0000000000000000000000000000000000000000;;			if len(errs) != tc.numErrs {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error list for case %q: %v", tc.name, errs.ToAggregate())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateServiceExternalTrafficFieldsCombination(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			tweakSvc func(svc *api.Service) // Given a basic valid service, each test case can customize it.
0000000000000000000000000000000000000000;;			numErrs  int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid loadBalancer service with externalTrafficPolicy and healthCheckNodePort set",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 34567
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid nodePort service with externalTrafficPolicy set",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid clusterIP service with none of externalTrafficPolicy and healthCheckNodePort set",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cannot set healthCheckNodePort field on loadBalancer service with externalTrafficPolicy!=Local",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeCluster
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 34567
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cannot set healthCheckNodePort field on nodePort service",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 34567
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cannot set externalTrafficPolicy or healthCheckNodePort fields on clusterIP service",
0000000000000000000000000000000000000000;;				tweakSvc: func(s *api.Service) {
0000000000000000000000000000000000000000;;					s.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					s.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					s.Spec.HealthCheckNodePort = 34567
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			svc := makeValidService()
0000000000000000000000000000000000000000;;			tc.tweakSvc(&svc)
0000000000000000000000000000000000000000;;			errs := ValidateServiceExternalTrafficFieldsCombination(&svc)
0000000000000000000000000000000000000000;;			if len(errs) != tc.numErrs {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error list for case %q: %v", tc.name, errs.ToAggregate())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicationControllerStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			replicas             int32
0000000000000000000000000000000000000000;;			fullyLabeledReplicas int32
0000000000000000000000000000000000000000;;			readyReplicas        int32
0000000000000000000000000000000000000000;;			availableReplicas    int32
0000000000000000000000000000000000000000;;			observedGeneration   int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "valid status",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid replicas",
0000000000000000000000000000000000000000;;				replicas:             -1,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid fullyLabeledReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: -1,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid readyReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        -1,
0000000000000000000000000000000000000000;;				availableReplicas:    1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid availableReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    -1,
0000000000000000000000000000000000000000;;				observedGeneration:   2,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "invalid observedGeneration",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   -1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "fullyLabeledReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 4,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "readyReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        4,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "availableReplicas greater than replicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        3,
0000000000000000000000000000000000000000;;				availableReplicas:    4,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                 "availableReplicas greater than readyReplicas",
0000000000000000000000000000000000000000;;				replicas:             3,
0000000000000000000000000000000000000000;;				fullyLabeledReplicas: 3,
0000000000000000000000000000000000000000;;				readyReplicas:        2,
0000000000000000000000000000000000000000;;				availableReplicas:    3,
0000000000000000000000000000000000000000;;				observedGeneration:   1,
0000000000000000000000000000000000000000;;				expectedErr:          true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			status := api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:             test.replicas,
0000000000000000000000000000000000000000;;				FullyLabeledReplicas: test.fullyLabeledReplicas,
0000000000000000000000000000000000000000;;				ReadyReplicas:        test.readyReplicas,
0000000000000000000000000000000000000000;;				AvailableReplicas:    test.availableReplicas,
0000000000000000000000000000000000000000;;				ObservedGeneration:   test.observedGeneration,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if hasErr := len(ValidateReplicationControllerStatus(status, field.NewPath("status"))) > 0; hasErr != test.expectedErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error: %t, got error: %t", test.name, test.expectedErr, hasErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicationControllerStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type rcUpdateTest struct {
0000000000000000000000000000000000000000;;			old    api.ReplicationController
0000000000000000000000000000000000000000;;			update api.ReplicationController
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []rcUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;						Replicas: 4,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateReplicationControllerStatusUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]rcUpdateTest{
0000000000000000000000000000000000000000;;			"negative replicas": {
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;						Replicas: -3,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicationControllerStatusUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicationControllerUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type rcUpdateTest struct {
0000000000000000000000000000000000000000;;			old    api.ReplicationController
0000000000000000000000000000000000000000;;			update api.ReplicationController
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []rcUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 3,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 1,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			if errs := ValidateReplicationControllerUpdate(&successCase.update, &successCase.old); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]rcUpdateTest{
0000000000000000000000000000000000000000;;			"more than one read/write": {
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid selector": {
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: invalidSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod": {
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative replicas": {
0000000000000000000000000000000000000000;;				old: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: -1,
0000000000000000000000000000000000000000;;						Selector: validSelector,
0000000000000000000000000000000000000000;;						Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicationControllerUpdate(&errorCase.update, &errorCase.old); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicationController(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readWriteVolumePodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Volumes:       []api.Volume{{Name: "gcepd", VolumeSource: api.VolumeSource{GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{PDName: "my-PD", FSType: "ext4", Partition: 1, ReadOnly: false}}}},
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		invalidPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: invalidSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []api.ReplicationController{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Replicas: 1,
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateReplicationController(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]api.ReplicationController{
0000000000000000000000000000000000000000;;			"zero-length ID": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-namespace": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty selector": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"selector_doesnt_match": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid manifest": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"read-write persistent disk with > 1 pod": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc"},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Replicas: 2,
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &readWriteVolumePodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative_replicas": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Replicas: -1,
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_label 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Template: &invalidPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid_annotation": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 1": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validSelector,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid restart policy 2": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc-123",
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Selector: validSelector,
0000000000000000000000000000000000000000;;					Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							RestartPolicy: api.RestartPolicyNever,
0000000000000000000000000000000000000000;;							DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;							Containers:    []api.Container{{Name: "ctr", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Labels: validSelector,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateReplicationController(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				field := errs[i].Field
0000000000000000000000000000000000000000;;				if !strings.HasPrefix(field, "spec.template.") &&
0000000000000000000000000000000000000000;;					field != "metadata.name" &&
0000000000000000000000000000000000000000;;					field != "metadata.namespace" &&
0000000000000000000000000000000000000000;;					field != "spec.selector" &&
0000000000000000000000000000000000000000;;					field != "spec.template" &&
0000000000000000000000000000000000000000;;					field != "GCEPersistentDisk.ReadOnly" &&
0000000000000000000000000000000000000000;;					field != "spec.replicas" &&
0000000000000000000000000000000000000000;;					field != "spec.template.labels" &&
0000000000000000000000000000000000000000;;					field != "metadata.annotations" &&
0000000000000000000000000000000000000000;;					field != "metadata.labels" &&
0000000000000000000000000000000000000000;;					field != "status.replicas" {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing prefix for: %v", k, errs[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNode(t *testing.T) {
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		successCases := []api.Node{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "abc",
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						api.ResourceName("my.org/gpu"):       resource.MustParse("10"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a valid taint to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "GPU", Value: "true", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "abc",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;								                    "uid": "abcdef123456",
0000000000000000000000000000000000000000;;								                    "controller": true
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateNode(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]api.Node{
0000000000000000000000000000000000000000;;			"zero-length Name": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "",
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-labels": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "abc-123",
0000000000000000000000000000000000000000;;					Labels: invalidSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-external-id": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "abc-123",
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-taint-key": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a taint with an empty key to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "", Value: "special-user-1", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-taint-key": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a taint with an invalid  key to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "NoUppercaseOrSpecialCharsLike=Equals", Value: "special-user-1", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad-taint-value": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a taint with a bad value to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "dedicated", Value: "some\\bad\\value", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-taint-effect": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node3",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a taint with an empty effect to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "dedicated", Value: "special-user-3", Effect: ""}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-taint-effect": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node3",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "something"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add a taint with NoExecute effect to a node
0000000000000000000000000000000000000000;;					Taints: []api.Taint{{Key: "dedicated", Value: "special-user-3", Effect: "NoScheduleNoAdmit"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"duplicated-taints-with-same-key-effect": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "dedicated-node1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;					// Add two taints to the node with the same key and effect; should be rejected.
0000000000000000000000000000000000000000;;					Taints: []api.Taint{
0000000000000000000000000000000000000000;;						{Key: "dedicated", Value: "special-user-1", Effect: "NoSchedule"},
0000000000000000000000000000000000000000;;						{Key: "dedicated", Value: "special-user-2", Effect: "NoSchedule"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing-podSignature": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "abc-123",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-podController": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "abc-123",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;	                                                                           "uid": "abcdef123456",
0000000000000000000000000000000000000000;;	                                                                           "controller": false
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{},
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					ExternalID: "external",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateNode(&v)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				field := errs[i].Field
0000000000000000000000000000000000000000;;				expectedFields := map[string]bool{
0000000000000000000000000000000000000000;;					"metadata.name":                                                                                               true,
0000000000000000000000000000000000000000;;					"metadata.labels":                                                                                             true,
0000000000000000000000000000000000000000;;					"metadata.annotations":                                                                                        true,
0000000000000000000000000000000000000000;;					"metadata.namespace":                                                                                          true,
0000000000000000000000000000000000000000;;					"spec.externalID":                                                                                             true,
0000000000000000000000000000000000000000;;					"spec.taints[0].key":                                                                                          true,
0000000000000000000000000000000000000000;;					"spec.taints[0].value":                                                                                        true,
0000000000000000000000000000000000000000;;					"spec.taints[0].effect":                                                                                       true,
0000000000000000000000000000000000000000;;					"metadata.annotations.scheduler.alpha.kubernetes.io/preferAvoidPods[0].PodSignature":                          true,
0000000000000000000000000000000000000000;;					"metadata.annotations.scheduler.alpha.kubernetes.io/preferAvoidPods[0].PodSignature.PodController.Controller": true,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if val, ok := expectedFields[field]; ok {
0000000000000000000000000000000000000000;;					if !val {
0000000000000000000000000000000000000000;;						t.Errorf("%s: missing prefix for: %v", k, errs[i])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNodeUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldNode api.Node
0000000000000000000000000000000000000000;;			node    api.Node
0000000000000000000000000000000000000000;;			valid   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.Node{}, api.Node{}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"}},
0000000000000000000000000000000000000000;;				api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar"},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					PodCIDR: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					PodCIDR: "192.168.0.0/16",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					PodCIDR: "192.123.0.0/16",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					PodCIDR: "192.168.0.0/16",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceCPU:    resource.MustParse("10000"),
0000000000000000000000000000000000000000;;						api.ResourceMemory: resource.MustParse("100"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceCPU:    resource.MustParse("100"),
0000000000000000000000000000000000000000;;						api.ResourceMemory: resource.MustParse("10000"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceCPU:    resource.MustParse("10000"),
0000000000000000000000000000000000000000;;						api.ResourceMemory: resource.MustParse("100"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "fooobaz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceCPU:    resource.MustParse("100"),
0000000000000000000000000000000000000000;;						api.ResourceMemory: resource.MustParse("10000"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "1.2.3.4"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "fooobaz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"Foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					Unschedulable: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					Unschedulable: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					Unschedulable: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "1.1.1.1"},
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "1.1.1.1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					Unschedulable: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "1.1.1.1"},
0000000000000000000000000000000000000000;;						{Type: api.NodeInternalIP, Address: "10.1.1.1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;	                                                                           "uid": "abcdef123456",
0000000000000000000000000000000000000000;;	                                                                           "controller": true
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;					Unschedulable: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;								                    "uid": "abcdef123456",
0000000000000000000000000000000000000000;;								                    "controller": false
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "valid-opaque-int-resources",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "valid-opaque-int-resources",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						helper.OpaqueIntResourceName("A"):    resource.MustParse("5"),
0000000000000000000000000000000000000000;;						helper.OpaqueIntResourceName("B"):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "invalid-fractional-opaque-int-capacity",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "invalid-fractional-opaque-int-capacity",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						helper.OpaqueIntResourceName("A"):    resource.MustParse("500m"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;			{api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "invalid-fractional-opaque-int-allocatable",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "invalid-fractional-opaque-int-allocatable",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NodeStatus{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						helper.OpaqueIntResourceName("A"):    resource.MustParse("5"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Allocatable: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;						helper.OpaqueIntResourceName("A"):    resource.MustParse("4.5"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			test.oldNode.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			test.node.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateNodeUpdate(&test.node, &test.oldNode)
0000000000000000000000000000000000000000;;			if test.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected error: %v", i, errs)
0000000000000000000000000000000000000000;;				t.Logf("%#v vs %#v", test.oldNode.ObjectMeta, test.node.ObjectMeta)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected non-error", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateServiceUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			tweakSvc func(oldSvc, newSvc *api.Service) // given basic valid services, each test case can customize them
0000000000000000000000000000000000000000;;			numErrs  int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no change",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					// do nothing
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change name",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Name += "2"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change namespace",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Namespace += "2"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change label valid",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Labels["key"] = "other-value"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "add label",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Labels["key2"] = "value2"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change cluster IP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "8.6.7.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "remove cluster IP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change affinity",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.SessionAffinity = "ClientIP"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "remove affinity",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.SessionAffinity = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change type",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "remove type",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "change type -> nodeport",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "add loadBalancerSourceRanges",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.LoadBalancerSourceRanges = []string{"10.0.0.0/8"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "update loadBalancerSourceRanges",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					oldSvc.Spec.LoadBalancerSourceRanges = []string{"10.0.0.0/8"}
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.LoadBalancerSourceRanges = []string{"10.100.0.0/16"}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "LoadBalancer type cannot have None ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service allows removing onlyLocal beta annotations",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = "3001"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service allows modifying onlyLocal beta annotations",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = "3001"
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficGlobal
0000000000000000000000000000000000000000;;					newSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service disallows promoting one of the onlyLocal pair to GA",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = "3001"
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					newSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service allows changing both onlyLocal annotations from beta to GA",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationExternalTraffic] = api.AnnotationValueExternalTrafficLocal
0000000000000000000000000000000000000000;;					oldSvc.Annotations[api.BetaAnnotationHealthCheckNodePort] = "3001"
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.ExternalTrafficPolicy = api.ServiceExternalTrafficPolicyTypeLocal
0000000000000000000000000000000000000000;;					newSvc.Spec.HealthCheckNodePort = 3001
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "`None` ClusterIP cannot be changed",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "`None` ClusterIP cannot be removed",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type cannot change its set ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type can change its empty ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type cannot change its set ClusterIP when changing type to NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type can change its empty ClusterIP when changing type to NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type cannot change its ClusterIP when changing type to LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ClusterIP type can change its empty ClusterIP when changing type to LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type cannot change its set ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type can change its empty ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type cannot change its set ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type can change its empty ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type cannot change its set ClusterIP when changing type to LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with NodePort type can change its empty ClusterIP when changing type to LoadBalancer",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type cannot change its set ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type can change its empty ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type cannot change its set ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type can change its empty ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type cannot change its set ClusterIP when changing type to NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with LoadBalancer type can change its empty ClusterIP when changing type to NodePort",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ExternalName type can change its empty ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Service with ExternalName type can change its set ClusterIP when changing type to ClusterIP",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeExternalName
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = "1.2.3.4"
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "1.2.3.5"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid node port with clusterIP None",
0000000000000000000000000000000000000000;;				tweakSvc: func(oldSvc, newSvc *api.Service) {
0000000000000000000000000000000000000000;;					oldSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;					newSvc.Spec.Type = api.ServiceTypeNodePort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.Ports = append(oldSvc.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;					newSvc.Spec.Ports = append(newSvc.Spec.Ports, api.ServicePort{Name: "q", Port: 1, Protocol: "TCP", NodePort: 1, TargetPort: intstr.FromInt(1)})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					oldSvc.Spec.ClusterIP = ""
0000000000000000000000000000000000000000;;					newSvc.Spec.ClusterIP = "None"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				numErrs: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			oldSvc := makeValidService()
0000000000000000000000000000000000000000;;			newSvc := makeValidService()
0000000000000000000000000000000000000000;;			tc.tweakSvc(&oldSvc, &newSvc)
0000000000000000000000000000000000000000;;			errs := ValidateServiceUpdate(&newSvc, &oldSvc)
0000000000000000000000000000000000000000;;			if len(errs) != tc.numErrs {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error list for case %q: %v", tc.name, errs.ToAggregate())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateResourceNames(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			input   string
0000000000000000000000000000000000000000;;			success bool
0000000000000000000000000000000000000000;;			expect  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"memory", true, ""},
0000000000000000000000000000000000000000;;			{"cpu", true, ""},
0000000000000000000000000000000000000000;;			{"storage", true, ""},
0000000000000000000000000000000000000000;;			{"requests.cpu", true, ""},
0000000000000000000000000000000000000000;;			{"requests.memory", true, ""},
0000000000000000000000000000000000000000;;			{"requests.storage", true, ""},
0000000000000000000000000000000000000000;;			{"limits.cpu", true, ""},
0000000000000000000000000000000000000000;;			{"limits.memory", true, ""},
0000000000000000000000000000000000000000;;			{"network", false, ""},
0000000000000000000000000000000000000000;;			{"disk", false, ""},
0000000000000000000000000000000000000000;;			{"", false, ""},
0000000000000000000000000000000000000000;;			{".", false, ""},
0000000000000000000000000000000000000000;;			{"..", false, ""},
0000000000000000000000000000000000000000;;			{"my.favorite.app.co/12345", true, ""},
0000000000000000000000000000000000000000;;			{"my.favorite.app.co/_12345", false, ""},
0000000000000000000000000000000000000000;;			{"my.favorite.app.co/12345_", false, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io/..", false, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io/" + strings.Repeat("a", 63), true, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io/" + strings.Repeat("a", 64), false, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io//", false, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io", false, ""},
0000000000000000000000000000000000000000;;			{"kubernetes.io/will/not/work/", false, ""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, item := range table {
0000000000000000000000000000000000000000;;			err := validateResourceName(item.input, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(err) != 0 && item.success {
0000000000000000000000000000000000000000;;				t.Errorf("expected no failure for input %q", item.input)
0000000000000000000000000000000000000000;;			} else if len(err) == 0 && !item.success {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for input %q", item.input)
0000000000000000000000000000000000000000;;				for i := range err {
0000000000000000000000000000000000000000;;					detail := err[i].Detail
0000000000000000000000000000000000000000;;					if detail != "" && !strings.Contains(detail, item.expect) {
0000000000000000000000000000000000000000;;						t.Errorf("%d: expected error detail either empty or %s, got %s", k, item.expect, detail)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceList(cpu, memory string) api.ResourceList {
0000000000000000000000000000000000000000;;		res := api.ResourceList{}
0000000000000000000000000000000000000000;;		if cpu != "" {
0000000000000000000000000000000000000000;;			res[api.ResourceCPU] = resource.MustParse(cpu)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if memory != "" {
0000000000000000000000000000000000000000;;			res[api.ResourceMemory] = resource.MustParse(memory)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getStorageResourceList(storage string) api.ResourceList {
0000000000000000000000000000000000000000;;		res := api.ResourceList{}
0000000000000000000000000000000000000000;;		if storage != "" {
0000000000000000000000000000000000000000;;			res[api.ResourceStorage] = resource.MustParse(storage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateLimitRange(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			spec api.LimitRangeSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all-fields-valid",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 api.LimitTypePod,
0000000000000000000000000000000000000000;;							Max:                  getResourceList("100m", "10000Mi"),
0000000000000000000000000000000000000000;;							Min:                  getResourceList("5m", "100Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("10", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:                  getResourceList("100m", "10000Mi"),
0000000000000000000000000000000000000000;;							Min:                  getResourceList("5m", "100Mi"),
0000000000000000000000000000000000000000;;							Default:              getResourceList("50m", "500Mi"),
0000000000000000000000000000000000000000;;							DefaultRequest:       getResourceList("10m", "200Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("10", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePersistentVolumeClaim,
0000000000000000000000000000000000000000;;							Max:  getStorageResourceList("10Gi"),
0000000000000000000000000000000000000000;;							Min:  getStorageResourceList("5Gi"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "pvc-min-only",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePersistentVolumeClaim,
0000000000000000000000000000000000000000;;							Min:  getStorageResourceList("5Gi"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "pvc-max-only",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePersistentVolumeClaim,
0000000000000000000000000000000000000000;;							Max:  getStorageResourceList("10Gi"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all-fields-valid-big-numbers",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:                  getResourceList("100m", "10000T"),
0000000000000000000000000000000000000000;;							Min:                  getResourceList("5m", "100Mi"),
0000000000000000000000000000000000000000;;							Default:              getResourceList("50m", "500Mi"),
0000000000000000000000000000000000000000;;							DefaultRequest:       getResourceList("10m", "200Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("10", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "thirdparty-fields-all-valid-standard-container-resources",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 "thirdparty.com/foo",
0000000000000000000000000000000000000000;;							Max:                  getResourceList("100m", "10000T"),
0000000000000000000000000000000000000000;;							Min:                  getResourceList("5m", "100Mi"),
0000000000000000000000000000000000000000;;							Default:              getResourceList("50m", "500Mi"),
0000000000000000000000000000000000000000;;							DefaultRequest:       getResourceList("10m", "200Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("10", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "thirdparty-fields-all-valid-storage-resources",
0000000000000000000000000000000000000000;;				spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 "thirdparty.com/foo",
0000000000000000000000000000000000000000;;							Max:                  getStorageResourceList("10000T"),
0000000000000000000000000000000000000000;;							Min:                  getStorageResourceList("100Mi"),
0000000000000000000000000000000000000000;;							Default:              getStorageResourceList("500Mi"),
0000000000000000000000000000000000000000;;							DefaultRequest:       getStorageResourceList("200Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getStorageResourceList(""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			limitRange := &api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: successCase.name, Namespace: "foo"}, Spec: successCase.spec}
0000000000000000000000000000000000000000;;			if errs := ValidateLimitRange(limitRange); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Case %v, unexpected error: %v", successCase.name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			R api.LimitRange
0000000000000000000000000000000000000000;;			D string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"zero-length-name": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: "foo"}, Spec: api.LimitRangeSpec{}},
0000000000000000000000000000000000000000;;				"name or generateName is required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length-namespace": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: ""}, Spec: api.LimitRangeSpec{}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-name": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "^Invalid", Namespace: "foo"}, Spec: api.LimitRangeSpec{}},
0000000000000000000000000000000000000000;;				dnsSubdomainLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-namespace": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "^Invalid"}, Spec: api.LimitRangeSpec{}},
0000000000000000000000000000000000000000;;				dnsLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"duplicate-limit-type": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePod,
0000000000000000000000000000000000000000;;							Max:  getResourceList("100m", "10000m"),
0000000000000000000000000000000000000000;;							Min:  getResourceList("0m", "100m"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePod,
0000000000000000000000000000000000000000;;							Min:  getResourceList("0m", "100m"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"default-limit-type-pod": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:    api.LimitTypePod,
0000000000000000000000000000000000000000;;							Max:     getResourceList("100m", "10000m"),
0000000000000000000000000000000000000000;;							Min:     getResourceList("0m", "100m"),
0000000000000000000000000000000000000000;;							Default: getResourceList("10m", "100m"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"may not be specified when `type` is 'Pod'",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"default-request-limit-type-pod": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:           api.LimitTypePod,
0000000000000000000000000000000000000000;;							Max:            getResourceList("100m", "10000m"),
0000000000000000000000000000000000000000;;							Min:            getResourceList("0m", "100m"),
0000000000000000000000000000000000000000;;							DefaultRequest: getResourceList("10m", "100m"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"may not be specified when `type` is 'Pod'",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"min value 100m is greater than max value 10m": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePod,
0000000000000000000000000000000000000000;;							Max:  getResourceList("10m", ""),
0000000000000000000000000000000000000000;;							Min:  getResourceList("100m", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"min value 100m is greater than max value 10m",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec default outside range": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:    api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:     getResourceList("1", ""),
0000000000000000000000000000000000000000;;							Min:     getResourceList("100m", ""),
0000000000000000000000000000000000000000;;							Default: getResourceList("2000m", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"default value 2 is greater than max value 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec defaultrequest outside range": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:           api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:            getResourceList("1", ""),
0000000000000000000000000000000000000000;;							Min:            getResourceList("100m", ""),
0000000000000000000000000000000000000000;;							DefaultRequest: getResourceList("2000m", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"default request value 2 is greater than max value 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec defaultrequest more than default": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:           api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:            getResourceList("2", ""),
0000000000000000000000000000000000000000;;							Min:            getResourceList("100m", ""),
0000000000000000000000000000000000000000;;							Default:        getResourceList("500m", ""),
0000000000000000000000000000000000000000;;							DefaultRequest: getResourceList("800m", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"default request value 800m is greater than default limit value 500m",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec maxLimitRequestRatio less than 1": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 api.LimitTypePod,
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("800m", ""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"ratio 800m is less than 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid spec maxLimitRequestRatio greater than max/min": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 api.LimitTypeContainer,
0000000000000000000000000000000000000000;;							Max:                  getResourceList("", "2Gi"),
0000000000000000000000000000000000000000;;							Min:                  getResourceList("", "512Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getResourceList("", "10"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"ratio 10 is greater than max/min = 4.000000",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid non standard limit type": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:                 "foo",
0000000000000000000000000000000000000000;;							Max:                  getStorageResourceList("10000T"),
0000000000000000000000000000000000000000;;							Min:                  getStorageResourceList("100Mi"),
0000000000000000000000000000000000000000;;							Default:              getStorageResourceList("500Mi"),
0000000000000000000000000000000000000000;;							DefaultRequest:       getStorageResourceList("200Mi"),
0000000000000000000000000000000000000000;;							MaxLimitRequestRatio: getStorageResourceList(""),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"must be a standard limit type or fully qualified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"min and max values missing, one required": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePersistentVolumeClaim,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"either minimum or maximum storage value is required, but neither was provided",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid min greater than max": {
0000000000000000000000000000000000000000;;				api.LimitRange{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: api.LimitRangeSpec{
0000000000000000000000000000000000000000;;					Limits: []api.LimitRangeItem{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type: api.LimitTypePersistentVolumeClaim,
0000000000000000000000000000000000000000;;							Min:  getStorageResourceList("10Gi"),
0000000000000000000000000000000000000000;;							Max:  getStorageResourceList("1Gi"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				"min value 10Gi is greater than max value 1Gi",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateLimitRange(&v.R)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				detail := errs[i].Detail
0000000000000000000000000000000000000000;;				if !strings.Contains(detail, v.D) {
0000000000000000000000000000000000000000;;					t.Errorf("[%s]: expected error detail either empty or %q, got %q", k, v.D, detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateResourceQuota(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU:                    resource.MustParse("100"),
0000000000000000000000000000000000000000;;				api.ResourceMemory:                 resource.MustParse("10000"),
0000000000000000000000000000000000000000;;				api.ResourceRequestsCPU:            resource.MustParse("100"),
0000000000000000000000000000000000000000;;				api.ResourceRequestsMemory:         resource.MustParse("10000"),
0000000000000000000000000000000000000000;;				api.ResourceLimitsCPU:              resource.MustParse("100"),
0000000000000000000000000000000000000000;;				api.ResourceLimitsMemory:           resource.MustParse("10000"),
0000000000000000000000000000000000000000;;				api.ResourcePods:                   resource.MustParse("10"),
0000000000000000000000000000000000000000;;				api.ResourceServices:               resource.MustParse("0"),
0000000000000000000000000000000000000000;;				api.ResourceReplicationControllers: resource.MustParse("10"),
0000000000000000000000000000000000000000;;				api.ResourceQuotas:                 resource.MustParse("10"),
0000000000000000000000000000000000000000;;				api.ResourceConfigMaps:             resource.MustParse("10"),
0000000000000000000000000000000000000000;;				api.ResourceSecrets:                resource.MustParse("10"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		terminatingSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU:       resource.MustParse("100"),
0000000000000000000000000000000000000000;;				api.ResourceLimitsCPU: resource.MustParse("200"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonTerminatingSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeNotTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bestEffortSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourcePods: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeBestEffort},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonBestEffortSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeNotBestEffort},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// storage is not yet supported as a quota tracked resource
0000000000000000000000000000000000000000;;		invalidQuotaResourceSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceStorage: resource.MustParse("10"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		negativeSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU:                    resource.MustParse("-100"),
0000000000000000000000000000000000000000;;				api.ResourceMemory:                 resource.MustParse("-10000"),
0000000000000000000000000000000000000000;;				api.ResourcePods:                   resource.MustParse("-10"),
0000000000000000000000000000000000000000;;				api.ResourceServices:               resource.MustParse("-10"),
0000000000000000000000000000000000000000;;				api.ResourceReplicationControllers: resource.MustParse("-10"),
0000000000000000000000000000000000000000;;				api.ResourceQuotas:                 resource.MustParse("-10"),
0000000000000000000000000000000000000000;;				api.ResourceConfigMaps:             resource.MustParse("-10"),
0000000000000000000000000000000000000000;;				api.ResourceSecrets:                resource.MustParse("-10"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fractionalComputeSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU: resource.MustParse("100m"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fractionalPodSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourcePods:                   resource.MustParse(".1"),
0000000000000000000000000000000000000000;;				api.ResourceServices:               resource.MustParse(".5"),
0000000000000000000000000000000000000000;;				api.ResourceReplicationControllers: resource.MustParse("1.25"),
0000000000000000000000000000000000000000;;				api.ResourceQuotas:                 resource.MustParse("2.5"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidTerminatingScopePairsSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeTerminating, api.ResourceQuotaScopeNotTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidBestEffortScopePairsSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourcePods: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScopeBestEffort, api.ResourceQuotaScopeNotBestEffort},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidScopeNameSpec := api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;			Hard: api.ResourceList{
0000000000000000000000000000000000000000;;				api.ResourceCPU: resource.MustParse("100"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Scopes: []api.ResourceQuotaScope{api.ResourceQuotaScope("foo")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := []api.ResourceQuota{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: spec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: fractionalComputeSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: terminatingSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: nonTerminatingSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: bestEffortSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "abc",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: nonBestEffortSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateResourceQuota(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			R api.ResourceQuota
0000000000000000000000000000000000000000;;			D string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"zero-length Name": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "", Namespace: "foo"}, Spec: spec},
0000000000000000000000000000000000000000;;				"name or generateName is required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero-length Namespace": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: ""}, Spec: spec},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid Name": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "^Invalid", Namespace: "foo"}, Spec: spec},
0000000000000000000000000000000000000000;;				dnsSubdomainLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid Namespace": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "^Invalid"}, Spec: spec},
0000000000000000000000000000000000000000;;				dnsLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative-limits": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: negativeSpec},
0000000000000000000000000000000000000000;;				isNegativeErrorMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"fractional-api-resource": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: fractionalPodSpec},
0000000000000000000000000000000000000000;;				isNotIntegerErrorMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-quota-resource": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: invalidQuotaResourceSpec},
0000000000000000000000000000000000000000;;				isInvalidQuotaResource,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-quota-terminating-pair": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: invalidTerminatingScopePairsSpec},
0000000000000000000000000000000000000000;;				"conflicting scopes",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-quota-besteffort-pair": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: invalidBestEffortScopePairsSpec},
0000000000000000000000000000000000000000;;				"conflicting scopes",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-quota-scope-name": {
0000000000000000000000000000000000000000;;				api.ResourceQuota{ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: "foo"}, Spec: invalidScopeNameSpec},
0000000000000000000000000000000000000000;;				"unsupported scope",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateResourceQuota(&v.R)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if !strings.Contains(errs[i].Detail, v.D) {
0000000000000000000000000000000000000000;;					t.Errorf("[%s]: expected error detail either empty or %s, got %s", k, v.D, errs[i].Detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		validLabels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		invalidLabels := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		successCases := []api.Namespace{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc", Labels: validLabels},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;					Finalizers: []api.FinalizerName{"example.com/something", "example.com/other"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateNamespace(&successCase); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			R api.Namespace
0000000000000000000000000000000000000000;;			D string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"zero-length name": {
0000000000000000000000000000000000000000;;				api.Namespace{ObjectMeta: metav1.ObjectMeta{Name: ""}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"defined-namespace": {
0000000000000000000000000000000000000000;;				api.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "abc-123", Namespace: "makesnosense"}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid-labels": {
0000000000000000000000000000000000000000;;				api.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "abc", Labels: invalidLabels}},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateNamespace(&v.R)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNamespaceFinalizeUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldNamespace api.Namespace
0000000000000000000000000000000000000000;;			namespace    api.Namespace
0000000000000000000000000000000000000000;;			valid        bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.Namespace{}, api.Namespace{}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;						Finalizers: []api.FinalizerName{"Foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"},
0000000000000000000000000000000000000000;;				Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;					Finalizers: []api.FinalizerName{"foo.com/bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;						Finalizers: []api.FinalizerName{"foo.com/bar", "what.com/bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "fooemptyfinalizer"},
0000000000000000000000000000000000000000;;				Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;					Finalizers: []api.FinalizerName{"foo.com/bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "fooemptyfinalizer"},
0000000000000000000000000000000000000000;;					Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;						Finalizers: []api.FinalizerName{"", "foo.com/bar", "what.com/bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			test.namespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			test.oldNamespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateNamespaceFinalizeUpdate(&test.namespace, &test.oldNamespace)
0000000000000000000000000000000000000000;;			if test.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected error: %v", i, errs)
0000000000000000000000000000000000000000;;				t.Logf("%#v vs %#v", test.oldNamespace, test.namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected non-error", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNamespaceStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldNamespace api.Namespace
0000000000000000000000000000000000000000;;			namespace    api.Namespace
0000000000000000000000000000000000000000;;			valid        bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.Namespace{}, api.Namespace{
0000000000000000000000000000000000000000;;				Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;					Phase: api.NamespaceActive,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			// Cannot set deletionTimestamp via status update
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "foo",
0000000000000000000000000000000000000000;;						DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;					Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;						Phase: api.NamespaceTerminating,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;			// Can update phase via status update
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:              "foo",
0000000000000000000000000000000000000000;;					DeletionTimestamp: &now}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "foo",
0000000000000000000000000000000000000000;;						DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;					Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;						Phase: api.NamespaceTerminating,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo"},
0000000000000000000000000000000000000000;;					Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;						Phase: api.NamespaceTerminating,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo"}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar"},
0000000000000000000000000000000000000000;;					Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;						Phase: api.NamespaceTerminating,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			test.namespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			test.oldNamespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateNamespaceStatusUpdate(&test.namespace, &test.oldNamespace)
0000000000000000000000000000000000000000;;			if test.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected error: %v", i, errs)
0000000000000000000000000000000000000000;;				t.Logf("%#v vs %#v", test.oldNamespace.ObjectMeta, test.namespace.ObjectMeta)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected non-error", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateNamespaceUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldNamespace api.Namespace
0000000000000000000000000000000000000000;;			namespace    api.Namespace
0000000000000000000000000000000000000000;;			valid        bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.Namespace{}, api.Namespace{}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo1"}},
0000000000000000000000000000000000000000;;				api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar1"},
0000000000000000000000000000000000000000;;				}, false},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo2",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo2",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "foo3",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo3",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo4",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"bar": "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo4",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo5",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo5",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"Foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;			{api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo6",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   "foo6",
0000000000000000000000000000000000000000;;					Labels: map[string]string{"Foo": "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;					Finalizers: []api.FinalizerName{"kubernetes"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.NamespaceStatus{
0000000000000000000000000000000000000000;;					Phase: api.NamespaceTerminating,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			test.namespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			test.oldNamespace.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateNamespaceUpdate(&test.namespace, &test.oldNamespace)
0000000000000000000000000000000000000000;;			if test.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected error: %v", i, errs)
0000000000000000000000000000000000000000;;				t.Logf("%#v vs %#v", test.oldNamespace.ObjectMeta, test.namespace.ObjectMeta)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected non-error", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		// Opaque secret validation
0000000000000000000000000000000000000000;;		validSecret := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					"data-1": []byte("bar"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			emptyName     = validSecret()
0000000000000000000000000000000000000000;;			invalidName   = validSecret()
0000000000000000000000000000000000000000;;			emptyNs       = validSecret()
0000000000000000000000000000000000000000;;			invalidNs     = validSecret()
0000000000000000000000000000000000000000;;			overMaxSize   = validSecret()
0000000000000000000000000000000000000000;;			invalidKey    = validSecret()
0000000000000000000000000000000000000000;;			leadingDotKey = validSecret()
0000000000000000000000000000000000000000;;			dotKey        = validSecret()
0000000000000000000000000000000000000000;;			doubleDotKey  = validSecret()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emptyName.Name = ""
0000000000000000000000000000000000000000;;		invalidName.Name = "NoUppercaseOrSpecialCharsLike=Equals"
0000000000000000000000000000000000000000;;		emptyNs.Namespace = ""
0000000000000000000000000000000000000000;;		invalidNs.Namespace = "NoUppercaseOrSpecialCharsLike=Equals"
0000000000000000000000000000000000000000;;		overMaxSize.Data = map[string][]byte{
0000000000000000000000000000000000000000;;			"over": make([]byte, api.MaxSecretSize+1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidKey.Data["a*b"] = []byte("whoops")
0000000000000000000000000000000000000000;;		leadingDotKey.Data[".key"] = []byte("bar")
0000000000000000000000000000000000000000;;		dotKey.Data["."] = []byte("bar")
0000000000000000000000000000000000000000;;		doubleDotKey.Data[".."] = []byte("bar")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// kubernetes.io/service-account-token secret validation
0000000000000000000000000000000000000000;;		validServiceAccountTokenSecret := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					Namespace: "bar",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						api.ServiceAccountNameKey: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Type: api.SecretTypeServiceAccountToken,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					"data-1": []byte("bar"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			emptyTokenAnnotation    = validServiceAccountTokenSecret()
0000000000000000000000000000000000000000;;			missingTokenAnnotation  = validServiceAccountTokenSecret()
0000000000000000000000000000000000000000;;			missingTokenAnnotations = validServiceAccountTokenSecret()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		emptyTokenAnnotation.Annotations[api.ServiceAccountNameKey] = ""
0000000000000000000000000000000000000000;;		delete(missingTokenAnnotation.Annotations, api.ServiceAccountNameKey)
0000000000000000000000000000000000000000;;		missingTokenAnnotations.Annotations = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			secret api.Secret
0000000000000000000000000000000000000000;;			valid  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid":                                     {validSecret(), true},
0000000000000000000000000000000000000000;;			"empty name":                                {emptyName, false},
0000000000000000000000000000000000000000;;			"invalid name":                              {invalidName, false},
0000000000000000000000000000000000000000;;			"empty namespace":                           {emptyNs, false},
0000000000000000000000000000000000000000;;			"invalid namespace":                         {invalidNs, false},
0000000000000000000000000000000000000000;;			"over max size":                             {overMaxSize, false},
0000000000000000000000000000000000000000;;			"invalid key":                               {invalidKey, false},
0000000000000000000000000000000000000000;;			"valid service-account-token secret":        {validServiceAccountTokenSecret(), true},
0000000000000000000000000000000000000000;;			"empty service-account-token annotation":    {emptyTokenAnnotation, false},
0000000000000000000000000000000000000000;;			"missing service-account-token annotation":  {missingTokenAnnotation, false},
0000000000000000000000000000000000000000;;			"missing service-account-token annotations": {missingTokenAnnotations, false},
0000000000000000000000000000000000000000;;			"leading dot key":                           {leadingDotKey, true},
0000000000000000000000000000000000000000;;			"dot key":                                   {dotKey, false},
0000000000000000000000000000000000000000;;			"double dot key":                            {doubleDotKey, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateSecret(&tc.secret)
0000000000000000000000000000000000000000;;			if tc.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDockerConfigSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		validDockerSecret := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Type:       api.SecretTypeDockercfg,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					api.DockerConfigKey: []byte(`{"https://index.docker.io/v1/": {"auth": "Y2x1ZWRyb29sZXIwMDAxOnBhc3N3b3Jk","email": "fake@example.com"}}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validDockerSecret2 := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Type:       api.SecretTypeDockerConfigJson,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					api.DockerConfigJsonKey: []byte(`{"auths":{"https://index.docker.io/v1/": {"auth": "Y2x1ZWRyb29sZXIwMDAxOnBhc3N3b3Jk","email": "fake@example.com"}}}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			missingDockerConfigKey  = validDockerSecret()
0000000000000000000000000000000000000000;;			emptyDockerConfigKey    = validDockerSecret()
0000000000000000000000000000000000000000;;			invalidDockerConfigKey  = validDockerSecret()
0000000000000000000000000000000000000000;;			missingDockerConfigKey2 = validDockerSecret2()
0000000000000000000000000000000000000000;;			emptyDockerConfigKey2   = validDockerSecret2()
0000000000000000000000000000000000000000;;			invalidDockerConfigKey2 = validDockerSecret2()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delete(missingDockerConfigKey.Data, api.DockerConfigKey)
0000000000000000000000000000000000000000;;		emptyDockerConfigKey.Data[api.DockerConfigKey] = []byte("")
0000000000000000000000000000000000000000;;		invalidDockerConfigKey.Data[api.DockerConfigKey] = []byte("bad")
0000000000000000000000000000000000000000;;		delete(missingDockerConfigKey2.Data, api.DockerConfigJsonKey)
0000000000000000000000000000000000000000;;		emptyDockerConfigKey2.Data[api.DockerConfigJsonKey] = []byte("")
0000000000000000000000000000000000000000;;		invalidDockerConfigKey2.Data[api.DockerConfigJsonKey] = []byte("bad")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			secret api.Secret
0000000000000000000000000000000000000000;;			valid  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid dockercfg":     {validDockerSecret(), true},
0000000000000000000000000000000000000000;;			"missing dockercfg":   {missingDockerConfigKey, false},
0000000000000000000000000000000000000000;;			"empty dockercfg":     {emptyDockerConfigKey, false},
0000000000000000000000000000000000000000;;			"invalid dockercfg":   {invalidDockerConfigKey, false},
0000000000000000000000000000000000000000;;			"valid config.json":   {validDockerSecret2(), true},
0000000000000000000000000000000000000000;;			"missing config.json": {missingDockerConfigKey2, false},
0000000000000000000000000000000000000000;;			"empty config.json":   {emptyDockerConfigKey2, false},
0000000000000000000000000000000000000000;;			"invalid config.json": {invalidDockerConfigKey2, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateSecret(&tc.secret)
0000000000000000000000000000000000000000;;			if tc.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateBasicAuthSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		validBasicAuthSecret := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Type:       api.SecretTypeBasicAuth,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					api.BasicAuthUsernameKey: []byte("username"),
0000000000000000000000000000000000000000;;					api.BasicAuthPasswordKey: []byte("password"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			missingBasicAuthUsernamePasswordKeys = validBasicAuthSecret()
0000000000000000000000000000000000000000;;			// invalidBasicAuthUsernamePasswordKey  = validBasicAuthSecret()
0000000000000000000000000000000000000000;;			// emptyBasicAuthUsernameKey            = validBasicAuthSecret()
0000000000000000000000000000000000000000;;			// emptyBasicAuthPasswordKey            = validBasicAuthSecret()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delete(missingBasicAuthUsernamePasswordKeys.Data, api.BasicAuthUsernameKey)
0000000000000000000000000000000000000000;;		delete(missingBasicAuthUsernamePasswordKeys.Data, api.BasicAuthPasswordKey)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// invalidBasicAuthUsernamePasswordKey.Data[api.BasicAuthUsernameKey] = []byte("bad")
0000000000000000000000000000000000000000;;		// invalidBasicAuthUsernamePasswordKey.Data[api.BasicAuthPasswordKey] = []byte("bad")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// emptyBasicAuthUsernameKey.Data[api.BasicAuthUsernameKey] = []byte("")
0000000000000000000000000000000000000000;;		// emptyBasicAuthPasswordKey.Data[api.BasicAuthPasswordKey] = []byte("")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			secret api.Secret
0000000000000000000000000000000000000000;;			valid  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid": {validBasicAuthSecret(), true},
0000000000000000000000000000000000000000;;			"missing username and password": {missingBasicAuthUsernamePasswordKeys, false},
0000000000000000000000000000000000000000;;			// "invalid username and password": {invalidBasicAuthUsernamePasswordKey, false},
0000000000000000000000000000000000000000;;			// "empty username":   {emptyBasicAuthUsernameKey, false},
0000000000000000000000000000000000000000;;			// "empty password":   {emptyBasicAuthPasswordKey, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateSecret(&tc.secret)
0000000000000000000000000000000000000000;;			if tc.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSSHAuthSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		validSSHAuthSecret := func() api.Secret {
0000000000000000000000000000000000000000;;			return api.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "bar"},
0000000000000000000000000000000000000000;;				Type:       api.SecretTypeSSHAuth,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					api.SSHAuthPrivateKey: []byte("foo-bar-baz"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		missingSSHAuthPrivateKey := validSSHAuthSecret()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delete(missingSSHAuthPrivateKey.Data, api.SSHAuthPrivateKey)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			secret api.Secret
0000000000000000000000000000000000000000;;			valid  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid":               {validSSHAuthSecret(), true},
0000000000000000000000000000000000000000;;			"missing private key": {missingSSHAuthPrivateKey, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateSecret(&tc.secret)
0000000000000000000000000000000000000000;;			if tc.valid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.valid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEndpoints(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := map[string]api.Endpoints{
0000000000000000000000000000000000000000;;			"simple endpoint": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;				Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}, {IP: "10.10.2.2"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "a", Port: 8675, Protocol: "TCP"}, {Name: "b", Port: 309, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "10.10.3.3"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "a", Port: 93, Protocol: "TCP"}, {Name: "b", Port: 76, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty subsets": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no name required for singleton port": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;				Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Port: 8675, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty ports": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;				Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "10.10.3.3"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateEndpoints(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %s, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			endpoints   api.Endpoints
0000000000000000000000000000000000000000;;			errorType   field.ErrorType
0000000000000000000000000000000000000000;;			errorDetail string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"missing namespace": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{ObjectMeta: metav1.ObjectMeta{Name: "mysvc"}},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing name": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{ObjectMeta: metav1.ObjectMeta{Namespace: "namespace"}},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid namespace": {
0000000000000000000000000000000000000000;;				endpoints:   api.Endpoints{ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "no@#invalid.;chars\"allowed"}},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: dnsLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid name": {
0000000000000000000000000000000000000000;;				endpoints:   api.Endpoints{ObjectMeta: metav1.ObjectMeta{Name: "-_Invliad^&Characters", Namespace: "namespace"}},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: dnsSubdomainLabelErrMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty addresses": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{{Name: "a", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid IP": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "[2001:0db8:85a3:0042:1000:8a2e:0370:7334]"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "must be a valid IP address",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Multiple ports, one without name": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Port: 8675, Protocol: "TCP"}, {Name: "b", Port: 309, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Invalid port number": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Port: 66000, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "between",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Invalid protocol": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Port: 93, Protocol: "Protocol"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueNotSupported",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Address missing IP": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "must be a valid IP address",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Port missing number": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "between",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Port missing protocol": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "10.10.1.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "a", Port: 93}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Address is loopback": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "127.0.0.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "p", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "loopback",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Address is link-local": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "169.254.169.254"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "p", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "link-local",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Address is link-local multicast": {
0000000000000000000000000000000000000000;;				endpoints: api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mysvc", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "224.0.0.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "p", Port: 93, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: "link-local multicast",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateEndpoints(&v.endpoints); len(errs) == 0 || errs[0].Type != v.errorType || !strings.Contains(errs[0].Detail, v.errorDetail) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Expected error type %s with detail %q, got %v", k, v.errorType, v.errorDetail, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateTLSSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := map[string]api.Secret{
0000000000000000000000000000000000000000;;			"empty certificate chain": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "tls-cert", Namespace: "namespace"},
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					api.TLSCertKey:       []byte("public key"),
0000000000000000000000000000000000000000;;					api.TLSPrivateKeyKey: []byte("private key"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSecret(&v); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected success for %s, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			secrets     api.Secret
0000000000000000000000000000000000000000;;			errorType   field.ErrorType
0000000000000000000000000000000000000000;;			errorDetail string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"missing public key": {
0000000000000000000000000000000000000000;;				secrets: api.Secret{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "tls-cert"},
0000000000000000000000000000000000000000;;					Data: map[string][]byte{
0000000000000000000000000000000000000000;;						api.TLSCertKey: []byte("public key"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing private key": {
0000000000000000000000000000000000000000;;				secrets: api.Secret{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "tls-cert"},
0000000000000000000000000000000000000000;;					Data: map[string][]byte{
0000000000000000000000000000000000000000;;						api.TLSCertKey: []byte("public key"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorType: "FieldValueRequired",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSecret(&v.secrets); len(errs) == 0 || errs[0].Type != v.errorType || !strings.Contains(errs[0].Detail, v.errorDetail) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Expected error type %s with detail %q, got %v", k, v.errorType, v.errorDetail, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSecurityContext(t *testing.T) {
0000000000000000000000000000000000000000;;		priv := false
0000000000000000000000000000000000000000;;		runAsUser := int64(1)
0000000000000000000000000000000000000000;;		fullValidSC := func() *api.SecurityContext {
0000000000000000000000000000000000000000;;			return &api.SecurityContext{
0000000000000000000000000000000000000000;;				Privileged: &priv,
0000000000000000000000000000000000000000;;				Capabilities: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add:  []api.Capability{"foo"},
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SELinuxOptions: &api.SELinuxOptions{
0000000000000000000000000000000000000000;;					User:  "user",
0000000000000000000000000000000000000000;;					Role:  "role",
0000000000000000000000000000000000000000;;					Type:  "type",
0000000000000000000000000000000000000000;;					Level: "level",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RunAsUser: &runAsUser,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//setup data
0000000000000000000000000000000000000000;;		allSettings := fullValidSC()
0000000000000000000000000000000000000000;;		noCaps := fullValidSC()
0000000000000000000000000000000000000000;;		noCaps.Capabilities = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noSELinux := fullValidSC()
0000000000000000000000000000000000000000;;		noSELinux.SELinuxOptions = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noPrivRequest := fullValidSC()
0000000000000000000000000000000000000000;;		noPrivRequest.Privileged = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noRunAsUser := fullValidSC()
0000000000000000000000000000000000000000;;		noRunAsUser.RunAsUser = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successCases := map[string]struct {
0000000000000000000000000000000000000000;;			sc *api.SecurityContext
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"all settings":    {allSettings},
0000000000000000000000000000000000000000;;			"no capabilities": {noCaps},
0000000000000000000000000000000000000000;;			"no selinux":      {noSELinux},
0000000000000000000000000000000000000000;;			"no priv request": {noPrivRequest},
0000000000000000000000000000000000000000;;			"no run as user":  {noRunAsUser},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSecurityContext(v.sc, field.NewPath("field")); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Expected success, got %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		privRequestWithGlobalDeny := fullValidSC()
0000000000000000000000000000000000000000;;		requestPrivileged := true
0000000000000000000000000000000000000000;;		privRequestWithGlobalDeny.Privileged = &requestPrivileged
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		negativeRunAsUser := fullValidSC()
0000000000000000000000000000000000000000;;		negativeUser := int64(-1)
0000000000000000000000000000000000000000;;		negativeRunAsUser.RunAsUser = &negativeUser
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]struct {
0000000000000000000000000000000000000000;;			sc          *api.SecurityContext
0000000000000000000000000000000000000000;;			errorType   field.ErrorType
0000000000000000000000000000000000000000;;			errorDetail string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"request privileged when capabilities forbids": {
0000000000000000000000000000000000000000;;				sc:          privRequestWithGlobalDeny,
0000000000000000000000000000000000000000;;				errorType:   "FieldValueForbidden",
0000000000000000000000000000000000000000;;				errorDetail: "disallowed by cluster policy",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative RunAsUser": {
0000000000000000000000000000000000000000;;				sc:          negativeRunAsUser,
0000000000000000000000000000000000000000;;				errorType:   "FieldValueInvalid",
0000000000000000000000000000000000000000;;				errorDetail: isNegativeErrorMsg,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidateSecurityContext(v.sc, field.NewPath("field")); len(errs) == 0 || errs[0].Type != v.errorType || !strings.Contains(errs[0].Detail, v.errorDetail) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Expected error type %q with detail %q, got %v", k, v.errorType, v.errorDetail, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeValidSecurityContext(priv bool) *api.SecurityContext {
0000000000000000000000000000000000000000;;		return &api.SecurityContext{
0000000000000000000000000000000000000000;;			Privileged: &priv,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidPodLogOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;		negative := int64(-1)
0000000000000000000000000000000000000000;;		zero := int64(0)
0000000000000000000000000000000000000000;;		positive := int64(1)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			opt  api.PodLogOptions
0000000000000000000000000000000000000000;;			errs int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{api.PodLogOptions{}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{Previous: true}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{Follow: true}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{TailLines: &zero}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{TailLines: &negative}, 1},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{TailLines: &positive}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{LimitBytes: &zero}, 1},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{LimitBytes: &negative}, 1},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{LimitBytes: &positive}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{SinceSeconds: &negative}, 1},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{SinceSeconds: &positive}, 0},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{SinceSeconds: &zero}, 1},
0000000000000000000000000000000000000000;;			{api.PodLogOptions{SinceTime: &now}, 0},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			errs := ValidatePodLogOptions(&test.opt)
0000000000000000000000000000000000000000;;			if test.errs != len(errs) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Unexpected errors: %v", i, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateConfigMap(t *testing.T) {
0000000000000000000000000000000000000000;;		newConfigMap := func(name, namespace string, data map[string]string) api.ConfigMap {
0000000000000000000000000000000000000000;;			return api.ConfigMap{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      name,
0000000000000000000000000000000000000000;;					Namespace: namespace,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data: data,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			validConfigMap = newConfigMap("validname", "validns", map[string]string{"key": "value"})
0000000000000000000000000000000000000000;;			maxKeyLength   = newConfigMap("validname", "validns", map[string]string{strings.Repeat("a", 253): "value"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			emptyName        = newConfigMap("", "validns", nil)
0000000000000000000000000000000000000000;;			invalidName      = newConfigMap("NoUppercaseOrSpecialCharsLike=Equals", "validns", nil)
0000000000000000000000000000000000000000;;			emptyNs          = newConfigMap("validname", "", nil)
0000000000000000000000000000000000000000;;			invalidNs        = newConfigMap("validname", "NoUppercaseOrSpecialCharsLike=Equals", nil)
0000000000000000000000000000000000000000;;			invalidKey       = newConfigMap("validname", "validns", map[string]string{"a*b": "value"})
0000000000000000000000000000000000000000;;			leadingDotKey    = newConfigMap("validname", "validns", map[string]string{".ab": "value"})
0000000000000000000000000000000000000000;;			dotKey           = newConfigMap("validname", "validns", map[string]string{".": "value"})
0000000000000000000000000000000000000000;;			doubleDotKey     = newConfigMap("validname", "validns", map[string]string{"..": "value"})
0000000000000000000000000000000000000000;;			overMaxKeyLength = newConfigMap("validname", "validns", map[string]string{strings.Repeat("a", 254): "value"})
0000000000000000000000000000000000000000;;			overMaxSize      = newConfigMap("validname", "validns", map[string]string{"key": strings.Repeat("a", api.MaxSecretSize+1)})
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			cfg     api.ConfigMap
0000000000000000000000000000000000000000;;			isValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid":               {validConfigMap, true},
0000000000000000000000000000000000000000;;			"max key length":      {maxKeyLength, true},
0000000000000000000000000000000000000000;;			"leading dot key":     {leadingDotKey, true},
0000000000000000000000000000000000000000;;			"empty name":          {emptyName, false},
0000000000000000000000000000000000000000;;			"invalid name":        {invalidName, false},
0000000000000000000000000000000000000000;;			"invalid key":         {invalidKey, false},
0000000000000000000000000000000000000000;;			"empty namespace":     {emptyNs, false},
0000000000000000000000000000000000000000;;			"invalid namespace":   {invalidNs, false},
0000000000000000000000000000000000000000;;			"dot key":             {dotKey, false},
0000000000000000000000000000000000000000;;			"double dot key":      {doubleDotKey, false},
0000000000000000000000000000000000000000;;			"over max key length": {overMaxKeyLength, false},
0000000000000000000000000000000000000000;;			"over max size":       {overMaxSize, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateConfigMap(&tc.cfg)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateConfigMapUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		newConfigMap := func(version, name, namespace string, data map[string]string) api.ConfigMap {
0000000000000000000000000000000000000000;;			return api.ConfigMap{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            name,
0000000000000000000000000000000000000000;;					Namespace:       namespace,
0000000000000000000000000000000000000000;;					ResourceVersion: version,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data: data,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			validConfigMap = newConfigMap("1", "validname", "validns", map[string]string{"key": "value"})
0000000000000000000000000000000000000000;;			noVersion      = newConfigMap("", "validname", "validns", map[string]string{"key": "value"})
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name    string
0000000000000000000000000000000000000000;;			newCfg  api.ConfigMap
0000000000000000000000000000000000000000;;			oldCfg  api.ConfigMap
0000000000000000000000000000000000000000;;			isValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:    "valid",
0000000000000000000000000000000000000000;;				newCfg:  validConfigMap,
0000000000000000000000000000000000000000;;				oldCfg:  validConfigMap,
0000000000000000000000000000000000000000;;				isValid: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:    "invalid",
0000000000000000000000000000000000000000;;				newCfg:  noVersion,
0000000000000000000000000000000000000000;;				oldCfg:  validConfigMap,
0000000000000000000000000000000000000000;;				isValid: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			errs := ValidateConfigMapUpdate(&tc.newCfg, &tc.oldCfg)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", tc.name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateHasLabel(t *testing.T) {
0000000000000000000000000000000000000000;;		successCase := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:      "123",
0000000000000000000000000000000000000000;;			Namespace: "ns",
0000000000000000000000000000000000000000;;			Labels: map[string]string{
0000000000000000000000000000000000000000;;				"other": "blah",
0000000000000000000000000000000000000000;;				"foo":   "bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateHasLabel(successCase, field.NewPath("field"), "foo", "bar"); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected success: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		missingCase := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:      "123",
0000000000000000000000000000000000000000;;			Namespace: "ns",
0000000000000000000000000000000000000000;;			Labels: map[string]string{
0000000000000000000000000000000000000000;;				"other": "blah",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateHasLabel(missingCase, field.NewPath("field"), "foo", "bar"); len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrongValueCase := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:      "123",
0000000000000000000000000000000000000000;;			Namespace: "ns",
0000000000000000000000000000000000000000;;			Labels: map[string]string{
0000000000000000000000000000000000000000;;				"other": "blah",
0000000000000000000000000000000000000000;;				"foo":   "notbar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateHasLabel(wrongValueCase, field.NewPath("field"), "foo", "bar"); len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidSysctlName(t *testing.T) {
0000000000000000000000000000000000000000;;		valid := []string{
0000000000000000000000000000000000000000;;			"a.b.c.d",
0000000000000000000000000000000000000000;;			"a",
0000000000000000000000000000000000000000;;			"a_b",
0000000000000000000000000000000000000000;;			"a-b",
0000000000000000000000000000000000000000;;			"abc",
0000000000000000000000000000000000000000;;			"abc.def",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalid := []string{
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			"*",
0000000000000000000000000000000000000000;;			"ä",
0000000000000000000000000000000000000000;;			"a_",
0000000000000000000000000000000000000000;;			"_",
0000000000000000000000000000000000000000;;			"__",
0000000000000000000000000000000000000000;;			"_a",
0000000000000000000000000000000000000000;;			"_a._b",
0000000000000000000000000000000000000000;;			"-",
0000000000000000000000000000000000000000;;			".",
0000000000000000000000000000000000000000;;			"a.",
0000000000000000000000000000000000000000;;			".a",
0000000000000000000000000000000000000000;;			"a.b.",
0000000000000000000000000000000000000000;;			"a*.b",
0000000000000000000000000000000000000000;;			"a*b",
0000000000000000000000000000000000000000;;			"*a",
0000000000000000000000000000000000000000;;			"a.*",
0000000000000000000000000000000000000000;;			"*",
0000000000000000000000000000000000000000;;			"abc*",
0000000000000000000000000000000000000000;;			"a.abc*",
0000000000000000000000000000000000000000;;			"a.b.*",
0000000000000000000000000000000000000000;;			"Abc",
0000000000000000000000000000000000000000;;			func(n int) string {
0000000000000000000000000000000000000000;;				x := make([]byte, n)
0000000000000000000000000000000000000000;;				for i := range x {
0000000000000000000000000000000000000000;;					x[i] = byte('a')
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return string(x)
0000000000000000000000000000000000000000;;			}(256),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range valid {
0000000000000000000000000000000000000000;;			if !IsValidSysctlName(s) {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected to be a valid sysctl name", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range invalid {
0000000000000000000000000000000000000000;;			if IsValidSysctlName(s) {
0000000000000000000000000000000000000000;;				t.Errorf("%q expected to be an invalid sysctl name", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSysctls(t *testing.T) {
0000000000000000000000000000000000000000;;		valid := []string{
0000000000000000000000000000000000000000;;			"net.foo.bar",
0000000000000000000000000000000000000000;;			"kernel.shmmax",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalid := []string{
0000000000000000000000000000000000000000;;			"i..nvalid",
0000000000000000000000000000000000000000;;			"_invalid",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sysctls := make([]api.Sysctl, len(valid))
0000000000000000000000000000000000000000;;		for i, sysctl := range valid {
0000000000000000000000000000000000000000;;			sysctls[i].Name = sysctl
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := validateSysctls(sysctls, field.NewPath("foo"))
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected validation errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sysctls = make([]api.Sysctl, len(invalid))
0000000000000000000000000000000000000000;;		for i, sysctl := range invalid {
0000000000000000000000000000000000000000;;			sysctls[i].Name = sysctl
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs = validateSysctls(sysctls, field.NewPath("foo"))
0000000000000000000000000000000000000000;;		if len(errs) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 2 validation errors. Got: %v", errs)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if got, expected := errs[0].Error(), "foo"; !strings.Contains(got, expected) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected errors: expected=%q, got=%q", expected, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := errs[1].Error(), "foo"; !strings.Contains(got, expected) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected errors: expected=%q, got=%q", expected, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newNodeNameEndpoint(nodeName string) *api.Endpoints {
0000000000000000000000000000000000000000;;		ep := &api.Endpoints{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "foo",
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Subsets: []api.EndpointSubset{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					NotReadyAddresses: []api.EndpointAddress{},
0000000000000000000000000000000000000000;;					Ports:             []api.EndpointPort{{Name: "https", Port: 443, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							IP:       "8.8.8.8",
0000000000000000000000000000000000000000;;							Hostname: "zookeeper1",
0000000000000000000000000000000000000000;;							NodeName: &nodeName}}}}}
0000000000000000000000000000000000000000;;		return ep
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEndpointAddressNodeNameUpdateRestrictions(t *testing.T) {
0000000000000000000000000000000000000000;;		oldEndpoint := newNodeNameEndpoint("kubernetes-node-setup-by-backend")
0000000000000000000000000000000000000000;;		updatedEndpoint := newNodeNameEndpoint("kubernetes-changed-nodename")
0000000000000000000000000000000000000000;;		// Check that NodeName cannot be changed during update (if already set)
0000000000000000000000000000000000000000;;		errList := ValidateEndpoints(updatedEndpoint)
0000000000000000000000000000000000000000;;		errList = append(errList, ValidateEndpointsUpdate(updatedEndpoint, oldEndpoint)...)
0000000000000000000000000000000000000000;;		if len(errList) == 0 {
0000000000000000000000000000000000000000;;			t.Error("Endpoint should not allow changing of Subset.Addresses.NodeName on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEndpointAddressNodeNameInvalidDNSSubdomain(t *testing.T) {
0000000000000000000000000000000000000000;;		// Check NodeName DNS validation
0000000000000000000000000000000000000000;;		endpoint := newNodeNameEndpoint("illegal*.nodename")
0000000000000000000000000000000000000000;;		errList := ValidateEndpoints(endpoint)
0000000000000000000000000000000000000000;;		if len(errList) == 0 {
0000000000000000000000000000000000000000;;			t.Error("Endpoint should reject invalid NodeName")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEndpointAddressNodeNameCanBeAnIPAddress(t *testing.T) {
0000000000000000000000000000000000000000;;		endpoint := newNodeNameEndpoint("10.10.1.1")
0000000000000000000000000000000000000000;;		errList := ValidateEndpoints(endpoint)
0000000000000000000000000000000000000000;;		if len(errList) != 0 {
0000000000000000000000000000000000000000;;			t.Error("Endpoint should accept a NodeName that is an IP address")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateFlexVolumeSource(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			source       *api.FlexVolumeSource
0000000000000000000000000000000000000000;;			expectedErrs map[string]string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid": {
0000000000000000000000000000000000000000;;				source:       &api.FlexVolumeSource{Driver: "foo"},
0000000000000000000000000000000000000000;;				expectedErrs: map[string]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid with options": {
0000000000000000000000000000000000000000;;				source:       &api.FlexVolumeSource{Driver: "foo", Options: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				expectedErrs: map[string]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no driver": {
0000000000000000000000000000000000000000;;				source:       &api.FlexVolumeSource{Driver: ""},
0000000000000000000000000000000000000000;;				expectedErrs: map[string]string{"driver": "Required value"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"reserved option keys": {
0000000000000000000000000000000000000000;;				source: &api.FlexVolumeSource{
0000000000000000000000000000000000000000;;					Driver: "foo",
0000000000000000000000000000000000000000;;					Options: map[string]string{
0000000000000000000000000000000000000000;;						// valid options
0000000000000000000000000000000000000000;;						"myns.io":               "A",
0000000000000000000000000000000000000000;;						"myns.io/bar":           "A",
0000000000000000000000000000000000000000;;						"myns.io/kubernetes.io": "A",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						// invalid options
0000000000000000000000000000000000000000;;						"KUBERNETES.IO":     "A",
0000000000000000000000000000000000000000;;						"kubernetes.io":     "A",
0000000000000000000000000000000000000000;;						"kubernetes.io/":    "A",
0000000000000000000000000000000000000000;;						"kubernetes.io/foo": "A",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						"alpha.kubernetes.io":     "A",
0000000000000000000000000000000000000000;;						"alpha.kubernetes.io/":    "A",
0000000000000000000000000000000000000000;;						"alpha.kubernetes.io/foo": "A",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						"k8s.io":     "A",
0000000000000000000000000000000000000000;;						"k8s.io/":    "A",
0000000000000000000000000000000000000000;;						"k8s.io/foo": "A",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						"alpha.k8s.io":     "A",
0000000000000000000000000000000000000000;;						"alpha.k8s.io/":    "A",
0000000000000000000000000000000000000000;;						"alpha.k8s.io/foo": "A",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErrs: map[string]string{
0000000000000000000000000000000000000000;;					"options[KUBERNETES.IO]":           "reserved",
0000000000000000000000000000000000000000;;					"options[kubernetes.io]":           "reserved",
0000000000000000000000000000000000000000;;					"options[kubernetes.io/]":          "reserved",
0000000000000000000000000000000000000000;;					"options[kubernetes.io/foo]":       "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.kubernetes.io]":     "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.kubernetes.io/]":    "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.kubernetes.io/foo]": "reserved",
0000000000000000000000000000000000000000;;					"options[k8s.io]":                  "reserved",
0000000000000000000000000000000000000000;;					"options[k8s.io/]":                 "reserved",
0000000000000000000000000000000000000000;;					"options[k8s.io/foo]":              "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.k8s.io]":            "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.k8s.io/]":           "reserved",
0000000000000000000000000000000000000000;;					"options[alpha.k8s.io/foo]":        "reserved",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			errs := validateFlexVolumeSource(tc.source, nil)
0000000000000000000000000000000000000000;;			for _, err := range errs {
0000000000000000000000000000000000000000;;				expectedErr, ok := tc.expectedErrs[err.Field]
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected err on field %s: %v", k, err.Field, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(err.Error(), expectedErr) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected err on field %s to contain '%s', was %v", k, err.Field, expectedErr, err.Error())
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) != len(tc.expectedErrs) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected errs %#v, got %#v", k, tc.expectedErrs, errs)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
