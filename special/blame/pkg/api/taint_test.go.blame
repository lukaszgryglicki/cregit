0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e33e184482a3f1355da5e07266f6a08a887ee08f;pkg/api/methods_test.go[pkg/api/methods_test.go][pkg/api/taint_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTaintToString(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			taint          *Taint
0000000000000000000000000000000000000000;;			expectedString string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedString: "foo=bar:NoSchedule",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedString: "foo:NoSchedule",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			if tc.expectedString != tc.taint.ToString() {
0000000000000000000000000000000000000000;;				t.Errorf("[%v] expected taint %v converted to %s, got %s", i, tc.taint, tc.expectedString, tc.taint.ToString())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchTaint(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			description  string
0000000000000000000000000000000000000000;;			taint        *Taint
0000000000000000000000000000000000000000;;			taintToMatch Taint
0000000000000000000000000000000000000000;;			expectMatch  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "two taints with the same key,value,effect should match",
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taintToMatch: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "two taints with the same key,effect but different value should match",
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taintToMatch: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "different-value",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "two taints with the different key cannot match",
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taintToMatch: Taint{
0000000000000000000000000000000000000000;;					Key:    "different-key",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "two taints with the different effect cannot match",
0000000000000000000000000000000000000000;;				taint: &Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taintToMatch: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectPreferNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if tc.expectMatch != tc.taint.MatchTaint(tc.taintToMatch) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expect taint %s match taint %s", tc.description, tc.taint.ToString(), tc.taintToMatch.ToString())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
