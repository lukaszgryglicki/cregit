0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4bfbd98ce6474205ebd59ab3028dce1cd914e325;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self ResourceName) String() string {
0000000000000000000000000000000000000000;;		return string(self)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the CPU limit if specified.
0000000000000000000000000000000000000000;;	func (self *ResourceList) Cpu() *resource.Quantity {
0000000000000000000000000000000000000000;;		if val, ok := (*self)[ResourceCPU]; ok {
0000000000000000000000000000000000000000;;			return &val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &resource.Quantity{Format: resource.DecimalSI}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the Memory limit if specified.
0000000000000000000000000000000000000000;;	func (self *ResourceList) Memory() *resource.Quantity {
0000000000000000000000000000000000000000;;		if val, ok := (*self)[ResourceMemory]; ok {
0000000000000000000000000000000000000000;;			return &val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &resource.Quantity{Format: resource.BinarySI}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *ResourceList) Pods() *resource.Quantity {
0000000000000000000000000000000000000000;;		if val, ok := (*self)[ResourcePods]; ok {
0000000000000000000000000000000000000000;;			return &val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &resource.Quantity{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *ResourceList) NvidiaGPU() *resource.Quantity {
0000000000000000000000000000000000000000;;		if val, ok := (*self)[ResourceNvidiaGPU]; ok {
0000000000000000000000000000000000000000;;			return &val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &resource.Quantity{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *ResourceList) StorageOverlay() *resource.Quantity {
0000000000000000000000000000000000000000;;		if val, ok := (*self)[ResourceStorageOverlay]; ok {
0000000000000000000000000000000000000000;;			return &val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &resource.Quantity{}
0000000000000000000000000000000000000000;;	}
