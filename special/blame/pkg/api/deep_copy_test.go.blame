0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
1728abb74c6eae7e75fcbf68e1fd2100c09e6c5f;pkg/conversion/conversion_test.go[pkg/conversion/conversion_test.go][pkg/api/deep_copy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseTimeOrDie(ts string) metav1.Time {
0000000000000000000000000000000000000000;;		t, err := time.Parse(time.RFC3339, ts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return metav1.Time{Time: t}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var benchmarkPod api.Pod = api.Pod{
0000000000000000000000000000000000000000;;		TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;			Kind:       "Pod",
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:              "etcd-server-e2e-test-wojtekt-master",
0000000000000000000000000000000000000000;;			Namespace:         "default",
0000000000000000000000000000000000000000;;			SelfLink:          "/api/v1/namespaces/default/pods/etcd-server-e2e-test-wojtekt-master",
0000000000000000000000000000000000000000;;			UID:               types.UID("a671734a-e8e5-11e4-8fde-42010af09327"),
0000000000000000000000000000000000000000;;			ResourceVersion:   "22",
0000000000000000000000000000000000000000;;			CreationTimestamp: parseTimeOrDie("2015-04-22T11:49:36Z"),
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		Spec: api.PodSpec{
0000000000000000000000000000000000000000;;			Volumes: []api.Volume{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "varetcd",
0000000000000000000000000000000000000000;;					VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{
0000000000000000000000000000000000000000;;							Path: "/mnt/master-pd/var/etcd",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Containers: []api.Container{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:  "etcd-container",
0000000000000000000000000000000000000000;;					Image: "gcr.io/google_containers/etcd:2.0.9",
0000000000000000000000000000000000000000;;					Command: []string{
0000000000000000000000000000000000000000;;						"/usr/local/bin/etcd",
0000000000000000000000000000000000000000;;						"--addr",
0000000000000000000000000000000000000000;;						"127.0.0.1:2379",
0000000000000000000000000000000000000000;;						"--bind-addr",
0000000000000000000000000000000000000000;;						"127.0.0.1:2379",
0000000000000000000000000000000000000000;;						"--data-dir",
0000000000000000000000000000000000000000;;						"/var/etcd/data",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ports: []api.ContainerPort{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:          "serverport",
0000000000000000000000000000000000000000;;							HostPort:      2380,
0000000000000000000000000000000000000000;;							ContainerPort: 2380,
0000000000000000000000000000000000000000;;							Protocol:      "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:          "clientport",
0000000000000000000000000000000000000000;;							HostPort:      2379,
0000000000000000000000000000000000000000;;							ContainerPort: 2379,
0000000000000000000000000000000000000000;;							Protocol:      "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					VolumeMounts: []api.VolumeMount{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:      "varetcd",
0000000000000000000000000000000000000000;;							MountPath: "/var/etcd",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					TerminationMessagePath: "/dev/termination-log",
0000000000000000000000000000000000000000;;					ImagePullPolicy:        api.PullIfNotPresent,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;			DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			NodeName:      "e2e-test-wojtekt-master",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		Status: api.PodStatus{
0000000000000000000000000000000000000000;;			Phase: api.PodRunning,
0000000000000000000000000000000000000000;;			Conditions: []api.PodCondition{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Type:   api.PodReady,
0000000000000000000000000000000000000000;;					Status: api.ConditionTrue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "etcd-container",
0000000000000000000000000000000000000000;;					State: api.ContainerState{
0000000000000000000000000000000000000000;;						Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;							StartedAt: parseTimeOrDie("2015-04-22T11:49:32Z"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 0,
0000000000000000000000000000000000000000;;					Image:        "gcr.io/google_containers/etcd:2.0.9",
0000000000000000000000000000000000000000;;					ImageID:      "docker://b6b9a86dc06aa1361357ca1b105feba961f6a4145adca6c54e142c0be0fe87b0",
0000000000000000000000000000000000000000;;					ContainerID:  "docker://3cbbf818f1addfc252957b4504f56ef2907a313fe6afc47fc75373674255d46d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkPodCopy(b *testing.B) {
0000000000000000000000000000000000000000;;		var result *api.Pod
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			obj, err := api.Scheme.DeepCopy(&benchmarkPod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Unexpected error copying pod: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = obj.(*api.Pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(benchmarkPod, *result) {
0000000000000000000000000000000000000000;;			b.Fatalf("Incorrect copy: expected %v, got %v", benchmarkPod, *result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkNodeCopy(b *testing.B) {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile("node_example.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error while reading file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var node api.Node
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(testapi.Default.Codec(), data, &node); err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error decoding node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var result *api.Node
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			obj, err := api.Scheme.DeepCopy(&node)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Unexpected error copying node: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = obj.(*api.Node)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(node, *result) {
0000000000000000000000000000000000000000;;			b.Fatalf("Incorrect copy: expected %v, got %v", node, *result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkReplicationControllerCopy(b *testing.B) {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile("replication_controller_example.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error while reading file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var replicationController api.ReplicationController
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(testapi.Default.Codec(), data, &replicationController); err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error decoding node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var result *api.ReplicationController
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			obj, err := api.Scheme.DeepCopy(&replicationController)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Unexpected error copying replication controller: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(replicationController, *result) {
0000000000000000000000000000000000000000;;			b.Fatalf("Incorrect copy: expected %v, got %v", replicationController, *result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
