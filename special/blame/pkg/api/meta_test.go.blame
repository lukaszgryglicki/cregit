0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b55e06f187f5c5538bdf22903467ea920d8cbd1f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ metav1.Object = &metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAccessorImplementations(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, gv := range api.Registry.EnabledVersions() {
0000000000000000000000000000000000000000;;			internalGV := schema.GroupVersion{Group: gv.Group, Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;			for _, gv := range []schema.GroupVersion{gv, internalGV} {
0000000000000000000000000000000000000000;;				for kind, knownType := range api.Scheme.KnownTypes(gv) {
0000000000000000000000000000000000000000;;					value := reflect.New(knownType)
0000000000000000000000000000000000000000;;					obj := value.Interface()
0000000000000000000000000000000000000000;;					if _, ok := obj.(runtime.Object); !ok {
0000000000000000000000000000000000000000;;						t.Errorf("%v (%v) does not implement runtime.Object", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					lm, isLM := obj.(meta.ListMetaAccessor)
0000000000000000000000000000000000000000;;					om, isOM := obj.(metav1.ObjectMetaAccessor)
0000000000000000000000000000000000000000;;					switch {
0000000000000000000000000000000000000000;;					case isLM && isOM:
0000000000000000000000000000000000000000;;						t.Errorf("%v (%v) implements ListMetaAccessor and ObjectMetaAccessor", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					case isLM:
0000000000000000000000000000000000000000;;						m := lm.GetListMeta()
0000000000000000000000000000000000000000;;						if m == nil {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) returns nil ListMeta", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						m.SetResourceVersion("102030")
0000000000000000000000000000000000000000;;						if m.GetResourceVersion() != "102030" {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) did not preserve resource version", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						m.SetSelfLink("102030")
0000000000000000000000000000000000000000;;						if m.GetSelfLink() != "102030" {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) did not preserve self link", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case isOM:
0000000000000000000000000000000000000000;;						m := om.GetObjectMeta()
0000000000000000000000000000000000000000;;						if m == nil {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) returns nil ObjectMeta", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						m.SetResourceVersion("102030")
0000000000000000000000000000000000000000;;						if m.GetResourceVersion() != "102030" {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) did not preserve resource version", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						m.SetSelfLink("102030")
0000000000000000000000000000000000000000;;						if m.GetSelfLink() != "102030" {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) did not preserve self link", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						labels := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;						m.SetLabels(labels)
0000000000000000000000000000000000000000;;						if !reflect.DeepEqual(m.GetLabels(), labels) {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) did not preserve labels", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						if _, ok := obj.(metav1.ListMetaAccessor); ok {
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if _, ok := value.Elem().Type().FieldByName("ObjectMeta"); ok {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) has ObjectMeta but does not implement ObjectMetaAccessor", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if _, ok := value.Elem().Type().FieldByName("ListMeta"); ok {
0000000000000000000000000000000000000000;;							t.Errorf("%v (%v) has ListMeta but does not implement ListMetaAccessor", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						t.Logf("%v (%v) does not implement ListMetaAccessor or ObjectMetaAccessor", gv.WithKind(kind), knownType)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
