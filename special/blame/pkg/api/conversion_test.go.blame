0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
1728abb74c6eae7e75fcbf68e1fd2100c09e6c5f;pkg/conversion/conversion_test.go[pkg/conversion/conversion_test.go][pkg/api/conversion_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		kapitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkPodConversion(b *testing.B) {
0000000000000000000000000000000000000000;;		apiObjectFuzzer := apitesting.FuzzerFor(kapitesting.FuzzerFuncs(b, api.Codecs), rand.NewSource(benchmarkSeed))
0000000000000000000000000000000000000000;;		items := make([]api.Pod, 4)
0000000000000000000000000000000000000000;;		for i := range items {
0000000000000000000000000000000000000000;;			apiObjectFuzzer.Fuzz(&items[i])
0000000000000000000000000000000000000000;;			items[i].Spec.InitContainers = nil
0000000000000000000000000000000000000000;;			items[i].Status.InitContainerStatuses = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// add a fixed item
0000000000000000000000000000000000000000;;		items = append(items, benchmarkPod)
0000000000000000000000000000000000000000;;		width := len(items)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := api.Scheme
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			pod := &items[i%width]
0000000000000000000000000000000000000000;;			versionedObj, err := scheme.UnsafeConvertToVersion(pod, api.Registry.GroupOrDie(api.GroupName).GroupVersion)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err = scheme.UnsafeConvertToVersion(versionedObj, testapi.Default.InternalGroupVersion()); err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkNodeConversion(b *testing.B) {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile("node_example.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error while reading file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var node api.Node
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(testapi.Default.Codec(), data, &node); err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error decoding node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := api.Scheme
0000000000000000000000000000000000000000;;		var result *api.Node
0000000000000000000000000000000000000000;;		b.ResetTimer()
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			versionedObj, err := scheme.UnsafeConvertToVersion(&node, api.Registry.GroupOrDie(api.GroupName).GroupVersion)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj, err := scheme.UnsafeConvertToVersion(versionedObj, testapi.Default.InternalGroupVersion())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = obj.(*api.Node)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.StopTimer()
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative(node, *result) {
0000000000000000000000000000000000000000;;			b.Fatalf("Incorrect conversion: %s", diff.ObjectDiff(node, *result))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkReplicationControllerConversion(b *testing.B) {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile("replication_controller_example.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error while reading file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var replicationController api.ReplicationController
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(testapi.Default.Codec(), data, &replicationController); err != nil {
0000000000000000000000000000000000000000;;			b.Fatalf("Unexpected error decoding node: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := api.Scheme
0000000000000000000000000000000000000000;;		var result *api.ReplicationController
0000000000000000000000000000000000000000;;		b.ResetTimer()
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			versionedObj, err := scheme.UnsafeConvertToVersion(&replicationController, api.Registry.GroupOrDie(api.GroupName).GroupVersion)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj, err := scheme.UnsafeConvertToVersion(versionedObj, testapi.Default.InternalGroupVersion())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				b.Fatalf("Conversion error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.StopTimer()
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative(replicationController, *result) {
0000000000000000000000000000000000000000;;			b.Fatalf("Incorrect conversion: expected %v, got %v", replicationController, *result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
