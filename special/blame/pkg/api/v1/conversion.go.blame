0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a0a6ff3e50600118609309ad715f48c98e5c6c73;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a "fast-path" that avoids reflection for common types. It focuses on the objects that are
0000000000000000000000000000000000000000;;	// converted the most in the cluster.
0000000000000000000000000000000000000000;;	// TODO: generate one of these for every external API group - this is to prove the impact
0000000000000000000000000000000000000000;;	func addFastPathConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		scheme.AddGenericConversionFunc(func(objA, objB interface{}, s conversion.Scope) (bool, error) {
0000000000000000000000000000000000000000;;			switch a := objA.(type) {
0000000000000000000000000000000000000000;;			case *v1.Pod:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Pod:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Pod_To_api_Pod(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Pod:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Pod:
0000000000000000000000000000000000000000;;					return true, Convert_api_Pod_To_v1_Pod(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.Event:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Event:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Event_To_api_Event(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Event:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Event:
0000000000000000000000000000000000000000;;					return true, Convert_api_Event_To_v1_Event(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.ReplicationController:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.ReplicationController:
0000000000000000000000000000000000000000;;					return true, Convert_v1_ReplicationController_To_api_ReplicationController(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.ReplicationController:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.ReplicationController:
0000000000000000000000000000000000000000;;					return true, Convert_api_ReplicationController_To_v1_ReplicationController(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.Node:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Node:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Node_To_api_Node(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Node:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Node:
0000000000000000000000000000000000000000;;					return true, Convert_api_Node_To_v1_Node(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.Namespace:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Namespace:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Namespace_To_api_Namespace(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Namespace:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Namespace:
0000000000000000000000000000000000000000;;					return true, Convert_api_Namespace_To_v1_Namespace(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.Service:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Service:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Service_To_api_Service(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Service:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Service:
0000000000000000000000000000000000000000;;					return true, Convert_api_Service_To_v1_Service(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *v1.Endpoints:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *api.Endpoints:
0000000000000000000000000000000000000000;;					return true, Convert_v1_Endpoints_To_api_Endpoints(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *api.Endpoints:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *v1.Endpoints:
0000000000000000000000000000000000000000;;					return true, Convert_api_Endpoints_To_v1_Endpoints(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *metav1.WatchEvent:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *metav1.InternalEvent:
0000000000000000000000000000000000000000;;					return true, metav1.Convert_versioned_Event_to_versioned_InternalEvent(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case *metav1.InternalEvent:
0000000000000000000000000000000000000000;;				switch b := objB.(type) {
0000000000000000000000000000000000000000;;				case *metav1.WatchEvent:
0000000000000000000000000000000000000000;;					return true, metav1.Convert_versioned_InternalEvent_to_versioned_Event(a, b, s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		// Add non-generated conversion functions
0000000000000000000000000000000000000000;;		err := scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_api_Pod_To_v1_Pod,
0000000000000000000000000000000000000000;;			Convert_api_PodSpec_To_v1_PodSpec,
0000000000000000000000000000000000000000;;			Convert_api_ReplicationControllerSpec_To_v1_ReplicationControllerSpec,
0000000000000000000000000000000000000000;;			Convert_api_ServiceSpec_To_v1_ServiceSpec,
0000000000000000000000000000000000000000;;			Convert_v1_Pod_To_api_Pod,
0000000000000000000000000000000000000000;;			Convert_v1_PodSpec_To_api_PodSpec,
0000000000000000000000000000000000000000;;			Convert_v1_ReplicationControllerSpec_To_api_ReplicationControllerSpec,
0000000000000000000000000000000000000000;;			Convert_v1_Secret_To_api_Secret,
0000000000000000000000000000000000000000;;			Convert_v1_ServiceSpec_To_api_ServiceSpec,
0000000000000000000000000000000000000000;;			Convert_v1_ResourceList_To_api_ResourceList,
0000000000000000000000000000000000000000;;			Convert_v1_ReplicationController_to_extensions_ReplicaSet,
0000000000000000000000000000000000000000;;			Convert_v1_ReplicationControllerSpec_to_extensions_ReplicaSetSpec,
0000000000000000000000000000000000000000;;			Convert_v1_ReplicationControllerStatus_to_extensions_ReplicaSetStatus,
0000000000000000000000000000000000000000;;			Convert_extensions_ReplicaSet_to_v1_ReplicationController,
0000000000000000000000000000000000000000;;			Convert_extensions_ReplicaSetSpec_to_v1_ReplicationControllerSpec,
0000000000000000000000000000000000000000;;			Convert_extensions_ReplicaSetStatus_to_v1_ReplicationControllerStatus,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add field label conversions for kinds having selectable nothing but v1.ObjectMeta fields.
0000000000000000000000000000000000000000;;		for _, k := range []string{
0000000000000000000000000000000000000000;;			"Endpoints",
0000000000000000000000000000000000000000;;			"ResourceQuota",
0000000000000000000000000000000000000000;;			"PersistentVolumeClaim",
0000000000000000000000000000000000000000;;			"Service",
0000000000000000000000000000000000000000;;			"ServiceAccount",
0000000000000000000000000000000000000000;;			"ConfigMap",
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			kind := k // don't close over range variables
0000000000000000000000000000000000000000;;			err = scheme.AddFieldLabelConversionFunc("v1", kind,
0000000000000000000000000000000000000000;;				func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;					switch label {
0000000000000000000000000000000000000000;;					case "metadata.namespace",
0000000000000000000000000000000000000000;;						"metadata.name":
0000000000000000000000000000000000000000;;						return label, value, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						return "", "", fmt.Errorf("field label %q not supported for %q", label, kind)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add field conversion funcs.
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("v1", "Pod",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.annotations",
0000000000000000000000000000000000000000;;					"metadata.labels",
0000000000000000000000000000000000000000;;					"metadata.name",
0000000000000000000000000000000000000000;;					"metadata.namespace",
0000000000000000000000000000000000000000;;					"metadata.uid",
0000000000000000000000000000000000000000;;					"spec.nodeName",
0000000000000000000000000000000000000000;;					"spec.restartPolicy",
0000000000000000000000000000000000000000;;					"spec.serviceAccountName",
0000000000000000000000000000000000000000;;					"status.phase",
0000000000000000000000000000000000000000;;					"status.hostIP",
0000000000000000000000000000000000000000;;					"status.podIP":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;					// This is for backwards compatibility with old v1 clients which send spec.host
0000000000000000000000000000000000000000;;				case "spec.host":
0000000000000000000000000000000000000000;;					return "spec.nodeName", value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("v1", "Node",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				case "spec.unschedulable":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("v1", "ReplicationController",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name",
0000000000000000000000000000000000000000;;					"metadata.namespace",
0000000000000000000000000000000000000000;;					"status.replicas":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = scheme.AddFieldLabelConversionFunc("v1", "PersistentVolume",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "metadata.name":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := AddFieldLabelConversionsForEvent(scheme); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := AddFieldLabelConversionsForNamespace(scheme); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := AddFieldLabelConversionsForSecret(scheme); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_ReplicationController_to_extensions_ReplicaSet(in *v1.ReplicationController, out *extensions.ReplicaSet, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		if err := Convert_v1_ReplicationControllerSpec_to_extensions_ReplicaSetSpec(&in.Spec, &out.Spec, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_v1_ReplicationControllerStatus_to_extensions_ReplicaSetStatus(&in.Status, &out.Status, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_ReplicationControllerSpec_to_extensions_ReplicaSetSpec(in *v1.ReplicationControllerSpec, out *extensions.ReplicaSetSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			metav1.Convert_map_to_unversioned_LabelSelector(&in.Selector, out.Selector, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if in.Template != nil {
0000000000000000000000000000000000000000;;			if err := Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(in.Template, &out.Template, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_ReplicationControllerStatus_to_extensions_ReplicaSetStatus(in *v1.ReplicationControllerStatus, out *extensions.ReplicaSetStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;		out.FullyLabeledReplicas = in.FullyLabeledReplicas
0000000000000000000000000000000000000000;;		out.ReadyReplicas = in.ReadyReplicas
0000000000000000000000000000000000000000;;		out.AvailableReplicas = in.AvailableReplicas
0000000000000000000000000000000000000000;;		out.ObservedGeneration = in.ObservedGeneration
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ReplicaSet_to_v1_ReplicationController(in *extensions.ReplicaSet, out *v1.ReplicationController, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.ObjectMeta = in.ObjectMeta
0000000000000000000000000000000000000000;;		if err := Convert_extensions_ReplicaSetSpec_to_v1_ReplicationControllerSpec(&in.Spec, &out.Spec, s); err != nil {
0000000000000000000000000000000000000000;;			fieldErr, ok := err.(*field.Error)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if out.Annotations == nil {
0000000000000000000000000000000000000000;;				out.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Annotations[v1.NonConvertibleAnnotationPrefix+"/"+fieldErr.Field] = reflect.ValueOf(fieldErr.BadValue).String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := Convert_extensions_ReplicaSetStatus_to_v1_ReplicationControllerStatus(&in.Status, &out.Status, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ReplicaSetSpec_to_v1_ReplicationControllerSpec(in *extensions.ReplicaSetSpec, out *v1.ReplicationControllerSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = new(int32)
0000000000000000000000000000000000000000;;		*out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		var invalidErr error
0000000000000000000000000000000000000000;;		if in.Selector != nil {
0000000000000000000000000000000000000000;;			invalidErr = metav1.Convert_unversioned_LabelSelector_to_map(in.Selector, &out.Selector, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Template = new(v1.PodTemplateSpec)
0000000000000000000000000000000000000000;;		if err := Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(&in.Template, out.Template, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return invalidErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_extensions_ReplicaSetStatus_to_v1_ReplicationControllerStatus(in *extensions.ReplicaSetStatus, out *v1.ReplicationControllerStatus, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = in.Replicas
0000000000000000000000000000000000000000;;		out.FullyLabeledReplicas = in.FullyLabeledReplicas
0000000000000000000000000000000000000000;;		out.ReadyReplicas = in.ReadyReplicas
0000000000000000000000000000000000000000;;		out.AvailableReplicas = in.AvailableReplicas
0000000000000000000000000000000000000000;;		out.ObservedGeneration = in.ObservedGeneration
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_api_ReplicationControllerSpec_To_v1_ReplicationControllerSpec(in *api.ReplicationControllerSpec, out *v1.ReplicationControllerSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.Replicas = &in.Replicas
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if in.Template != nil {
0000000000000000000000000000000000000000;;			out.Template = new(v1.PodTemplateSpec)
0000000000000000000000000000000000000000;;			if err := Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(in.Template, out.Template, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Template = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_ReplicationControllerSpec_To_api_ReplicationControllerSpec(in *v1.ReplicationControllerSpec, out *api.ReplicationControllerSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in.Replicas != nil {
0000000000000000000000000000000000000000;;			out.Replicas = *in.Replicas
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.MinReadySeconds = in.MinReadySeconds
0000000000000000000000000000000000000000;;		out.Selector = in.Selector
0000000000000000000000000000000000000000;;		if in.Template != nil {
0000000000000000000000000000000000000000;;			out.Template = new(api.PodTemplateSpec)
0000000000000000000000000000000000000000;;			if err := Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(in.Template, out.Template, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.Template = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_api_PodStatusResult_To_v1_PodStatusResult(in *api.PodStatusResult, out *v1.PodStatusResult, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_api_PodStatusResult_To_v1_PodStatusResult(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if old := out.Annotations; old != nil {
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Status.InitContainerStatuses) > 0 {
0000000000000000000000000000000000000000;;			if out.Annotations == nil {
0000000000000000000000000000000000000000;;				out.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			value, err := json.Marshal(out.Status.InitContainerStatuses)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainerStatusesAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainerStatusesBetaAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_PodStatusResult_To_api_PodStatusResult(in *v1.PodStatusResult, out *api.PodStatusResult, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		// TODO: sometime after we move init container to stable, remove these conversions
0000000000000000000000000000000000000000;;		// If there is a beta annotation, copy to alpha key.
0000000000000000000000000000000000000000;;		// See commit log for PR #31026 for why we do this.
0000000000000000000000000000000000000000;;		if valueBeta, okBeta := in.Annotations[v1.PodInitContainerStatusesBetaAnnotationKey]; okBeta {
0000000000000000000000000000000000000000;;			in.Annotations[v1.PodInitContainerStatusesAnnotationKey] = valueBeta
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Move the annotation to the internal repr. field
0000000000000000000000000000000000000000;;		if value, ok := in.Annotations[v1.PodInitContainerStatusesAnnotationKey]; ok {
0000000000000000000000000000000000000000;;			var values []v1.ContainerStatus
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(value), &values); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Conversion from external to internal version exists more to
0000000000000000000000000000000000000000;;			// satisfy the needs of the decoder than it does to be a general
0000000000000000000000000000000000000000;;			// purpose tool. And Decode always creates an intermediate object
0000000000000000000000000000000000000000;;			// to decode to. Thus the caller of UnsafeConvertToVersion is
0000000000000000000000000000000000000000;;			// taking responsibility to ensure mutation of in is not exposed
0000000000000000000000000000000000000000;;			// back to the caller.
0000000000000000000000000000000000000000;;			in.Status.InitContainerStatuses = values
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := autoConvert_v1_PodStatusResult_To_api_PodStatusResult(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Annotations) > 0 {
0000000000000000000000000000000000000000;;			old := out.Annotations
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_api_PodTemplateSpec_To_v1_PodTemplateSpec(in *api.PodTemplateSpec, out *v1.PodTemplateSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_api_PodTemplateSpec_To_v1_PodTemplateSpec(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: sometime after we move init container to stable, remove these conversions.
0000000000000000000000000000000000000000;;		if old := out.Annotations; old != nil {
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Spec.InitContainers) > 0 {
0000000000000000000000000000000000000000;;			if out.Annotations == nil {
0000000000000000000000000000000000000000;;				out.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			value, err := json.Marshal(out.Spec.InitContainers)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainersAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainersBetaAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_PodTemplateSpec_To_api_PodTemplateSpec(in *v1.PodTemplateSpec, out *api.PodTemplateSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		// TODO: sometime after we move init container to stable, remove these conversions
0000000000000000000000000000000000000000;;		// If there is a beta annotation, copy to alpha key.
0000000000000000000000000000000000000000;;		// See commit log for PR #31026 for why we do this.
0000000000000000000000000000000000000000;;		if valueBeta, okBeta := in.Annotations[v1.PodInitContainersBetaAnnotationKey]; okBeta {
0000000000000000000000000000000000000000;;			in.Annotations[v1.PodInitContainersAnnotationKey] = valueBeta
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Move the annotation to the internal repr. field
0000000000000000000000000000000000000000;;		if value, ok := in.Annotations[v1.PodInitContainersAnnotationKey]; ok {
0000000000000000000000000000000000000000;;			var values []v1.Container
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(value), &values); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Conversion from external to internal version exists more to
0000000000000000000000000000000000000000;;			// satisfy the needs of the decoder than it does to be a general
0000000000000000000000000000000000000000;;			// purpose tool. And Decode always creates an intermediate object
0000000000000000000000000000000000000000;;			// to decode to. Thus the caller of UnsafeConvertToVersion is
0000000000000000000000000000000000000000;;			// taking responsibility to ensure mutation of in is not exposed
0000000000000000000000000000000000000000;;			// back to the caller.
0000000000000000000000000000000000000000;;			in.Spec.InitContainers = values
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Call defaulters explicitly until annotations are removed
0000000000000000000000000000000000000000;;			tmpPodTemp := &v1.PodTemplate{
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						HostNetwork:    in.Spec.HostNetwork,
0000000000000000000000000000000000000000;;						InitContainers: values,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			SetObjectDefaults_PodTemplate(tmpPodTemp)
0000000000000000000000000000000000000000;;			in.Spec.InitContainers = tmpPodTemp.Template.Spec.InitContainers
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := autoConvert_v1_PodTemplateSpec_To_api_PodTemplateSpec(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Annotations) > 0 {
0000000000000000000000000000000000000000;;			old := out.Annotations
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The following two v1.PodSpec conversions are done here to support v1.ServiceAccount
0000000000000000000000000000000000000000;;	// as an alias for ServiceAccountName.
0000000000000000000000000000000000000000;;	func Convert_api_PodSpec_To_v1_PodSpec(in *api.PodSpec, out *v1.PodSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_api_PodSpec_To_v1_PodSpec(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeprecatedServiceAccount is an alias for ServiceAccountName.
0000000000000000000000000000000000000000;;		out.DeprecatedServiceAccount = in.ServiceAccountName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if in.SecurityContext != nil {
0000000000000000000000000000000000000000;;			// the host namespace fields have to be handled here for backward compatibility
0000000000000000000000000000000000000000;;			// with v1.0.0
0000000000000000000000000000000000000000;;			out.HostPID = in.SecurityContext.HostPID
0000000000000000000000000000000000000000;;			out.HostNetwork = in.SecurityContext.HostNetwork
0000000000000000000000000000000000000000;;			out.HostIPC = in.SecurityContext.HostIPC
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_PodSpec_To_api_PodSpec(in *v1.PodSpec, out *api.PodSpec, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_v1_PodSpec_To_api_PodSpec(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We support DeprecatedServiceAccount as an alias for ServiceAccountName.
0000000000000000000000000000000000000000;;		// If both are specified, ServiceAccountName (the new field) wins.
0000000000000000000000000000000000000000;;		if in.ServiceAccountName == "" {
0000000000000000000000000000000000000000;;			out.ServiceAccountName = in.DeprecatedServiceAccount
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the host namespace fields have to be handled specially for backward compatibility
0000000000000000000000000000000000000000;;		// with v1.0.0
0000000000000000000000000000000000000000;;		if out.SecurityContext == nil {
0000000000000000000000000000000000000000;;			out.SecurityContext = new(api.PodSecurityContext)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.SecurityContext.HostNetwork = in.HostNetwork
0000000000000000000000000000000000000000;;		out.SecurityContext.HostPID = in.HostPID
0000000000000000000000000000000000000000;;		out.SecurityContext.HostIPC = in.HostIPC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_api_Pod_To_v1_Pod(in *api.Pod, out *v1.Pod, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_api_Pod_To_v1_Pod(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: sometime after we move init container to stable, remove these conversions
0000000000000000000000000000000000000000;;		if len(out.Spec.InitContainers) > 0 || len(out.Status.InitContainerStatuses) > 0 {
0000000000000000000000000000000000000000;;			old := out.Annotations
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersBetaAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Spec.InitContainers) > 0 {
0000000000000000000000000000000000000000;;			value, err := json.Marshal(out.Spec.InitContainers)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainersAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainersBetaAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Status.InitContainerStatuses) > 0 {
0000000000000000000000000000000000000000;;			value, err := json.Marshal(out.Status.InitContainerStatuses)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainerStatusesAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;			out.Annotations[v1.PodInitContainerStatusesBetaAnnotationKey] = string(value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_Pod_To_api_Pod(in *v1.Pod, out *api.Pod, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		// If there is a beta annotation, copy to alpha key.
0000000000000000000000000000000000000000;;		// See commit log for PR #31026 for why we do this.
0000000000000000000000000000000000000000;;		if valueBeta, okBeta := in.Annotations[v1.PodInitContainersBetaAnnotationKey]; okBeta {
0000000000000000000000000000000000000000;;			in.Annotations[v1.PodInitContainersAnnotationKey] = valueBeta
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: sometime after we move init container to stable, remove these conversions
0000000000000000000000000000000000000000;;		// Move the annotation to the internal repr. field
0000000000000000000000000000000000000000;;		if value, ok := in.Annotations[v1.PodInitContainersAnnotationKey]; ok {
0000000000000000000000000000000000000000;;			var values []v1.Container
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(value), &values); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Conversion from external to internal version exists more to
0000000000000000000000000000000000000000;;			// satisfy the needs of the decoder than it does to be a general
0000000000000000000000000000000000000000;;			// purpose tool. And Decode always creates an intermediate object
0000000000000000000000000000000000000000;;			// to decode to. Thus the caller of UnsafeConvertToVersion is
0000000000000000000000000000000000000000;;			// taking responsibility to ensure mutation of in is not exposed
0000000000000000000000000000000000000000;;			// back to the caller.
0000000000000000000000000000000000000000;;			in.Spec.InitContainers = values
0000000000000000000000000000000000000000;;			// Call defaulters explicitly until annotations are removed
0000000000000000000000000000000000000000;;			tmpPod := &v1.Pod{
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					HostNetwork:    in.Spec.HostNetwork,
0000000000000000000000000000000000000000;;					InitContainers: values,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			SetObjectDefaults_Pod(tmpPod)
0000000000000000000000000000000000000000;;			in.Spec.InitContainers = tmpPod.Spec.InitContainers
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If there is a beta annotation, copy to alpha key.
0000000000000000000000000000000000000000;;		// See commit log for PR #31026 for why we do this.
0000000000000000000000000000000000000000;;		if valueBeta, okBeta := in.Annotations[v1.PodInitContainerStatusesBetaAnnotationKey]; okBeta {
0000000000000000000000000000000000000000;;			in.Annotations[v1.PodInitContainerStatusesAnnotationKey] = valueBeta
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if value, ok := in.Annotations[v1.PodInitContainerStatusesAnnotationKey]; ok {
0000000000000000000000000000000000000000;;			var values []v1.ContainerStatus
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(value), &values); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Conversion from external to internal version exists more to
0000000000000000000000000000000000000000;;			// satisfy the needs of the decoder than it does to be a general
0000000000000000000000000000000000000000;;			// purpose tool. And Decode always creates an intermediate object
0000000000000000000000000000000000000000;;			// to decode to. Thus the caller of UnsafeConvertToVersion is
0000000000000000000000000000000000000000;;			// taking responsibility to ensure mutation of in is not exposed
0000000000000000000000000000000000000000;;			// back to the caller.
0000000000000000000000000000000000000000;;			in.Status.InitContainerStatuses = values
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := autoConvert_v1_Pod_To_api_Pod(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out.Annotations) > 0 {
0000000000000000000000000000000000000000;;			old := out.Annotations
0000000000000000000000000000000000000000;;			out.Annotations = make(map[string]string, len(old))
0000000000000000000000000000000000000000;;			for k, v := range old {
0000000000000000000000000000000000000000;;				out.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainersBetaAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesAnnotationKey)
0000000000000000000000000000000000000000;;			delete(out.Annotations, v1.PodInitContainerStatusesBetaAnnotationKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_Secret_To_api_Secret(in *v1.Secret, out *api.Secret, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if err := autoConvert_v1_Secret_To_api_Secret(in, out, s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StringData overwrites Data
0000000000000000000000000000000000000000;;		if len(in.StringData) > 0 {
0000000000000000000000000000000000000000;;			if out.Data == nil {
0000000000000000000000000000000000000000;;				out.Data = map[string][]byte{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range in.StringData {
0000000000000000000000000000000000000000;;				out.Data[k] = []byte(v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_api_PodSecurityContext_To_v1_PodSecurityContext(in *api.PodSecurityContext, out *v1.PodSecurityContext, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.SupplementalGroups = in.SupplementalGroups
0000000000000000000000000000000000000000;;		if in.SELinuxOptions != nil {
0000000000000000000000000000000000000000;;			out.SELinuxOptions = new(v1.SELinuxOptions)
0000000000000000000000000000000000000000;;			if err := Convert_api_SELinuxOptions_To_v1_SELinuxOptions(in.SELinuxOptions, out.SELinuxOptions, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.SELinuxOptions = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.RunAsUser = in.RunAsUser
0000000000000000000000000000000000000000;;		out.RunAsNonRoot = in.RunAsNonRoot
0000000000000000000000000000000000000000;;		out.FSGroup = in.FSGroup
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_v1_PodSecurityContext_To_api_PodSecurityContext(in *v1.PodSecurityContext, out *api.PodSecurityContext, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		out.SupplementalGroups = in.SupplementalGroups
0000000000000000000000000000000000000000;;		if in.SELinuxOptions != nil {
0000000000000000000000000000000000000000;;			out.SELinuxOptions = new(api.SELinuxOptions)
0000000000000000000000000000000000000000;;			if err := Convert_v1_SELinuxOptions_To_api_SELinuxOptions(in.SELinuxOptions, out.SELinuxOptions, s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.SELinuxOptions = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.RunAsUser = in.RunAsUser
0000000000000000000000000000000000000000;;		out.RunAsNonRoot = in.RunAsNonRoot
0000000000000000000000000000000000000000;;		out.FSGroup = in.FSGroup
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=copy-only
0000000000000000000000000000000000000000;;	func Convert_v1_ResourceList_To_api_ResourceList(in *v1.ResourceList, out *api.ResourceList, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if *out == nil {
0000000000000000000000000000000000000000;;			*out = make(api.ResourceList, len(*in))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, val := range *in {
0000000000000000000000000000000000000000;;			// Moved to defaults
0000000000000000000000000000000000000000;;			// TODO(#18538): We round up resource values to milli scale to maintain API compatibility.
0000000000000000000000000000000000000000;;			// In the future, we should instead reject values that need rounding.
0000000000000000000000000000000000000000;;			// const milliScale = -3
0000000000000000000000000000000000000000;;			// val.RoundUp(milliScale)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			(*out)[api.ResourceName(key)] = val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddFieldLabelConversionsForEvent(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddFieldLabelConversionFunc("v1", "Event",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "involvedObject.kind",
0000000000000000000000000000000000000000;;					"involvedObject.namespace",
0000000000000000000000000000000000000000;;					"involvedObject.name",
0000000000000000000000000000000000000000;;					"involvedObject.uid",
0000000000000000000000000000000000000000;;					"involvedObject.apiVersion",
0000000000000000000000000000000000000000;;					"involvedObject.resourceVersion",
0000000000000000000000000000000000000000;;					"involvedObject.fieldPath",
0000000000000000000000000000000000000000;;					"reason",
0000000000000000000000000000000000000000;;					"source",
0000000000000000000000000000000000000000;;					"type",
0000000000000000000000000000000000000000;;					"metadata.namespace",
0000000000000000000000000000000000000000;;					"metadata.name":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddFieldLabelConversionsForNamespace(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddFieldLabelConversionFunc("v1", "Namespace",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "status.phase",
0000000000000000000000000000000000000000;;					"metadata.name":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddFieldLabelConversionsForSecret(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddFieldLabelConversionFunc("v1", "Secret",
0000000000000000000000000000000000000000;;			func(label, value string) (string, string, error) {
0000000000000000000000000000000000000000;;				switch label {
0000000000000000000000000000000000000000;;				case "type",
0000000000000000000000000000000000000000;;					"metadata.namespace",
0000000000000000000000000000000000000000;;					"metadata.name":
0000000000000000000000000000000000000000;;					return label, value, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return "", "", fmt.Errorf("field label not supported: %s", label)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
