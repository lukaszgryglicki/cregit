0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6d15848aa5e7ecb5f4de191ae17f65f126f138bd;pkg/api/v1/resource_helpers_test.go[pkg/api/v1/resource_helpers_test.go][pkg/api/v1/resource/helpers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceHelpers(t *testing.T) {
0000000000000000000000000000000000000000;;		cpuLimit := resource.MustParse("10")
0000000000000000000000000000000000000000;;		memoryLimit := resource.MustParse("10G")
0000000000000000000000000000000000000000;;		resourceSpec := v1.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;				"cpu":             cpuLimit,
0000000000000000000000000000000000000000;;				"memory":          memoryLimit,
0000000000000000000000000000000000000000;;				"kube.io/storage": memoryLimit,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Cpu(); res.Cmp(cpuLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected cpulimit %v, got %v", cpuLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Memory(); res.Cmp(memoryLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected memorylimit %v, got %v", memoryLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceSpec = v1.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;				"memory":          memoryLimit,
0000000000000000000000000000000000000000;;				"kube.io/storage": memoryLimit,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Cpu(); res.Value() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected cpulimit %v, got %v", 0, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := resourceSpec.Limits.Memory(); res.Cmp(memoryLimit) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected memorylimit %v, got %v", memoryLimit, res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultResourceHelpers(t *testing.T) {
0000000000000000000000000000000000000000;;		resourceList := v1.ResourceList{}
0000000000000000000000000000000000000000;;		if resourceList.Cpu().Format != resource.DecimalSI {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, actual %v", resource.DecimalSI, resourceList.Cpu().Format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resourceList.Memory().Format != resource.BinarySI {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, actual %v", resource.BinarySI, resourceList.Memory().Format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractResourceValue(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			fs            *v1.ResourceFieldSelector
0000000000000000000000000000000000000000;;			pod           *v1.Pod
0000000000000000000000000000000000000000;;			cName         string
0000000000000000000000000000000000000000;;			expectedValue string
0000000000000000000000000000000000000000;;			expectedError error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "limits.cpu",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "", "9", "", ""),
0000000000000000000000000000000000000000;;				expectedValue: "9",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.cpu",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "", "", "", ""),
0000000000000000000000000000000000000000;;				expectedValue: "0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.cpu",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "8", "", "", ""),
0000000000000000000000000000000000000000;;				expectedValue: "8",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.cpu",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "100m", "", "", ""),
0000000000000000000000000000000000000000;;				expectedValue: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.cpu",
0000000000000000000000000000000000000000;;					Divisor:  resource.MustParse("100m"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "1200m", "", "", ""),
0000000000000000000000000000000000000000;;				expectedValue: "12",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.memory",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "", "", "100Mi", ""),
0000000000000000000000000000000000000000;;				expectedValue: "104857600",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "requests.memory",
0000000000000000000000000000000000000000;;					Divisor:  resource.MustParse("1Mi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "", "", "100Mi", "1Gi"),
0000000000000000000000000000000000000000;;				expectedValue: "100",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				fs: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;					Resource: "limits.memory",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cName:         "foo",
0000000000000000000000000000000000000000;;				pod:           getPod("foo", "", "", "10Mi", "100Mi"),
0000000000000000000000000000000000000000;;				expectedValue: "104857600",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		as := assert.New(t)
0000000000000000000000000000000000000000;;		for idx, tc := range cases {
0000000000000000000000000000000000000000;;			actual, err := ExtractResourceValueByContainerName(tc.fs, tc.pod, tc.cName)
0000000000000000000000000000000000000000;;			if tc.expectedError != nil {
0000000000000000000000000000000000000000;;				as.Equal(tc.expectedError, err, "expected test case [%d] to fail with error %v; got %v", idx, tc.expectedError, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				as.Nil(err, "expected test case [%d] to not return an error; got %v", idx, err)
0000000000000000000000000000000000000000;;				as.Equal(tc.expectedValue, actual, "expected test case [%d] to return %q; got %q instead", idx, tc.expectedValue, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPod(cname, cpuRequest, cpuLimit, memoryRequest, memoryLimit string) *v1.Pod {
0000000000000000000000000000000000000000;;		resources := v1.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits:   make(v1.ResourceList),
0000000000000000000000000000000000000000;;			Requests: make(v1.ResourceList),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cpuLimit != "" {
0000000000000000000000000000000000000000;;			resources.Limits[v1.ResourceCPU] = resource.MustParse(cpuLimit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if memoryLimit != "" {
0000000000000000000000000000000000000000;;			resources.Limits[v1.ResourceMemory] = resource.MustParse(memoryLimit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cpuRequest != "" {
0000000000000000000000000000000000000000;;			resources.Requests[v1.ResourceCPU] = resource.MustParse(cpuRequest)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if memoryRequest != "" {
0000000000000000000000000000000000000000;;			resources.Requests[v1.ResourceMemory] = resource.MustParse(memoryRequest)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      cname,
0000000000000000000000000000000000000000;;						Resources: resources,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
