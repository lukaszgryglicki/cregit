0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a0a6ff3e50600118609309ad715f48c98e5c6c73;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/parsers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_ResourceList(obj *v1.ResourceList) {
0000000000000000000000000000000000000000;;		for key, val := range *obj {
0000000000000000000000000000000000000000;;			// TODO(#18538): We round up resource values to milli scale to maintain API compatibility.
0000000000000000000000000000000000000000;;			// In the future, we should instead reject values that need rounding.
0000000000000000000000000000000000000000;;			const milliScale = -3
0000000000000000000000000000000000000000;;			val.RoundUp(milliScale)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			(*obj)[v1.ResourceName(key)] = val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_PodExecOptions(obj *v1.PodExecOptions) {
0000000000000000000000000000000000000000;;		obj.Stdout = true
0000000000000000000000000000000000000000;;		obj.Stderr = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_PodAttachOptions(obj *v1.PodAttachOptions) {
0000000000000000000000000000000000000000;;		obj.Stdout = true
0000000000000000000000000000000000000000;;		obj.Stderr = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ReplicationController(obj *v1.ReplicationController) {
0000000000000000000000000000000000000000;;		var labels map[string]string
0000000000000000000000000000000000000000;;		if obj.Spec.Template != nil {
0000000000000000000000000000000000000000;;			labels = obj.Spec.Template.Labels
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: support templates defined elsewhere when we support them in the API
0000000000000000000000000000000000000000;;		if labels != nil {
0000000000000000000000000000000000000000;;			if len(obj.Spec.Selector) == 0 {
0000000000000000000000000000000000000000;;				obj.Spec.Selector = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(obj.Labels) == 0 {
0000000000000000000000000000000000000000;;				obj.Labels = labels
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Replicas == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Replicas = new(int32)
0000000000000000000000000000000000000000;;			*obj.Spec.Replicas = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Volume(obj *v1.Volume) {
0000000000000000000000000000000000000000;;		if util.AllPtrFieldsNil(&obj.VolumeSource) {
0000000000000000000000000000000000000000;;			obj.VolumeSource = v1.VolumeSource{
0000000000000000000000000000000000000000;;				EmptyDir: &v1.EmptyDirVolumeSource{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ContainerPort(obj *v1.ContainerPort) {
0000000000000000000000000000000000000000;;		if obj.Protocol == "" {
0000000000000000000000000000000000000000;;			obj.Protocol = v1.ProtocolTCP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Container(obj *v1.Container) {
0000000000000000000000000000000000000000;;		if obj.ImagePullPolicy == "" {
0000000000000000000000000000000000000000;;			// Ignore error and assume it has been validated elsewhere
0000000000000000000000000000000000000000;;			_, tag, _, _ := parsers.ParseImageName(obj.Image)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check image tag
0000000000000000000000000000000000000000;;			if tag == "latest" {
0000000000000000000000000000000000000000;;				obj.ImagePullPolicy = v1.PullAlways
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				obj.ImagePullPolicy = v1.PullIfNotPresent
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.TerminationMessagePath == "" {
0000000000000000000000000000000000000000;;			obj.TerminationMessagePath = v1.TerminationMessagePathDefault
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.TerminationMessagePolicy == "" {
0000000000000000000000000000000000000000;;			obj.TerminationMessagePolicy = v1.TerminationMessageReadFile
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Service(obj *v1.Service) {
0000000000000000000000000000000000000000;;		if obj.Spec.SessionAffinity == "" {
0000000000000000000000000000000000000000;;			obj.Spec.SessionAffinity = v1.ServiceAffinityNone
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Type == "" {
0000000000000000000000000000000000000000;;			obj.Spec.Type = v1.ServiceTypeClusterIP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range obj.Spec.Ports {
0000000000000000000000000000000000000000;;			sp := &obj.Spec.Ports[i]
0000000000000000000000000000000000000000;;			if sp.Protocol == "" {
0000000000000000000000000000000000000000;;				sp.Protocol = v1.ProtocolTCP
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if sp.TargetPort == intstr.FromInt(0) || sp.TargetPort == intstr.FromString("") {
0000000000000000000000000000000000000000;;				sp.TargetPort = intstr.FromInt(int(sp.Port))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Defaults ExternalTrafficPolicy field for NodePort / LoadBalancer service
0000000000000000000000000000000000000000;;		// to Global for consistency.
0000000000000000000000000000000000000000;;		if _, ok := obj.Annotations[v1.BetaAnnotationExternalTraffic]; ok {
0000000000000000000000000000000000000000;;			// Don't default this field if beta annotation exists.
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if (obj.Spec.Type == v1.ServiceTypeNodePort ||
0000000000000000000000000000000000000000;;			obj.Spec.Type == v1.ServiceTypeLoadBalancer) &&
0000000000000000000000000000000000000000;;			obj.Spec.ExternalTrafficPolicy == "" {
0000000000000000000000000000000000000000;;			obj.Spec.ExternalTrafficPolicy = v1.ServiceExternalTrafficPolicyTypeCluster
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Pod(obj *v1.Pod) {
0000000000000000000000000000000000000000;;		// If limits are specified, but requests are not, default requests to limits
0000000000000000000000000000000000000000;;		// This is done here rather than a more specific defaulting pass on v1.ResourceRequirements
0000000000000000000000000000000000000000;;		// because we only want this defaulting semantic to take place on a v1.Pod and not a v1.PodTemplate
0000000000000000000000000000000000000000;;		for i := range obj.Spec.Containers {
0000000000000000000000000000000000000000;;			// set requests to limits if requests are not specified, but limits are
0000000000000000000000000000000000000000;;			if obj.Spec.Containers[i].Resources.Limits != nil {
0000000000000000000000000000000000000000;;				if obj.Spec.Containers[i].Resources.Requests == nil {
0000000000000000000000000000000000000000;;					obj.Spec.Containers[i].Resources.Requests = make(v1.ResourceList)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for key, value := range obj.Spec.Containers[i].Resources.Limits {
0000000000000000000000000000000000000000;;					if _, exists := obj.Spec.Containers[i].Resources.Requests[key]; !exists {
0000000000000000000000000000000000000000;;						obj.Spec.Containers[i].Resources.Requests[key] = *(value.Copy())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range obj.Spec.InitContainers {
0000000000000000000000000000000000000000;;			if obj.Spec.InitContainers[i].Resources.Limits != nil {
0000000000000000000000000000000000000000;;				if obj.Spec.InitContainers[i].Resources.Requests == nil {
0000000000000000000000000000000000000000;;					obj.Spec.InitContainers[i].Resources.Requests = make(v1.ResourceList)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for key, value := range obj.Spec.InitContainers[i].Resources.Limits {
0000000000000000000000000000000000000000;;					if _, exists := obj.Spec.InitContainers[i].Resources.Requests[key]; !exists {
0000000000000000000000000000000000000000;;						obj.Spec.InitContainers[i].Resources.Requests[key] = *(value.Copy())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_PodSpec(obj *v1.PodSpec) {
0000000000000000000000000000000000000000;;		if obj.DNSPolicy == "" {
0000000000000000000000000000000000000000;;			obj.DNSPolicy = v1.DNSClusterFirst
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RestartPolicy == "" {
0000000000000000000000000000000000000000;;			obj.RestartPolicy = v1.RestartPolicyAlways
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.HostNetwork {
0000000000000000000000000000000000000000;;			defaultHostNetworkPorts(&obj.Containers)
0000000000000000000000000000000000000000;;			defaultHostNetworkPorts(&obj.InitContainers)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SecurityContext == nil {
0000000000000000000000000000000000000000;;			obj.SecurityContext = &v1.PodSecurityContext{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.TerminationGracePeriodSeconds == nil {
0000000000000000000000000000000000000000;;			period := int64(v1.DefaultTerminationGracePeriodSeconds)
0000000000000000000000000000000000000000;;			obj.TerminationGracePeriodSeconds = &period
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SchedulerName == "" {
0000000000000000000000000000000000000000;;			obj.SchedulerName = v1.DefaultSchedulerName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Probe(obj *v1.Probe) {
0000000000000000000000000000000000000000;;		if obj.TimeoutSeconds == 0 {
0000000000000000000000000000000000000000;;			obj.TimeoutSeconds = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.PeriodSeconds == 0 {
0000000000000000000000000000000000000000;;			obj.PeriodSeconds = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.SuccessThreshold == 0 {
0000000000000000000000000000000000000000;;			obj.SuccessThreshold = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.FailureThreshold == 0 {
0000000000000000000000000000000000000000;;			obj.FailureThreshold = 3
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_SecretVolumeSource(obj *v1.SecretVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.DefaultMode == nil {
0000000000000000000000000000000000000000;;			perm := int32(v1.SecretVolumeSourceDefaultMode)
0000000000000000000000000000000000000000;;			obj.DefaultMode = &perm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ConfigMapVolumeSource(obj *v1.ConfigMapVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.DefaultMode == nil {
0000000000000000000000000000000000000000;;			perm := int32(v1.ConfigMapVolumeSourceDefaultMode)
0000000000000000000000000000000000000000;;			obj.DefaultMode = &perm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_DownwardAPIVolumeSource(obj *v1.DownwardAPIVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.DefaultMode == nil {
0000000000000000000000000000000000000000;;			perm := int32(v1.DownwardAPIVolumeSourceDefaultMode)
0000000000000000000000000000000000000000;;			obj.DefaultMode = &perm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Secret(obj *v1.Secret) {
0000000000000000000000000000000000000000;;		if obj.Type == "" {
0000000000000000000000000000000000000000;;			obj.Type = v1.SecretTypeOpaque
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ProjectedVolumeSource(obj *v1.ProjectedVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.DefaultMode == nil {
0000000000000000000000000000000000000000;;			perm := int32(v1.ProjectedVolumeSourceDefaultMode)
0000000000000000000000000000000000000000;;			obj.DefaultMode = &perm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_PersistentVolume(obj *v1.PersistentVolume) {
0000000000000000000000000000000000000000;;		if obj.Status.Phase == "" {
0000000000000000000000000000000000000000;;			obj.Status.Phase = v1.VolumePending
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.PersistentVolumeReclaimPolicy == "" {
0000000000000000000000000000000000000000;;			obj.Spec.PersistentVolumeReclaimPolicy = v1.PersistentVolumeReclaimRetain
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_PersistentVolumeClaim(obj *v1.PersistentVolumeClaim) {
0000000000000000000000000000000000000000;;		if obj.Status.Phase == "" {
0000000000000000000000000000000000000000;;			obj.Status.Phase = v1.ClaimPending
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ISCSIVolumeSource(obj *v1.ISCSIVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.ISCSIInterface == "" {
0000000000000000000000000000000000000000;;			obj.ISCSIInterface = "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_AzureDiskVolumeSource(obj *v1.AzureDiskVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.CachingMode == nil {
0000000000000000000000000000000000000000;;			obj.CachingMode = new(v1.AzureDataDiskCachingMode)
0000000000000000000000000000000000000000;;			*obj.CachingMode = v1.AzureDataDiskCachingReadWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Kind == nil {
0000000000000000000000000000000000000000;;			obj.Kind = new(v1.AzureDataDiskKind)
0000000000000000000000000000000000000000;;			*obj.Kind = v1.AzureSharedBlobDisk
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.FSType == nil {
0000000000000000000000000000000000000000;;			obj.FSType = new(string)
0000000000000000000000000000000000000000;;			*obj.FSType = "ext4"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.ReadOnly == nil {
0000000000000000000000000000000000000000;;			obj.ReadOnly = new(bool)
0000000000000000000000000000000000000000;;			*obj.ReadOnly = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Endpoints(obj *v1.Endpoints) {
0000000000000000000000000000000000000000;;		for i := range obj.Subsets {
0000000000000000000000000000000000000000;;			ss := &obj.Subsets[i]
0000000000000000000000000000000000000000;;			for i := range ss.Ports {
0000000000000000000000000000000000000000;;				ep := &ss.Ports[i]
0000000000000000000000000000000000000000;;				if ep.Protocol == "" {
0000000000000000000000000000000000000000;;					ep.Protocol = v1.ProtocolTCP
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_HTTPGetAction(obj *v1.HTTPGetAction) {
0000000000000000000000000000000000000000;;		if obj.Path == "" {
0000000000000000000000000000000000000000;;			obj.Path = "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Scheme == "" {
0000000000000000000000000000000000000000;;			obj.Scheme = v1.URISchemeHTTP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_NamespaceStatus(obj *v1.NamespaceStatus) {
0000000000000000000000000000000000000000;;		if obj.Phase == "" {
0000000000000000000000000000000000000000;;			obj.Phase = v1.NamespaceActive
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_Node(obj *v1.Node) {
0000000000000000000000000000000000000000;;		if obj.Spec.ExternalID == "" {
0000000000000000000000000000000000000000;;			obj.Spec.ExternalID = obj.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_NodeStatus(obj *v1.NodeStatus) {
0000000000000000000000000000000000000000;;		if obj.Allocatable == nil && obj.Capacity != nil {
0000000000000000000000000000000000000000;;			obj.Allocatable = make(v1.ResourceList, len(obj.Capacity))
0000000000000000000000000000000000000000;;			for key, value := range obj.Capacity {
0000000000000000000000000000000000000000;;				obj.Allocatable[key] = *(value.Copy())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj.Allocatable = obj.Capacity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ObjectFieldSelector(obj *v1.ObjectFieldSelector) {
0000000000000000000000000000000000000000;;		if obj.APIVersion == "" {
0000000000000000000000000000000000000000;;			obj.APIVersion = "v1"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_LimitRangeItem(obj *v1.LimitRangeItem) {
0000000000000000000000000000000000000000;;		// for container limits, we apply default values
0000000000000000000000000000000000000000;;		if obj.Type == v1.LimitTypeContainer {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if obj.Default == nil {
0000000000000000000000000000000000000000;;				obj.Default = make(v1.ResourceList)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if obj.DefaultRequest == nil {
0000000000000000000000000000000000000000;;				obj.DefaultRequest = make(v1.ResourceList)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// If a default limit is unspecified, but the max is specified, default the limit to the max
0000000000000000000000000000000000000000;;			for key, value := range obj.Max {
0000000000000000000000000000000000000000;;				if _, exists := obj.Default[key]; !exists {
0000000000000000000000000000000000000000;;					obj.Default[key] = *(value.Copy())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// If a default limit is specified, but the default request is not, default request to limit
0000000000000000000000000000000000000000;;			for key, value := range obj.Default {
0000000000000000000000000000000000000000;;				if _, exists := obj.DefaultRequest[key]; !exists {
0000000000000000000000000000000000000000;;					obj.DefaultRequest[key] = *(value.Copy())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// If a default request is not specified, but the min is provided, default request to the min
0000000000000000000000000000000000000000;;			for key, value := range obj.Min {
0000000000000000000000000000000000000000;;				if _, exists := obj.DefaultRequest[key]; !exists {
0000000000000000000000000000000000000000;;					obj.DefaultRequest[key] = *(value.Copy())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func SetDefaults_ConfigMap(obj *v1.ConfigMap) {
0000000000000000000000000000000000000000;;		if obj.Data == nil {
0000000000000000000000000000000000000000;;			obj.Data = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// With host networking default all container ports to host ports.
0000000000000000000000000000000000000000;;	func defaultHostNetworkPorts(containers *[]v1.Container) {
0000000000000000000000000000000000000000;;		for i := range *containers {
0000000000000000000000000000000000000000;;			for j := range (*containers)[i].Ports {
0000000000000000000000000000000000000000;;				if (*containers)[i].Ports[j].HostPort == 0 {
0000000000000000000000000000000000000000;;					(*containers)[i].Ports[j].HostPort = (*containers)[i].Ports[j].ContainerPort
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_RBDVolumeSource(obj *v1.RBDVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.RBDPool == "" {
0000000000000000000000000000000000000000;;			obj.RBDPool = "rbd"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.RadosUser == "" {
0000000000000000000000000000000000000000;;			obj.RadosUser = "admin"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Keyring == "" {
0000000000000000000000000000000000000000;;			obj.Keyring = "/etc/ceph/keyring"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_ScaleIOVolumeSource(obj *v1.ScaleIOVolumeSource) {
0000000000000000000000000000000000000000;;		if obj.ProtectionDomain == "" {
0000000000000000000000000000000000000000;;			obj.ProtectionDomain = "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.StoragePool == "" {
0000000000000000000000000000000000000000;;			obj.StoragePool = "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.StorageMode == "" {
0000000000000000000000000000000000000000;;			obj.StorageMode = "ThinProvisioned"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.FSType == "" {
0000000000000000000000000000000000000000;;			obj.FSType = "xfs"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
