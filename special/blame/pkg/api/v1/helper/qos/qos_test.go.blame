0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
62f96d01f48c881d5cb8179504ae890d9f09f3dc;pkg/kubelet/qos/util/qos_test.go[pkg/kubelet/qos/util/qos_test.go][pkg/api/v1/helper/qos/qos_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package qos
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper/qos"
0000000000000000000000000000000000000000;;		k8sv1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodQOS(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			pod      *v1.Pod
0000000000000000000000000000000000000000;;			expected v1.PodQOSClass
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("guaranteed", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSGuaranteed,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("guaranteed-with-gpu", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), addResource("nvidia-gpu", "2", getResourceList("100m", "100Mi"))),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSGuaranteed,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("guaranteed-guaranteed", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSGuaranteed,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("guaranteed-guaranteed-with-gpu", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), addResource("nvidia-gpu", "2", getResourceList("100m", "100Mi"))),
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSGuaranteed,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort-best-effort", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), getResourceList("", "")),
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBestEffort,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort-best-effort-with-gpu", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), addResource("nvidia-gpu", "2", getResourceList("", ""))),
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBestEffort,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort-with-gpu", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), addResource("nvidia-gpu", "2", getResourceList("", ""))),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBestEffort,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort-burstable", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), addResource("nvidia-gpu", "2", getResourceList("", ""))),
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("1", ""), getResourceList("2", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort-guaranteed", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), addResource("nvidia-gpu", "2", getResourceList("", ""))),
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("10m", "100Mi"), getResourceList("10m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-cpu-guaranteed-memory", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("", "100Mi"), getResourceList("", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-no-limits", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("100m", "100Mi"), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-guaranteed", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("1", "100Mi"), getResourceList("2", "100Mi")),
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-unbounded-but-requests-match-limits", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("100m", "100Mi"), getResourceList("200m", "200Mi")),
0000000000000000000000000000000000000000;;					newContainer("burstable-unbounded", getResourceList("100m", "100Mi"), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-1", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("10m", "100Mi"), getResourceList("100m", "200Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable-2", []v1.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("0", "0"), addResource("nvidia-gpu", "2", getResourceList("100m", "200Mi"))),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: v1.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for id, testCase := range testCases {
0000000000000000000000000000000000000000;;			if actual := GetPodQOS(testCase.pod); testCase.expected != actual {
0000000000000000000000000000000000000000;;				t.Errorf("[%d]: invalid qos pod %s, expected: %s, actual: %s", id, testCase.pod.Name, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Convert v1.Pod to api.Pod, and then check against `api.helper.GetPodQOS`.
0000000000000000000000000000000000000000;;			pod := api.Pod{}
0000000000000000000000000000000000000000;;			k8sv1.Convert_v1_Pod_To_api_Pod(testCase.pod, &pod, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if actual := qos.GetPodQOS(&pod); api.PodQOSClass(testCase.expected) != actual {
0000000000000000000000000000000000000000;;				t.Errorf("[%d]: invalid qos pod %s, expected: %s, actual: %s", id, testCase.pod.Name, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceList(cpu, memory string) v1.ResourceList {
0000000000000000000000000000000000000000;;		res := v1.ResourceList{}
0000000000000000000000000000000000000000;;		if cpu != "" {
0000000000000000000000000000000000000000;;			res[v1.ResourceCPU] = resource.MustParse(cpu)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if memory != "" {
0000000000000000000000000000000000000000;;			res[v1.ResourceMemory] = resource.MustParse(memory)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addResource(rName, value string, rl v1.ResourceList) v1.ResourceList {
0000000000000000000000000000000000000000;;		rl[v1.ResourceName(rName)] = resource.MustParse(value)
0000000000000000000000000000000000000000;;		return rl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceRequirements(requests, limits v1.ResourceList) v1.ResourceRequirements {
0000000000000000000000000000000000000000;;		res := v1.ResourceRequirements{}
0000000000000000000000000000000000000000;;		res.Requests = requests
0000000000000000000000000000000000000000;;		res.Limits = limits
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainer(name string, requests v1.ResourceList, limits v1.ResourceList) v1.Container {
0000000000000000000000000000000000000000;;		return v1.Container{
0000000000000000000000000000000000000000;;			Name:      name,
0000000000000000000000000000000000000000;;			Resources: getResourceRequirements(requests, limits),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(name string, containers []v1.Container) *v1.Pod {
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: containers,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
