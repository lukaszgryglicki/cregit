0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a037c1cd4ed54ef71811886e8429f2fdb40a16b6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testing/compat"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCompatibility_v1_PodSecurityContext(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name         string
0000000000000000000000000000000000000000;;			input        string
0000000000000000000000000000000000000000;;			expectedKeys map[string]string
0000000000000000000000000000000000000000;;			absentKeys   []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostNetwork = true",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostNetwork": true,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				expectedKeys: map[string]string{
0000000000000000000000000000000000000000;;					"spec.hostNetwork": "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostNetwork = false",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostNetwork": false,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				absentKeys: []string{
0000000000000000000000000000000000000000;;					"spec.hostNetwork",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostIPC = true",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostIPC": true,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				expectedKeys: map[string]string{
0000000000000000000000000000000000000000;;					"spec.hostIPC": "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostIPC = false",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostIPC": false,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				absentKeys: []string{
0000000000000000000000000000000000000000;;					"spec.hostIPC",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostPID = true",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostPID": true,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				expectedKeys: map[string]string{
0000000000000000000000000000000000000000;;					"spec.hostPID": "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "hostPID = false",
0000000000000000000000000000000000000000;;				input: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"kind":"Pod",
0000000000000000000000000000000000000000;;		"apiVersion":"v1",
0000000000000000000000000000000000000000;;		"metadata":{"name":"my-pod-name", "namespace":"my-pod-namespace"},
0000000000000000000000000000000000000000;;		"spec": {
0000000000000000000000000000000000000000;;			"hostPID": false,
0000000000000000000000000000000000000000;;			"containers":[{
0000000000000000000000000000000000000000;;				"name":"a",
0000000000000000000000000000000000000000;;				"image":"my-container-image"
0000000000000000000000000000000000000000;;			}]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				absentKeys: []string{
0000000000000000000000000000000000000000;;					"spec.hostPID",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validator := func(obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;			return validation.ValidatePodSpec(&(obj.(*api.Pod).Spec), field.NewPath("spec"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			t.Logf("Testing 1.0.0 backward compatibility for %v", tc.name)
0000000000000000000000000000000000000000;;			compat.TestCompatibility(t, v1.SchemeGroupVersion, []byte(tc.input), validator, tc.expectedKeys, tc.absentKeys)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
