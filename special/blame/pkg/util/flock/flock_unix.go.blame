0000000000000000000000000000000000000000;;	// +build linux darwin freebsd openbsd netbsd dragonfly
eaf82364a9f0da045efa0ae5d6cbed4d817458ab;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Acquire acquires a lock on a file for the duration of the process. This method
0000000000000000000000000000000000000000;;	// is reentrant.
0000000000000000000000000000000000000000;;	func Acquire(path string) error {
0000000000000000000000000000000000000000;;		fd, err := syscall.Open(path, syscall.O_CREAT|syscall.O_RDWR, 0600)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We don't need to close the fd since we should hold
0000000000000000000000000000000000000000;;		// it until the process exits.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return syscall.Flock(fd, syscall.LOCK_EX)
0000000000000000000000000000000000000000;;	}
