0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b298033cbb73605d7072aded88987a521fc8c5d1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseIPNet(s string) *net.IPNet {
0000000000000000000000000000000000000000;;		_, net, err := net.ParseCIDR(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return net
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIPNets(t *testing.T) {
0000000000000000000000000000000000000000;;		s := IPNet{}
0000000000000000000000000000000000000000;;		s2 := IPNet{}
0000000000000000000000000000000000000000;;		if len(s) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=0: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		a := parseIPNet("1.0.0.0/8")
0000000000000000000000000000000000000000;;		b := parseIPNet("2.0.0.0/8")
0000000000000000000000000000000000000000;;		c := parseIPNet("3.0.0.0/8")
0000000000000000000000000000000000000000;;		d := parseIPNet("4.0.0.0/8")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Insert(a, b)
0000000000000000000000000000000000000000;;		if len(s) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=2: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Insert(c)
0000000000000000000000000000000000000000;;		if s.Has(d) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.Has(a) {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Delete(a)
0000000000000000000000000000000000000000;;		if s.Has(a) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Insert(a)
0000000000000000000000000000000000000000;;		if s.HasAll(a, b, d) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.HasAll(a, b) {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s2.Insert(a, b, d)
0000000000000000000000000000000000000000;;		if s.IsSuperset(s2) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s2.Delete(d)
0000000000000000000000000000000000000000;;		if !s.IsSuperset(s2) {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIPNetSetDeleteMultiples(t *testing.T) {
0000000000000000000000000000000000000000;;		s := IPNet{}
0000000000000000000000000000000000000000;;		a := parseIPNet("1.0.0.0/8")
0000000000000000000000000000000000000000;;		b := parseIPNet("2.0.0.0/8")
0000000000000000000000000000000000000000;;		c := parseIPNet("3.0.0.0/8")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Insert(a, b, c)
0000000000000000000000000000000000000000;;		if len(s) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=3: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Delete(a, c)
0000000000000000000000000000000000000000;;		if len(s) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=1: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Has(a) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Has(c) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.Has(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewIPSet(t *testing.T) {
0000000000000000000000000000000000000000;;		s, err := ParseIPNets("1.0.0.0/8", "2.0.0.0/8", "3.0.0.0/8")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error parsing IPNets: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=3: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		a := parseIPNet("1.0.0.0/8")
0000000000000000000000000000000000000000;;		b := parseIPNet("2.0.0.0/8")
0000000000000000000000000000000000000000;;		c := parseIPNet("3.0.0.0/8")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !s.Has(a) || !s.Has(b) || !s.Has(c) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIPNetSetDifference(t *testing.T) {
0000000000000000000000000000000000000000;;		l, err := ParseIPNets("1.0.0.0/8", "2.0.0.0/8", "3.0.0.0/8")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error parsing IPNets: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, err := ParseIPNets("1.0.0.0/8", "2.0.0.0/8", "4.0.0.0/8", "5.0.0.0/8")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error parsing IPNets: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := l.Difference(r)
0000000000000000000000000000000000000000;;		d := r.Difference(l)
0000000000000000000000000000000000000000;;		if len(c) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=1: %d", len(c))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !c.Has(parseIPNet("3.0.0.0/8")) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(d) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=2: %d", len(d))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !d.Has(parseIPNet("4.0.0.0/8")) || !d.Has(parseIPNet("5.0.0.0/8")) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIPNetSetList(t *testing.T) {
0000000000000000000000000000000000000000;;		s, err := ParseIPNets("3.0.0.0/8", "1.0.0.0/8", "2.0.0.0/8")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error parsing IPNets: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l := s.StringSlice()
0000000000000000000000000000000000000000;;		sort.Strings(l)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(l, []string{"1.0.0.0/8", "2.0.0.0/8", "3.0.0.0/8"}) {
0000000000000000000000000000000000000000;;			t.Errorf("List gave unexpected result: %#v", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
