0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
52cecda094b013749a141d7e4e2ed090f1faff28;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/netsh"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// no-op implementation of netsh Interface
0000000000000000000000000000000000000000;;	type FakeNetsh struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFake() *FakeNetsh {
0000000000000000000000000000000000000000;;		return &FakeNetsh{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*FakeNetsh) EnsurePortProxyRule(args []string) (bool, error) {
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePortProxyRule deletes the specified portproxy rule.  If the rule did not exist, return error.
0000000000000000000000000000000000000000;;	func (*FakeNetsh) DeletePortProxyRule(args []string) error {
0000000000000000000000000000000000000000;;		// Do Nothing
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnsureIPAddress checks if the specified IP Address is added to vEthernet (HNSTransparent) interface, if not, add it.  If the address existed, return true.
0000000000000000000000000000000000000000;;	func (*FakeNetsh) EnsureIPAddress(args []string, ip net.IP) (bool, error) {
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteIPAddress checks if the specified IP address is present and, if so, deletes it.
0000000000000000000000000000000000000000;;	func (*FakeNetsh) DeleteIPAddress(args []string) error {
0000000000000000000000000000000000000000;;		// Do Nothing
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore runs `netsh exec` to restore portproxy or addresses using a file.
0000000000000000000000000000000000000000;;	// TODO Check if this is required, most likely not
0000000000000000000000000000000000000000;;	func (*FakeNetsh) Restore(args []string) error {
0000000000000000000000000000000000000000;;		// Do Nothing
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInterfaceToAddIP returns the interface name where Service IP needs to be added
0000000000000000000000000000000000000000;;	// IP Address needs to be added for netsh portproxy to redirect traffic
0000000000000000000000000000000000000000;;	// Reads Environment variable INTERFACE_TO_ADD_SERVICE_IP, if it is not defined then "vEthernet (HNSTransparent)" is returned
0000000000000000000000000000000000000000;;	func (*FakeNetsh) GetInterfaceToAddIP() string {
0000000000000000000000000000000000000000;;		return "Interface 1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = netsh.Interface(&FakeNetsh{})
