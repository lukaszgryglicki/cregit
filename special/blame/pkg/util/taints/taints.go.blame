0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
846f01bbd38f2387ecdda6293132076111cc31af;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// package taints implements uitilites for working with taints
0000000000000000000000000000000000000000;;	package taints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseTaint parses a taint from a string. Taint must be of the format '<key>=<value>:<effect>'.
0000000000000000000000000000000000000000;;	func ParseTaint(st string) (v1.Taint, error) {
0000000000000000000000000000000000000000;;		var taint v1.Taint
0000000000000000000000000000000000000000;;		parts := strings.Split(st, "=")
0000000000000000000000000000000000000000;;		if len(parts) != 2 || len(parts[1]) == 0 || len(validation.IsQualifiedName(parts[0])) > 0 {
0000000000000000000000000000000000000000;;			return taint, fmt.Errorf("invalid taint spec: %v", st)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parts2 := strings.Split(parts[1], ":")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		effect := v1.TaintEffect(parts2[1])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errs := validation.IsValidLabelValue(parts2[0])
0000000000000000000000000000000000000000;;		if len(parts2) != 2 || len(errs) != 0 {
0000000000000000000000000000000000000000;;			return taint, fmt.Errorf("invalid taint spec: %v, %s", st, strings.Join(errs, "; "))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if effect != v1.TaintEffectNoSchedule && effect != v1.TaintEffectPreferNoSchedule && effect != v1.TaintEffectNoExecute {
0000000000000000000000000000000000000000;;			return taint, fmt.Errorf("invalid taint spec: %v, unsupported taint effect", st)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		taint.Key = parts[0]
0000000000000000000000000000000000000000;;		taint.Value = parts2[0]
0000000000000000000000000000000000000000;;		taint.Effect = effect
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return taint, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTaintsVar wraps []api.Taint in a struct that implements flag.Value to allow taints to be
0000000000000000000000000000000000000000;;	// bound to command line flags.
0000000000000000000000000000000000000000;;	func NewTaintsVar(ptr *[]api.Taint) taintsVar {
0000000000000000000000000000000000000000;;		return taintsVar{
0000000000000000000000000000000000000000;;			ptr: ptr,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type taintsVar struct {
0000000000000000000000000000000000000000;;		ptr *[]api.Taint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t taintsVar) Set(s string) error {
0000000000000000000000000000000000000000;;		sts := strings.Split(s, ",")
0000000000000000000000000000000000000000;;		var taints []api.Taint
0000000000000000000000000000000000000000;;		for _, st := range sts {
0000000000000000000000000000000000000000;;			taint, err := ParseTaint(st)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			taints = append(taints, api.Taint{Key: taint.Key, Value: taint.Value, Effect: api.TaintEffect(taint.Effect)})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*t.ptr = taints
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t taintsVar) String() string {
0000000000000000000000000000000000000000;;		if len(*t.ptr) == 0 {
0000000000000000000000000000000000000000;;			return "<nil>"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var taints []string
0000000000000000000000000000000000000000;;		for _, taint := range *t.ptr {
0000000000000000000000000000000000000000;;			taints = append(taints, fmt.Sprintf("%s=%s:%s", taint.Key, taint.Value, taint.Effect))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(taints, ",")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t taintsVar) Type() string {
0000000000000000000000000000000000000000;;		return "[]api.Taint"
0000000000000000000000000000000000000000;;	}
