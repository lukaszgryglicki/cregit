0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
846f01bbd38f2387ecdda6293132076111cc31af;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package taints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTaintsVar(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			f   string
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;			t   []api.Taint
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				f: "",
0000000000000000000000000000000000000000;;				t: []api.Taint(nil),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				f: "--t=foo=bar:NoSchedule",
0000000000000000000000000000000000000000;;				t: []api.Taint{{Key: "foo", Value: "bar", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				f: "--t=foo=bar:NoSchedule,bing=bang:PreferNoSchedule",
0000000000000000000000000000000000000000;;				t: []api.Taint{
0000000000000000000000000000000000000000;;					{Key: "foo", Value: "bar", Effect: api.TaintEffectNoSchedule},
0000000000000000000000000000000000000000;;					{Key: "bing", Value: "bang", Effect: api.TaintEffectPreferNoSchedule},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				f: "--t=dedicated-for=user1:NoExecute",
0000000000000000000000000000000000000000;;				t: []api.Taint{{Key: "dedicated-for", Value: "user1", Effect: "NoExecute"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			args := append([]string{"test"}, strings.Fields(c.f)...)
0000000000000000000000000000000000000000;;			cli := pflag.NewFlagSet("test", pflag.ContinueOnError)
0000000000000000000000000000000000000000;;			var taints []api.Taint
0000000000000000000000000000000000000000;;			cli.Var(NewTaintsVar(&taints), "t", "bar")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := cli.Parse(args)
0000000000000000000000000000000000000000;;			if err == nil && c.err {
0000000000000000000000000000000000000000;;				t.Errorf("[%v] expected error", i)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil && !c.err {
0000000000000000000000000000000000000000;;				t.Errorf("[%v] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(c.t, taints) {
0000000000000000000000000000000000000000;;				t.Errorf("[%v] unexpected taints:\n\texpected:\n\t\t%#v\n\tgot:\n\t\t%#v", i, c.t, taints)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
