0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8c3f5a13a59cffc562bff68d706d751fdf061d0a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dbus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		godbus "github.com/godbus/dbus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DBusNameFlagAllowReplacement uint32 = 1 << (iota + 1)
0000000000000000000000000000000000000000;;		DBusNameFlagReplaceExisting
0000000000000000000000000000000000000000;;		DBusNameFlagDoNotQueue
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DBusRequestNameReplyPrimaryOwner uint32 = iota + 1
0000000000000000000000000000000000000000;;		DBusRequestNameReplyInQueue
0000000000000000000000000000000000000000;;		DBusRequestNameReplyExists
0000000000000000000000000000000000000000;;		DBusRequestNameReplyAlreadyOwner
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DBusReleaseNameReplyReleased uint32 = iota + 1
0000000000000000000000000000000000000000;;		DBusReleaseNameReplyNonExistent
0000000000000000000000000000000000000000;;		DBusReleaseNameReplyNotOwner
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doDBusTest(t *testing.T, dbus Interface, real bool) {
0000000000000000000000000000000000000000;;		bus, err := dbus.SystemBus()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !real {
0000000000000000000000000000000000000000;;				t.Errorf("dbus.SystemBus() failed with fake Interface")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Skipf("D-Bus is not running: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		busObj := bus.BusObject()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.GetId", 0).Store(&id)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(id) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected non-empty Id, got \"\"")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Switch to the session bus for the rest, since the system bus is more
0000000000000000000000000000000000000000;;		// locked down (and thus harder to trick into emitting signals).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bus, err = dbus.SessionBus()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !real {
0000000000000000000000000000000000000000;;				t.Errorf("dbus.SystemBus() failed with fake Interface")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Skipf("D-Bus session bus is not available: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		busObj = bus.BusObject()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := fmt.Sprintf("io.kubernetes.dbus_test_%d", os.Getpid())
0000000000000000000000000000000000000000;;		owner := ""
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.GetNameOwner", 0, name).Store(&owner)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected '%s' to be un-owned, but found owner %s", name, owner)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dbuserr, ok := err.(godbus.Error)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("expected godbus.Error, but got %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dbuserr.Name != "org.freedesktop.DBus.Error.NameHasNoOwner" {
0000000000000000000000000000000000000000;;			t.Errorf("expected NameHasNoOwner error but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sigchan := make(chan *godbus.Signal, 10)
0000000000000000000000000000000000000000;;		bus.Signal(sigchan)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rule := fmt.Sprintf("type='signal',interface='org.freedesktop.DBus',member='NameOwnerChanged',path='/org/freedesktop/DBus',sender='org.freedesktop.DBus',arg0='%s'", name)
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.AddMatch", 0, rule).Store()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var ret uint32
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.RequestName", 0, name, DBusNameFlagDoNotQueue).Store(&ret)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ret != DBusRequestNameReplyPrimaryOwner {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", DBusRequestNameReplyPrimaryOwner, ret)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.GetNameOwner", 0, name).Store(&owner)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var changedSignal, acquiredSignal, lostSignal *godbus.Signal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sig1 := <-sigchan
0000000000000000000000000000000000000000;;		sig2 := <-sigchan
0000000000000000000000000000000000000000;;		// We get two signals, but the order isn't guaranteed
0000000000000000000000000000000000000000;;		if sig1.Name == "org.freedesktop.DBus.NameOwnerChanged" {
0000000000000000000000000000000000000000;;			changedSignal = sig1
0000000000000000000000000000000000000000;;			acquiredSignal = sig2
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			acquiredSignal = sig1
0000000000000000000000000000000000000000;;			changedSignal = sig2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if acquiredSignal.Sender != "org.freedesktop.DBus" || acquiredSignal.Name != "org.freedesktop.DBus.NameAcquired" {
0000000000000000000000000000000000000000;;			t.Errorf("expected NameAcquired signal, got %v", acquiredSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		acquiredName := acquiredSignal.Body[0].(string)
0000000000000000000000000000000000000000;;		if acquiredName != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected NameAcquired arguments: %v", acquiredSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if changedSignal.Sender != "org.freedesktop.DBus" || changedSignal.Name != "org.freedesktop.DBus.NameOwnerChanged" {
0000000000000000000000000000000000000000;;			t.Errorf("expected NameOwnerChanged signal, got %v", changedSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		changedName := changedSignal.Body[0].(string)
0000000000000000000000000000000000000000;;		oldOwner := changedSignal.Body[1].(string)
0000000000000000000000000000000000000000;;		newOwner := changedSignal.Body[2].(string)
0000000000000000000000000000000000000000;;		if changedName != name || oldOwner != "" || newOwner != owner {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected NameOwnerChanged arguments: %v", changedSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = busObj.Call("org.freedesktop.DBus.ReleaseName", 0, name).Store(&ret)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ret != DBusReleaseNameReplyReleased {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", DBusReleaseNameReplyReleased, ret)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sig1 = <-sigchan
0000000000000000000000000000000000000000;;		sig2 = <-sigchan
0000000000000000000000000000000000000000;;		if sig1.Name == "org.freedesktop.DBus.NameOwnerChanged" {
0000000000000000000000000000000000000000;;			changedSignal = sig1
0000000000000000000000000000000000000000;;			lostSignal = sig2
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			lostSignal = sig1
0000000000000000000000000000000000000000;;			changedSignal = sig2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lostSignal.Sender != "org.freedesktop.DBus" || lostSignal.Name != "org.freedesktop.DBus.NameLost" {
0000000000000000000000000000000000000000;;			t.Errorf("expected NameLost signal, got %v", lostSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lostName := lostSignal.Body[0].(string)
0000000000000000000000000000000000000000;;		if lostName != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected NameLost arguments: %v", lostSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if changedSignal.Sender != "org.freedesktop.DBus" || changedSignal.Name != "org.freedesktop.DBus.NameOwnerChanged" {
0000000000000000000000000000000000000000;;			t.Errorf("expected NameOwnerChanged signal, got %v", changedSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		changedName = changedSignal.Body[0].(string)
0000000000000000000000000000000000000000;;		oldOwner = changedSignal.Body[1].(string)
0000000000000000000000000000000000000000;;		newOwner = changedSignal.Body[2].(string)
0000000000000000000000000000000000000000;;		if changedName != name || oldOwner != owner || newOwner != "" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected NameOwnerChanged arguments: %v", changedSignal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(sigchan) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected extra signals (%d)", len(sigchan))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unregister sigchan
0000000000000000000000000000000000000000;;		bus.Signal(sigchan)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealDBus(t *testing.T) {
0000000000000000000000000000000000000000;;		dbus := New()
0000000000000000000000000000000000000000;;		doDBusTest(t, dbus, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeDBus(t *testing.T) {
0000000000000000000000000000000000000000;;		uniqueName := ":1.1"
0000000000000000000000000000000000000000;;		ownedName := ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeSystem := NewFakeConnection()
0000000000000000000000000000000000000000;;		fakeSystem.SetBusObject(
0000000000000000000000000000000000000000;;			func(method string, args ...interface{}) ([]interface{}, error) {
0000000000000000000000000000000000000000;;				if method == "org.freedesktop.DBus.GetId" {
0000000000000000000000000000000000000000;;					return []interface{}{"foo"}, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unexpected method call '%s'", method)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeSession := NewFakeConnection()
0000000000000000000000000000000000000000;;		fakeSession.SetBusObject(
0000000000000000000000000000000000000000;;			func(method string, args ...interface{}) ([]interface{}, error) {
0000000000000000000000000000000000000000;;				if method == "org.freedesktop.DBus.GetNameOwner" {
0000000000000000000000000000000000000000;;					checkName := args[0].(string)
0000000000000000000000000000000000000000;;					if checkName != ownedName {
0000000000000000000000000000000000000000;;						return nil, godbus.Error{Name: "org.freedesktop.DBus.Error.NameHasNoOwner", Body: nil}
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						return []interface{}{uniqueName}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if method == "org.freedesktop.DBus.RequestName" {
0000000000000000000000000000000000000000;;					reqName := args[0].(string)
0000000000000000000000000000000000000000;;					_ = args[1].(uint32)
0000000000000000000000000000000000000000;;					if ownedName != "" {
0000000000000000000000000000000000000000;;						return []interface{}{DBusRequestNameReplyAlreadyOwner}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					ownedName = reqName
0000000000000000000000000000000000000000;;					fakeSession.EmitSignal("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "NameAcquired", reqName)
0000000000000000000000000000000000000000;;					fakeSession.EmitSignal("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "NameOwnerChanged", reqName, "", uniqueName)
0000000000000000000000000000000000000000;;					return []interface{}{DBusRequestNameReplyPrimaryOwner}, nil
0000000000000000000000000000000000000000;;				} else if method == "org.freedesktop.DBus.ReleaseName" {
0000000000000000000000000000000000000000;;					reqName := args[0].(string)
0000000000000000000000000000000000000000;;					if reqName != ownedName {
0000000000000000000000000000000000000000;;						return []interface{}{DBusReleaseNameReplyNotOwner}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					ownedName = ""
0000000000000000000000000000000000000000;;					fakeSession.EmitSignal("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "NameOwnerChanged", reqName, uniqueName, "")
0000000000000000000000000000000000000000;;					fakeSession.EmitSignal("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "NameLost", reqName)
0000000000000000000000000000000000000000;;					return []interface{}{DBusReleaseNameReplyReleased}, nil
0000000000000000000000000000000000000000;;				} else if method == "org.freedesktop.DBus.AddMatch" {
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("unexpected method call '%s'", method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dbus := NewFake(fakeSystem, fakeSession)
0000000000000000000000000000000000000000;;		doDBusTest(t, dbus, false)
0000000000000000000000000000000000000000;;	}
