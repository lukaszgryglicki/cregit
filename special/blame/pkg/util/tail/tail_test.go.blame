0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cfe2654240523c7e213cc855ad81a9a96809220c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTail(t *testing.T) {
0000000000000000000000000000000000000000;;		line := strings.Repeat("a", blockSize)
0000000000000000000000000000000000000000;;		testBytes := []byte(line + "\n" +
0000000000000000000000000000000000000000;;			line + "\n" +
0000000000000000000000000000000000000000;;			line + "\n" +
0000000000000000000000000000000000000000;;			line + "\n" +
0000000000000000000000000000000000000000;;			line[blockSize/2:]) // incomplete line
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for c, test := range []struct {
0000000000000000000000000000000000000000;;			n     int64
0000000000000000000000000000000000000000;;			start int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{n: -1, start: 0},
0000000000000000000000000000000000000000;;			{n: 0, start: int64(len(line)+1) * 4},
0000000000000000000000000000000000000000;;			{n: 1, start: int64(len(line)+1) * 3},
0000000000000000000000000000000000000000;;			{n: 9999, start: 0},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			t.Logf("TestCase #%d: %+v", c, test)
0000000000000000000000000000000000000000;;			r := bytes.NewReader(testBytes)
0000000000000000000000000000000000000000;;			s, err := FindTailLineStartIndex(r, test.n)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if s != test.start {
0000000000000000000000000000000000000000;;				t.Errorf("%d != %d", s, test.start)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
