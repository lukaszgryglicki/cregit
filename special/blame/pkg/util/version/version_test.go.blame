0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8c99623dcebadffc312ce27952bb32b2d4edfedd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testItem struct {
0000000000000000000000000000000000000000;;		version    string
0000000000000000000000000000000000000000;;		unparsed   string
0000000000000000000000000000000000000000;;		equalsPrev bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testOne(v *Version, item, prev testItem) error {
0000000000000000000000000000000000000000;;		str := v.String()
0000000000000000000000000000000000000000;;		if item.unparsed == "" {
0000000000000000000000000000000000000000;;			if str != item.version {
0000000000000000000000000000000000000000;;				return fmt.Errorf("bad round-trip: %q -> %q", item.version, str)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if str != item.unparsed {
0000000000000000000000000000000000000000;;				return fmt.Errorf("bad unparse: %q -> %q, expected %q", item.version, str, item.unparsed)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if prev.version != "" {
0000000000000000000000000000000000000000;;			cmp, err := v.Compare(prev.version)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unexpected parse error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case cmp == -1:
0000000000000000000000000000000000000000;;				return fmt.Errorf("unexpected ordering %q < %q", item.version, prev.version)
0000000000000000000000000000000000000000;;			case cmp == 0 && !item.equalsPrev:
0000000000000000000000000000000000000000;;				return fmt.Errorf("unexpected comparison %q == %q", item.version, item.version)
0000000000000000000000000000000000000000;;			case cmp == 1 && item.equalsPrev:
0000000000000000000000000000000000000000;;				return fmt.Errorf("unexpected comparison %q != %q", item.version, item.version)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSemanticVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []testItem{
0000000000000000000000000000000000000000;;			// This is every version string that appears in the 2.0 semver spec,
0000000000000000000000000000000000000000;;			// sorted in strictly increasing order except as noted.
0000000000000000000000000000000000000000;;			{version: "0.1.0"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-0.3.7"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha+001", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha.1"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha.beta"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-beta"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-beta+exp.sha.5114f85", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-beta.2"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-beta.11"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-rc.1"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-x.7.z.92"},
0000000000000000000000000000000000000000;;			{version: "1.0.0"},
0000000000000000000000000000000000000000;;			{version: "1.0.0+20130313144700", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.9.0"},
0000000000000000000000000000000000000000;;			{version: "1.10.0"},
0000000000000000000000000000000000000000;;			{version: "1.11.0"},
0000000000000000000000000000000000000000;;			{version: "2.0.0"},
0000000000000000000000000000000000000000;;			{version: "2.1.0"},
0000000000000000000000000000000000000000;;			{version: "2.1.1"},
0000000000000000000000000000000000000000;;			{version: "42.0.0"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// We also allow whitespace and "v" prefix
0000000000000000000000000000000000000000;;			{version: "   42.0.0", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "\t42.0.0  ", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "43.0.0-1", unparsed: "43.0.0-1"},
0000000000000000000000000000000000000000;;			{version: "43.0.0-1  ", unparsed: "43.0.0-1", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "v43.0.0-1", unparsed: "43.0.0-1", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "  v43.0.0", unparsed: "43.0.0"},
0000000000000000000000000000000000000000;;			{version: " 43.0.0 ", unparsed: "43.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var prev testItem
0000000000000000000000000000000000000000;;		for _, item := range tests {
0000000000000000000000000000000000000000;;			v, err := ParseSemantic(item.version)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected parse error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = testOne(v, item, prev)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			prev = item
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadSemanticVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []string{
0000000000000000000000000000000000000000;;			// "MUST take the form X.Y.Z"
0000000000000000000000000000000000000000;;			"1",
0000000000000000000000000000000000000000;;			"1.2",
0000000000000000000000000000000000000000;;			"1.2.3.4",
0000000000000000000000000000000000000000;;			".2.3",
0000000000000000000000000000000000000000;;			"1..3",
0000000000000000000000000000000000000000;;			"1.2.",
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			"..",
0000000000000000000000000000000000000000;;			// "where X, Y, and Z are non-negative integers"
0000000000000000000000000000000000000000;;			"-1.2.3",
0000000000000000000000000000000000000000;;			"1.-2.3",
0000000000000000000000000000000000000000;;			"1.2.-3",
0000000000000000000000000000000000000000;;			"1a.2.3",
0000000000000000000000000000000000000000;;			"1.2a.3",
0000000000000000000000000000000000000000;;			"1.2.3a",
0000000000000000000000000000000000000000;;			"a1.2.3",
0000000000000000000000000000000000000000;;			"a.b.c",
0000000000000000000000000000000000000000;;			"1 .2.3",
0000000000000000000000000000000000000000;;			"1. 2.3",
0000000000000000000000000000000000000000;;			// "and MUST NOT contain leading zeroes."
0000000000000000000000000000000000000000;;			"01.2.3",
0000000000000000000000000000000000000000;;			"1.02.3",
0000000000000000000000000000000000000000;;			"1.2.03",
0000000000000000000000000000000000000000;;			// "[pre-release] identifiers MUST comprise only ASCII alphanumerics and hyphen"
0000000000000000000000000000000000000000;;			"1.2.3-/",
0000000000000000000000000000000000000000;;			// "[pre-release] identifiers MUST NOT be empty"
0000000000000000000000000000000000000000;;			"1.2.3-",
0000000000000000000000000000000000000000;;			"1.2.3-.",
0000000000000000000000000000000000000000;;			"1.2.3-foo.",
0000000000000000000000000000000000000000;;			"1.2.3-.foo",
0000000000000000000000000000000000000000;;			// "Numeric [pre-release] identifiers MUST NOT include leading zeroes"
0000000000000000000000000000000000000000;;			"1.2.3-01",
0000000000000000000000000000000000000000;;			// "[build metadata] identifiers MUST comprise only ASCII alphanumerics and hyphen"
0000000000000000000000000000000000000000;;			"1.2.3+/",
0000000000000000000000000000000000000000;;			// "[build metadata] identifiers MUST NOT be empty"
0000000000000000000000000000000000000000;;			"1.2.3+",
0000000000000000000000000000000000000000;;			"1.2.3+.",
0000000000000000000000000000000000000000;;			"1.2.3+foo.",
0000000000000000000000000000000000000000;;			"1.2.3+.foo",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// whitespace/"v"-prefix checks
0000000000000000000000000000000000000000;;			"v 1.2.3",
0000000000000000000000000000000000000000;;			"vv1.2.3",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			_, err := ParseSemantic(tests[i])
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected success parsing invalid semver %q", tests[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenericVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []testItem{
0000000000000000000000000000000000000000;;			// This is all of the strings from TestSemanticVersions, plus some strings
0000000000000000000000000000000000000000;;			// from TestBadSemanticVersions that should parse as generic versions,
0000000000000000000000000000000000000000;;			// plus some additional strings.
0000000000000000000000000000000000000000;;			{version: "0.1.0", unparsed: "0.1.0"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-0.3.7", unparsed: "1.0.0"},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha+001", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha.1", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-alpha.beta", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0.beta", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-beta+exp.sha.5114f85", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0.beta.2", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0.beta.11", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0.rc.1", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0-x.7.z.92", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.0.0+20130313144700", unparsed: "1.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2", unparsed: "1.2"},
0000000000000000000000000000000000000000;;			{version: "1.2a.3", unparsed: "1.2", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3", unparsed: "1.2.3"},
0000000000000000000000000000000000000000;;			{version: "1.2.3a", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3-foo.", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3-.foo", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3-01", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3+", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3+foo.", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3+.foo", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.02.3", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.03", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.003", unparsed: "1.2.3", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3.4", unparsed: "1.2.3.4"},
0000000000000000000000000000000000000000;;			{version: "1.2.3.4b3", unparsed: "1.2.3.4", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "1.2.3.4.5", unparsed: "1.2.3.4.5"},
0000000000000000000000000000000000000000;;			{version: "1.9.0", unparsed: "1.9.0"},
0000000000000000000000000000000000000000;;			{version: "1.10.0", unparsed: "1.10.0"},
0000000000000000000000000000000000000000;;			{version: "1.11.0", unparsed: "1.11.0"},
0000000000000000000000000000000000000000;;			{version: "2.0.0", unparsed: "2.0.0"},
0000000000000000000000000000000000000000;;			{version: "2.1.0", unparsed: "2.1.0"},
0000000000000000000000000000000000000000;;			{version: "2.1.1", unparsed: "2.1.1"},
0000000000000000000000000000000000000000;;			{version: "42.0.0", unparsed: "42.0.0"},
0000000000000000000000000000000000000000;;			{version: "   42.0.0", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "\t42.0.0  ", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "42.0.0-1", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "42.0.0-1  ", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "v42.0.0-1", unparsed: "42.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;			{version: "  v43.0.0", unparsed: "43.0.0"},
0000000000000000000000000000000000000000;;			{version: " 43.0.0 ", unparsed: "43.0.0", equalsPrev: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var prev testItem
0000000000000000000000000000000000000000;;		for _, item := range tests {
0000000000000000000000000000000000000000;;			v, err := ParseGeneric(item.version)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected parse error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = testOne(v, item, prev)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			prev = item
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadGenericVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []string{
0000000000000000000000000000000000000000;;			"1",
0000000000000000000000000000000000000000;;			"01.2.3",
0000000000000000000000000000000000000000;;			"-1.2.3",
0000000000000000000000000000000000000000;;			"1.-2.3",
0000000000000000000000000000000000000000;;			".2.3",
0000000000000000000000000000000000000000;;			"1..3",
0000000000000000000000000000000000000000;;			"1a.2.3",
0000000000000000000000000000000000000000;;			"a1.2.3",
0000000000000000000000000000000000000000;;			"1 .2.3",
0000000000000000000000000000000000000000;;			"1. 2.3",
0000000000000000000000000000000000000000;;			"1.bob",
0000000000000000000000000000000000000000;;			"bob",
0000000000000000000000000000000000000000;;			"v 1.2.3",
0000000000000000000000000000000000000000;;			"vv1.2.3",
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			".",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			_, err := ParseGeneric(tests[i])
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected success parsing invalid version %q", tests[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
