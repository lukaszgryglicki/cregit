0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c84b1871aa3ceac32ba3f7da2eeca05a00d8da36;pkg/util/deadlock-detector.go[pkg/util/deadlock-detector.go][pkg/util/threading/deadlock-detector.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package threading
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rwMutexToLockableAdapter struct {
0000000000000000000000000000000000000000;;		rw *sync.RWMutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *rwMutexToLockableAdapter) Lock() {
0000000000000000000000000000000000000000;;		r.rw.RLock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *rwMutexToLockableAdapter) Unlock() {
0000000000000000000000000000000000000000;;		r.rw.RUnlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type deadlockDetector struct {
0000000000000000000000000000000000000000;;		name          string
0000000000000000000000000000000000000000;;		lock          sync.Locker
0000000000000000000000000000000000000000;;		maxLockPeriod time.Duration
0000000000000000000000000000000000000000;;		exiter        exiter
0000000000000000000000000000000000000000;;		exitChannelFn func() <-chan time.Time
0000000000000000000000000000000000000000;;		// Really only useful for testing
0000000000000000000000000000000000000000;;		stopChannel <-chan bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeadlockWatchdogReadLock creates a watchdog on read/write mutex.  If the mutex can not be acquired
0000000000000000000000000000000000000000;;	// for read access within 'maxLockPeriod', the program exits via glog.Exitf() or os.Exit() if that fails
0000000000000000000000000000000000000000;;	// 'name' is a semantic name that is useful for the user and is printed on exit.
0000000000000000000000000000000000000000;;	func DeadlockWatchdogReadLock(lock *sync.RWMutex, name string, maxLockPeriod time.Duration) {
0000000000000000000000000000000000000000;;		DeadlockWatchdog(&rwMutexToLockableAdapter{lock}, name, maxLockPeriod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeadlockWatchdog(lock sync.Locker, name string, maxLockPeriod time.Duration) {
0000000000000000000000000000000000000000;;		if maxLockPeriod <= 0 {
0000000000000000000000000000000000000000;;			panic("maxLockPeriod is <= 0, that can't be what you wanted")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		detector := &deadlockDetector{
0000000000000000000000000000000000000000;;			lock:          lock,
0000000000000000000000000000000000000000;;			name:          name,
0000000000000000000000000000000000000000;;			maxLockPeriod: maxLockPeriod,
0000000000000000000000000000000000000000;;			exitChannelFn: func() <-chan time.Time { return time.After(maxLockPeriod) },
0000000000000000000000000000000000000000;;			stopChannel:   make(chan bool),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go detector.run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Useful for injecting tests
0000000000000000000000000000000000000000;;	type exiter interface {
0000000000000000000000000000000000000000;;		Exitf(format string, args ...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type realExiter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (realExiter) Exitf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Let's just be extra sure we die, even if Exitf panics
0000000000000000000000000000000000000000;;				if r := recover(); r != nil {
0000000000000000000000000000000000000000;;					glog.Errorf(format, args...)
0000000000000000000000000000000000000000;;					os.Exit(2)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			glog.Exitf(format, args...)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *deadlockDetector) run() {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			if !d.runOnce() {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(d.maxLockPeriod / 2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *deadlockDetector) runOnce() bool {
0000000000000000000000000000000000000000;;		ch := make(chan bool, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			d.lock.Lock()
0000000000000000000000000000000000000000;;			d.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ch <- true
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		exitCh := d.exitChannelFn()
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-exitCh:
0000000000000000000000000000000000000000;;			d.exiter.Exitf("Deadlock on %s, exiting", d.name)
0000000000000000000000000000000000000000;;			// return is here for when we use a fake exiter in testing
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		case <-ch:
0000000000000000000000000000000000000000;;			glog.V(6).Infof("%s is not deadlocked", d.name)
0000000000000000000000000000000000000000;;		case <-d.stopChannel:
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Stopping deadlock detector for %s", d.name)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
