0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b0c91361bedd215958a2df1daa9e0df7b61554a8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package i18n
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTranslation(t *testing.T) {
0000000000000000000000000000000000000000;;		err := LoadTranslations("test", func() string { return "default" })
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := T("test_string")
0000000000000000000000000000000000000000;;		if result != "foo" {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %s, saw: %s", "foo", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTranslationPlural(t *testing.T) {
0000000000000000000000000000000000000000;;		err := LoadTranslations("test", func() string { return "default" })
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := T("test_plural", 3)
0000000000000000000000000000000000000000;;		if result != "there were 3 items" {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %s, saw: %s", "there were 3 items", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = T("test_plural", 1)
0000000000000000000000000000000000000000;;		if result != "there was 1 item" {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %s, saw: %s", "there was 1 item", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTranslationEnUSEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		os.Setenv("LANG", "en_US.UTF-8")
0000000000000000000000000000000000000000;;		err := LoadTranslations("test", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := T("test_string")
0000000000000000000000000000000000000000;;		if result != "baz" {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %s, saw: %s", "baz", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
