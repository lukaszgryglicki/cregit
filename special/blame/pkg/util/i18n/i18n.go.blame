0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b0c91361bedd215958a2df1daa9e0df7b61554a8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package i18n
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"archive/zip"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/generated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/chai2010/gettext-go/gettext"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var knownTranslations = map[string][]string{
0000000000000000000000000000000000000000;;		"kubectl": {
0000000000000000000000000000000000000000;;			"default",
0000000000000000000000000000000000000000;;			"en_US",
0000000000000000000000000000000000000000;;			"fr_FR",
0000000000000000000000000000000000000000;;			"zh_CN",
0000000000000000000000000000000000000000;;			"ja_JP",
0000000000000000000000000000000000000000;;			"zh_TW",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// only used for unit tests.
0000000000000000000000000000000000000000;;		"test": {
0000000000000000000000000000000000000000;;			"default",
0000000000000000000000000000000000000000;;			"en_US",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func loadSystemLanguage() string {
0000000000000000000000000000000000000000;;		langStr := os.Getenv("LANG")
0000000000000000000000000000000000000000;;		if langStr == "" {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Couldn't find the LANG environment variable, defaulting to en_US")
0000000000000000000000000000000000000000;;			return "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pieces := strings.Split(langStr, ".")
0000000000000000000000000000000000000000;;		if len(pieces) != 2 {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Unexpected system language (%s), defaulting to en_US", langStr)
0000000000000000000000000000000000000000;;			return "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pieces[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findLanguage(root string, getLanguageFn func() string) string {
0000000000000000000000000000000000000000;;		langStr := getLanguageFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		translations := knownTranslations[root]
0000000000000000000000000000000000000000;;		if translations != nil {
0000000000000000000000000000000000000000;;			for ix := range translations {
0000000000000000000000000000000000000000;;				if translations[ix] == langStr {
0000000000000000000000000000000000000000;;					return langStr
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(3).Infof("Couldn't find translations for %s, using default", langStr)
0000000000000000000000000000000000000000;;		return "default"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadTranslations loads translation files. getLanguageFn should return a language
0000000000000000000000000000000000000000;;	// string (e.g. 'en-US'). If getLanguageFn is nil, then the loadSystemLanguage function
0000000000000000000000000000000000000000;;	// is used, which uses the 'LANG' environment variable.
0000000000000000000000000000000000000000;;	func LoadTranslations(root string, getLanguageFn func() string) error {
0000000000000000000000000000000000000000;;		if getLanguageFn == nil {
0000000000000000000000000000000000000000;;			getLanguageFn = loadSystemLanguage
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		langStr := findLanguage(root, getLanguageFn)
0000000000000000000000000000000000000000;;		translationFiles := []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("%s/%s/LC_MESSAGES/k8s.po", root, langStr),
0000000000000000000000000000000000000000;;			fmt.Sprintf("%s/%s/LC_MESSAGES/k8s.mo", root, langStr),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(3).Infof("Setting language to %s", langStr)
0000000000000000000000000000000000000000;;		// TODO: list the directory and load all files.
0000000000000000000000000000000000000000;;		buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		w := zip.NewWriter(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure to check the error on Close.
0000000000000000000000000000000000000000;;		for _, file := range translationFiles {
0000000000000000000000000000000000000000;;			filename := "translations/" + file
0000000000000000000000000000000000000000;;			f, err := w.Create(file)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data, err := generated.Asset(filename)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := f.Write(data); err != nil {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := w.Close(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gettext.BindTextdomain("k8s", root+".zip", buf.Bytes())
0000000000000000000000000000000000000000;;		gettext.Textdomain("k8s")
0000000000000000000000000000000000000000;;		gettext.SetLocale(langStr)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// T translates a string, possibly substituting arguments into it along
0000000000000000000000000000000000000000;;	// the way. If len(args) is > 0, args1 is assumed to be the plural value
0000000000000000000000000000000000000000;;	// and plural translation is used.
0000000000000000000000000000000000000000;;	func T(defaultValue string, args ...int) string {
0000000000000000000000000000000000000000;;		if len(args) == 0 {
0000000000000000000000000000000000000000;;			return gettext.PGettext("", defaultValue)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf(gettext.PNGettext("", defaultValue, defaultValue+".plural", args[0]),
0000000000000000000000000000000000000000;;			args[0])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errorf produces an error with a translated error string.
0000000000000000000000000000000000000000;;	// Substitution is performed via the `T` function above, following
0000000000000000000000000000000000000000;;	// the same rules.
0000000000000000000000000000000000000000;;	func Errorf(defaultValue string, args ...int) error {
0000000000000000000000000000000000000000;;		return errors.New(T(defaultValue, args...))
0000000000000000000000000000000000000000;;	}
