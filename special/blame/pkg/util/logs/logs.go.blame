0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b36ea72beeaaba58de66be48606b420dc1ba10ae;pkg/util/logs.go[pkg/util/logs.go][pkg/util/logs/logs.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package logs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var logFlushFreq = pflag.Duration("log-flush-frequency", 5*time.Second, "Maximum number of seconds between log flushes")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(thockin): This is temporary until we agree on log dirs and put those into each cmd.
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		flag.Set("logtostderr", "true")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GlogWriter serves as a bridge between the standard log package and the glog package.
0000000000000000000000000000000000000000;;	type GlogWriter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write implements the io.Writer interface.
0000000000000000000000000000000000000000;;	func (writer GlogWriter) Write(data []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		glog.Info(string(data))
0000000000000000000000000000000000000000;;		return len(data), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitLogs initializes logs the way we want for kubernetes.
0000000000000000000000000000000000000000;;	func InitLogs() {
0000000000000000000000000000000000000000;;		log.SetOutput(GlogWriter{})
0000000000000000000000000000000000000000;;		log.SetFlags(0)
0000000000000000000000000000000000000000;;		// The default glog flush interval is 30 seconds, which is frighteningly long.
0000000000000000000000000000000000000000;;		go wait.Until(glog.Flush, *logFlushFreq, wait.NeverStop)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlushLogs flushes logs immediately.
0000000000000000000000000000000000000000;;	func FlushLogs() {
0000000000000000000000000000000000000000;;		glog.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLogger creates a new log.Logger which sends logs to glog.Info.
0000000000000000000000000000000000000000;;	func NewLogger(prefix string) *log.Logger {
0000000000000000000000000000000000000000;;		return log.New(GlogWriter{}, prefix, 0)
0000000000000000000000000000000000000000;;	}
