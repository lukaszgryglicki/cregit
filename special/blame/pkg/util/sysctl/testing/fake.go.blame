0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
858b83dcba1059894150fac7fcd20e6cc243fa33;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/sysctl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fake is a map-backed implementation of sysctl.Interface, for testing/mocking
0000000000000000000000000000000000000000;;	type fake struct {
0000000000000000000000000000000000000000;;		Settings map[string]int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFake() *fake {
0000000000000000000000000000000000000000;;		return &fake{
0000000000000000000000000000000000000000;;			Settings: make(map[string]int),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSysctl returns the value for the specified sysctl setting
0000000000000000000000000000000000000000;;	func (m *fake) GetSysctl(sysctl string) (int, error) {
0000000000000000000000000000000000000000;;		v, found := m.Settings[sysctl]
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return -1, os.ErrNotExist
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSysctl modifies the specified sysctl flag to the new value
0000000000000000000000000000000000000000;;	func (m *fake) SetSysctl(sysctl string, newVal int) error {
0000000000000000000000000000000000000000;;		m.Settings[sysctl] = newVal
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = sysctl.Interface(&fake{})
