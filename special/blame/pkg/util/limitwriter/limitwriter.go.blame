0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a941a8c0df22b8a0a190122996b3a521903793d3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package limitwriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a writer that is limited to writing at most n bytes to w. This writer is not
0000000000000000000000000000000000000000;;	// thread safe.
0000000000000000000000000000000000000000;;	func New(w io.Writer, n int64) io.Writer {
0000000000000000000000000000000000000000;;		return &limitWriter{
0000000000000000000000000000000000000000;;			w: w,
0000000000000000000000000000000000000000;;			n: n,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMaximumWrite is returned when all bytes have been written.
0000000000000000000000000000000000000000;;	var ErrMaximumWrite = errors.New("maximum write")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type limitWriter struct {
0000000000000000000000000000000000000000;;		w io.Writer
0000000000000000000000000000000000000000;;		n int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *limitWriter) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		if int64(len(p)) > w.n {
0000000000000000000000000000000000000000;;			p = p[:w.n]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.n > 0 {
0000000000000000000000000000000000000000;;			n, err = w.w.Write(p)
0000000000000000000000000000000000000000;;			w.n -= int64(n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.n == 0 {
0000000000000000000000000000000000000000;;			err = ErrMaximumWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
