0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
fb58952734d0f95a7ba81136b3f7c936cef27d68;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringDiff(t *testing.T) {
0000000000000000000000000000000000000000;;		diff := diff.StringDiff("aaabb", "aaacc")
0000000000000000000000000000000000000000;;		expect := "aaa\n\nA: bb\n\nB: cc\n\n"
0000000000000000000000000000000000000000;;		if diff != expect {
0000000000000000000000000000000000000000;;			t.Errorf("diff returned %v", diff)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAllPtrFieldsNil(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			obj      interface{}
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{struct{}{}, true},
0000000000000000000000000000000000000000;;			{struct{ Foo int }{12345}, true},
0000000000000000000000000000000000000000;;			{&struct{ Foo int }{12345}, true},
0000000000000000000000000000000000000000;;			{struct{ Foo *int }{nil}, true},
0000000000000000000000000000000000000000;;			{&struct{ Foo *int }{nil}, true},
0000000000000000000000000000000000000000;;			{struct {
0000000000000000000000000000000000000000;;				Foo int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{12345, nil}, true},
0000000000000000000000000000000000000000;;			{&struct {
0000000000000000000000000000000000000000;;				Foo int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{12345, nil}, true},
0000000000000000000000000000000000000000;;			{struct {
0000000000000000000000000000000000000000;;				Foo *int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{nil, nil}, true},
0000000000000000000000000000000000000000;;			{&struct {
0000000000000000000000000000000000000000;;				Foo *int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{nil, nil}, true},
0000000000000000000000000000000000000000;;			{struct{ Foo *int }{new(int)}, false},
0000000000000000000000000000000000000000;;			{&struct{ Foo *int }{new(int)}, false},
0000000000000000000000000000000000000000;;			{struct {
0000000000000000000000000000000000000000;;				Foo *int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{nil, new(int)}, false},
0000000000000000000000000000000000000000;;			{&struct {
0000000000000000000000000000000000000000;;				Foo *int
0000000000000000000000000000000000000000;;				Bar *int
0000000000000000000000000000000000000000;;			}{nil, new(int)}, false},
0000000000000000000000000000000000000000;;			{(*struct{})(nil), true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			if AllPtrFieldsNil(tc.obj) != tc.expected {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected %t, got %t", i, tc.expected, !tc.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
