0000000000000000000000000000000000000000;;	// +build linux
6406f55c577d7113ba250b2fc90613490895bc12;pkg/volume/empty_dir/chcon_runner_linux.go[pkg/volume/empty_dir/chcon_runner_linux.go][pkg/util/selinux/selinux_linux.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selinux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/selinux"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SELinuxEnabled returns whether SELinux is enabled on the system.  SELinux
0000000000000000000000000000000000000000;;	// has a tri-state:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1.  disabled: SELinux Kernel modules not loaded, SELinux policy is not
0000000000000000000000000000000000000000;;	//     checked during Kernel MAC checks
0000000000000000000000000000000000000000;;	// 2.  enforcing: Enabled; SELinux policy violations are denied and logged
0000000000000000000000000000000000000000;;	//     in the audit log
0000000000000000000000000000000000000000;;	// 3.  permissive: Enabled, but SELinux policy violations are permitted and
0000000000000000000000000000000000000000;;	//     logged in the audit log
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SELinuxEnabled returns true if SELinux is enforcing or permissive, and
0000000000000000000000000000000000000000;;	// false if it is disabled.
0000000000000000000000000000000000000000;;	func SELinuxEnabled() bool {
0000000000000000000000000000000000000000;;		return selinux.SelinuxEnabled()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// realSELinuxRunner is the real implementation of SELinuxRunner interface for
0000000000000000000000000000000000000000;;	// Linux.
0000000000000000000000000000000000000000;;	type realSELinuxRunner struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ SELinuxRunner = &realSELinuxRunner{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ *realSELinuxRunner) Getfilecon(path string) (string, error) {
0000000000000000000000000000000000000000;;		if !SELinuxEnabled() {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return selinux.Getfilecon(path)
0000000000000000000000000000000000000000;;	}
