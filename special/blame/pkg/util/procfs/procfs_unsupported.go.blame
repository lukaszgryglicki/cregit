0000000000000000000000000000000000000000;;	// +build !linux
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;pkg/util/procfs/procfs_interface.go[pkg/util/procfs/procfs_interface.go][pkg/util/procfs/procfs_unsupported.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package procfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcFS struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProcFS() ProcFSInterface {
0000000000000000000000000000000000000000;;		return &ProcFS{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFullContainerName gets the container name given the root process id of the container.
0000000000000000000000000000000000000000;;	func (pfs *ProcFS) GetFullContainerName(pid int) (string, error) {
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("GetFullContainerName is unsupported in this build")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find process(es) using a regular expression and send a specified
0000000000000000000000000000000000000000;;	// signal to each process
0000000000000000000000000000000000000000;;	func PKill(name string, sig syscall.Signal) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("PKill is unsupported in this build")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find process(es) with a specified name (exact match)
0000000000000000000000000000000000000000;;	// and return their pid(s)
0000000000000000000000000000000000000000;;	func PidOf(name string) ([]int, error) {
0000000000000000000000000000000000000000;;		return []int{}, fmt.Errorf("PidOf is unsupported in this build")
0000000000000000000000000000000000000000;;	}
