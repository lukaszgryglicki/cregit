0000000000000000000000000000000000000000;;	// +build linux
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;pkg/util/procfs/procfs_test.go[pkg/util/procfs/procfs_test.go][pkg/util/procfs/procfs_linux_test.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package procfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/signal"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyContainerName(procCgroupText, expectedName string, expectedErr bool, t *testing.T) {
0000000000000000000000000000000000000000;;		name, err := containerNameFromProcCgroup(procCgroupText)
0000000000000000000000000000000000000000;;		if expectedErr && err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error but did not get error in verifyContainerName")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if !expectedErr && err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no error, but got error %+v in verifyContainerName", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if expectedErr {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if name != expectedName {
0000000000000000000000000000000000000000;;			t.Errorf("Expected container name %s but got name %s", expectedName, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContainerNameFromProcCgroup(t *testing.T) {
0000000000000000000000000000000000000000;;		procCgroupValid := "2:devices:docker/kubelet"
0000000000000000000000000000000000000000;;		verifyContainerName(procCgroupValid, "docker/kubelet", false, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procCgroupEmpty := ""
0000000000000000000000000000000000000000;;		verifyContainerName(procCgroupEmpty, "", true, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		content, err := ioutil.ReadFile("example_proc_cgroup")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Could not read example /proc cgroup file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyContainerName(string(content), "/user/1000.user/c1.session", false, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procCgroupNoDevice := "2:freezer:docker/kubelet\n5:cpuacct:pkg/kubectl"
0000000000000000000000000000000000000000;;		verifyContainerName(procCgroupNoDevice, "", true, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procCgroupInvalid := "devices:docker/kubelet\ncpuacct:pkg/kubectl"
0000000000000000000000000000000000000000;;		verifyContainerName(procCgroupInvalid, "", true, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPidOf(t *testing.T) {
0000000000000000000000000000000000000000;;		if runtime.GOOS == "darwin" || runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;			t.Skipf("not supported on GOOS=%s", runtime.GOOS)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pids, err := PidOf(filepath.Base(os.Args[0]))
0000000000000000000000000000000000000000;;		assert.Empty(t, err)
0000000000000000000000000000000000000000;;		assert.NotZero(t, pids)
0000000000000000000000000000000000000000;;		assert.Contains(t, pids, os.Getpid())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPKill(t *testing.T) {
0000000000000000000000000000000000000000;;		if runtime.GOOS == "darwin" || runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;			t.Skipf("not supported on GOOS=%s", runtime.GOOS)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sig := syscall.SIGCONT
0000000000000000000000000000000000000000;;		c := make(chan os.Signal, 1)
0000000000000000000000000000000000000000;;		signal.Notify(c, sig)
0000000000000000000000000000000000000000;;		defer signal.Stop(c)
0000000000000000000000000000000000000000;;		PKill(os.Args[0], sig)
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case s := <-c:
0000000000000000000000000000000000000000;;			if s != sig {
0000000000000000000000000000000000000000;;				t.Fatalf("signal was %v, want %v", s, sig)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case <-time.After(1 * time.Second):
0000000000000000000000000000000000000000;;			t.Fatalf("timeout waiting for %v", sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
