0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
207ea5e6e62a88f08e8abbfca8eb3bf05d13b902;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bandwidth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var minRsrc = resource.MustParse("1k")
0000000000000000000000000000000000000000;;	var maxRsrc = resource.MustParse("1P")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateBandwidthIsReasonable(rsrc *resource.Quantity) error {
0000000000000000000000000000000000000000;;		if rsrc.Value() < minRsrc.Value() {
0000000000000000000000000000000000000000;;			return fmt.Errorf("resource is unreasonably small (< 1kbit)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rsrc.Value() > maxRsrc.Value() {
0000000000000000000000000000000000000000;;			return fmt.Errorf("resoruce is unreasonably large (> 1Pbit)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExtractPodBandwidthResources(podAnnotations map[string]string) (ingress, egress *resource.Quantity, err error) {
0000000000000000000000000000000000000000;;		if podAnnotations == nil {
0000000000000000000000000000000000000000;;			return nil, nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str, found := podAnnotations["kubernetes.io/ingress-bandwidth"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			ingressValue, err := resource.ParseQuantity(str)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ingress = &ingressValue
0000000000000000000000000000000000000000;;			if err := validateBandwidthIsReasonable(ingress); err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str, found = podAnnotations["kubernetes.io/egress-bandwidth"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			egressValue, err := resource.ParseQuantity(str)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			egress = &egressValue
0000000000000000000000000000000000000000;;			if err := validateBandwidthIsReasonable(egress); err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ingress, egress, nil
0000000000000000000000000000000000000000;;	}
