0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
153f5186bf25452d2b835bd71b8bb5e492030246;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bandwidth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BandwidthShaper interface {
0000000000000000000000000000000000000000;;		// Limit the bandwidth for a particular CIDR on a particular interface
0000000000000000000000000000000000000000;;		//   * ingress and egress are in bits/second
0000000000000000000000000000000000000000;;		//   * cidr is expected to be a valid network CIDR (e.g. '1.2.3.4/32' or '10.20.0.1/16')
0000000000000000000000000000000000000000;;		// 'egress' bandwidth limit applies to all packets on the interface whose source matches 'cidr'
0000000000000000000000000000000000000000;;		// 'ingress' bandwidth limit applies to all packets on the interface whose destination matches 'cidr'
0000000000000000000000000000000000000000;;		// Limits are aggregate limits for the CIDR, not per IP address.  CIDRs must be unique, but can be overlapping, traffic
0000000000000000000000000000000000000000;;		// that matches multiple CIDRs counts against all limits.
0000000000000000000000000000000000000000;;		Limit(cidr string, egress, ingress *resource.Quantity) error
0000000000000000000000000000000000000000;;		// Remove a bandwidth limit for a particular CIDR on a particular network interface
0000000000000000000000000000000000000000;;		Reset(cidr string) error
0000000000000000000000000000000000000000;;		// Reconcile the interface managed by this shaper with the state on the ground.
0000000000000000000000000000000000000000;;		ReconcileInterface() error
0000000000000000000000000000000000000000;;		// Reconcile a CIDR managed by this shaper with the state on the ground
0000000000000000000000000000000000000000;;		ReconcileCIDR(cidr string, egress, ingress *resource.Quantity) error
0000000000000000000000000000000000000000;;		// GetCIDRs returns the set of CIDRs that are being managed by this shaper
0000000000000000000000000000000000000000;;		GetCIDRs() ([]string, error)
0000000000000000000000000000000000000000;;	}
