0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0cff70552045b17760062d3a1901abce2071173a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bandwidth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractPodBandwidthResources(t *testing.T) {
0000000000000000000000000000000000000000;;		four, _ := resource.ParseQuantity("4M")
0000000000000000000000000000000000000000;;		ten, _ := resource.ParseQuantity("10M")
0000000000000000000000000000000000000000;;		twenty, _ := resource.ParseQuantity("20M")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testPod := func(ingress, egress string) *api.Pod {
0000000000000000000000000000000000000000;;			pod := &api.Pod{ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{}}}
0000000000000000000000000000000000000000;;			if len(ingress) != 0 {
0000000000000000000000000000000000000000;;				pod.Annotations["kubernetes.io/ingress-bandwidth"] = ingress
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(egress) != 0 {
0000000000000000000000000000000000000000;;				pod.Annotations["kubernetes.io/egress-bandwidth"] = egress
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return pod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod             *api.Pod
0000000000000000000000000000000000000000;;			expectedIngress *resource.Quantity
0000000000000000000000000000000000000000;;			expectedEgress  *resource.Quantity
0000000000000000000000000000000000000000;;			expectError     bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             testPod("10M", ""),
0000000000000000000000000000000000000000;;				expectedIngress: &ten,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:            testPod("", "10M"),
0000000000000000000000000000000000000000;;				expectedEgress: &ten,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             testPod("4M", "20M"),
0000000000000000000000000000000000000000;;				expectedIngress: &four,
0000000000000000000000000000000000000000;;				expectedEgress:  &twenty,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:         testPod("foo", ""),
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			ingress, egress, err := ExtractPodBandwidthResources(test.pod.Annotations)
0000000000000000000000000000000000000000;;			if test.expectError {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(ingress, test.expectedIngress) {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, saw: %v", ingress, test.expectedIngress)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(egress, test.expectedEgress) {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, saw: %v", egress, test.expectedEgress)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
