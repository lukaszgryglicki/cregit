0000000000000000000000000000000000000000;;	// +build linux
153f5186bf25452d2b835bd71b8bb5e492030246;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bandwidth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcClassOutput = `class htb 1:1 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:2 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:3 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:4 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcClassOutput2 = `class htb 1:1 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:2 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:3 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:4 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	class htb 1:5 root prio 0 rate 10000bit ceil 10000bit burst 1600b cburst 1600b 
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNextClassID(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			output    string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;			expected  int
0000000000000000000000000000000000000000;;			err       error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				output:   tcClassOutput,
0000000000000000000000000000000000000000;;				expected: 5,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				output:   "\n",
0000000000000000000000000000000000000000;;				expected: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				expected:  -1,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				err:       errors.New("test error"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(test.output), test.err },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd {
0000000000000000000000000000000000000000;;						return exec.InitFakeCmd(&fcmd, cmd, args...)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			shaper := &tcShaper{e: &fexec}
0000000000000000000000000000000000000000;;			class, err := shaper.nextClassID()
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if class != test.expected {
0000000000000000000000000000000000000000;;					t.Errorf("expected: %d, found %d", test.expected, class)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHexCIDR(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			input     string
0000000000000000000000000000000000000000;;			output    string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv4 masked",
0000000000000000000000000000000000000000;;				input:  "1.2.3.4/16",
0000000000000000000000000000000000000000;;				output: "01020000/ffff0000",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv4 host",
0000000000000000000000000000000000000000;;				input:  "172.17.0.2/32",
0000000000000000000000000000000000000000;;				output: "ac110002/ffffffff",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv6 masked",
0000000000000000000000000000000000000000;;				input:  "2001:dead:beef::cafe/64",
0000000000000000000000000000000000000000;;				output: "2001deadbeef00000000000000000000/ffffffffffffffff0000000000000000",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv6 host",
0000000000000000000000000000000000000000;;				input:  "2001::5/128",
0000000000000000000000000000000000000000;;				output: "20010000000000000000000000000005/ffffffffffffffffffffffffffffffff",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "invalid CIDR",
0000000000000000000000000000000000000000;;				input:     "foo",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			output, err := hexCIDR(test.input)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: unexpected non-error", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output != test.output {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: expected: %s, saw: %s",
0000000000000000000000000000000000000000;;						test.name, test.output, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAsciiCIDR(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			input     string
0000000000000000000000000000000000000000;;			output    string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv4",
0000000000000000000000000000000000000000;;				input:  "01020000/ffff0000",
0000000000000000000000000000000000000000;;				output: "1.2.0.0/16",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv4 host",
0000000000000000000000000000000000000000;;				input:  "ac110002/ffffffff",
0000000000000000000000000000000000000000;;				output: "172.17.0.2/32",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv6",
0000000000000000000000000000000000000000;;				input:  "2001deadbeef00000000000000000000/ffffffffffffffff0000000000000000",
0000000000000000000000000000000000000000;;				output: "2001:dead:beef::/64",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:   "IPv6 host",
0000000000000000000000000000000000000000;;				input:  "20010000000000000000000000000005/ffffffffffffffffffffffffffffffff",
0000000000000000000000000000000000000000;;				output: "2001::5/128",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "invalid CIDR",
0000000000000000000000000000000000000000;;				input:     "malformed",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "non-hex IP",
0000000000000000000000000000000000000000;;				input:     "nonhex/32",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "non-hex mask",
0000000000000000000000000000000000000000;;				input:     "01020000/badmask",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			output, err := asciiCIDR(test.input)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: unexpected non-error", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output != test.output {
0000000000000000000000000000000000000000;;					t.Errorf("case %s: expected: %s, saw: %s",
0000000000000000000000000000000000000000;;						test.name, test.output, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcFilterOutput = `filter parent 1: protocol ip pref 1 u32 
0000000000000000000000000000000000000000;;	filter parent 1: protocol ip pref 1 u32 fh 800: ht divisor 1 
0000000000000000000000000000000000000000;;	filter parent 1: protocol ip pref 1 u32 fh 800::800 order 2048 key ht 800 bkt 0 flowid 1:1 
0000000000000000000000000000000000000000;;	  match ac110002/ffffffff at 16
0000000000000000000000000000000000000000;;	filter parent 1: protocol ip pref 1 u32 fh 800::801 order 2049 key ht 800 bkt 0 flowid 1:2 
0000000000000000000000000000000000000000;;	  match 01020000/ffff0000 at 16
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindCIDRClass(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			cidr           string
0000000000000000000000000000000000000000;;			output         string
0000000000000000000000000000000000000000;;			expectErr      bool
0000000000000000000000000000000000000000;;			expectNotFound bool
0000000000000000000000000000000000000000;;			expectedClass  string
0000000000000000000000000000000000000000;;			expectedHandle string
0000000000000000000000000000000000000000;;			err            error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:           "172.17.0.2/32",
0000000000000000000000000000000000000000;;				output:         tcFilterOutput,
0000000000000000000000000000000000000000;;				expectedClass:  "1:1",
0000000000000000000000000000000000000000;;				expectedHandle: "800::800",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:           "1.2.3.4/16",
0000000000000000000000000000000000000000;;				output:         tcFilterOutput,
0000000000000000000000000000000000000000;;				expectedClass:  "1:2",
0000000000000000000000000000000000000000;;				expectedHandle: "800::801",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:           "2.2.3.4/16",
0000000000000000000000000000000000000000;;				output:         tcFilterOutput,
0000000000000000000000000000000000000000;;				expectNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				err:       errors.New("test error"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(test.output), test.err },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd {
0000000000000000000000000000000000000000;;						return exec.InitFakeCmd(&fcmd, cmd, args...)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			shaper := &tcShaper{e: &fexec}
0000000000000000000000000000000000000000;;			class, handle, found, err := shaper.findCIDRClass(test.cidr)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if test.expectNotFound {
0000000000000000000000000000000000000000;;					if found {
0000000000000000000000000000000000000000;;						t.Errorf("unexpectedly found an interface: %s %s", class, handle)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if class != test.expectedClass {
0000000000000000000000000000000000000000;;						t.Errorf("expected: %s, found %s", test.expectedClass, class)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if handle != test.expectedHandle {
0000000000000000000000000000000000000000;;						t.Errorf("expected: %s, found %s", test.expectedHandle, handle)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetCIDRs(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte(tcFilterOutput), nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd {
0000000000000000000000000000000000000000;;					return exec.InitFakeCmd(&fcmd, cmd, args...)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		shaper := &tcShaper{e: &fexec}
0000000000000000000000000000000000000000;;		cidrs, err := shaper.GetCIDRs()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedCidrs := []string{"172.17.0.2/32", "1.2.0.0/16"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(cidrs, expectedCidrs) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, saw: %v", expectedCidrs, cidrs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLimit(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			cidr          string
0000000000000000000000000000000000000000;;			ingress       *resource.Quantity
0000000000000000000000000000000000000000;;			egress        *resource.Quantity
0000000000000000000000000000000000000000;;			expectErr     bool
0000000000000000000000000000000000000000;;			expectedCalls int
0000000000000000000000000000000000000000;;			err           error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:          "1.2.3.4/32",
0000000000000000000000000000000000000000;;				ingress:       resource.NewQuantity(10, resource.DecimalSI),
0000000000000000000000000000000000000000;;				egress:        resource.NewQuantity(20, resource.DecimalSI),
0000000000000000000000000000000000000000;;				expectedCalls: 6,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:          "1.2.3.4/32",
0000000000000000000000000000000000000000;;				ingress:       resource.NewQuantity(10, resource.DecimalSI),
0000000000000000000000000000000000000000;;				egress:        nil,
0000000000000000000000000000000000000000;;				expectedCalls: 3,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:          "1.2.3.4/32",
0000000000000000000000000000000000000000;;				ingress:       nil,
0000000000000000000000000000000000000000;;				egress:        resource.NewQuantity(20, resource.DecimalSI),
0000000000000000000000000000000000000000;;				expectedCalls: 3,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:          "1.2.3.4/32",
0000000000000000000000000000000000000000;;				ingress:       nil,
0000000000000000000000000000000000000000;;				egress:        nil,
0000000000000000000000000000000000000000;;				expectedCalls: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				err:       errors.New("test error"),
0000000000000000000000000000000000000000;;				ingress:   resource.NewQuantity(10, resource.DecimalSI),
0000000000000000000000000000000000000000;;				egress:    resource.NewQuantity(20, resource.DecimalSI),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(tcClassOutput), test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(tcClassOutput2), test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			iface := "cbr0"
0000000000000000000000000000000000000000;;			shaper := &tcShaper{e: &fexec, iface: iface}
0000000000000000000000000000000000000000;;			if err := shaper.Limit(test.cidr, test.ingress, test.egress); err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			} else if err == nil && test.expectErr {
0000000000000000000000000000000000000000;;				t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// No more testing in the error case
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if fcmd.CombinedOutputCalls != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected number of calls: %d, expected: 1", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if fcmd.CombinedOutputCalls != test.expectedCalls {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected number of calls: %d, expected: %d", fcmd.CombinedOutputCalls, test.expectedCalls)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for ix := range fcmd.CombinedOutputLog {
0000000000000000000000000000000000000000;;				output := fcmd.CombinedOutputLog[ix]
0000000000000000000000000000000000000000;;				if output[0] != "tc" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected command: %s, expected tc", output[0])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[4] != iface {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected interface: %s, expected %s (%v)", output[4], iface, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 1 {
0000000000000000000000000000000000000000;;					var expectedRate string
0000000000000000000000000000000000000000;;					if test.ingress != nil {
0000000000000000000000000000000000000000;;						expectedRate = makeKBitString(test.ingress)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						expectedRate = makeKBitString(test.egress)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[11] != expectedRate {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected ingress: %s, expected: %s", output[11], expectedRate)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[8] != "1:5" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected class: %s, expected: %s", output[8], "1:5")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 2 {
0000000000000000000000000000000000000000;;					if output[15] != test.cidr {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected cidr: %s, expected: %s", output[15], test.cidr)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[17] != "1:5" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected class: %s, expected: %s", output[17], "1:5")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 4 {
0000000000000000000000000000000000000000;;					if output[11] != makeKBitString(test.egress) {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected egress: %s, expected: %s", output[11], makeKBitString(test.egress))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[8] != "1:6" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected class: %s, expected: %s", output[8], "1:6")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 5 {
0000000000000000000000000000000000000000;;					if output[15] != test.cidr {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected cidr: %s, expected: %s", output[15], test.cidr)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[17] != "1:6" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected class: %s, expected: %s", output[17], "1:5")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReset(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			cidr           string
0000000000000000000000000000000000000000;;			err            error
0000000000000000000000000000000000000000;;			expectErr      bool
0000000000000000000000000000000000000000;;			expectedHandle string
0000000000000000000000000000000000000000;;			expectedClass  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:           "1.2.3.4/16",
0000000000000000000000000000000000000000;;				expectedHandle: "800::801",
0000000000000000000000000000000000000000;;				expectedClass:  "1:2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cidr:           "172.17.0.2/32",
0000000000000000000000000000000000000000;;				expectedHandle: "800::800",
0000000000000000000000000000000000000000;;				expectedClass:  "1:1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				err:       errors.New("test error"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(tcFilterOutput), test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte{}, test.err },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			iface := "cbr0"
0000000000000000000000000000000000000000;;			shaper := &tcShaper{e: &fexec, iface: iface}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := shaper.Reset(test.cidr); err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			} else if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// No more testing in the error case
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if fcmd.CombinedOutputCalls != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected number of calls: %d, expected: 1", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if fcmd.CombinedOutputCalls != 3 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected number of calls: %d, expected: 3", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for ix := range fcmd.CombinedOutputLog {
0000000000000000000000000000000000000000;;				output := fcmd.CombinedOutputLog[ix]
0000000000000000000000000000000000000000;;				if output[0] != "tc" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected command: %s, expected tc", output[0])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[4] != iface {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected interface: %s, expected %s (%v)", output[4], iface, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 1 && output[12] != test.expectedHandle {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected handle: %s, expected: %s", output[12], test.expectedHandle)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 2 && output[8] != test.expectedClass {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected class: %s, expected: %s", output[8], test.expectedClass)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcQdisc = "qdisc htb 1: root refcnt 2 r2q 10 default 30 direct_packets_stat 0\n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReconcileInterfaceExists(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte(tcQdisc), nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		iface := "cbr0"
0000000000000000000000000000000000000000;;		shaper := &tcShaper{e: &fexec, iface: iface}
0000000000000000000000000000000000000000;;		err := shaper.ReconcileInterface()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fcmd.CombinedOutputCalls != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected number of calls: %d", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output := fcmd.CombinedOutputLog[0]
0000000000000000000000000000000000000000;;		if len(output) != 5 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if output[0] != "tc" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected command: %s", output[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if output[4] != iface {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected interface: %s, expected %s", output[4], iface)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if output[2] != "show" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %s", output[2])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testReconcileInterfaceHasNoData(t *testing.T, output string) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte(output), nil },
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte(output), nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		iface := "cbr0"
0000000000000000000000000000000000000000;;		shaper := &tcShaper{e: &fexec, iface: iface}
0000000000000000000000000000000000000000;;		err := shaper.ReconcileInterface()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fcmd.CombinedOutputCalls != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected number of calls: %d", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for ix, output := range fcmd.CombinedOutputLog {
0000000000000000000000000000000000000000;;			if output[0] != "tc" {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected command: %s", output[0])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if output[4] != iface {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected interface: %s, expected %s", output[4], iface)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ix == 0 {
0000000000000000000000000000000000000000;;				if len(output) != 5 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[2] != "show" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected action: %s", output[2])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ix == 1 {
0000000000000000000000000000000000000000;;				if len(output) != 11 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[2] != "add" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected action: %s", output[2])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[7] != "1:" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected root class: %s", output[7])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[8] != "htb" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected qdisc algo: %s", output[8])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReconcileInterfaceDoesntExist(t *testing.T) {
0000000000000000000000000000000000000000;;		testReconcileInterfaceHasNoData(t, "\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcQdiscNoqueue = "qdisc noqueue 0: root refcnt 2 \n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReconcileInterfaceExistsWithNoqueue(t *testing.T) {
0000000000000000000000000000000000000000;;		testReconcileInterfaceHasNoData(t, tcQdiscNoqueue)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tcQdiscWrong = []string{
0000000000000000000000000000000000000000;;		"qdisc htb 2: root refcnt 2 r2q 10 default 30 direct_packets_stat 0\n",
0000000000000000000000000000000000000000;;		"qdisc foo 1: root refcnt 2 r2q 10 default 30 direct_packets_stat 0\n",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReconcileInterfaceIsWrong(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range tcQdiscWrong {
0000000000000000000000000000000000000000;;			fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;				CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte(test), nil },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte("\n"), nil },
0000000000000000000000000000000000000000;;					func() ([]byte, error) { return []byte("\n"), nil },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;				CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;					func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			iface := "cbr0"
0000000000000000000000000000000000000000;;			shaper := &tcShaper{e: &fexec, iface: iface}
0000000000000000000000000000000000000000;;			err := shaper.ReconcileInterface()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if fcmd.CombinedOutputCalls != 3 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected number of calls: %d", fcmd.CombinedOutputCalls)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for ix, output := range fcmd.CombinedOutputLog {
0000000000000000000000000000000000000000;;				if output[0] != "tc" {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected command: %s", output[0])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if output[4] != iface {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected interface: %s, expected %s", output[4], iface)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 0 {
0000000000000000000000000000000000000000;;					if len(output) != 5 {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[2] != "show" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected action: %s", output[2])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 1 {
0000000000000000000000000000000000000000;;					if len(output) != 8 {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[2] != "delete" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected action: %s", output[2])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[7] != strings.Split(test, " ")[2] {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected class: %s, expected: %s", output[7], strings.Split(test, " ")[2])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ix == 2 {
0000000000000000000000000000000000000000;;					if len(output) != 11 {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected command: %v", output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[7] != "1:" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected root class: %s", output[7])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if output[8] != "htb" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected qdisc algo: %s", output[8])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
