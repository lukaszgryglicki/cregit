0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5e42f714cb93d06937b1606163bfbd6259246e7b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package parsers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockerref "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DefaultImageTag = "latest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseImageName parses a docker image string into three parts: repo, tag and digest.
0000000000000000000000000000000000000000;;	// If both tag and digest are empty, a default image tag will be returned.
0000000000000000000000000000000000000000;;	func ParseImageName(image string) (string, string, string, error) {
0000000000000000000000000000000000000000;;		named, err := dockerref.ParseNamed(image)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", "", fmt.Errorf("couldn't parse image name: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		repoToPull := named.Name()
0000000000000000000000000000000000000000;;		var tag, digest string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tagged, ok := named.(dockerref.Tagged)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			tag = tagged.Tag()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		digested, ok := named.(dockerref.Digested)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			digest = digested.Digest().String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If no tag was specified, use the default "latest".
0000000000000000000000000000000000000000;;		if len(tag) == 0 && len(digest) == 0 {
0000000000000000000000000000000000000000;;			tag = DefaultImageTag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return repoToPull, tag, digest, nil
0000000000000000000000000000000000000000;;	}
