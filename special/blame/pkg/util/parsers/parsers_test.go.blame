0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f29830883fcccf6aa7e0cd1d316ae8423cc3b6a7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package parsers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Based on Docker test case removed in:
0000000000000000000000000000000000000000;;	// https://github.com/docker/docker/commit/4352da7803d182a6013a5238ce20a7c749db979a
0000000000000000000000000000000000000000;;	func TestParseImageName(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Input  string
0000000000000000000000000000000000000000;;			Repo   string
0000000000000000000000000000000000000000;;			Tag    string
0000000000000000000000000000000000000000;;			Digest string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Input: "root", Repo: "root", Tag: "latest"},
0000000000000000000000000000000000000000;;			{Input: "root:tag", Repo: "root", Tag: "tag"},
0000000000000000000000000000000000000000;;			{Input: "root@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", Repo: "root", Digest: "sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},
0000000000000000000000000000000000000000;;			{Input: "user/repo", Repo: "user/repo", Tag: "latest"},
0000000000000000000000000000000000000000;;			{Input: "user/repo:tag", Repo: "user/repo", Tag: "tag"},
0000000000000000000000000000000000000000;;			{Input: "user/repo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", Repo: "user/repo", Digest: "sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},
0000000000000000000000000000000000000000;;			{Input: "url:5000/repo", Repo: "url:5000/repo", Tag: "latest"},
0000000000000000000000000000000000000000;;			{Input: "url:5000/repo:tag", Repo: "url:5000/repo", Tag: "tag"},
0000000000000000000000000000000000000000;;			{Input: "url:5000/repo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", Repo: "url:5000/repo", Digest: "sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			repo, tag, digest, err := ParseImageName(testCase.Input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("ParseImageName(%s) failed: %v", testCase.Input, err)
0000000000000000000000000000000000000000;;			} else if repo != testCase.Repo || tag != testCase.Tag || digest != testCase.Digest {
0000000000000000000000000000000000000000;;				t.Errorf("Expected repo: %q, tag: %q and digest: %q, got %q, %q and %q", testCase.Repo, testCase.Tag, testCase.Digest,
0000000000000000000000000000000000000000;;					repo, tag, digest)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
