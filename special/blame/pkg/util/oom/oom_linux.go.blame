0000000000000000000000000000000000000000;;	// +build cgo,linux
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package oom
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmutil "k8s.io/kubernetes/pkg/kubelet/cm/util"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOOMAdjuster() *OOMAdjuster {
0000000000000000000000000000000000000000;;		oomAdjuster := &OOMAdjuster{
0000000000000000000000000000000000000000;;			pidLister:        getPids,
0000000000000000000000000000000000000000;;			ApplyOOMScoreAdj: applyOOMScoreAdj,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oomAdjuster.ApplyOOMScoreAdjContainer = oomAdjuster.applyOOMScoreAdjContainer
0000000000000000000000000000000000000000;;		return oomAdjuster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPids(cgroupName string) ([]int, error) {
0000000000000000000000000000000000000000;;		return cmutil.GetPids(filepath.Join("/", cgroupName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writes 'value' to /proc/<pid>/oom_score_adj. PID = 0 means self
0000000000000000000000000000000000000000;;	// Returns os.ErrNotExist if the `pid` does not exist.
0000000000000000000000000000000000000000;;	func applyOOMScoreAdj(pid int, oomScoreAdj int) error {
0000000000000000000000000000000000000000;;		if pid < 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid PID %d specified for oom_score_adj", pid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pidStr string
0000000000000000000000000000000000000000;;		if pid == 0 {
0000000000000000000000000000000000000000;;			pidStr = "self"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			pidStr = strconv.Itoa(pid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		maxTries := 2
0000000000000000000000000000000000000000;;		oomScoreAdjPath := path.Join("/proc", pidStr, "oom_score_adj")
0000000000000000000000000000000000000000;;		value := strconv.Itoa(oomScoreAdj)
0000000000000000000000000000000000000000;;		glog.V(4).Infof("attempting to set %q to %q", oomScoreAdjPath, value)
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for i := 0; i < maxTries; i++ {
0000000000000000000000000000000000000000;;			err = ioutil.WriteFile(oomScoreAdjPath, []byte(value), 0700)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;					glog.V(2).Infof("%q does not exist", oomScoreAdjPath)
0000000000000000000000000000000000000000;;					return os.ErrNotExist
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				glog.V(3).Info(err)
0000000000000000000000000000000000000000;;				time.Sleep(100 * time.Millisecond)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("failed to set %q to %q: %v", oomScoreAdjPath, value, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writes 'value' to /proc/<pid>/oom_score_adj for all processes in cgroup cgroupName.
0000000000000000000000000000000000000000;;	// Keeps trying to write until the process list of the cgroup stabilizes, or until maxTries tries.
0000000000000000000000000000000000000000;;	func (oomAdjuster *OOMAdjuster) applyOOMScoreAdjContainer(cgroupName string, oomScoreAdj, maxTries int) error {
0000000000000000000000000000000000000000;;		adjustedProcessSet := make(map[int]bool)
0000000000000000000000000000000000000000;;		for i := 0; i < maxTries; i++ {
0000000000000000000000000000000000000000;;			continueAdjusting := false
0000000000000000000000000000000000000000;;			pidList, err := oomAdjuster.pidLister(cgroupName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;					// Nothing to do since the container doesn't exist anymore.
0000000000000000000000000000000000000000;;					return os.ErrNotExist
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continueAdjusting = true
0000000000000000000000000000000000000000;;				glog.V(10).Infof("Error getting process list for cgroup %s: %+v", cgroupName, err)
0000000000000000000000000000000000000000;;			} else if len(pidList) == 0 {
0000000000000000000000000000000000000000;;				glog.V(10).Infof("Pid list is empty")
0000000000000000000000000000000000000000;;				continueAdjusting = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, pid := range pidList {
0000000000000000000000000000000000000000;;					if !adjustedProcessSet[pid] {
0000000000000000000000000000000000000000;;						glog.V(10).Infof("pid %d needs to be set", pid)
0000000000000000000000000000000000000000;;						if err = oomAdjuster.ApplyOOMScoreAdj(pid, oomScoreAdj); err == nil {
0000000000000000000000000000000000000000;;							adjustedProcessSet[pid] = true
0000000000000000000000000000000000000000;;						} else if err == os.ErrNotExist {
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							glog.V(10).Infof("cannot adjust oom score for pid %d - %v", pid, err)
0000000000000000000000000000000000000000;;							continueAdjusting = true
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						// Processes can come and go while we try to apply oom score adjust value. So ignore errors here.
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !continueAdjusting {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// There's a slight race. A process might have forked just before we write its OOM score adjust.
0000000000000000000000000000000000000000;;			// The fork might copy the parent process's old OOM score, then this function might execute and
0000000000000000000000000000000000000000;;			// update the parent's OOM score, but the forked process id might not be reflected in cgroup.procs
0000000000000000000000000000000000000000;;			// for a short amount of time. So this function might return without changing the forked process's
0000000000000000000000000000000000000000;;			// OOM score. Very unlikely race, so ignoring this for now.
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("exceeded maxTries, some processes might not have desired OOM score")
0000000000000000000000000000000000000000;;	}
