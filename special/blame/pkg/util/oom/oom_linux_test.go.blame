0000000000000000000000000000000000000000;;	// +build cgo,linux
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package oom
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Converts a sequence of PID lists into a PID lister.
0000000000000000000000000000000000000000;;	// The PID lister returns pidListSequence[i] on the ith call. If i >= length of pidListSequence
0000000000000000000000000000000000000000;;	// then return the last element of pidListSequence (the sequence is considered to have) stabilized.
0000000000000000000000000000000000000000;;	func sequenceToPidLister(pidListSequence [][]int) func(string) ([]int, error) {
0000000000000000000000000000000000000000;;		var numCalls int
0000000000000000000000000000000000000000;;		return func(cgroupName string) ([]int, error) {
0000000000000000000000000000000000000000;;			numCalls++
0000000000000000000000000000000000000000;;			if len(pidListSequence) == 0 {
0000000000000000000000000000000000000000;;				return []int{}, nil
0000000000000000000000000000000000000000;;			} else if numCalls > len(pidListSequence) {
0000000000000000000000000000000000000000;;				return pidListSequence[len(pidListSequence)-1], nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return pidListSequence[numCalls-1], nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tests that applyOOMScoreAdjContainer correctly applies OOM scores to relevant processes, or
0000000000000000000000000000000000000000;;	// returns the right error.
0000000000000000000000000000000000000000;;	func applyOOMScoreAdjContainerTester(pidListSequence [][]int, maxTries int, appliedPids []int, expectedError bool, t *testing.T) {
0000000000000000000000000000000000000000;;		pidOOMs := make(map[int]bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mock ApplyOOMScoreAdj and pidLister.
0000000000000000000000000000000000000000;;		oomAdjuster := NewOOMAdjuster()
0000000000000000000000000000000000000000;;		oomAdjuster.ApplyOOMScoreAdj = func(pid int, oomScoreAdj int) error {
0000000000000000000000000000000000000000;;			pidOOMs[pid] = true
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oomAdjuster.pidLister = sequenceToPidLister(pidListSequence)
0000000000000000000000000000000000000000;;		err := oomAdjuster.ApplyOOMScoreAdjContainer("", 100, maxTries)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check error value.
0000000000000000000000000000000000000000;;		if expectedError && err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error %+v when running ApplyOOMScoreAdjContainer but got no error", expectedError)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if !expectedError && err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no error but got error %+v when running ApplyOOMScoreAdjContainer", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Check that OOM scores were applied to the right processes.
0000000000000000000000000000000000000000;;		if len(appliedPids) != len(pidOOMs) {
0000000000000000000000000000000000000000;;			t.Errorf("Applied OOM scores to incorrect number of processes - %+v vs %v", appliedPids, pidOOMs)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, pid := range appliedPids {
0000000000000000000000000000000000000000;;			if !pidOOMs[pid] {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to apply OOM scores to process %d", pid)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOOMScoreAdjContainer(t *testing.T) {
0000000000000000000000000000000000000000;;		pidListSequenceEmpty := [][]int{}
0000000000000000000000000000000000000000;;		applyOOMScoreAdjContainerTester(pidListSequenceEmpty, 3, nil, true, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pidListSequence1 := [][]int{
0000000000000000000000000000000000000000;;			{1, 2},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		applyOOMScoreAdjContainerTester(pidListSequence1, 1, []int{1, 2}, false, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pidListSequenceLag := [][]int{
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			{1, 2, 4},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 1; i < 4; i++ {
0000000000000000000000000000000000000000;;			applyOOMScoreAdjContainerTester(pidListSequenceLag, i, nil, true, t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		applyOOMScoreAdjContainerTester(pidListSequenceLag, 4, []int{1, 2, 4}, false, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPidListerFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := getPids("/does/not/exist")
0000000000000000000000000000000000000000;;		assert.True(t, os.IsNotExist(err), "expected getPids to return not exists error. Got %v", err)
0000000000000000000000000000000000000000;;	}
