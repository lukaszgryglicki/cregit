0000000000000000000000000000000000000000;;	// +build linux
ec55a72c7c3ca919c8bf58cc9cb38be67d4805f6;pkg/util/resource_container_linux.go[pkg/util/resource_container_linux.go][pkg/util/resourcecontainer/resource_container_linux.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resourcecontainer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups/fs"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates resource-only containerName if it does not already exist and moves
0000000000000000000000000000000000000000;;	// the current process to it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// containerName must be an absolute container name.
0000000000000000000000000000000000000000;;	func RunInResourceContainer(containerName string) error {
0000000000000000000000000000000000000000;;		allowAllDevices := true
0000000000000000000000000000000000000000;;		manager := fs.Manager{
0000000000000000000000000000000000000000;;			Cgroups: &configs.Cgroup{
0000000000000000000000000000000000000000;;				Parent: "/",
0000000000000000000000000000000000000000;;				Name:   containerName,
0000000000000000000000000000000000000000;;				Resources: &configs.Resources{
0000000000000000000000000000000000000000;;					AllowAllDevices: &allowAllDevices,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return manager.Apply(os.Getpid())
0000000000000000000000000000000000000000;;	}
