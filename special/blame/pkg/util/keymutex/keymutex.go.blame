0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b544eaf18fb88e2fc8dfa7a420ef2f88954f1e98;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package keymutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyMutex is a thread-safe interface for acquiring locks on arbitrary strings.
0000000000000000000000000000000000000000;;	type KeyMutex interface {
0000000000000000000000000000000000000000;;		// Acquires a lock associated with the specified ID, creates the lock if one doesn't already exist.
0000000000000000000000000000000000000000;;		LockKey(id string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Releases the lock associated with the specified ID.
0000000000000000000000000000000000000000;;		// Returns an error if the specified ID doesn't exist.
0000000000000000000000000000000000000000;;		UnlockKey(id string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns a new instance of a key mutex.
0000000000000000000000000000000000000000;;	func NewKeyMutex() KeyMutex {
0000000000000000000000000000000000000000;;		return &keyMutex{
0000000000000000000000000000000000000000;;			mutexMap: make(map[string]*sync.Mutex),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keyMutex struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		mutexMap map[string]*sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Acquires a lock associated with the specified ID (creates the lock if one doesn't already exist).
0000000000000000000000000000000000000000;;	func (km *keyMutex) LockKey(id string) {
0000000000000000000000000000000000000000;;		glog.V(5).Infof("LockKey(...) called for id %q\r\n", id)
0000000000000000000000000000000000000000;;		mutex := km.getOrCreateLock(id)
0000000000000000000000000000000000000000;;		mutex.Lock()
0000000000000000000000000000000000000000;;		glog.V(5).Infof("LockKey(...) for id %q completed.\r\n", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Releases the lock associated with the specified ID.
0000000000000000000000000000000000000000;;	// Returns an error if the specified ID doesn't exist.
0000000000000000000000000000000000000000;;	func (km *keyMutex) UnlockKey(id string) error {
0000000000000000000000000000000000000000;;		glog.V(5).Infof("UnlockKey(...) called for id %q\r\n", id)
0000000000000000000000000000000000000000;;		km.RLock()
0000000000000000000000000000000000000000;;		defer km.RUnlock()
0000000000000000000000000000000000000000;;		mutex, exists := km.mutexMap[id]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("id %q not found", id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(5).Infof("UnlockKey(...) for id. Mutex found, trying to unlock it. %q\r\n", id)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mutex.Unlock()
0000000000000000000000000000000000000000;;		glog.V(5).Infof("UnlockKey(...) for id %q completed.\r\n", id)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns lock associated with the specified ID, or creates the lock if one doesn't already exist.
0000000000000000000000000000000000000000;;	func (km *keyMutex) getOrCreateLock(id string) *sync.Mutex {
0000000000000000000000000000000000000000;;		km.Lock()
0000000000000000000000000000000000000000;;		defer km.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, exists := km.mutexMap[id]; !exists {
0000000000000000000000000000000000000000;;			km.mutexMap[id] = &sync.Mutex{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return km.mutexMap[id]
0000000000000000000000000000000000000000;;	}
