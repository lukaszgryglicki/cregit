0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d0e8ff71d4e170beecaa61bd493aa30726239170;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package strings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Splits a fully qualified name and returns its namespace and name.
0000000000000000000000000000000000000000;;	// Assumes that the input 'str' has been validated.
0000000000000000000000000000000000000000;;	func SplitQualifiedName(str string) (string, string) {
0000000000000000000000000000000000000000;;		parts := strings.Split(str, "/")
0000000000000000000000000000000000000000;;		if len(parts) < 2 {
0000000000000000000000000000000000000000;;			return "", str
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parts[0], parts[1]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Joins 'namespace' and 'name' and returns a fully qualified name
0000000000000000000000000000000000000000;;	// Assumes that the input is valid.
0000000000000000000000000000000000000000;;	func JoinQualifiedName(namespace, name string) string {
0000000000000000000000000000000000000000;;		return path.Join(namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the first N slice of a string.
0000000000000000000000000000000000000000;;	func ShortenString(str string, n int) string {
0000000000000000000000000000000000000000;;		if len(str) <= n {
0000000000000000000000000000000000000000;;			return str
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return str[:n]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isVowel returns true if the rune is a vowel (case insensitive).
0000000000000000000000000000000000000000;;	func isVowel(c rune) bool {
0000000000000000000000000000000000000000;;		vowels := []rune{'a', 'e', 'i', 'o', 'u'}
0000000000000000000000000000000000000000;;		for _, value := range vowels {
0000000000000000000000000000000000000000;;			if value == unicode.ToLower(c) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
