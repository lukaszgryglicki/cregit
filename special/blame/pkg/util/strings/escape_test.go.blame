0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f1d0d96a5c78fc766f748023d86ca8902aa0a2b5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package strings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEscapePluginName(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			output string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"kubernetes.io/blah", "kubernetes.io~blah"},
0000000000000000000000000000000000000000;;			{"blah/blerg/borg", "blah~blerg~borg"},
0000000000000000000000000000000000000000;;			{"kubernetes.io", "kubernetes.io"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			escapee := EscapePluginName(tc.input)
0000000000000000000000000000000000000000;;			if escapee != tc.output {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected (%q), got (%q)", i, tc.output, escapee)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			original := UnescapePluginName(escapee)
0000000000000000000000000000000000000000;;			if original != tc.input {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected (%q), got (%q)", i, tc.input, original)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEscapeQualifiedNameForDisk(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			output string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"kubernetes.io/blah", "kubernetes.io~blah"},
0000000000000000000000000000000000000000;;			{"blah/blerg/borg", "blah~blerg~borg"},
0000000000000000000000000000000000000000;;			{"kubernetes.io", "kubernetes.io"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			escapee := EscapeQualifiedNameForDisk(tc.input)
0000000000000000000000000000000000000000;;			if escapee != tc.output {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected (%q), got (%q)", i, tc.output, escapee)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			original := UnescapeQualifiedNameForDisk(escapee)
0000000000000000000000000000000000000000;;			if original != tc.input {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected (%q), got (%q)", i, tc.input, original)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
