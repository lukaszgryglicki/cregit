0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6206a3f316fee821ae6a3d88922b75f649aef6ef;pkg/util/escape.go[pkg/util/escape.go][pkg/util/strings/escape.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package strings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EscapePluginName converts a plugin name in the format
0000000000000000000000000000000000000000;;	// vendor/pluginname into a proper ondisk vendor~pluginname plugin directory
0000000000000000000000000000000000000000;;	// format.
0000000000000000000000000000000000000000;;	func EscapePluginName(in string) string {
0000000000000000000000000000000000000000;;		return strings.Replace(in, "/", "~", -1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EscapeQualifiedPluginName converts a plugin directory name in the format
0000000000000000000000000000000000000000;;	// vendor~pluginname into a proper vendor/pluginname.
0000000000000000000000000000000000000000;;	func UnescapePluginName(in string) string {
0000000000000000000000000000000000000000;;		return strings.Replace(in, "~", "/", -1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EscapeQualifiedNameForDisk converts a plugin name, which might contain a / into a
0000000000000000000000000000000000000000;;	// string that is safe to use on-disk.  This assumes that the input has already
0000000000000000000000000000000000000000;;	// been validates as a qualified name.  we use "~" rather than ":" here in case
0000000000000000000000000000000000000000;;	// we ever use a filesystem that doesn't allow ":".
0000000000000000000000000000000000000000;;	func EscapeQualifiedNameForDisk(in string) string {
0000000000000000000000000000000000000000;;		return strings.Replace(in, "/", "~", -1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnescapeQualifiedNameForDisk converts an escaped plugin name (as per EscapeQualifiedNameForDisk)
0000000000000000000000000000000000000000;;	// back to its normal form.  This assumes that the input has already been
0000000000000000000000000000000000000000;;	// validates as a qualified name.
0000000000000000000000000000000000000000;;	func UnescapeQualifiedNameForDisk(in string) string {
0000000000000000000000000000000000000000;;		return strings.Replace(in, "~", "/", -1)
0000000000000000000000000000000000000000;;	}
