0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8d4785faf1deb908c388bca9e20747a1b74c1e54;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package io
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writer is an interface which allows to write data to a file.
0000000000000000000000000000000000000000;;	type Writer interface {
0000000000000000000000000000000000000000;;		// WriteFile mimics ioutil.WriteFile.
0000000000000000000000000000000000000000;;		WriteFile(filename string, data []byte, perm os.FileMode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StdWriter implements Writer interface and uses standard libraries
0000000000000000000000000000000000000000;;	// for writing data to files.
0000000000000000000000000000000000000000;;	type StdWriter struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteFile directly calls ioutil.WriteFile.
0000000000000000000000000000000000000000;;	func (writer *StdWriter) WriteFile(filename string, data []byte, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return ioutil.WriteFile(filename, data, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NsenterWriter is implementation of Writer interface that allows writing data
0000000000000000000000000000000000000000;;	// to file using nsenter command.
0000000000000000000000000000000000000000;;	// If a program (e.g. kubelet) runs in a container it may want to write data to
0000000000000000000000000000000000000000;;	// a mounted device. Since in Docker, mount propagation mode is set to private,
0000000000000000000000000000000000000000;;	// it will not see the mounted device in its own namespace. To work around this
0000000000000000000000000000000000000000;;	// limitation one has to first enter hosts namespace (by using 'nsenter') and
0000000000000000000000000000000000000000;;	// only then write data.
0000000000000000000000000000000000000000;;	type NsenterWriter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteFile calls 'nsenter cat - > <the file>' and 'nsenter chmod' to create a
0000000000000000000000000000000000000000;;	// file on the host.
0000000000000000000000000000000000000000;;	func (writer *NsenterWriter) WriteFile(filename string, data []byte, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		cmd := "nsenter"
0000000000000000000000000000000000000000;;		baseArgs := []string{
0000000000000000000000000000000000000000;;			"--mount=/rootfs/proc/1/ns/mnt",
0000000000000000000000000000000000000000;;			"--",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		echoArgs := append(baseArgs, "sh", "-c", fmt.Sprintf("cat > %s", filename))
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Command to write data to file: %v %v", cmd, echoArgs)
0000000000000000000000000000000000000000;;		command := exec.Command(cmd, echoArgs...)
0000000000000000000000000000000000000000;;		command.Stdin = bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;		outputBytes, err := command.CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Output from writing to %q: %v", filename, string(outputBytes))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		chmodArgs := append(baseArgs, "chmod", fmt.Sprintf("%o", perm), filename)
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Command to change permissions to file: %v %v", cmd, chmodArgs)
0000000000000000000000000000000000000000;;		outputBytes, err = exec.Command(cmd, chmodArgs...).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Output from chmod command: %v", string(outputBytes))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
