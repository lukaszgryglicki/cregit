0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1f320ed2f345980957b1c554163256cbd048f798;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ebtables
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEnsureChain(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				// Does not Exists
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return nil, &exec.FakeExitError{Status: 1} },
0000000000000000000000000000000000000000;;				// Success
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte{}, nil },
0000000000000000000000000000000000000000;;				// Exists
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return nil, nil },
0000000000000000000000000000000000000000;;				// Does not Exists
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return nil, &exec.FakeExitError{Status: 1} },
0000000000000000000000000000000000000000;;				// Fail to create chain
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return nil, &exec.FakeExitError{Status: 2} },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runner := New(&fexec)
0000000000000000000000000000000000000000;;		exists, err := runner.EnsureChain(TableFilter, "TEST-CHAIN")
0000000000000000000000000000000000000000;;		if exists {
0000000000000000000000000000000000000000;;			t.Errorf("expected exists = false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected err = nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, err = runner.EnsureChain(TableFilter, "TEST-CHAIN")
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			t.Errorf("expected exists = true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected err = nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, err = runner.EnsureChain(TableFilter, "TEST-CHAIN")
0000000000000000000000000000000000000000;;		if exists {
0000000000000000000000000000000000000000;;			t.Errorf("expected exists = false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errStr := "Failed to ensure TEST-CHAIN chain: exit 2, output:"
0000000000000000000000000000000000000000;;		if err == nil || !strings.Contains(err.Error(), errStr) {
0000000000000000000000000000000000000000;;			t.Errorf("expected error: %q", errStr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEnsureRule(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				// Exists
0000000000000000000000000000000000000000;;				func() ([]byte, error) {
0000000000000000000000000000000000000000;;					return []byte(`Bridge table: filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Bridge chain: OUTPUT, entries: 4, policy: ACCEPT
0000000000000000000000000000000000000000;;	-j TEST
0000000000000000000000000000000000000000;;	`), nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// Does not Exists.
0000000000000000000000000000000000000000;;				func() ([]byte, error) {
0000000000000000000000000000000000000000;;					return []byte(`Bridge table: filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Bridge chain: TEST, entries: 0, policy: ACCEPT`), nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// Fail to create
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return nil, &exec.FakeExitError{Status: 2} },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runner := New(&fexec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, err := runner.EnsureRule(Append, TableFilter, ChainOutput, "-j", "TEST")
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			t.Errorf("expected exists = true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected err = nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, err = runner.EnsureRule(Append, TableFilter, ChainOutput, "-j", "NEXT-TEST")
0000000000000000000000000000000000000000;;		if exists {
0000000000000000000000000000000000000000;;			t.Errorf("expected exists = false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errStr := "Failed to ensure rule: exit 2, output: "
0000000000000000000000000000000000000000;;		if err == nil || err.Error() != errStr {
0000000000000000000000000000000000000000;;			t.Errorf("expected error: %q", errStr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
