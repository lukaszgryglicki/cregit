0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8313591b361f8944373f0e489309f298ea548c77;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package prometheus sets the workqueue DefaultMetricsFactory to produce
0000000000000000000000000000000000000000;;	// prometheus metrics. To use this package, you just have to import it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		workqueue.SetProvider(prometheusMetricsProvider{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type prometheusMetricsProvider struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ prometheusMetricsProvider) NewDepthMetric(name string) workqueue.GaugeMetric {
0000000000000000000000000000000000000000;;		depth := prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Subsystem: name,
0000000000000000000000000000000000000000;;			Name:      "depth",
0000000000000000000000000000000000000000;;			Help:      "Current depth of workqueue: " + name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		prometheus.Register(depth)
0000000000000000000000000000000000000000;;		return depth
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ prometheusMetricsProvider) NewAddsMetric(name string) workqueue.CounterMetric {
0000000000000000000000000000000000000000;;		adds := prometheus.NewCounter(prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Subsystem: name,
0000000000000000000000000000000000000000;;			Name:      "adds",
0000000000000000000000000000000000000000;;			Help:      "Total number of adds handled by workqueue: " + name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		prometheus.Register(adds)
0000000000000000000000000000000000000000;;		return adds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ prometheusMetricsProvider) NewLatencyMetric(name string) workqueue.SummaryMetric {
0000000000000000000000000000000000000000;;		latency := prometheus.NewSummary(prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;			Subsystem: name,
0000000000000000000000000000000000000000;;			Name:      "queue_latency",
0000000000000000000000000000000000000000;;			Help:      "How long an item stays in workqueue" + name + " before being requested.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		prometheus.Register(latency)
0000000000000000000000000000000000000000;;		return latency
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ prometheusMetricsProvider) NewWorkDurationMetric(name string) workqueue.SummaryMetric {
0000000000000000000000000000000000000000;;		workDuration := prometheus.NewSummary(prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;			Subsystem: name,
0000000000000000000000000000000000000000;;			Name:      "work_duration",
0000000000000000000000000000000000000000;;			Help:      "How long processing an item from workqueue" + name + " takes.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		prometheus.Register(workDuration)
0000000000000000000000000000000000000000;;		return workDuration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ prometheusMetricsProvider) NewRetriesMetric(name string) workqueue.CounterMetric {
0000000000000000000000000000000000000000;;		retries := prometheus.NewCounter(prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Subsystem: name,
0000000000000000000000000000000000000000;;			Name:      "retries",
0000000000000000000000000000000000000000;;			Help:      "Total number of retries handled by workqueue: " + name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		prometheus.Register(retries)
0000000000000000000000000000000000000000;;		return retries
0000000000000000000000000000000000000000;;	}
