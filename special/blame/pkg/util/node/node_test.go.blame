0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0a668058086a9ffbbb5285f6e477b695446c609a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPreferredAddress(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Labels      map[string]string
0000000000000000000000000000000000000000;;			Addresses   []v1.NodeAddress
0000000000000000000000000000000000000000;;			Preferences []v1.NodeAddressType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectErr     string
0000000000000000000000000000000000000000;;			ExpectAddress string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no addresses": {
0000000000000000000000000000000000000000;;				ExpectErr: "no preferred addresses found; known addresses: []",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing address": {
0000000000000000000000000000000000000000;;				Addresses: []v1.NodeAddress{
0000000000000000000000000000000000000000;;					{Type: v1.NodeInternalIP, Address: "1.2.3.4"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Preferences: []v1.NodeAddressType{v1.NodeHostName},
0000000000000000000000000000000000000000;;				ExpectErr:   "no preferred addresses found; known addresses: [{InternalIP 1.2.3.4}]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"found address": {
0000000000000000000000000000000000000000;;				Addresses: []v1.NodeAddress{
0000000000000000000000000000000000000000;;					{Type: v1.NodeInternalIP, Address: "1.2.3.4"},
0000000000000000000000000000000000000000;;					{Type: v1.NodeExternalIP, Address: "1.2.3.5"},
0000000000000000000000000000000000000000;;					{Type: v1.NodeExternalIP, Address: "1.2.3.7"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Preferences:   []v1.NodeAddressType{v1.NodeHostName, v1.NodeExternalIP},
0000000000000000000000000000000000000000;;				ExpectAddress: "1.2.3.5",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"found hostname address": {
0000000000000000000000000000000000000000;;				Labels: map[string]string{kubeletapis.LabelHostname: "label-hostname"},
0000000000000000000000000000000000000000;;				Addresses: []v1.NodeAddress{
0000000000000000000000000000000000000000;;					{Type: v1.NodeExternalIP, Address: "1.2.3.5"},
0000000000000000000000000000000000000000;;					{Type: v1.NodeHostName, Address: "status-hostname"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Preferences:   []v1.NodeAddressType{v1.NodeHostName, v1.NodeExternalIP},
0000000000000000000000000000000000000000;;				ExpectAddress: "status-hostname",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"found label address": {
0000000000000000000000000000000000000000;;				Labels: map[string]string{kubeletapis.LabelHostname: "label-hostname"},
0000000000000000000000000000000000000000;;				Addresses: []v1.NodeAddress{
0000000000000000000000000000000000000000;;					{Type: v1.NodeExternalIP, Address: "1.2.3.5"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Preferences:   []v1.NodeAddressType{v1.NodeHostName, v1.NodeExternalIP},
0000000000000000000000000000000000000000;;				ExpectAddress: "label-hostname",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			node := &v1.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Labels: tc.Labels},
0000000000000000000000000000000000000000;;				Status:     v1.NodeStatus{Addresses: tc.Addresses},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			address, err := GetPreferredNodeAddress(node, tc.Preferences)
0000000000000000000000000000000000000000;;			errString := ""
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errString = err.Error()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errString != tc.ExpectErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected err=%q, got %q", k, tc.ExpectErr, errString)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if address != tc.ExpectAddress {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected address=%q, got %q", k, tc.ExpectAddress, address)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
