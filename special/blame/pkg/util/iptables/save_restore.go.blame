0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
dcea20731096c52ca227a1968192f453e4a642e9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package iptables
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeChainLine return an iptables-save/restore formatted chain line given a Chain
0000000000000000000000000000000000000000;;	func MakeChainLine(chain Chain) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(":%s - [0:0]", chain)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetChainLines parses a table's iptables-save data to find chains in the table.
0000000000000000000000000000000000000000;;	// It returns a map of iptables.Chain to string where the string is the chain line from the save (with counters etc).
0000000000000000000000000000000000000000;;	func GetChainLines(table Table, save []byte) map[Chain]string {
0000000000000000000000000000000000000000;;		chainsMap := make(map[Chain]string)
0000000000000000000000000000000000000000;;		tablePrefix := "*" + string(table)
0000000000000000000000000000000000000000;;		readIndex := 0
0000000000000000000000000000000000000000;;		// find beginning of table
0000000000000000000000000000000000000000;;		for readIndex < len(save) {
0000000000000000000000000000000000000000;;			line, n := ReadLine(readIndex, save)
0000000000000000000000000000000000000000;;			readIndex = n
0000000000000000000000000000000000000000;;			if strings.HasPrefix(line, tablePrefix) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// parse table lines
0000000000000000000000000000000000000000;;		for readIndex < len(save) {
0000000000000000000000000000000000000000;;			line, n := ReadLine(readIndex, save)
0000000000000000000000000000000000000000;;			readIndex = n
0000000000000000000000000000000000000000;;			if len(line) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasPrefix(line, "COMMIT") || strings.HasPrefix(line, "*") {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if strings.HasPrefix(line, "#") {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else if strings.HasPrefix(line, ":") && len(line) > 1 {
0000000000000000000000000000000000000000;;				// We assume that the <line> contains space - chain lines have 3 fields,
0000000000000000000000000000000000000000;;				// space delimited. If there is no space, this line will panic.
0000000000000000000000000000000000000000;;				chain := Chain(line[1:strings.Index(line, " ")])
0000000000000000000000000000000000000000;;				chainsMap[chain] = line
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return chainsMap
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReadLine(readIndex int, byteArray []byte) (string, int) {
0000000000000000000000000000000000000000;;		currentReadIndex := readIndex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// consume left spaces
0000000000000000000000000000000000000000;;		for currentReadIndex < len(byteArray) {
0000000000000000000000000000000000000000;;			if byteArray[currentReadIndex] == ' ' {
0000000000000000000000000000000000000000;;				currentReadIndex++
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// leftTrimIndex stores the left index of the line after the line is left-trimmed
0000000000000000000000000000000000000000;;		leftTrimIndex := currentReadIndex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// rightTrimIndex stores the right index of the line after the line is right-trimmed
0000000000000000000000000000000000000000;;		// it is set to -1 since the correct value has not yet been determined.
0000000000000000000000000000000000000000;;		rightTrimIndex := -1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for ; currentReadIndex < len(byteArray); currentReadIndex++ {
0000000000000000000000000000000000000000;;			if byteArray[currentReadIndex] == ' ' {
0000000000000000000000000000000000000000;;				// set rightTrimIndex
0000000000000000000000000000000000000000;;				if rightTrimIndex == -1 {
0000000000000000000000000000000000000000;;					rightTrimIndex = currentReadIndex
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if (byteArray[currentReadIndex] == '\n') || (currentReadIndex == (len(byteArray) - 1)) {
0000000000000000000000000000000000000000;;				// end of line or byte buffer is reached
0000000000000000000000000000000000000000;;				if currentReadIndex <= leftTrimIndex {
0000000000000000000000000000000000000000;;					return "", currentReadIndex + 1
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// set the rightTrimIndex
0000000000000000000000000000000000000000;;				if rightTrimIndex == -1 {
0000000000000000000000000000000000000000;;					rightTrimIndex = currentReadIndex
0000000000000000000000000000000000000000;;					if currentReadIndex == (len(byteArray)-1) && (byteArray[currentReadIndex] != '\n') {
0000000000000000000000000000000000000000;;						// ensure that the last character is part of the returned string,
0000000000000000000000000000000000000000;;						// unless the last character is '\n'
0000000000000000000000000000000000000000;;						rightTrimIndex = currentReadIndex + 1
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return string(byteArray[leftTrimIndex:rightTrimIndex]), currentReadIndex + 1
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// unset rightTrimIndex
0000000000000000000000000000000000000000;;				rightTrimIndex = -1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", currentReadIndex
0000000000000000000000000000000000000000;;	}
