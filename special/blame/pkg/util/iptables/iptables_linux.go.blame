0000000000000000000000000000000000000000;;	// +build linux
ddbe9eaf7192eae991a52f6f8572fc62e51bce13;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package iptables
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/sys/unix"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type locker struct {
0000000000000000000000000000000000000000;;		lock16 *os.File
0000000000000000000000000000000000000000;;		lock14 *net.UnixListener
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *locker) Close() error {
0000000000000000000000000000000000000000;;		errList := []error{}
0000000000000000000000000000000000000000;;		if l.lock16 != nil {
0000000000000000000000000000000000000000;;			if err := l.lock16.Close(); err != nil {
0000000000000000000000000000000000000000;;				errList = append(errList, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.lock14 != nil {
0000000000000000000000000000000000000000;;			if err := l.lock14.Close(); err != nil {
0000000000000000000000000000000000000000;;				errList = append(errList, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(errList)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func grabIptablesLocks(lockfilePath string) (iptablesLocker, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		var success bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l := &locker{}
0000000000000000000000000000000000000000;;		defer func(l *locker) {
0000000000000000000000000000000000000000;;			// Clean up immediately on failure
0000000000000000000000000000000000000000;;			if !success {
0000000000000000000000000000000000000000;;				l.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}(l)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Grab both 1.6.x and 1.4.x-style locks; we don't know what the
0000000000000000000000000000000000000000;;		// iptables-restore version is if it doesn't support --wait, so we
0000000000000000000000000000000000000000;;		// can't assume which lock method it'll use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Roughly duplicate iptables 1.6.x xtables_lock() function.
0000000000000000000000000000000000000000;;		l.lock16, err = os.OpenFile(lockfilePath, os.O_CREATE, 0600)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to open iptables lock %s: %v", lockfilePath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := wait.PollImmediate(200*time.Millisecond, 2*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			if err := grabIptablesFileLock(l.lock16); err != nil {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to acquire new iptables lock: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Roughly duplicate iptables 1.4.x xtables_lock() function.
0000000000000000000000000000000000000000;;		if err := wait.PollImmediate(200*time.Millisecond, 2*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			l.lock14, err = net.ListenUnix("unix", &net.UnixAddr{Name: "@xtables", Net: "unix"})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to acquire old iptables lock: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		success = true
0000000000000000000000000000000000000000;;		return l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func grabIptablesFileLock(f *os.File) error {
0000000000000000000000000000000000000000;;		return unix.Flock(int(f.Fd()), unix.LOCK_EX|unix.LOCK_NB)
0000000000000000000000000000000000000000;;	}
