0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2bf5e1f335b1d92535ea784c21d1e9e5d7b913a2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		configsGuard sync.RWMutex
0000000000000000000000000000000000000000;;		configs      = map[string]*Config{}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		val interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func InstallHandler(m mux) {
0000000000000000000000000000000000000000;;		m.Handle("/configz", http.HandlerFunc(handle))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mux interface {
0000000000000000000000000000000000000000;;		Handle(string, http.Handler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(name string) (*Config, error) {
0000000000000000000000000000000000000000;;		configsGuard.Lock()
0000000000000000000000000000000000000000;;		defer configsGuard.Unlock()
0000000000000000000000000000000000000000;;		if _, found := configs[name]; found {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("register config %q twice", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newConfig := Config{}
0000000000000000000000000000000000000000;;		configs[name] = &newConfig
0000000000000000000000000000000000000000;;		return &newConfig, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Delete(name string) {
0000000000000000000000000000000000000000;;		configsGuard.Lock()
0000000000000000000000000000000000000000;;		defer configsGuard.Unlock()
0000000000000000000000000000000000000000;;		delete(configs, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *Config) Set(val interface{}) {
0000000000000000000000000000000000000000;;		configsGuard.Lock()
0000000000000000000000000000000000000000;;		defer configsGuard.Unlock()
0000000000000000000000000000000000000000;;		v.val = val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *Config) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(v.val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func handle(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		if err := write(w); err != nil {
0000000000000000000000000000000000000000;;			http.Error(w, err.Error(), http.StatusInternalServerError)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func write(w io.Writer) error {
0000000000000000000000000000000000000000;;		configsGuard.Lock()
0000000000000000000000000000000000000000;;		defer configsGuard.Unlock()
0000000000000000000000000000000000000000;;		b, err := json.Marshal(configs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error marshaling json: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = w.Write(b)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
