0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
32974cde63b56a4739177eab2c2da50c943f738a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package exec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		osexec "os/exec"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecutorNoArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		ex := New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := ex.Command("true")
0000000000000000000000000000000000000000;;		out, err := cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected no output, got %q", string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd = ex.Command("false")
0000000000000000000000000000000000000000;;		out, err = cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected failure, got nil error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(out) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected no output, got %q", string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ee, ok := err.(ExitError)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("expected an ExitError, got %+v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ee.Exited() {
0000000000000000000000000000000000000000;;			if code := ee.ExitStatus(); code != 1 {
0000000000000000000000000000000000000000;;				t.Errorf("expected exit status 1, got %d", code)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd = ex.Command("/does/not/exist")
0000000000000000000000000000000000000000;;		out, err = cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected failure, got nil error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ee, ok := err.(ExitError); ok {
0000000000000000000000000000000000000000;;			t.Errorf("expected non-ExitError, got %+v", ee)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecutorWithArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		ex := New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := ex.Command("echo", "stdout")
0000000000000000000000000000000000000000;;		out, err := cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %+v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(out) != "stdout\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %q", string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd = ex.Command("/bin/sh", "-c", "echo stderr > /dev/stderr")
0000000000000000000000000000000000000000;;		out, err = cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected success, got %+v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(out) != "stderr\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %q", string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLookPath(t *testing.T) {
0000000000000000000000000000000000000000;;		ex := New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		shExpected, _ := osexec.LookPath("sh")
0000000000000000000000000000000000000000;;		sh, _ := ex.LookPath("sh")
0000000000000000000000000000000000000000;;		if sh != shExpected {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result for LookPath: got %s, expected %s", sh, shExpected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecutableNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		exec := New()
0000000000000000000000000000000000000000;;		cmd := exec.Command("fake_executable_name")
0000000000000000000000000000000000000000;;		_, err := cmd.CombinedOutput()
0000000000000000000000000000000000000000;;		if err != ErrExecutableNotFound {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error ErrExecutableNotFound but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
