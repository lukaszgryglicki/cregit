0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
cd5b8f6d3b8851ec7d8366c65e221e020c4a18fc;pkg/util/runner.go[pkg/util/runner.go][pkg/util/async/runner.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package async
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Runner is an abstraction to make it easy to start and stop groups of things that can be
0000000000000000000000000000000000000000;;	// described by a single function which waits on a channel close to exit.
0000000000000000000000000000000000000000;;	type Runner struct {
0000000000000000000000000000000000000000;;		lock      sync.Mutex
0000000000000000000000000000000000000000;;		loopFuncs []func(stop chan struct{})
0000000000000000000000000000000000000000;;		stop      *chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRunner makes a runner for the given function(s). The function(s) should loop until
0000000000000000000000000000000000000000;;	// the channel is closed.
0000000000000000000000000000000000000000;;	func NewRunner(f ...func(stop chan struct{})) *Runner {
0000000000000000000000000000000000000000;;		return &Runner{loopFuncs: f}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start begins running.
0000000000000000000000000000000000000000;;	func (r *Runner) Start() {
0000000000000000000000000000000000000000;;		r.lock.Lock()
0000000000000000000000000000000000000000;;		defer r.lock.Unlock()
0000000000000000000000000000000000000000;;		if r.stop == nil {
0000000000000000000000000000000000000000;;			c := make(chan struct{})
0000000000000000000000000000000000000000;;			r.stop = &c
0000000000000000000000000000000000000000;;			for i := range r.loopFuncs {
0000000000000000000000000000000000000000;;				go r.loopFuncs[i](*r.stop)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stop stops running.
0000000000000000000000000000000000000000;;	func (r *Runner) Stop() {
0000000000000000000000000000000000000000;;		r.lock.Lock()
0000000000000000000000000000000000000000;;		defer r.lock.Unlock()
0000000000000000000000000000000000000000;;		if r.stop != nil {
0000000000000000000000000000000000000000;;			close(*r.stop)
0000000000000000000000000000000000000000;;			r.stop = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
