0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
cd5b8f6d3b8851ec7d8366c65e221e020c4a18fc;pkg/util/runner_test.go[pkg/util/runner_test.go][pkg/util/async/runner_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package async
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunner(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			lock   sync.Mutex
0000000000000000000000000000000000000000;;			events []string
0000000000000000000000000000000000000000;;			funcs  []func(chan struct{})
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		done := make(chan struct{}, 20)
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			iCopy := i
0000000000000000000000000000000000000000;;			funcs = append(funcs, func(c chan struct{}) {
0000000000000000000000000000000000000000;;				lock.Lock()
0000000000000000000000000000000000000000;;				events = append(events, fmt.Sprintf("%v starting\n", iCopy))
0000000000000000000000000000000000000000;;				lock.Unlock()
0000000000000000000000000000000000000000;;				<-c
0000000000000000000000000000000000000000;;				lock.Lock()
0000000000000000000000000000000000000000;;				events = append(events, fmt.Sprintf("%v stopping\n", iCopy))
0000000000000000000000000000000000000000;;				lock.Unlock()
0000000000000000000000000000000000000000;;				done <- struct{}{}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := NewRunner(funcs...)
0000000000000000000000000000000000000000;;		r.Start()
0000000000000000000000000000000000000000;;		r.Stop()
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			<-done
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(events) != 20 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 20 events, but got:\n%v\n", events)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
