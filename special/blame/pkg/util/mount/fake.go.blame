0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0413772304c0cad151669b31542819fbbae1a212;pkg/util/mount/unsupported.go[pkg/util/mount/unsupported.go][pkg/util/mount/fake.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package mount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeMounter implements mount.Interface for tests.
0000000000000000000000000000000000000000;;	type FakeMounter struct {
0000000000000000000000000000000000000000;;		MountPoints []MountPoint
0000000000000000000000000000000000000000;;		Log         []FakeAction
0000000000000000000000000000000000000000;;		// Some tests run things in parallel, make sure the mounter does not produce
0000000000000000000000000000000000000000;;		// any golang's DATA RACE warnings.
0000000000000000000000000000000000000000;;		mutex sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Interface = &FakeMounter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Values for FakeAction.Action
0000000000000000000000000000000000000000;;	const FakeActionMount = "mount"
0000000000000000000000000000000000000000;;	const FakeActionUnmount = "unmount"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeAction objects are logged every time a fake mount or unmount is called.
0000000000000000000000000000000000000000;;	type FakeAction struct {
0000000000000000000000000000000000000000;;		Action string // "mount" or "unmount"
0000000000000000000000000000000000000000;;		Target string // applies to both mount and unmount actions
0000000000000000000000000000000000000000;;		Source string // applies only to "mount" actions
0000000000000000000000000000000000000000;;		FSType string // applies only to "mount" actions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) ResetLog() {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.Log = []FakeAction{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) Mount(source string, target string, fstype string, options []string) error {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// find 'bind' option
0000000000000000000000000000000000000000;;		for _, option := range options {
0000000000000000000000000000000000000000;;			if option == "bind" {
0000000000000000000000000000000000000000;;				// This is a bind-mount. In order to mimic linux behaviour, we must
0000000000000000000000000000000000000000;;				// use the original device of the bind-mount as the real source.
0000000000000000000000000000000000000000;;				// E.g. when mounted /dev/sda like this:
0000000000000000000000000000000000000000;;				//      $ mount /dev/sda /mnt/test
0000000000000000000000000000000000000000;;				//      $ mount -o bind /mnt/test /mnt/bound
0000000000000000000000000000000000000000;;				// then /proc/mount contains:
0000000000000000000000000000000000000000;;				// /dev/sda /mnt/test
0000000000000000000000000000000000000000;;				// /dev/sda /mnt/bound
0000000000000000000000000000000000000000;;				// (and not /mnt/test /mnt/bound)
0000000000000000000000000000000000000000;;				// I.e. we must use /dev/sda as source instead of /mnt/test in the
0000000000000000000000000000000000000000;;				// bind mount.
0000000000000000000000000000000000000000;;				for _, mnt := range f.MountPoints {
0000000000000000000000000000000000000000;;					if source == mnt.Path {
0000000000000000000000000000000000000000;;						source = mnt.Device
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If target is a symlink, get its absolute path
0000000000000000000000000000000000000000;;		absTarget, err := filepath.EvalSymlinks(target)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			absTarget = target
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.MountPoints = append(f.MountPoints, MountPoint{Device: source, Path: absTarget, Type: fstype})
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Fake mounter: mounted %s to %s", source, absTarget)
0000000000000000000000000000000000000000;;		f.Log = append(f.Log, FakeAction{Action: FakeActionMount, Target: absTarget, Source: source, FSType: fstype})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) Unmount(target string) error {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If target is a symlink, get its absolute path
0000000000000000000000000000000000000000;;		absTarget, err := filepath.EvalSymlinks(target)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			absTarget = target
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newMountpoints := []MountPoint{}
0000000000000000000000000000000000000000;;		for _, mp := range f.MountPoints {
0000000000000000000000000000000000000000;;			if mp.Path == absTarget {
0000000000000000000000000000000000000000;;				glog.V(5).Infof("Fake mounter: unmounted %s from %s", mp.Device, absTarget)
0000000000000000000000000000000000000000;;				// Don't copy it to newMountpoints
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newMountpoints = append(newMountpoints, MountPoint{Device: mp.Device, Path: mp.Path, Type: mp.Type})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.MountPoints = newMountpoints
0000000000000000000000000000000000000000;;		f.Log = append(f.Log, FakeAction{Action: FakeActionUnmount, Target: absTarget})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) List() ([]MountPoint, error) {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.MountPoints, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) IsMountPointMatch(mp MountPoint, dir string) bool {
0000000000000000000000000000000000000000;;		return (mp.Path == dir)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) IsNotMountPoint(dir string) (bool, error) {
0000000000000000000000000000000000000000;;		return IsNotMountPoint(f, dir)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) IsLikelyNotMountPoint(file string) (bool, error) {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If file is a symlink, get its absolute path
0000000000000000000000000000000000000000;;		absFile, err := filepath.EvalSymlinks(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			absFile = file
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, mp := range f.MountPoints {
0000000000000000000000000000000000000000;;			if mp.Path == absFile {
0000000000000000000000000000000000000000;;				glog.V(5).Infof("isLikelyNotMountPoint for %s: mounted %s, false", file, mp.Path)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(5).Infof("isLikelyNotMountPoint for %s: true", file)
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) DeviceOpened(pathname string) (bool, error) {
0000000000000000000000000000000000000000;;		f.mutex.Lock()
0000000000000000000000000000000000000000;;		defer f.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, mp := range f.MountPoints {
0000000000000000000000000000000000000000;;			if mp.Device == pathname {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) PathIsDevice(pathname string) (bool, error) {
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeMounter) GetDeviceNameFromMount(mountPath, pluginDir string) (string, error) {
0000000000000000000000000000000000000000;;		return getDeviceNameFromMount(f, mountPath, pluginDir)
0000000000000000000000000000000000000000;;	}
