0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
186e1f5ad9bb8d686dbd400aba6a43b0f1ad5066;pkg/util/env_test.go[pkg/util/env_test.go][pkg/util/env/env_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEnvAsStringOrFallback(t *testing.T) {
0000000000000000000000000000000000000000;;		const expected = "foo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key := "FLOCKER_SET_VAR"
0000000000000000000000000000000000000000;;		os.Setenv(key, expected)
0000000000000000000000000000000000000000;;		assert.Equal(expected, GetEnvAsStringOrFallback(key, "~"+expected))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key = "FLOCKER_UNSET_VAR"
0000000000000000000000000000000000000000;;		assert.Equal(expected, GetEnvAsStringOrFallback(key, expected))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEnvAsIntOrFallback(t *testing.T) {
0000000000000000000000000000000000000000;;		const expected = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key := "FLOCKER_SET_VAR"
0000000000000000000000000000000000000000;;		os.Setenv(key, strconv.Itoa(expected))
0000000000000000000000000000000000000000;;		returnVal, _ := GetEnvAsIntOrFallback(key, 1)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key = "FLOCKER_UNSET_VAR"
0000000000000000000000000000000000000000;;		returnVal, _ = GetEnvAsIntOrFallback(key, expected)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key = "FLOCKER_SET_VAR"
0000000000000000000000000000000000000000;;		os.Setenv(key, "not-an-int")
0000000000000000000000000000000000000000;;		returnVal, err := GetEnvAsIntOrFallback(key, 1)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("expected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEnvAsFloat64OrFallback(t *testing.T) {
0000000000000000000000000000000000000000;;		const expected = 1.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key := "FLOCKER_SET_VAR"
0000000000000000000000000000000000000000;;		os.Setenv(key, "1.0")
0000000000000000000000000000000000000000;;		returnVal, _ := GetEnvAsFloat64OrFallback(key, 2.0)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key = "FLOCKER_UNSET_VAR"
0000000000000000000000000000000000000000;;		returnVal, _ = GetEnvAsFloat64OrFallback(key, 1.0)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key = "FLOCKER_SET_VAR"
0000000000000000000000000000000000000000;;		os.Setenv(key, "not-a-float")
0000000000000000000000000000000000000000;;		returnVal, err := GetEnvAsFloat64OrFallback(key, 1.0)
0000000000000000000000000000000000000000;;		assert.Equal(expected, returnVal)
0000000000000000000000000000000000000000;;		assert.EqualError(err, "strconv.ParseFloat: parsing \"not-a-float\": invalid syntax")
0000000000000000000000000000000000000000;;	}
