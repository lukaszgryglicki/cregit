0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
20c194c5fb3a2b8d3a85c187dfc66a713a5dec95;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsMasterNode(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"foo-master", true},
0000000000000000000000000000000000000000;;			{"foo-master-", false},
0000000000000000000000000000000000000000;;			{"foo-master-a", false},
0000000000000000000000000000000000000000;;			{"foo-master-ab", false},
0000000000000000000000000000000000000000;;			{"foo-master-abc", true},
0000000000000000000000000000000000000000;;			{"foo-master-abdc", false},
0000000000000000000000000000000000000000;;			{"foo-bar", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			node := v1.Node{ObjectMeta: metav1.ObjectMeta{Name: tc.input}}
0000000000000000000000000000000000000000;;			res := IsMasterNode(node.Name)
0000000000000000000000000000000000000000;;			if res != tc.result {
0000000000000000000000000000000000000000;;				t.Errorf("case \"%s\": expected %t, got %t", tc.input, tc.result, res)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
