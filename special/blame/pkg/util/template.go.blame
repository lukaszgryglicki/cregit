0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c33f8043700ee62659c752a261b38ef7f3261415;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"go/doc"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wrap(indent string, s string) string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		doc.ToText(&buf, s, indent, indent+"  ", 80-len(indent))
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExecuteTemplate executes templateText with data and output written to w.
0000000000000000000000000000000000000000;;	func ExecuteTemplate(w io.Writer, templateText string, data interface{}) error {
0000000000000000000000000000000000000000;;		t := template.New("top")
0000000000000000000000000000000000000000;;		t.Funcs(template.FuncMap{
0000000000000000000000000000000000000000;;			"trim": strings.TrimSpace,
0000000000000000000000000000000000000000;;			"wrap": wrap,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		template.Must(t.Parse(templateText))
0000000000000000000000000000000000000000;;		return t.Execute(w, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExecuteTemplateToString(templateText string, data interface{}) (string, error) {
0000000000000000000000000000000000000000;;		b := bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := ExecuteTemplate(&b, templateText, data)
0000000000000000000000000000000000000000;;		return b.String(), err
0000000000000000000000000000000000000000;;	}
