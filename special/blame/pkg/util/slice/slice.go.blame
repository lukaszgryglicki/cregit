0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
4b639ab05f16ceffd1d256caefd6e3f035ee733c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package slice provides utility methods for common operations on slices.
0000000000000000000000000000000000000000;;	package slice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilrand "k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyStrings copies the contents of the specified string slice
0000000000000000000000000000000000000000;;	// into a new slice.
0000000000000000000000000000000000000000;;	func CopyStrings(s []string) []string {
0000000000000000000000000000000000000000;;		if s == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := make([]string, len(s))
0000000000000000000000000000000000000000;;		copy(c, s)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SortStrings sorts the specified string slice in place. It returns the same
0000000000000000000000000000000000000000;;	// slice that was provided in order to facilitate method chaining.
0000000000000000000000000000000000000000;;	func SortStrings(s []string) []string {
0000000000000000000000000000000000000000;;		sort.Strings(s)
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShuffleStrings copies strings from the specified slice into a copy in random
0000000000000000000000000000000000000000;;	// order. It returns a new slice.
0000000000000000000000000000000000000000;;	func ShuffleStrings(s []string) []string {
0000000000000000000000000000000000000000;;		if s == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		shuffled := make([]string, len(s))
0000000000000000000000000000000000000000;;		perm := utilrand.Perm(len(s))
0000000000000000000000000000000000000000;;		for i, j := range perm {
0000000000000000000000000000000000000000;;			shuffled[j] = s[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return shuffled
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainsString checks if a given slice of strings contains the provided string.
0000000000000000000000000000000000000000;;	// If a modifier func is provided, it is called with the slice item before the comparation.
0000000000000000000000000000000000000000;;	func ContainsString(slice []string, s string, modifier func(s string) string) bool {
0000000000000000000000000000000000000000;;		for _, item := range slice {
0000000000000000000000000000000000000000;;			if item == s {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if modifier != nil && modifier(item) == s {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
