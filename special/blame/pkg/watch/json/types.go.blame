0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b6b9224e6bcb2d14968732e88eee75971b5253b1;pkg/api/watch.go[pkg/api/watch.go][pkg/watch/json/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatchEvent objects are streamed from the api server in response to a watch request.
0000000000000000000000000000000000000000;;	// These are not API objects and may not be changed in a backward-incompatible way.
0000000000000000000000000000000000000000;;	// TODO: move to a public, versioned object now that RawExtension conversions are possible
0000000000000000000000000000000000000000;;	// in the schema.
0000000000000000000000000000000000000000;;	type WatchEvent struct {
0000000000000000000000000000000000000000;;		// The type of the watch event; added, modified, deleted, or error.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Type watch.EventType `json:"type,omitempty" description:"the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For added or modified objects, this is the new object; for deleted objects,
0000000000000000000000000000000000000000;;		// it's the state of the object immediately prior to its deletion.
0000000000000000000000000000000000000000;;		// For errors, it's an api.Status.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Object runtime.RawExtension `json:"object,omitempty" description:"the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Object converts a watch.Event into an appropriately serializable JSON object
0000000000000000000000000000000000000000;;	func Object(encoder runtime.Encoder, event *watch.Event) (interface{}, error) {
0000000000000000000000000000000000000000;;		obj, ok := event.Object.(runtime.Object)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the event object cannot be safely converted to JSON: %v", reflect.TypeOf(event.Object).Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(encoder, obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &WatchEvent{event.Type, runtime.RawExtension{Raw: json.RawMessage(data)}}, nil
0000000000000000000000000000000000000000;;	}
