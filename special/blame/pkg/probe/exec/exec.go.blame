0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bd4f45eec9543af8193380c253c2ed3028706634;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package exec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New() ExecProber {
0000000000000000000000000000000000000000;;		return execProber{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecProber interface {
0000000000000000000000000000000000000000;;		Probe(e exec.Cmd) (probe.Result, string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type execProber struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pr execProber) Probe(e exec.Cmd) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		data, err := e.CombinedOutput()
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Exec probe response: %q", string(data))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			exit, ok := err.(exec.ExitError)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				if exit.ExitStatus() == 0 {
0000000000000000000000000000000000000000;;					return probe.Success, string(data), nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return probe.Failure, string(data), nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return probe.Unknown, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return probe.Success, string(data), nil
0000000000000000000000000000000000000000;;	}
