0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bd4f45eec9543af8193380c253c2ed3028706634;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package http
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/version"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New() HTTPProber {
0000000000000000000000000000000000000000;;		tlsConfig := &tls.Config{InsecureSkipVerify: true}
0000000000000000000000000000000000000000;;		return NewWithTLSConfig(tlsConfig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewWithTLSConfig takes tls config as parameter.
0000000000000000000000000000000000000000;;	func NewWithTLSConfig(config *tls.Config) HTTPProber {
0000000000000000000000000000000000000000;;		transport := utilnet.SetTransportDefaults(&http.Transport{TLSClientConfig: config, DisableKeepAlives: true})
0000000000000000000000000000000000000000;;		return httpProber{transport}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HTTPProber interface {
0000000000000000000000000000000000000000;;		Probe(url *url.URL, headers http.Header, timeout time.Duration) (probe.Result, string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpProber struct {
0000000000000000000000000000000000000000;;		transport *http.Transport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Probe returns a ProbeRunner capable of running an http check.
0000000000000000000000000000000000000000;;	func (pr httpProber) Probe(url *url.URL, headers http.Header, timeout time.Duration) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		return DoHTTPProbe(url, headers, &http.Client{Timeout: timeout, Transport: pr.transport})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HTTPGetInterface interface {
0000000000000000000000000000000000000000;;		Do(req *http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DoHTTPProbe checks if a GET request to the url succeeds.
0000000000000000000000000000000000000000;;	// If the HTTP response code is successful (i.e. 400 > code >= 200), it returns Success.
0000000000000000000000000000000000000000;;	// If the HTTP response code is unsuccessful or HTTP communication fails, it returns Failure.
0000000000000000000000000000000000000000;;	// This is exported because some other packages may want to do direct HTTP probes.
0000000000000000000000000000000000000000;;	func DoHTTPProbe(url *url.URL, headers http.Header, client HTTPGetInterface) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", url.String(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Convert errors into failures to catch timeouts.
0000000000000000000000000000000000000000;;			return probe.Failure, err.Error(), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := headers["User-Agent"]; !ok {
0000000000000000000000000000000000000000;;			if headers == nil {
0000000000000000000000000000000000000000;;				headers = http.Header{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// explicitly set User-Agent so it's not set to default Go value
0000000000000000000000000000000000000000;;			v := version.Get()
0000000000000000000000000000000000000000;;			headers.Set("User-Agent", fmt.Sprintf("kube-probe/%s.%s", v.Major, v.Minor))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header = headers
0000000000000000000000000000000000000000;;		if headers.Get("Host") != "" {
0000000000000000000000000000000000000000;;			req.Host = headers.Get("Host")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Convert errors into failures to catch timeouts.
0000000000000000000000000000000000000000;;			return probe.Failure, err.Error(), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(res.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return probe.Failure, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body := string(b)
0000000000000000000000000000000000000000;;		if res.StatusCode >= http.StatusOK && res.StatusCode < http.StatusBadRequest {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Probe succeeded for %s, Response: %v", url.String(), *res)
0000000000000000000000000000000000000000;;			return probe.Success, body, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Probe failed for %s with request headers %v, response body: %v", url.String(), headers, body)
0000000000000000000000000000000000000000;;		return probe.Failure, fmt.Sprintf("HTTP probe failed with statuscode: %d", res.StatusCode), nil
0000000000000000000000000000000000000000;;	}
