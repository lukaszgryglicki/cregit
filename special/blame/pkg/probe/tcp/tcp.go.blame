0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bd4f45eec9543af8193380c253c2ed3028706634;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tcp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New() TCPProber {
0000000000000000000000000000000000000000;;		return tcpProber{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TCPProber interface {
0000000000000000000000000000000000000000;;		Probe(host string, port int, timeout time.Duration) (probe.Result, string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type tcpProber struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pr tcpProber) Probe(host string, port int, timeout time.Duration) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		return DoTCPProbe(net.JoinHostPort(host, strconv.Itoa(port)), timeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DoTCPProbe checks that a TCP socket to the address can be opened.
0000000000000000000000000000000000000000;;	// If the socket can be opened, it returns Success
0000000000000000000000000000000000000000;;	// If the socket fails to open, it returns Failure.
0000000000000000000000000000000000000000;;	// This is exported because some other packages may want to do direct TCP probes.
0000000000000000000000000000000000000000;;	func DoTCPProbe(addr string, timeout time.Duration) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		conn, err := net.DialTimeout("tcp", addr, timeout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Convert errors to failures to handle timeouts.
0000000000000000000000000000000000000000;;			return probe.Failure, err.Error(), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = conn.Close()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Unexpected error closing TCP probe socket: %v (%#v)", err, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return probe.Success, "", nil
0000000000000000000000000000000000000000;;	}
