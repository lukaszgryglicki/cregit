0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
883955f0b79ff3b99fcc0385ef2c95202e2e86d1;pkg/kubemark/hollow-kubelet.go[pkg/kubemark/hollow-kubelet.go][pkg/kubemark/hollow_kubelet.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubemark
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeletapp "k8s.io/kubernetes/cmd/kubelet/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubelet/app/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cadvisor"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cm"
0000000000000000000000000000000000000000;;		containertest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;		kubeio "k8s.io/kubernetes/pkg/util/io"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/oom"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/empty_dir"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/secret"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/utils"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HollowKubelet struct {
0000000000000000000000000000000000000000;;		KubeletFlags         *options.KubeletFlags
0000000000000000000000000000000000000000;;		KubeletConfiguration *componentconfig.KubeletConfiguration
0000000000000000000000000000000000000000;;		KubeletDeps          *kubelet.KubeletDeps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHollowKubelet(
0000000000000000000000000000000000000000;;		nodeName string,
0000000000000000000000000000000000000000;;		client *clientset.Clientset,
0000000000000000000000000000000000000000;;		cadvisorInterface cadvisor.Interface,
0000000000000000000000000000000000000000;;		dockerClient libdocker.Interface,
0000000000000000000000000000000000000000;;		kubeletPort, kubeletReadOnlyPort int,
0000000000000000000000000000000000000000;;		containerManager cm.ContainerManager,
0000000000000000000000000000000000000000;;		maxPods int, podsPerCore int,
0000000000000000000000000000000000000000;;	) *HollowKubelet {
0000000000000000000000000000000000000000;;		// -----------------
0000000000000000000000000000000000000000;;		// Static config
0000000000000000000000000000000000000000;;		// -----------------
0000000000000000000000000000000000000000;;		f, c := GetHollowKubeletConfig(nodeName, kubeletPort, kubeletReadOnlyPort, maxPods, podsPerCore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// -----------------
0000000000000000000000000000000000000000;;		// Injected objects
0000000000000000000000000000000000000000;;		// -----------------
0000000000000000000000000000000000000000;;		volumePlugins := empty_dir.ProbeVolumePlugins()
0000000000000000000000000000000000000000;;		volumePlugins = append(volumePlugins, secret.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		d := &kubelet.KubeletDeps{
0000000000000000000000000000000000000000;;			KubeClient:        client,
0000000000000000000000000000000000000000;;			DockerClient:      dockerClient,
0000000000000000000000000000000000000000;;			CAdvisorInterface: cadvisorInterface,
0000000000000000000000000000000000000000;;			Cloud:             nil,
0000000000000000000000000000000000000000;;			OSInterface:       &containertest.FakeOS{},
0000000000000000000000000000000000000000;;			ContainerManager:  containerManager,
0000000000000000000000000000000000000000;;			VolumePlugins:     volumePlugins,
0000000000000000000000000000000000000000;;			TLSOptions:        nil,
0000000000000000000000000000000000000000;;			OOMAdjuster:       oom.NewFakeOOMAdjuster(),
0000000000000000000000000000000000000000;;			Writer:            &kubeio.StdWriter{},
0000000000000000000000000000000000000000;;			Mounter:           mount.New("" /* default mount path */),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &HollowKubelet{
0000000000000000000000000000000000000000;;			KubeletFlags:         f,
0000000000000000000000000000000000000000;;			KubeletConfiguration: c,
0000000000000000000000000000000000000000;;			KubeletDeps:          d,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Starts this HollowKubelet and blocks.
0000000000000000000000000000000000000000;;	func (hk *HollowKubelet) Run() {
0000000000000000000000000000000000000000;;		if err := kubeletapp.RunKubelet(hk.KubeletFlags, hk.KubeletConfiguration, hk.KubeletDeps, false, false); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Failed to run HollowKubelet: %v. Exiting.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		select {}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Builds a KubeletConfiguration for the HollowKubelet, ensuring that the
0000000000000000000000000000000000000000;;	// usual defaults are applied for fields we do not override.
0000000000000000000000000000000000000000;;	func GetHollowKubeletConfig(
0000000000000000000000000000000000000000;;		nodeName string,
0000000000000000000000000000000000000000;;		kubeletPort int,
0000000000000000000000000000000000000000;;		kubeletReadOnlyPort int,
0000000000000000000000000000000000000000;;		maxPods int,
0000000000000000000000000000000000000000;;		podsPerCore int) (*options.KubeletFlags, *componentconfig.KubeletConfiguration) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testRootDir := utils.MakeTempDirOrDie("hollow-kubelet.", "")
0000000000000000000000000000000000000000;;		manifestFilePath := utils.MakeTempDirOrDie("manifest", testRootDir)
0000000000000000000000000000000000000000;;		glog.Infof("Using %s as root dir for hollow-kubelet", testRootDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flags struct
0000000000000000000000000000000000000000;;		f := &options.KubeletFlags{
0000000000000000000000000000000000000000;;			HostnameOverride: nodeName,
0000000000000000000000000000000000000000;;			// Use the default runtime options.
0000000000000000000000000000000000000000;;			ContainerRuntimeOptions: *options.NewContainerRuntimeOptions(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Config struct
0000000000000000000000000000000000000000;;		// Do the external -> internal conversion to make sure that defaults
0000000000000000000000000000000000000000;;		// are set for fields not overridden in NewHollowKubelet.
0000000000000000000000000000000000000000;;		tmp := &v1alpha1.KubeletConfiguration{}
0000000000000000000000000000000000000000;;		api.Scheme.Default(tmp)
0000000000000000000000000000000000000000;;		c := &componentconfig.KubeletConfiguration{}
0000000000000000000000000000000000000000;;		api.Scheme.Convert(tmp, c, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.RootDirectory = testRootDir
0000000000000000000000000000000000000000;;		c.ManifestURL = ""
0000000000000000000000000000000000000000;;		c.Address = "0.0.0.0" /* bind address */
0000000000000000000000000000000000000000;;		c.Port = int32(kubeletPort)
0000000000000000000000000000000000000000;;		c.ReadOnlyPort = int32(kubeletReadOnlyPort)
0000000000000000000000000000000000000000;;		c.PodManifestPath = manifestFilePath
0000000000000000000000000000000000000000;;		c.FileCheckFrequency.Duration = 20 * time.Second
0000000000000000000000000000000000000000;;		c.HTTPCheckFrequency.Duration = 20 * time.Second
0000000000000000000000000000000000000000;;		c.MinimumGCAge.Duration = 1 * time.Minute
0000000000000000000000000000000000000000;;		c.NodeStatusUpdateFrequency.Duration = 10 * time.Second
0000000000000000000000000000000000000000;;		c.SyncFrequency.Duration = 10 * time.Second
0000000000000000000000000000000000000000;;		c.OutOfDiskTransitionFrequency.Duration = 5 * time.Minute
0000000000000000000000000000000000000000;;		c.EvictionPressureTransitionPeriod.Duration = 5 * time.Minute
0000000000000000000000000000000000000000;;		c.MaxPods = int32(maxPods)
0000000000000000000000000000000000000000;;		c.PodsPerCore = int32(podsPerCore)
0000000000000000000000000000000000000000;;		c.ClusterDNS = []string{}
0000000000000000000000000000000000000000;;		c.ImageGCHighThresholdPercent = 90
0000000000000000000000000000000000000000;;		c.ImageGCLowThresholdPercent = 80
0000000000000000000000000000000000000000;;		c.LowDiskSpaceThresholdMB = 256
0000000000000000000000000000000000000000;;		c.VolumeStatsAggPeriod.Duration = time.Minute
0000000000000000000000000000000000000000;;		c.CgroupRoot = ""
0000000000000000000000000000000000000000;;		c.ContainerRuntime = kubetypes.DockerContainerRuntime
0000000000000000000000000000000000000000;;		c.CPUCFSQuota = true
0000000000000000000000000000000000000000;;		c.RuntimeCgroups = ""
0000000000000000000000000000000000000000;;		c.EnableControllerAttachDetach = false
0000000000000000000000000000000000000000;;		c.EnableCustomMetrics = false
0000000000000000000000000000000000000000;;		c.EnableDebuggingHandlers = true
0000000000000000000000000000000000000000;;		c.EnableServer = true
0000000000000000000000000000000000000000;;		c.CgroupsPerQOS = false
0000000000000000000000000000000000000000;;		// hairpin-veth is used to allow hairpin packets. Note that this deviates from
0000000000000000000000000000000000000000;;		// what the "real" kubelet currently does, because there's no way to
0000000000000000000000000000000000000000;;		// set promiscuous mode on docker0.
0000000000000000000000000000000000000000;;		c.HairpinMode = componentconfig.HairpinVeth
0000000000000000000000000000000000000000;;		c.MaxContainerCount = 100
0000000000000000000000000000000000000000;;		c.MaxOpenFiles = 1024
0000000000000000000000000000000000000000;;		c.MaxPerPodContainerCount = 2
0000000000000000000000000000000000000000;;		c.RegisterNode = true
0000000000000000000000000000000000000000;;		c.RegisterSchedulable = true
0000000000000000000000000000000000000000;;		c.RegistryBurst = 10
0000000000000000000000000000000000000000;;		c.RegistryPullQPS = 5.0
0000000000000000000000000000000000000000;;		c.ResolverConfig = kubetypes.ResolvConfDefault
0000000000000000000000000000000000000000;;		c.KubeletCgroups = "/kubelet"
0000000000000000000000000000000000000000;;		c.SerializeImagePulls = true
0000000000000000000000000000000000000000;;		c.SystemCgroups = ""
0000000000000000000000000000000000000000;;		c.ProtectKernelDefaults = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f, c
0000000000000000000000000000000000000000;;	}
