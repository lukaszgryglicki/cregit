0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fe68c9567d07487725bf622e4ce86ae3a3646c31;pkg/kubemark/hollow-proxy.go[pkg/kubemark/hollow-proxy.go][pkg/kubemark/hollow_proxy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubemark
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		v1core "k8s.io/client-go/kubernetes/typed/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		proxyapp "k8s.io/kubernetes/cmd/kube-proxy/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/proxy"
0000000000000000000000000000000000000000;;		proxyconfig "k8s.io/kubernetes/pkg/proxy/config"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/proxy/iptables"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util"
0000000000000000000000000000000000000000;;		utilexec "k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		utiliptables "k8s.io/kubernetes/pkg/util/iptables"
0000000000000000000000000000000000000000;;		nodeutil "k8s.io/kubernetes/pkg/util/node"
0000000000000000000000000000000000000000;;		utilsysctl "k8s.io/kubernetes/pkg/util/sysctl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HollowProxy struct {
0000000000000000000000000000000000000000;;		ProxyServer *proxyapp.ProxyServer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeProxier struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*FakeProxier) Sync() {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) SyncLoop() {
0000000000000000000000000000000000000000;;		select {}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnServiceAdd(service *api.Service)                        {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnServiceUpdate(oldService, service *api.Service)         {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnServiceDelete(service *api.Service)                     {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnServiceSynced()                                         {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnEndpointsAdd(endpoints *api.Endpoints)                  {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnEndpointsUpdate(oldEndpoints, endpoints *api.Endpoints) {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnEndpointsDelete(endpoints *api.Endpoints)               {}
0000000000000000000000000000000000000000;;	func (*FakeProxier) OnEndpointsSynced()                                       {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHollowProxyOrDie(
0000000000000000000000000000000000000000;;		nodeName string,
0000000000000000000000000000000000000000;;		client clientset.Interface,
0000000000000000000000000000000000000000;;		eventClient v1core.EventsGetter,
0000000000000000000000000000000000000000;;		iptInterface utiliptables.Interface,
0000000000000000000000000000000000000000;;		sysctl utilsysctl.Interface,
0000000000000000000000000000000000000000;;		execer utilexec.Interface,
0000000000000000000000000000000000000000;;		broadcaster record.EventBroadcaster,
0000000000000000000000000000000000000000;;		recorder record.EventRecorder,
0000000000000000000000000000000000000000;;		useRealProxier bool,
0000000000000000000000000000000000000000;;	) (*HollowProxy, error) {
0000000000000000000000000000000000000000;;		// Create proxier and service/endpoint handlers.
0000000000000000000000000000000000000000;;		var proxier proxy.ProxyProvider
0000000000000000000000000000000000000000;;		var serviceHandler proxyconfig.ServiceHandler
0000000000000000000000000000000000000000;;		var endpointsHandler proxyconfig.EndpointsHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if useRealProxier {
0000000000000000000000000000000000000000;;			// Real proxier with fake iptables, sysctl, etc underneath it.
0000000000000000000000000000000000000000;;			//var err error
0000000000000000000000000000000000000000;;			proxierIPTables, err := iptables.NewProxier(
0000000000000000000000000000000000000000;;				iptInterface,
0000000000000000000000000000000000000000;;				sysctl,
0000000000000000000000000000000000000000;;				execer,
0000000000000000000000000000000000000000;;				30*time.Second,
0000000000000000000000000000000000000000;;				5*time.Second,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				0,
0000000000000000000000000000000000000000;;				"10.0.0.0/8",
0000000000000000000000000000000000000000;;				nodeName,
0000000000000000000000000000000000000000;;				getNodeIP(client, nodeName),
0000000000000000000000000000000000000000;;				recorder,
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unable to create proxier: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			proxier = proxierIPTables
0000000000000000000000000000000000000000;;			serviceHandler = proxierIPTables
0000000000000000000000000000000000000000;;			endpointsHandler = proxierIPTables
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			proxier = &FakeProxier{}
0000000000000000000000000000000000000000;;			serviceHandler = &FakeProxier{}
0000000000000000000000000000000000000000;;			endpointsHandler = &FakeProxier{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a Hollow Proxy instance.
0000000000000000000000000000000000000000;;		nodeRef := &clientv1.ObjectReference{
0000000000000000000000000000000000000000;;			Kind:      "Node",
0000000000000000000000000000000000000000;;			Name:      nodeName,
0000000000000000000000000000000000000000;;			UID:       types.UID(nodeName),
0000000000000000000000000000000000000000;;			Namespace: "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &HollowProxy{
0000000000000000000000000000000000000000;;			ProxyServer: &proxyapp.ProxyServer{
0000000000000000000000000000000000000000;;				Client:                client,
0000000000000000000000000000000000000000;;				EventClient:           eventClient,
0000000000000000000000000000000000000000;;				IptInterface:          iptInterface,
0000000000000000000000000000000000000000;;				Proxier:               proxier,
0000000000000000000000000000000000000000;;				Broadcaster:           broadcaster,
0000000000000000000000000000000000000000;;				Recorder:              recorder,
0000000000000000000000000000000000000000;;				ProxyMode:             "fake",
0000000000000000000000000000000000000000;;				NodeRef:               nodeRef,
0000000000000000000000000000000000000000;;				OOMScoreAdj:           util.Int32Ptr(0),
0000000000000000000000000000000000000000;;				ResourceContainer:     "",
0000000000000000000000000000000000000000;;				ConfigSyncPeriod:      30 * time.Second,
0000000000000000000000000000000000000000;;				ServiceEventHandler:   serviceHandler,
0000000000000000000000000000000000000000;;				EndpointsEventHandler: endpointsHandler,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (hp *HollowProxy) Run() {
0000000000000000000000000000000000000000;;		if err := hp.ProxyServer.Run(); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error while running proxy: %v\n", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getNodeIP(client clientset.Interface, hostname string) net.IP {
0000000000000000000000000000000000000000;;		var nodeIP net.IP
0000000000000000000000000000000000000000;;		node, err := client.Core().Nodes().Get(hostname, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Warningf("Failed to retrieve node info: %v", err)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeIP, err = nodeutil.InternalGetNodeHostIP(node)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Warningf("Failed to retrieve node IP: %v", err)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nodeIP
0000000000000000000000000000000000000000;;	}
