0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
422cc743cb930fed260d2d2366c6e4bbbde42586;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package abac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/apis/abac"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/abac/v0"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/abac/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyFile(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := newWithContents(t, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOneLineFileNoNewLine(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := newWithContents(t, `{"user":"scheduler",  "readonly": true, "resource": "pods", "namespace":"ns1"}`)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTwoLineFile(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := newWithContents(t, `{"user":"scheduler",  "readonly": true, "resource": "pods"}
0000000000000000000000000000000000000000;;	{"user":"scheduler",  "readonly": true, "resource": "services"}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test the file that we will point users at as an example.
0000000000000000000000000000000000000000;;	func TestExampleFile(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := NewFromFile("./example_policy_file.jsonl")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizeV0(t *testing.T) {
0000000000000000000000000000000000000000;;		a, err := newWithContents(t, `{                    "readonly": true, "resource": "events"   }
0000000000000000000000000000000000000000;;	{"user":"scheduler", "readonly": true, "resource": "pods"     }
0000000000000000000000000000000000000000;;	{"user":"scheduler",                   "resource": "bindings" }
0000000000000000000000000000000000000000;;	{"user":"kubelet",   "readonly": true, "resource": "bindings" }
0000000000000000000000000000000000000000;;	{"user":"kubelet",                     "resource": "events"   }
0000000000000000000000000000000000000000;;	{"user":"alice",                                              "namespace": "projectCaribou"}
0000000000000000000000000000000000000000;;	{"user":"bob",       "readonly": true,                        "namespace": "projectCaribou"}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticatedGroup := []string{user.AllAuthenticated}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uScheduler := user.DefaultInfo{Name: "scheduler", UID: "uid1", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uAlice := user.DefaultInfo{Name: "alice", UID: "uid3", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uChuck := user.DefaultInfo{Name: "chuck", UID: "uid5", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			User        user.DefaultInfo
0000000000000000000000000000000000000000;;			Verb        string
0000000000000000000000000000000000000000;;			Resource    string
0000000000000000000000000000000000000000;;			NS          string
0000000000000000000000000000000000000000;;			APIGroup    string
0000000000000000000000000000000000000000;;			Path        string
0000000000000000000000000000000000000000;;			ExpectAllow bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Scheduler can read pods
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "list", Resource: "pods", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "list", Resource: "pods", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// Scheduler cannot write pods
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "create", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "create", Resource: "pods", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// Scheduler can write bindings
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "get", Resource: "bindings", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "get", Resource: "bindings", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Alice can read and write anything in the right namespace.
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "pods", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "widgets", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "pods", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "widgets", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "foo", NS: "projectCaribou", APIGroup: "bar", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// .. but not the wrong namespace.
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "widgets", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Chuck can read events, since anyone can.
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "events", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "events", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// Chuck can't do other things.
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "update", Resource: "events", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "floop", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// Chunk can't access things with no kind or namespace
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/", Resource: "", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			attr := authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User:      &tc.User,
0000000000000000000000000000000000000000;;				Verb:      tc.Verb,
0000000000000000000000000000000000000000;;				Resource:  tc.Resource,
0000000000000000000000000000000000000000;;				Namespace: tc.NS,
0000000000000000000000000000000000000000;;				APIGroup:  tc.APIGroup,
0000000000000000000000000000000000000000;;				Path:      tc.Path,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ResourceRequest: len(tc.NS) > 0 || len(tc.Resource) > 0,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authorized, _, _ := a.Authorize(attr)
0000000000000000000000000000000000000000;;			if tc.ExpectAllow != authorized {
0000000000000000000000000000000000000000;;				t.Logf("tc: %v -> attr %v", tc, attr)
0000000000000000000000000000000000000000;;				t.Errorf("%d: Expected allowed=%v but actually allowed=%v\n\t%v",
0000000000000000000000000000000000000000;;					i, tc.ExpectAllow, authorized, tc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizeV1beta1(t *testing.T) {
0000000000000000000000000000000000000000;;		a, err := newWithContents(t,
0000000000000000000000000000000000000000;;			`
0000000000000000000000000000000000000000;;			 # Comment line, after a blank line
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"*",         "readonly": true,                                                        "nonResourcePath": "/api"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"*",                                                                                  "nonResourcePath": "/custom"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"*",                                                                                  "nonResourcePath": "/root/*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"noresource",                                                                         "nonResourcePath": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"*",         "readonly": true, "resource": "events",   "namespace": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"scheduler", "readonly": true, "resource": "pods",     "namespace": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"scheduler",                   "resource": "bindings", "namespace": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"kubelet",   "readonly": true, "resource": "bindings", "namespace": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"kubelet",                     "resource": "events",   "namespace": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"alice",                       "resource": "*",        "namespace": "projectCaribou"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"bob",       "readonly": true, "resource": "*",        "namespace": "projectCaribou"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"debbie",                      "resource": "pods",     "namespace": "projectCaribou"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"apigroupuser",                "resource": "*",        "namespace": "projectAnyGroup",   "apiGroup": "*"}}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"apigroupuser",                "resource": "*",        "namespace": "projectEmptyGroup", "apiGroup": "" }}
0000000000000000000000000000000000000000;;			 {"apiVersion":"abac.authorization.kubernetes.io/v1beta1","kind":"Policy","spec":{"user":"apigroupuser",                "resource": "*",        "namespace": "projectXGroup",     "apiGroup": "x"}}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to read policy file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticatedGroup := []string{user.AllAuthenticated}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uScheduler := user.DefaultInfo{Name: "scheduler", UID: "uid1", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uAlice := user.DefaultInfo{Name: "alice", UID: "uid3", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uChuck := user.DefaultInfo{Name: "chuck", UID: "uid5", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uDebbie := user.DefaultInfo{Name: "debbie", UID: "uid6", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uNoResource := user.DefaultInfo{Name: "noresource", UID: "uid7", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;		uAPIGroup := user.DefaultInfo{Name: "apigroupuser", UID: "uid8", Groups: authenticatedGroup}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			User        user.DefaultInfo
0000000000000000000000000000000000000000;;			Verb        string
0000000000000000000000000000000000000000;;			Resource    string
0000000000000000000000000000000000000000;;			APIGroup    string
0000000000000000000000000000000000000000;;			NS          string
0000000000000000000000000000000000000000;;			Path        string
0000000000000000000000000000000000000000;;			ExpectAllow bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Scheduler can read pods
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "list", Resource: "pods", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "list", Resource: "pods", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// Scheduler cannot write pods
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "create", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "create", Resource: "pods", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// Scheduler can write bindings
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "get", Resource: "bindings", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uScheduler, Verb: "get", Resource: "bindings", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Alice can read and write anything in the right namespace.
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "pods", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "widgets", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "pods", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "widgets", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "update", Resource: "", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// .. but not the wrong namespace.
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "widgets", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uAlice, Verb: "get", Resource: "", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Debbie can write to pods in the right namespace
0000000000000000000000000000000000000000;;			{User: uDebbie, Verb: "update", Resource: "pods", NS: "projectCaribou", ExpectAllow: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Chuck can read events, since anyone can.
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "events", NS: "ns1", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "events", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// Chuck can't do other things.
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "update", Resource: "events", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "pods", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Resource: "floop", NS: "ns1", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// Chuck can't access things with no resource or namespace
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/", Resource: "", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// but can access /api
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/api", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// though he cannot write to it
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "create", Path: "/api", Resource: "", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// while he can write to /custom
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "update", Path: "/custom", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// he cannot get "/root"
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/root", Resource: "", NS: "", ExpectAllow: false},
0000000000000000000000000000000000000000;;			// but can get any subpath
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/root/", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uChuck, Verb: "get", Path: "/root/test/1/2/3", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// the user "noresource" can get any non-resource request
0000000000000000000000000000000000000000;;			{User: uNoResource, Verb: "get", Path: "", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uNoResource, Verb: "get", Path: "/", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uNoResource, Verb: "get", Path: "/foo/bar/baz", Resource: "", NS: "", ExpectAllow: true},
0000000000000000000000000000000000000000;;			// but cannot get any request where IsResourceRequest() == true
0000000000000000000000000000000000000000;;			{User: uNoResource, Verb: "get", Path: "/", Resource: "", NS: "bar", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uNoResource, Verb: "get", Path: "/foo/bar/baz", Resource: "foo", NS: "bar", ExpectAllow: false},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Test APIGroup matching
0000000000000000000000000000000000000000;;			{User: uAPIGroup, Verb: "get", APIGroup: "x", Resource: "foo", NS: "projectAnyGroup", ExpectAllow: true},
0000000000000000000000000000000000000000;;			{User: uAPIGroup, Verb: "get", APIGroup: "x", Resource: "foo", NS: "projectEmptyGroup", ExpectAllow: false},
0000000000000000000000000000000000000000;;			{User: uAPIGroup, Verb: "get", APIGroup: "x", Resource: "foo", NS: "projectXGroup", ExpectAllow: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			attr := authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User:            &tc.User,
0000000000000000000000000000000000000000;;				Verb:            tc.Verb,
0000000000000000000000000000000000000000;;				Resource:        tc.Resource,
0000000000000000000000000000000000000000;;				APIGroup:        tc.APIGroup,
0000000000000000000000000000000000000000;;				Namespace:       tc.NS,
0000000000000000000000000000000000000000;;				ResourceRequest: len(tc.NS) > 0 || len(tc.Resource) > 0,
0000000000000000000000000000000000000000;;				Path:            tc.Path,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// t.Logf("tc %2v: %v -> attr %v", i, tc, attr)
0000000000000000000000000000000000000000;;			authorized, _, _ := a.Authorize(attr)
0000000000000000000000000000000000000000;;			if tc.ExpectAllow != authorized {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Expected allowed=%v but actually allowed=%v, for case %+v & %+v",
0000000000000000000000000000000000000000;;					i, tc.ExpectAllow, authorized, tc, attr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSubjectMatches(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			User        user.DefaultInfo
0000000000000000000000000000000000000000;;			Policy      runtime.Object
0000000000000000000000000000000000000000;;			ExpectMatch bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"v0 empty policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 * user policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "*",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 * group policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "*",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 empty policy matches authed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 empty policy matches authed user with groups": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"a", "b", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v0 user policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user policy does not match different user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Bar", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user policy is case-sensitive": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user policy does not match substring": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "FooBar", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user policy matches username": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v0 group policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "Foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 group policy does not match user in different group": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "FooBar", Groups: []string{"B", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "A",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 group policy is case-sensitive": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "b",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 group policy does not match substring": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "BBB", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "B",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 group policy matches user in group": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "",
0000000000000000000000000000000000000000;;					Group: "B",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v0 user and group policy requires user match": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Bar", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "B",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user and group policy requires group match": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "D",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v0 user and group policy matches": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:  "Foo",
0000000000000000000000000000000000000000;;					Group: "B",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v1 empty policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 * user policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "*",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 * group policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 empty policy does not match authed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 empty policy does not match authed user with groups": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"a", "b", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v1 user policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user policy does not match different user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Bar", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user policy is case-sensitive": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user policy does not match substring": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "FooBar", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user policy matches username": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v1 group policy does not match unauthed user": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "system:anonymous", Groups: []string{"system:unauthenticated"}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "Foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 group policy does not match user in different group": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "FooBar", Groups: []string{"B", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "A",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 group policy is case-sensitive": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 group policy does not match substring": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "BBB", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "B",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 group policy matches user in group": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "",
0000000000000000000000000000000000000000;;						Group: "B",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"v1 user and group policy requires user match": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Bar", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "B",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user and group policy requires group match": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "D",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1 user and group policy matches": {
0000000000000000000000000000000000000000;;				User: user.DefaultInfo{Name: "Foo", Groups: []string{"A", "B", "C", user.AllAuthenticated}},
0000000000000000000000000000000000000000;;				Policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:  "Foo",
0000000000000000000000000000000000000000;;						Group: "B",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testCases {
0000000000000000000000000000000000000000;;			policy := &api.Policy{}
0000000000000000000000000000000000000000;;			if err := api.Scheme.Convert(tc.Policy, policy, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: error converting: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			attr := authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User: &tc.User,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			actualMatch := subjectMatches(*policy, attr)
0000000000000000000000000000000000000000;;			if tc.ExpectMatch != actualMatch {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Expected actorMatches=%v but actually got=%v",
0000000000000000000000000000000000000000;;					k, tc.ExpectMatch, actualMatch)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWithContents(t *testing.T, contents string) (authorizer.Authorizer, error) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "abac_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error creating policyfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(f.Name(), []byte(contents), 0700); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error writing policyfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pl, err := NewFromFile(f.Name())
0000000000000000000000000000000000000000;;		return pl, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			policy  runtime.Object
0000000000000000000000000000000000000000;;			attr    authorizer.Attributes
0000000000000000000000000000000000000000;;			matches bool
0000000000000000000000000000000000000000;;			name    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// v0 mismatches
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					Readonly: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Verb: "create",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v0 read-only mismatch",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "bar",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v0 user name mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					Resource: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resource:        "bar",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v0 resource mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User:      "foo",
0000000000000000000000000000000000000000;;					Resource:  "foo",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resource:        "foo",
0000000000000000000000000000000000000000;;					Namespace:       "foo",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v0 namespace mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// v0 matches
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v0 null resource",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					Readonly: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Verb: "get",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v0 read-only match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					User: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v0 user name match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v0.Policy{
0000000000000000000000000000000000000000;;					Resource: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resource:        "foo",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v0 resource match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// v1 mismatches
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 null",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "bar",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 user name mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:     "*",
0000000000000000000000000000000000000000;;						Readonly: true,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 read-only mismatch",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:     "*",
0000000000000000000000000000000000000000;;						Resource: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resource:        "bar",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 resource mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:      "foo",
0000000000000000000000000000000000000000;;						Namespace: "barr",
0000000000000000000000000000000000000000;;						Resource:  "baz",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Namespace:       "bar",
0000000000000000000000000000000000000000;;					Resource:        "baz",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 namespace mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:            "*",
0000000000000000000000000000000000000000;;						NonResourcePath: "/api",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Path:            "/api2",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 non-resource mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:            "*",
0000000000000000000000000000000000000000;;						NonResourcePath: "/api/*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Path:            "/api2/foo",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: false,
0000000000000000000000000000000000000000;;				name:    "v1 non-resource wildcard subpath mis-match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// v1 matches
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 user match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User: "*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 user wildcard match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						Group: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{"bar", user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 group match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						Group: "*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{"bar", user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 group wildcard match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:     "*",
0000000000000000000000000000000000000000;;						Readonly: true,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Verb:            "get",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 read-only match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:     "*",
0000000000000000000000000000000000000000;;						Resource: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resource:        "foo",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 resource match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:      "foo",
0000000000000000000000000000000000000000;;						Namespace: "bar",
0000000000000000000000000000000000000000;;						Resource:  "baz",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Namespace:       "bar",
0000000000000000000000000000000000000000;;					Resource:        "baz",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 namespace match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:            "*",
0000000000000000000000000000000000000000;;						NonResourcePath: "/api",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Path:            "/api",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 non-resource match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:            "*",
0000000000000000000000000000000000000000;;						NonResourcePath: "*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Path:            "/api",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 non-resource wildcard match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy: &v1beta1.Policy{
0000000000000000000000000000000000000000;;					Spec: v1beta1.PolicySpec{
0000000000000000000000000000000000000000;;						User:            "*",
0000000000000000000000000000000000000000;;						NonResourcePath: "/api/*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attr: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User: &user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Groups: []string{user.AllAuthenticated},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Path:            "/api/foo",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				matches: true,
0000000000000000000000000000000000000000;;				name:    "v1 non-resource wildcard subpath match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			policy := &api.Policy{}
0000000000000000000000000000000000000000;;			if err := api.Scheme.Convert(test.policy, policy, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: error converting: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			matches := matches(*policy, test.attr)
0000000000000000000000000000000000000000;;			if test.matches != matches {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected: %t, saw: %t", test.name, test.matches, matches)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
