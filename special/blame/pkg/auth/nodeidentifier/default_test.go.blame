0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dbafe90a5a59dccee421693600a9f4edaac03bd0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package nodeidentifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultNodeIdentifier_NodeIdentity(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;			user           user.Info
0000000000000000000000000000000000000000;;			expectNodeName string
0000000000000000000000000000000000000000;;			expectIsNode   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "nil user",
0000000000000000000000000000000000000000;;				user:           nil,
0000000000000000000000000000000000000000;;				expectNodeName: "",
0000000000000000000000000000000000000000;;				expectIsNode:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "node username without group",
0000000000000000000000000000000000000000;;				user:           &user.DefaultInfo{Name: "system:node:foo"},
0000000000000000000000000000000000000000;;				expectNodeName: "",
0000000000000000000000000000000000000000;;				expectIsNode:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "node group without username",
0000000000000000000000000000000000000000;;				user:           &user.DefaultInfo{Name: "foo", Groups: []string{"system:nodes"}},
0000000000000000000000000000000000000000;;				expectNodeName: "",
0000000000000000000000000000000000000000;;				expectIsNode:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "node group and username",
0000000000000000000000000000000000000000;;				user:           &user.DefaultInfo{Name: "system:node:foo", Groups: []string{"system:nodes"}},
0000000000000000000000000000000000000000;;				expectNodeName: "foo",
0000000000000000000000000000000000000000;;				expectIsNode:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			t.Run(tt.name, func(t *testing.T) {
0000000000000000000000000000000000000000;;				nodeName, isNode := NewDefaultNodeIdentifier().NodeIdentity(tt.user)
0000000000000000000000000000000000000000;;				if nodeName != tt.expectNodeName {
0000000000000000000000000000000000000000;;					t.Errorf("DefaultNodeIdentifier.NodeIdentity() got = %v, want %v", nodeName, tt.expectNodeName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if isNode != tt.expectIsNode {
0000000000000000000000000000000000000000;;					t.Errorf("DefaultNodeIdentifier.NodeIdentity() got1 = %v, want %v", isNode, tt.expectIsNode)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
