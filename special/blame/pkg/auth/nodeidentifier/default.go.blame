0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dbafe90a5a59dccee421693600a9f4edaac03bd0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package nodeidentifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultNodeIdentifier returns a default NodeIdentifier implementation,
0000000000000000000000000000000000000000;;	// which returns isNode=true if the user groups contain the system:nodes group
0000000000000000000000000000000000000000;;	// and the user name matches the format system:node:<nodeName>, and populates
0000000000000000000000000000000000000000;;	// nodeName if isNode is true
0000000000000000000000000000000000000000;;	func NewDefaultNodeIdentifier() NodeIdentifier {
0000000000000000000000000000000000000000;;		return defaultNodeIdentifier{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultNodeIdentifier implements NodeIdentifier
0000000000000000000000000000000000000000;;	type defaultNodeIdentifier struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nodeUserNamePrefix is the prefix for usernames in the form `system:node:<nodeName>`
0000000000000000000000000000000000000000;;	const nodeUserNamePrefix = "system:node:"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeIdentity returns isNode=true if the user groups contain the system:nodes
0000000000000000000000000000000000000000;;	// group and the user name matches the format system:node:<nodeName>, and
0000000000000000000000000000000000000000;;	// populates nodeName if isNode is true
0000000000000000000000000000000000000000;;	func (defaultNodeIdentifier) NodeIdentity(u user.Info) (string, bool) {
0000000000000000000000000000000000000000;;		// Make sure we're a node, and can parse the node name
0000000000000000000000000000000000000000;;		if u == nil {
0000000000000000000000000000000000000000;;			return "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		userName := u.GetName()
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(userName, nodeUserNamePrefix) {
0000000000000000000000000000000000000000;;			return "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		isNode := false
0000000000000000000000000000000000000000;;		for _, g := range u.GetGroups() {
0000000000000000000000000000000000000000;;			if g == user.NodesGroup {
0000000000000000000000000000000000000000;;				isNode = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isNode {
0000000000000000000000000000000000000000;;			return "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeName := strings.TrimPrefix(userName, nodeUserNamePrefix)
0000000000000000000000000000000000000000;;		return nodeName, true
0000000000000000000000000000000000000000;;	}
