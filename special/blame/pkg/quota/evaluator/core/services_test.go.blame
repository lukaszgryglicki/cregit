0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ee95d87bcd4eefc5de56e2d35d5fd6b4a9891104;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceEvaluatorMatchesResources(t *testing.T) {
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewServiceEvaluator(kubeClient)
0000000000000000000000000000000000000000;;		// we give a lot of resources
0000000000000000000000000000000000000000;;		input := []api.ResourceName{
0000000000000000000000000000000000000000;;			api.ResourceConfigMaps,
0000000000000000000000000000000000000000;;			api.ResourceCPU,
0000000000000000000000000000000000000000;;			api.ResourceServices,
0000000000000000000000000000000000000000;;			api.ResourceServicesNodePorts,
0000000000000000000000000000000000000000;;			api.ResourceServicesLoadBalancers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// but we only match these...
0000000000000000000000000000000000000000;;		expected := quota.ToSet([]api.ResourceName{
0000000000000000000000000000000000000000;;			api.ResourceServices,
0000000000000000000000000000000000000000;;			api.ResourceServicesNodePorts,
0000000000000000000000000000000000000000;;			api.ResourceServicesLoadBalancers,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		actual := quota.ToSet(evaluator.MatchingResources(input))
0000000000000000000000000000000000000000;;		if !expected.Equal(actual) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, actual: %v", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceEvaluatorUsage(t *testing.T) {
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewServiceEvaluator(kubeClient)
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			service *api.Service
0000000000000000000000000000000000000000;;			usage   api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"loadbalancer": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceServicesNodePorts:     resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceServicesLoadBalancers: resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServices:              resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"loadbalancer_ports": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27443,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceServicesNodePorts:     resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServicesLoadBalancers: resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServices:              resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"clusterip": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceServices:              resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServicesNodePorts:     resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceServicesLoadBalancers: resource.MustParse("0"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nodeports": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27443,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceServices:              resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServicesNodePorts:     resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServicesLoadBalancers: resource.MustParse("0"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multi-nodeports": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27443,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27444,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceServices:              resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServicesNodePorts:     resource.MustParse("2"),
0000000000000000000000000000000000000000;;					api.ResourceServicesLoadBalancers: resource.MustParse("0"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			actual, err := evaluator.Usage(testCase.service)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !quota.Equals(testCase.usage, actual) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.usage, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceConstraintsFunc(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			service  *api.Service
0000000000000000000000000000000000000000;;			required []api.ResourceName
0000000000000000000000000000000000000000;;			err      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"loadbalancer": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceServicesLoadBalancers},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"clusterip": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceServicesLoadBalancers, api.ResourceServices},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nodeports": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27443,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceServicesNodePorts},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multi-nodeports": {
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27443,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: 27444,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceServicesNodePorts},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewServiceEvaluator(kubeClient)
0000000000000000000000000000000000000000;;		for testName, test := range testCases {
0000000000000000000000000000000000000000;;			err := evaluator.Constraints(test.required, test.service)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err != nil && len(test.err) == 0,
0000000000000000000000000000000000000000;;				err == nil && len(test.err) != 0,
0000000000000000000000000000000000000000;;				err != nil && test.err != err.Error():
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
