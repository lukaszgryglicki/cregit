0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6500db57949cbd8df90efbdff3251d221998769c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota/generic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewResourceQuotaEvaluator returns an evaluator that can evaluate resource quotas
0000000000000000000000000000000000000000;;	func NewResourceQuotaEvaluator(kubeClient clientset.Interface) quota.Evaluator {
0000000000000000000000000000000000000000;;		return &generic.ObjectCountEvaluator{
0000000000000000000000000000000000000000;;			AllowCreateOnUpdate: false,
0000000000000000000000000000000000000000;;			InternalGroupKind:   api.Kind("ResourceQuota"),
0000000000000000000000000000000000000000;;			ResourceName:        api.ResourceQuotas,
0000000000000000000000000000000000000000;;			ListFuncByNamespace: func(namespace string, options metav1.ListOptions) ([]runtime.Object, error) {
0000000000000000000000000000000000000000;;				itemList, err := kubeClient.Core().ResourceQuotas(namespace).List(options)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				results := make([]runtime.Object, 0, len(itemList.Items))
0000000000000000000000000000000000000000;;				for i := range itemList.Items {
0000000000000000000000000000000000000000;;					results = append(results, &itemList.Items[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return results, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
