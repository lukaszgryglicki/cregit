0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
62261dea10261b658867ef893c992bb7203092a1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeClaim(name string, namespace string, spec api.PersistentVolumeClaimSpec) *api.PersistentVolumeClaim {
0000000000000000000000000000000000000000;;		return &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPersistentVolumeClaimsConstraintsFunc(t *testing.T) {
0000000000000000000000000000000000000000;;		classGold := "gold"
0000000000000000000000000000000000000000;;		classBronze := "bronze"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validClaim := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validClaimGoldStorageClass := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			StorageClassName: &classGold,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validClaimBronzeStorageClass := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			StorageClassName: &classBronze,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		missingStorage := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		missingGoldStorage := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			StorageClassName: &classGold,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			pvc      *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			required []api.ResourceName
0000000000000000000000000000000000000000;;			err      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"missing storage": {
0000000000000000000000000000000000000000;;				pvc:      missingStorage,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceRequestsStorage},
0000000000000000000000000000000000000000;;				err:      `must specify requests.storage`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing gold storage": {
0000000000000000000000000000000000000000;;				pvc:      missingGoldStorage,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{ResourceByStorageClass(classGold, api.ResourceRequestsStorage)},
0000000000000000000000000000000000000000;;				err:      `must specify gold.storageclass.storage.k8s.io/requests.storage`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-claim-quota-storage": {
0000000000000000000000000000000000000000;;				pvc:      validClaim,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceRequestsStorage},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-claim-quota-pvc": {
0000000000000000000000000000000000000000;;				pvc:      validClaim,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourcePersistentVolumeClaims},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-claim-quota-storage-and-pvc": {
0000000000000000000000000000000000000000;;				pvc:      validClaim,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceRequestsStorage, api.ResourcePersistentVolumeClaims},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-claim-gold-quota-gold": {
0000000000000000000000000000000000000000;;				pvc: validClaimGoldStorageClass,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{
0000000000000000000000000000000000000000;;					api.ResourceRequestsStorage,
0000000000000000000000000000000000000000;;					api.ResourcePersistentVolumeClaims,
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourceRequestsStorage),
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourcePersistentVolumeClaims),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid-claim-bronze-with-quota-gold": {
0000000000000000000000000000000000000000;;				pvc: validClaimBronzeStorageClass,
0000000000000000000000000000000000000000;;				required: []api.ResourceName{
0000000000000000000000000000000000000000;;					api.ResourceRequestsStorage,
0000000000000000000000000000000000000000;;					api.ResourcePersistentVolumeClaims,
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourceRequestsStorage),
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourcePersistentVolumeClaims),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewPersistentVolumeClaimEvaluator(kubeClient, nil)
0000000000000000000000000000000000000000;;		for testName, test := range testCases {
0000000000000000000000000000000000000000;;			err := evaluator.Constraints(test.required, test.pvc)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err != nil && len(test.err) == 0,
0000000000000000000000000000000000000000;;				err == nil && len(test.err) != 0,
0000000000000000000000000000000000000000;;				err != nil && test.err != err.Error():
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPersistentVolumeClaimEvaluatorUsage(t *testing.T) {
0000000000000000000000000000000000000000;;		classGold := "gold"
0000000000000000000000000000000000000000;;		validClaim := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		validClaimByStorageClass := testVolumeClaim("foo", "ns", api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:      "key2",
0000000000000000000000000000000000000000;;						Operator: "Exists",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AccessModes: []api.PersistentVolumeAccessMode{
0000000000000000000000000000000000000000;;				api.ReadWriteOnce,
0000000000000000000000000000000000000000;;				api.ReadOnlyMany,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;				Requests: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			StorageClassName: &classGold,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewPersistentVolumeClaimEvaluator(kubeClient, nil)
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			pvc   *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			usage api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"pvc-usage": {
0000000000000000000000000000000000000000;;				pvc: validClaim,
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsStorage:        resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePersistentVolumeClaims: resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pvc-usage-by-class": {
0000000000000000000000000000000000000000;;				pvc: validClaimByStorageClass,
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsStorage:                                           resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePersistentVolumeClaims:                                    resource.MustParse("1"),
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourceRequestsStorage):        resource.MustParse("10Gi"),
0000000000000000000000000000000000000000;;					ResourceByStorageClass(classGold, api.ResourcePersistentVolumeClaims): resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			actual, err := evaluator.Usage(testCase.pvc)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !quota.Equals(testCase.usage, actual) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.usage, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
