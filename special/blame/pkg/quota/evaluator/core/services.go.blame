0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6500db57949cbd8df90efbdff3251d221998769c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota/generic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceResources are the set of resources managed by quota associated with services.
0000000000000000000000000000000000000000;;	var serviceResources = []api.ResourceName{
0000000000000000000000000000000000000000;;		api.ResourceServices,
0000000000000000000000000000000000000000;;		api.ResourceServicesNodePorts,
0000000000000000000000000000000000000000;;		api.ResourceServicesLoadBalancers,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServiceEvaluator returns an evaluator that can evaluate service quotas
0000000000000000000000000000000000000000;;	func NewServiceEvaluator(kubeClient clientset.Interface) quota.Evaluator {
0000000000000000000000000000000000000000;;		return &serviceEvaluator{
0000000000000000000000000000000000000000;;			listFuncByNamespace: func(namespace string, options metav1.ListOptions) ([]runtime.Object, error) {
0000000000000000000000000000000000000000;;				itemList, err := kubeClient.Core().Services(namespace).List(options)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				results := make([]runtime.Object, 0, len(itemList.Items))
0000000000000000000000000000000000000000;;				for i := range itemList.Items {
0000000000000000000000000000000000000000;;					results = append(results, &itemList.Items[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return results, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceEvaluator knows how to measure usage for services.
0000000000000000000000000000000000000000;;	type serviceEvaluator struct {
0000000000000000000000000000000000000000;;		// knows how to list items by namespace
0000000000000000000000000000000000000000;;		listFuncByNamespace generic.ListFuncByNamespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constraints verifies that all required resources are present on the item
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) Constraints(required []api.ResourceName, item runtime.Object) error {
0000000000000000000000000000000000000000;;		service, ok := item.(*api.Service)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected input object %v", item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requiredSet := quota.ToSet(required)
0000000000000000000000000000000000000000;;		missingSet := sets.NewString()
0000000000000000000000000000000000000000;;		serviceUsage, err := p.Usage(service)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serviceSet := quota.ToSet(quota.ResourceNames(serviceUsage))
0000000000000000000000000000000000000000;;		if diff := requiredSet.Difference(serviceSet); len(diff) > 0 {
0000000000000000000000000000000000000000;;			missingSet.Insert(diff.List()...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(missingSet) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("must specify %s", strings.Join(missingSet.List(), ","))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupKind that this evaluator tracks
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) GroupKind() schema.GroupKind {
0000000000000000000000000000000000000000;;		return api.Kind("Service")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles returns true of the evaluator should handle the specified operation.
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) Handles(operation admission.Operation) bool {
0000000000000000000000000000000000000000;;		// We handle create and update because a service type can change.
0000000000000000000000000000000000000000;;		return admission.Create == operation || admission.Update == operation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Matches returns true if the evaluator matches the specified quota with the provided input item
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) Matches(resourceQuota *api.ResourceQuota, item runtime.Object) (bool, error) {
0000000000000000000000000000000000000000;;		return generic.Matches(resourceQuota, item, p.MatchingResources, generic.MatchesNoScopeFunc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchingResources takes the input specified list of resources and returns the set of resources it matches.
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) MatchingResources(input []api.ResourceName) []api.ResourceName {
0000000000000000000000000000000000000000;;		return quota.Intersection(input, serviceResources)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convert the input object to an internal service object or error.
0000000000000000000000000000000000000000;;	func toInternalServiceOrError(obj runtime.Object) (*api.Service, error) {
0000000000000000000000000000000000000000;;		svc := &api.Service{}
0000000000000000000000000000000000000000;;		switch t := obj.(type) {
0000000000000000000000000000000000000000;;		case *v1.Service:
0000000000000000000000000000000000000000;;			if err := k8s_api_v1.Convert_v1_Service_To_api_Service(t, svc, nil); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *api.Service:
0000000000000000000000000000000000000000;;			svc = t
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("expect *api.Service or *v1.Service, got %v", t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return svc, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage knows how to measure usage associated with pods
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) Usage(item runtime.Object) (api.ResourceList, error) {
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		svc, err := toInternalServiceOrError(item)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ports := len(svc.Spec.Ports)
0000000000000000000000000000000000000000;;		// default service usage
0000000000000000000000000000000000000000;;		result[api.ResourceServices] = *(resource.NewQuantity(1, resource.DecimalSI))
0000000000000000000000000000000000000000;;		result[api.ResourceServicesLoadBalancers] = resource.Quantity{Format: resource.DecimalSI}
0000000000000000000000000000000000000000;;		result[api.ResourceServicesNodePorts] = resource.Quantity{Format: resource.DecimalSI}
0000000000000000000000000000000000000000;;		switch svc.Spec.Type {
0000000000000000000000000000000000000000;;		case api.ServiceTypeNodePort:
0000000000000000000000000000000000000000;;			// node port services need to count node ports
0000000000000000000000000000000000000000;;			value := resource.NewQuantity(int64(ports), resource.DecimalSI)
0000000000000000000000000000000000000000;;			result[api.ResourceServicesNodePorts] = *value
0000000000000000000000000000000000000000;;		case api.ServiceTypeLoadBalancer:
0000000000000000000000000000000000000000;;			// load balancer services need to count node ports and load balancers
0000000000000000000000000000000000000000;;			value := resource.NewQuantity(int64(ports), resource.DecimalSI)
0000000000000000000000000000000000000000;;			result[api.ResourceServicesNodePorts] = *value
0000000000000000000000000000000000000000;;			result[api.ResourceServicesLoadBalancers] = *(resource.NewQuantity(1, resource.DecimalSI))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageStats calculates aggregate usage for the object.
0000000000000000000000000000000000000000;;	func (p *serviceEvaluator) UsageStats(options quota.UsageStatsOptions) (quota.UsageStats, error) {
0000000000000000000000000000000000000000;;		return generic.CalculateUsageStats(options, p.listFuncByNamespace, generic.MatchesNoScopeFunc, p.Usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ quota.Evaluator = &serviceEvaluator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QuotaServiceType returns true if the service type is eligible to track against a quota
0000000000000000000000000000000000000000;;	func QuotaServiceType(service *v1.Service) bool {
0000000000000000000000000000000000000000;;		switch service.Spec.Type {
0000000000000000000000000000000000000000;;		case v1.ServiceTypeNodePort, v1.ServiceTypeLoadBalancer:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//GetQuotaServiceType returns ServiceType if the service type is eligible to track against a quota, nor return ""
0000000000000000000000000000000000000000;;	func GetQuotaServiceType(service *v1.Service) v1.ServiceType {
0000000000000000000000000000000000000000;;		switch service.Spec.Type {
0000000000000000000000000000000000000000;;		case v1.ServiceTypeNodePort:
0000000000000000000000000000000000000000;;			return v1.ServiceTypeNodePort
0000000000000000000000000000000000000000;;		case v1.ServiceTypeLoadBalancer:
0000000000000000000000000000000000000000;;			return v1.ServiceTypeLoadBalancer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v1.ServiceType("")
0000000000000000000000000000000000000000;;	}
