0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
91cca6c42f90bf963305d5e158ac6b109f6263cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodConstraintsFunc(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			pod      *api.Pod
0000000000000000000000000000000000000000;;			required []api.ResourceName
0000000000000000000000000000000000000000;;			err      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"init container resource invalid": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: `spec.initContainers[0].resources.limits: Invalid value: "1m": must be greater than or equal to cpu request`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container resource invalid": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: `spec.containers[0].resources.limits: Invalid value: "1m": must be greater than or equal to cpu request`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"init container resource missing": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceMemory},
0000000000000000000000000000000000000000;;				err:      `must specify memory`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container resource missing": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				required: []api.ResourceName{api.ResourceMemory},
0000000000000000000000000000000000000000;;				err:      `must specify memory`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewPodEvaluator(kubeClient, nil)
0000000000000000000000000000000000000000;;		for testName, test := range testCases {
0000000000000000000000000000000000000000;;			err := evaluator.Constraints(test.required, test.pod)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err != nil && len(test.err) == 0,
0000000000000000000000000000000000000000;;				err == nil && len(test.err) != 0,
0000000000000000000000000000000000000000;;				err != nil && test.err != err.Error():
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodEvaluatorUsage(t *testing.T) {
0000000000000000000000000000000000000000;;		kubeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		evaluator := NewPodEvaluator(kubeClient, nil)
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			pod   *api.Pod
0000000000000000000000000000000000000000;;			usage api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"init container CPU": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsCPU: resource.MustParse("1m"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsCPU:   resource.MustParse("2m"),
0000000000000000000000000000000000000000;;					api.ResourcePods:        resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceCPU:         resource.MustParse("1m"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"init container MEM": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceMemory: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceMemory: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsMemory: resource.MustParse("1m"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsMemory:   resource.MustParse("2m"),
0000000000000000000000000000000000000000;;					api.ResourcePods:           resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:         resource.MustParse("1m"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container CPU": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceCPU: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceCPU: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsCPU: resource.MustParse("1m"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsCPU:   resource.MustParse("2m"),
0000000000000000000000000000000000000000;;					api.ResourcePods:        resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceCPU:         resource.MustParse("1m"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container MEM": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{{
0000000000000000000000000000000000000000;;							Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: api.ResourceList{api.ResourceMemory: resource.MustParse("1m")},
0000000000000000000000000000000000000000;;								Limits:   api.ResourceList{api.ResourceMemory: resource.MustParse("2m")},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsMemory: resource.MustParse("1m"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsMemory:   resource.MustParse("2m"),
0000000000000000000000000000000000000000;;					api.ResourcePods:           resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:         resource.MustParse("1m"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"init container maximums override sum of containers": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("4"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("100M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("8"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("200M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("1"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("50M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("2"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("100M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("1"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("50M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("2"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("100M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;									Requests: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("2"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("25M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Limits: api.ResourceList{
0000000000000000000000000000000000000000;;										api.ResourceCPU:    resource.MustParse("5"),
0000000000000000000000000000000000000000;;										api.ResourceMemory: resource.MustParse("50M"),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				usage: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceRequestsCPU:    resource.MustParse("4"),
0000000000000000000000000000000000000000;;					api.ResourceRequestsMemory: resource.MustParse("100M"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsCPU:      resource.MustParse("8"),
0000000000000000000000000000000000000000;;					api.ResourceLimitsMemory:   resource.MustParse("200M"),
0000000000000000000000000000000000000000;;					api.ResourcePods:           resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceCPU:            resource.MustParse("4"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:         resource.MustParse("100M"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			actual, err := evaluator.Usage(testCase.pod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s unexpected error: %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !quota.Equals(testCase.usage, actual) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.usage, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
