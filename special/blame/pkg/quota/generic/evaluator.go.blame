0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6500db57949cbd8df90efbdff3251d221998769c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResourceUsingInformerFunc returns a listing function based on the shared informer factory for the specified resource.
0000000000000000000000000000000000000000;;	func ListResourceUsingInformerFunc(f informers.SharedInformerFactory, resource schema.GroupVersionResource) ListFuncByNamespace {
0000000000000000000000000000000000000000;;		return func(namespace string, options metav1.ListOptions) ([]runtime.Object, error) {
0000000000000000000000000000000000000000;;			labelSelector, err := labels.Parse(options.LabelSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			informer, err := f.ForResource(resource)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return informer.Lister().ByNamespace(namespace).List(labelSelector)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListFuncByNamespace knows how to list resources in a namespace
0000000000000000000000000000000000000000;;	type ListFuncByNamespace func(namespace string, options metav1.ListOptions) ([]runtime.Object, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchesScopeFunc knows how to evaluate if an object matches a scope
0000000000000000000000000000000000000000;;	type MatchesScopeFunc func(scope api.ResourceQuotaScope, object runtime.Object) (bool, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageFunc knows how to measure usage associated with an object
0000000000000000000000000000000000000000;;	type UsageFunc func(object runtime.Object) (api.ResourceList, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchingResourceNamesFunc is a function that returns the list of resources matched
0000000000000000000000000000000000000000;;	type MatchingResourceNamesFunc func(input []api.ResourceName) []api.ResourceName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchesNoScopeFunc returns false on all match checks
0000000000000000000000000000000000000000;;	func MatchesNoScopeFunc(scope api.ResourceQuotaScope, object runtime.Object) (bool, error) {
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Matches returns true if the quota matches the specified item.
0000000000000000000000000000000000000000;;	func Matches(resourceQuota *api.ResourceQuota, item runtime.Object, matchFunc MatchingResourceNamesFunc, scopeFunc MatchesScopeFunc) (bool, error) {
0000000000000000000000000000000000000000;;		if resourceQuota == nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("expected non-nil quota")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// verify the quota matches on at least one resource
0000000000000000000000000000000000000000;;		matchResource := len(matchFunc(quota.ResourceNames(resourceQuota.Status.Hard))) > 0
0000000000000000000000000000000000000000;;		// by default, no scopes matches all
0000000000000000000000000000000000000000;;		matchScope := true
0000000000000000000000000000000000000000;;		for _, scope := range resourceQuota.Spec.Scopes {
0000000000000000000000000000000000000000;;			innerMatch, err := scopeFunc(scope, item)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			matchScope = matchScope && innerMatch
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return matchResource && matchScope, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CalculateUsageStats is a utility function that knows how to calculate aggregate usage.
0000000000000000000000000000000000000000;;	func CalculateUsageStats(options quota.UsageStatsOptions,
0000000000000000000000000000000000000000;;		listFunc ListFuncByNamespace,
0000000000000000000000000000000000000000;;		scopeFunc MatchesScopeFunc,
0000000000000000000000000000000000000000;;		usageFunc UsageFunc) (quota.UsageStats, error) {
0000000000000000000000000000000000000000;;		// default each tracked resource to zero
0000000000000000000000000000000000000000;;		result := quota.UsageStats{Used: api.ResourceList{}}
0000000000000000000000000000000000000000;;		for _, resourceName := range options.Resources {
0000000000000000000000000000000000000000;;			result.Used[resourceName] = resource.Quantity{Format: resource.DecimalSI}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		items, err := listFunc(options.Namespace, metav1.ListOptions{
0000000000000000000000000000000000000000;;			LabelSelector: labels.Everything().String(),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, fmt.Errorf("failed to list content: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, item := range items {
0000000000000000000000000000000000000000;;			// need to verify that the item matches the set of scopes
0000000000000000000000000000000000000000;;			matchesScopes := true
0000000000000000000000000000000000000000;;			for _, scope := range options.Scopes {
0000000000000000000000000000000000000000;;				innerMatch, err := scopeFunc(scope, item)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return result, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !innerMatch {
0000000000000000000000000000000000000000;;					matchesScopes = false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// only count usage if there was a match
0000000000000000000000000000000000000000;;			if matchesScopes {
0000000000000000000000000000000000000000;;				usage, err := usageFunc(item)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return result, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				result.Used = quota.Add(result.Used, usage)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectCountEvaluator provides an implementation for quota.Evaluator
0000000000000000000000000000000000000000;;	// that associates usage of the specified resource based on the number of items
0000000000000000000000000000000000000000;;	// returned by the specified listing function.
0000000000000000000000000000000000000000;;	type ObjectCountEvaluator struct {
0000000000000000000000000000000000000000;;		// AllowCreateOnUpdate if true will ensure the evaluator tracks create
0000000000000000000000000000000000000000;;		// and update operations.
0000000000000000000000000000000000000000;;		AllowCreateOnUpdate bool
0000000000000000000000000000000000000000;;		// GroupKind that this evaluator tracks.
0000000000000000000000000000000000000000;;		InternalGroupKind schema.GroupKind
0000000000000000000000000000000000000000;;		// A function that knows how to list resources by namespace.
0000000000000000000000000000000000000000;;		// TODO move to dynamic client in future
0000000000000000000000000000000000000000;;		ListFuncByNamespace ListFuncByNamespace
0000000000000000000000000000000000000000;;		// Name associated with this resource in the quota.
0000000000000000000000000000000000000000;;		ResourceName api.ResourceName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constraints returns an error if the configured resource name is not in the required set.
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) Constraints(required []api.ResourceName, item runtime.Object) error {
0000000000000000000000000000000000000000;;		if !quota.Contains(required, o.ResourceName) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing %s", o.ResourceName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupKind that this evaluator tracks
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) GroupKind() schema.GroupKind {
0000000000000000000000000000000000000000;;		return o.InternalGroupKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles returns true if the object count evaluator needs to track this operation.
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) Handles(operation admission.Operation) bool {
0000000000000000000000000000000000000000;;		return operation == admission.Create || (o.AllowCreateOnUpdate && operation == admission.Update)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Matches returns true if the evaluator matches the specified quota with the provided input item
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) Matches(resourceQuota *api.ResourceQuota, item runtime.Object) (bool, error) {
0000000000000000000000000000000000000000;;		return Matches(resourceQuota, item, o.MatchingResources, MatchesNoScopeFunc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchingResources takes the input specified list of resources and returns the set of resources it matches.
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) MatchingResources(input []api.ResourceName) []api.ResourceName {
0000000000000000000000000000000000000000;;		return quota.Intersection(input, []api.ResourceName{o.ResourceName})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage returns the resource usage for the specified object
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) Usage(object runtime.Object) (api.ResourceList, error) {
0000000000000000000000000000000000000000;;		quantity := resource.NewQuantity(1, resource.DecimalSI)
0000000000000000000000000000000000000000;;		return api.ResourceList{
0000000000000000000000000000000000000000;;			o.ResourceName: *quantity,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageStats calculates aggregate usage for the object.
0000000000000000000000000000000000000000;;	func (o *ObjectCountEvaluator) UsageStats(options quota.UsageStatsOptions) (quota.UsageStats, error) {
0000000000000000000000000000000000000000;;		return CalculateUsageStats(options, o.ListFuncByNamespace, MatchesNoScopeFunc, o.Usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verify implementation of interface at compile time.
0000000000000000000000000000000000000000;;	var _ quota.Evaluator = &ObjectCountEvaluator{}
