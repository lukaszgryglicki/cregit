0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6500db57949cbd8df90efbdff3251d221998769c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package quota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equals returns true if the two lists are equivalent
0000000000000000000000000000000000000000;;	func Equals(a api.ResourceList, b api.ResourceList) bool {
0000000000000000000000000000000000000000;;		for key, value1 := range a {
0000000000000000000000000000000000000000;;			value2, found := b[key]
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if value1.Cmp(value2) != 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, value1 := range b {
0000000000000000000000000000000000000000;;			value2, found := a[key]
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if value1.Cmp(value2) != 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// V1Equals returns true if the two lists are equivalent
0000000000000000000000000000000000000000;;	func V1Equals(a v1.ResourceList, b v1.ResourceList) bool {
0000000000000000000000000000000000000000;;		for key, value1 := range a {
0000000000000000000000000000000000000000;;			value2, found := b[key]
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if value1.Cmp(value2) != 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, value1 := range b {
0000000000000000000000000000000000000000;;			value2, found := a[key]
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if value1.Cmp(value2) != 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LessThanOrEqual returns true if a < b for each key in b
0000000000000000000000000000000000000000;;	// If false, it returns the keys in a that exceeded b
0000000000000000000000000000000000000000;;	func LessThanOrEqual(a api.ResourceList, b api.ResourceList) (bool, []api.ResourceName) {
0000000000000000000000000000000000000000;;		result := true
0000000000000000000000000000000000000000;;		resourceNames := []api.ResourceName{}
0000000000000000000000000000000000000000;;		for key, value := range b {
0000000000000000000000000000000000000000;;			if other, found := a[key]; found {
0000000000000000000000000000000000000000;;				if other.Cmp(value) > 0 {
0000000000000000000000000000000000000000;;					result = false
0000000000000000000000000000000000000000;;					resourceNames = append(resourceNames, key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, resourceNames
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Max returns the result of Max(a, b) for each named resource
0000000000000000000000000000000000000000;;	func Max(a api.ResourceList, b api.ResourceList) api.ResourceList {
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		for key, value := range a {
0000000000000000000000000000000000000000;;			if other, found := b[key]; found {
0000000000000000000000000000000000000000;;				if value.Cmp(other) <= 0 {
0000000000000000000000000000000000000000;;					result[key] = *other.Copy()
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[key] = *value.Copy()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, value := range b {
0000000000000000000000000000000000000000;;			if _, found := result[key]; !found {
0000000000000000000000000000000000000000;;				result[key] = *value.Copy()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add returns the result of a + b for each named resource
0000000000000000000000000000000000000000;;	func Add(a api.ResourceList, b api.ResourceList) api.ResourceList {
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		for key, value := range a {
0000000000000000000000000000000000000000;;			quantity := *value.Copy()
0000000000000000000000000000000000000000;;			if other, found := b[key]; found {
0000000000000000000000000000000000000000;;				quantity.Add(other)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[key] = quantity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, value := range b {
0000000000000000000000000000000000000000;;			if _, found := result[key]; !found {
0000000000000000000000000000000000000000;;				quantity := *value.Copy()
0000000000000000000000000000000000000000;;				result[key] = quantity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subtract returns the result of a - b for each named resource
0000000000000000000000000000000000000000;;	func Subtract(a api.ResourceList, b api.ResourceList) api.ResourceList {
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		for key, value := range a {
0000000000000000000000000000000000000000;;			quantity := *value.Copy()
0000000000000000000000000000000000000000;;			if other, found := b[key]; found {
0000000000000000000000000000000000000000;;				quantity.Sub(other)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[key] = quantity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, value := range b {
0000000000000000000000000000000000000000;;			if _, found := result[key]; !found {
0000000000000000000000000000000000000000;;				quantity := *value.Copy()
0000000000000000000000000000000000000000;;				quantity.Neg()
0000000000000000000000000000000000000000;;				result[key] = quantity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mask returns a new resource list that only has the values with the specified names
0000000000000000000000000000000000000000;;	func Mask(resources api.ResourceList, names []api.ResourceName) api.ResourceList {
0000000000000000000000000000000000000000;;		nameSet := ToSet(names)
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		for key, value := range resources {
0000000000000000000000000000000000000000;;			if nameSet.Has(string(key)) {
0000000000000000000000000000000000000000;;				result[key] = *value.Copy()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceNames returns a list of all resource names in the ResourceList
0000000000000000000000000000000000000000;;	func ResourceNames(resources api.ResourceList) []api.ResourceName {
0000000000000000000000000000000000000000;;		result := []api.ResourceName{}
0000000000000000000000000000000000000000;;		for resourceName := range resources {
0000000000000000000000000000000000000000;;			result = append(result, resourceName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains returns true if the specified item is in the list of items
0000000000000000000000000000000000000000;;	func Contains(items []api.ResourceName, item api.ResourceName) bool {
0000000000000000000000000000000000000000;;		return ToSet(items).Has(string(item))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Intersection returns the intersection of both list of resources
0000000000000000000000000000000000000000;;	func Intersection(a []api.ResourceName, b []api.ResourceName) []api.ResourceName {
0000000000000000000000000000000000000000;;		setA := ToSet(a)
0000000000000000000000000000000000000000;;		setB := ToSet(b)
0000000000000000000000000000000000000000;;		setC := setA.Intersection(setB)
0000000000000000000000000000000000000000;;		result := []api.ResourceName{}
0000000000000000000000000000000000000000;;		for _, resourceName := range setC.List() {
0000000000000000000000000000000000000000;;			result = append(result, api.ResourceName(resourceName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsZero returns true if each key maps to the quantity value 0
0000000000000000000000000000000000000000;;	func IsZero(a api.ResourceList) bool {
0000000000000000000000000000000000000000;;		zero := resource.MustParse("0")
0000000000000000000000000000000000000000;;		for _, v := range a {
0000000000000000000000000000000000000000;;			if v.Cmp(zero) != 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNegative returns the set of resource names that have a negative value.
0000000000000000000000000000000000000000;;	func IsNegative(a api.ResourceList) []api.ResourceName {
0000000000000000000000000000000000000000;;		results := []api.ResourceName{}
0000000000000000000000000000000000000000;;		zero := resource.MustParse("0")
0000000000000000000000000000000000000000;;		for k, v := range a {
0000000000000000000000000000000000000000;;			if v.Cmp(zero) < 0 {
0000000000000000000000000000000000000000;;				results = append(results, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return results
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToSet takes a list of resource names and converts to a string set
0000000000000000000000000000000000000000;;	func ToSet(resourceNames []api.ResourceName) sets.String {
0000000000000000000000000000000000000000;;		result := sets.NewString()
0000000000000000000000000000000000000000;;		for _, resourceName := range resourceNames {
0000000000000000000000000000000000000000;;			result.Insert(string(resourceName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CalculateUsage calculates and returns the requested ResourceList usage
0000000000000000000000000000000000000000;;	func CalculateUsage(namespaceName string, scopes []api.ResourceQuotaScope, hardLimits api.ResourceList, registry Registry) (api.ResourceList, error) {
0000000000000000000000000000000000000000;;		// find the intersection between the hard resources on the quota
0000000000000000000000000000000000000000;;		// and the resources this controller can track to know what we can
0000000000000000000000000000000000000000;;		// look to measure updated usage stats for
0000000000000000000000000000000000000000;;		hardResources := ResourceNames(hardLimits)
0000000000000000000000000000000000000000;;		potentialResources := []api.ResourceName{}
0000000000000000000000000000000000000000;;		evaluators := registry.Evaluators()
0000000000000000000000000000000000000000;;		for _, evaluator := range evaluators {
0000000000000000000000000000000000000000;;			potentialResources = append(potentialResources, evaluator.MatchingResources(hardResources)...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// NOTE: the intersection just removes duplicates since the evaluator match intersects wtih hard
0000000000000000000000000000000000000000;;		matchedResources := Intersection(hardResources, potentialResources)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sum the observed usage from each evaluator
0000000000000000000000000000000000000000;;		newUsage := api.ResourceList{}
0000000000000000000000000000000000000000;;		for _, evaluator := range evaluators {
0000000000000000000000000000000000000000;;			// only trigger the evaluator if it matches a resource in the quota, otherwise, skip calculating anything
0000000000000000000000000000000000000000;;			intersection := evaluator.MatchingResources(matchedResources)
0000000000000000000000000000000000000000;;			if len(intersection) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			usageStatsOptions := UsageStatsOptions{Namespace: namespaceName, Scopes: scopes, Resources: intersection}
0000000000000000000000000000000000000000;;			stats, err := evaluator.UsageStats(usageStatsOptions)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newUsage = Add(newUsage, stats.Used)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// mask the observed usage to only the set of resources tracked by this quota
0000000000000000000000000000000000000000;;		// merge our observed usage with the quota usage status
0000000000000000000000000000000000000000;;		// if the new usage is different than the last usage, we will need to do an update
0000000000000000000000000000000000000000;;		newUsage = Mask(newUsage, matchedResources)
0000000000000000000000000000000000000000;;		return newUsage, nil
0000000000000000000000000000000000000000;;	}
