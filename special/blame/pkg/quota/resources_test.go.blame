0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6500db57949cbd8df90efbdff3251d221998769c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package quota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEquals(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			b        api.ResourceList
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"isEqual": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"isEqualWithKeys": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				b: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"isNotEqualSameKeys": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("200m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				b: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"isNotEqualDiffKeys": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				b: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:   resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			if result := Equals(testCase.a, testCase.b); result != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v, a=%v, b=%v", testName, testCase.expected, result, testCase.a, testCase.b)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMax(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			b        api.ResourceList
0000000000000000000000000000000000000000;;			expected api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"noKeys": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"toEmpty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"matching": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{api.ResourceCPU: resource.MustParse("150m")},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("150m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"matching(reverse)": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("150m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("150m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			sum := Max(testCase.a, testCase.b)
0000000000000000000000000000000000000000;;			if result := Equals(testCase.expected, sum); !result {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.expected, sum)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdd(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			b        api.ResourceList
0000000000000000000000000000000000000000;;			expected api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"noKeys": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"toEmpty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"matching": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("200m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			sum := Add(testCase.a, testCase.b)
0000000000000000000000000000000000000000;;			if result := Equals(testCase.expected, sum); !result {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.expected, sum)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSubtract(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			b        api.ResourceList
0000000000000000000000000000000000000000;;			expected api.ResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"noKeys": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"value-empty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty-value": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("-100m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"value-value": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{api.ResourceCPU: resource.MustParse("200m")},
0000000000000000000000000000000000000000;;				b:        api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;				expected: api.ResourceList{api.ResourceCPU: resource.MustParse("100m")},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			sub := Subtract(testCase.a, testCase.b)
0000000000000000000000000000000000000000;;			if result := Equals(testCase.expected, sub); !result {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.expected, sub)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceNames(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			expected []api.ResourceName
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: []api.ResourceName{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"values": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []api.ResourceName{api.ResourceMemory, api.ResourceCPU},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			actualSet := ToSet(ResourceNames(testCase.a))
0000000000000000000000000000000000000000;;			expectedSet := ToSet(testCase.expected)
0000000000000000000000000000000000000000;;			if !actualSet.Equal(expectedSet) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, expectedSet, actualSet)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContains(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        []api.ResourceName
0000000000000000000000000000000000000000;;			b        api.ResourceName
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"does-not-contain": {
0000000000000000000000000000000000000000;;				a:        []api.ResourceName{api.ResourceMemory},
0000000000000000000000000000000000000000;;				b:        api.ResourceCPU,
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"does-contain": {
0000000000000000000000000000000000000000;;				a:        []api.ResourceName{api.ResourceMemory, api.ResourceCPU},
0000000000000000000000000000000000000000;;				b:        api.ResourceCPU,
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			if actual := Contains(testCase.a, testCase.b); actual != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsZero(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"zero": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("0"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"non-zero": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("200m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			if result := IsZero(testCase.a); result != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, testCase.expected, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsNegative(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a        api.ResourceList
0000000000000000000000000000000000000000;;			expected []api.ResourceName
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				a:        api.ResourceList{},
0000000000000000000000000000000000000000;;				expected: []api.ResourceName{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"some-negative": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("-10"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("0"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []api.ResourceName{api.ResourceCPU},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"all-negative": {
0000000000000000000000000000000000000000;;				a: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("-200m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("-1Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []api.ResourceName{api.ResourceCPU, api.ResourceMemory},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			actual := IsNegative(testCase.a)
0000000000000000000000000000000000000000;;			actualSet := ToSet(actual)
0000000000000000000000000000000000000000;;			expectedSet := ToSet(testCase.expected)
0000000000000000000000000000000000000000;;			if !actualSet.Equal(expectedSet) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected: %v, actual: %v", testName, expectedSet, actualSet)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
