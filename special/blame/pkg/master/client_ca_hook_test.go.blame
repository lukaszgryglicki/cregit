0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2bf5485a325dc15a086f83867476b1926e0c89b7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		clienttesting "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWriteClientCAs(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name               string
0000000000000000000000000000000000000000;;			hook               ClientCARegistrationHook
0000000000000000000000000000000000000000;;			preexistingObjs    []runtime.Object
0000000000000000000000000000000000000000;;			expectedConfigMaps map[string]*api.ConfigMap
0000000000000000000000000000000000000000;;			expectUpdate       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "basic",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					ClientCA:                         []byte("foo"),
0000000000000000000000000000000000000000;;					RequestHeaderUsernameHeaders:     []string{"alfa", "bravo", "charlie"},
0000000000000000000000000000000000000000;;					RequestHeaderGroupHeaders:        []string{"delta"},
0000000000000000000000000000000000000000;;					RequestHeaderExtraHeaderPrefixes: []string{"echo", "foxtrot"},
0000000000000000000000000000000000000000;;					RequestHeaderCA:                  []byte("bar"),
0000000000000000000000000000000000000000;;					RequestHeaderAllowedNames:        []string{"first", "second"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"client-ca-file":                     "foo",
0000000000000000000000000000000000000000;;							"requestheader-username-headers":     `["alfa","bravo","charlie"]`,
0000000000000000000000000000000000000000;;							"requestheader-group-headers":        `["delta"]`,
0000000000000000000000000000000000000000;;							"requestheader-extra-headers-prefix": `["echo","foxtrot"]`,
0000000000000000000000000000000000000000;;							"requestheader-client-ca-file":       "bar",
0000000000000000000000000000000000000000;;							"requestheader-allowed-names":        `["first","second"]`,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "skip extension-apiserver-authentication",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					RequestHeaderCA:           []byte("bar"),
0000000000000000000000000000000000000000;;					RequestHeaderAllowedNames: []string{"first", "second"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"requestheader-username-headers":     `null`,
0000000000000000000000000000000000000000;;							"requestheader-group-headers":        `null`,
0000000000000000000000000000000000000000;;							"requestheader-extra-headers-prefix": `null`,
0000000000000000000000000000000000000000;;							"requestheader-client-ca-file":       "bar",
0000000000000000000000000000000000000000;;							"requestheader-allowed-names":        `["first","second"]`,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "skip extension-apiserver-authentication",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					ClientCA: []byte("foo"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"client-ca-file": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty allowed names",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					RequestHeaderCA: []byte("bar"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"requestheader-username-headers":     `null`,
0000000000000000000000000000000000000000;;							"requestheader-group-headers":        `null`,
0000000000000000000000000000000000000000;;							"requestheader-extra-headers-prefix": `null`,
0000000000000000000000000000000000000000;;							"requestheader-client-ca-file":       "bar",
0000000000000000000000000000000000000000;;							"requestheader-allowed-names":        `null`,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "overwrite extension-apiserver-authentication",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					ClientCA: []byte("foo"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				preexistingObjs: []runtime.Object{
0000000000000000000000000000000000000000;;					&api.ConfigMap{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"client-ca-file": "other",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"client-ca-file": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "overwrite extension-apiserver-authentication requestheader",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					RequestHeaderUsernameHeaders:     []string{},
0000000000000000000000000000000000000000;;					RequestHeaderGroupHeaders:        []string{},
0000000000000000000000000000000000000000;;					RequestHeaderExtraHeaderPrefixes: []string{},
0000000000000000000000000000000000000000;;					RequestHeaderCA:                  []byte("bar"),
0000000000000000000000000000000000000000;;					RequestHeaderAllowedNames:        []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				preexistingObjs: []runtime.Object{
0000000000000000000000000000000000000000;;					&api.ConfigMap{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"requestheader-username-headers":     `null`,
0000000000000000000000000000000000000000;;							"requestheader-group-headers":        `null`,
0000000000000000000000000000000000000000;;							"requestheader-extra-headers-prefix": `null`,
0000000000000000000000000000000000000000;;							"requestheader-client-ca-file":       "something",
0000000000000000000000000000000000000000;;							"requestheader-allowed-names":        `null`,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"requestheader-username-headers":     `[]`,
0000000000000000000000000000000000000000;;							"requestheader-group-headers":        `[]`,
0000000000000000000000000000000000000000;;							"requestheader-extra-headers-prefix": `[]`,
0000000000000000000000000000000000000000;;							"requestheader-client-ca-file":       "bar",
0000000000000000000000000000000000000000;;							"requestheader-allowed-names":        `[]`,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "namespace exists",
0000000000000000000000000000000000000000;;				hook: ClientCARegistrationHook{
0000000000000000000000000000000000000000;;					ClientCA: []byte("foo"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				preexistingObjs: []runtime.Object{
0000000000000000000000000000000000000000;;					&api.Namespace{ObjectMeta: metav1.ObjectMeta{Name: metav1.NamespaceSystem}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedConfigMaps: map[string]*api.ConfigMap{
0000000000000000000000000000000000000000;;					"extension-apiserver-authentication": {
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: "extension-apiserver-authentication"},
0000000000000000000000000000000000000000;;						Data: map[string]string{
0000000000000000000000000000000000000000;;							"client-ca-file": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(test.preexistingObjs...)
0000000000000000000000000000000000000000;;			test.hook.tryToWriteClientCAs(client.Core())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actualConfigMaps, updated := getFinalConfiMaps(client)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedConfigMaps, actualConfigMaps) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", test.name, diff.ObjectReflectDiff(test.expectedConfigMaps, actualConfigMaps))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate != updated {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectUpdate, updated)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getFinalConfiMaps(client *fake.Clientset) (map[string]*api.ConfigMap, bool) {
0000000000000000000000000000000000000000;;		ret := map[string]*api.ConfigMap{}
0000000000000000000000000000000000000000;;		updated := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, action := range client.Actions() {
0000000000000000000000000000000000000000;;			if action.Matches("create", "configmaps") {
0000000000000000000000000000000000000000;;				obj := action.(clienttesting.CreateAction).GetObject().(*api.ConfigMap)
0000000000000000000000000000000000000000;;				ret[obj.Name] = obj
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if action.Matches("update", "configmaps") {
0000000000000000000000000000000000000000;;				updated = true
0000000000000000000000000000000000000000;;				obj := action.(clienttesting.UpdateAction).GetObject().(*api.ConfigMap)
0000000000000000000000000000000000000000;;				ret[obj.Name] = obj
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, updated
0000000000000000000000000000000000000000;;	}
