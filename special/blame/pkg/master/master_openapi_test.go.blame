0000000000000000000000000000000000000000;;	// +build !race
4aea24911afb8a477652f0509f97f15f7c3e7f50;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This test file is separated from master_test.go so we would be able to disable
0000000000000000000000000000000000000000;;	// race check for it. TestValidOpenAPISpec will became extremely slow if -race
0000000000000000000000000000000000000000;;	// flag exists, and will cause the tests to timeout.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		openapigen "k8s.io/kubernetes/pkg/generated/openapi"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/loads"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/strfmt"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/validate"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestValidOpenAPISpec verifies that the open api is added
0000000000000000000000000000000000000000;;	// at the proper endpoint and the spec is valid.
0000000000000000000000000000000000000000;;	func TestValidOpenAPISpec(t *testing.T) {
0000000000000000000000000000000000000000;;		etcdserver, config, assert := setUp(t)
0000000000000000000000000000000000000000;;		defer etcdserver.Terminate(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config.GenericConfig.EnableIndex = true
0000000000000000000000000000000000000000;;		config.GenericConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(openapigen.GetOpenAPIDefinitions, api.Scheme)
0000000000000000000000000000000000000000;;		config.GenericConfig.OpenAPIConfig.Info = &spec.Info{
0000000000000000000000000000000000000000;;			InfoProps: spec.InfoProps{
0000000000000000000000000000000000000000;;				Title:   "Kubernetes",
0000000000000000000000000000000000000000;;				Version: "unversioned",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.GenericConfig.SwaggerConfig = genericapiserver.DefaultSwaggerConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		master, err := config.Complete().New(genericapiserver.EmptyDelegate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in bringing up the master: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// make sure swagger.json is not registered before calling PrepareRun.
0000000000000000000000000000000000000000;;		server := httptest.NewServer(apirequest.WithRequestContext(master.GenericAPIServer.Handler.Director, master.GenericAPIServer.RequestContextMapper()))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		resp, err := http.Get(server.URL + "/swagger.json")
0000000000000000000000000000000000000000;;		if !assert.NoError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(http.StatusNotFound, resp.StatusCode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		master.GenericAPIServer.PrepareRun()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err = http.Get(server.URL + "/swagger.json")
0000000000000000000000000000000000000000;;		if !assert.NoError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(http.StatusOK, resp.StatusCode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// as json schema
0000000000000000000000000000000000000000;;		var sch spec.Schema
0000000000000000000000000000000000000000;;		if assert.NoError(decodeResponse(resp, &sch)) {
0000000000000000000000000000000000000000;;			validator := validate.NewSchemaValidator(spec.MustLoadSwagger20Schema(), nil, "", strfmt.Default)
0000000000000000000000000000000000000000;;			res := validator.Validate(&sch)
0000000000000000000000000000000000000000;;			assert.NoError(res.AsError())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate OpenApi spec
0000000000000000000000000000000000000000;;		doc, err := loads.Spec(server.URL + "/swagger.json")
0000000000000000000000000000000000000000;;		if assert.NoError(err) {
0000000000000000000000000000000000000000;;			validator := validate.NewSpecValidator(doc.Schema(), strfmt.Default)
0000000000000000000000000000000000000000;;			res, warns := validator.Validate(doc)
0000000000000000000000000000000000000000;;			assert.NoError(res.AsError())
0000000000000000000000000000000000000000;;			if !warns.IsValid() {
0000000000000000000000000000000000000000;;				t.Logf("Open API spec on root has some warnings : %v", warns)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
