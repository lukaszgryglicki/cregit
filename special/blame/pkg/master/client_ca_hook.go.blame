0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2bf5485a325dc15a086f83867476b1926e0c89b7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClientCARegistrationHook struct {
0000000000000000000000000000000000000000;;		ClientCA []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestHeaderUsernameHeaders     []string
0000000000000000000000000000000000000000;;		RequestHeaderGroupHeaders        []string
0000000000000000000000000000000000000000;;		RequestHeaderExtraHeaderPrefixes []string
0000000000000000000000000000000000000000;;		RequestHeaderCA                  []byte
0000000000000000000000000000000000000000;;		RequestHeaderAllowedNames        []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h ClientCARegistrationHook) PostStartHook(hookContext genericapiserver.PostStartHookContext) error {
0000000000000000000000000000000000000000;;		// no work to do
0000000000000000000000000000000000000000;;		if len(h.ClientCA) == 0 && len(h.RequestHeaderCA) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// intializing CAs is important so that aggregated API servers can come up with "normal" config.
0000000000000000000000000000000000000000;;		// We've seen lagging etcd before, so we want to retry this a few times before we decide to crashloop
0000000000000000000000000000000000000000;;		// the API server on it.
0000000000000000000000000000000000000000;;		err := wait.Poll(1*time.Second, 30*time.Second, func() (done bool, err error) {
0000000000000000000000000000000000000000;;			// retry building the config since sometimes the server can be in an inbetween state which caused
0000000000000000000000000000000000000000;;			// some kind of auto detection failure as I recall from other post start hooks.
0000000000000000000000000000000000000000;;			// TODO see if this is still true and fix the RBAC one too if it isn't.
0000000000000000000000000000000000000000;;			client, err := coreclient.NewForConfig(hookContext.LoopbackClientConfig)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return h.tryToWriteClientCAs(client)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// if we're never able to make it through intialization, kill the API server
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to initialize client CA configmap: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tryToWriteClientCAs is here for unit testing with a fake client.  This is a wait.ConditionFunc so the bool
0000000000000000000000000000000000000000;;	// indicates if the condition was met.  True when its finished, false when it should retry.
0000000000000000000000000000000000000000;;	func (h ClientCARegistrationHook) tryToWriteClientCAs(client coreclient.CoreInterface) (bool, error) {
0000000000000000000000000000000000000000;;		if _, err := client.Namespaces().Create(&api.Namespace{ObjectMeta: metav1.ObjectMeta{Name: metav1.NamespaceSystem}}); err != nil && !apierrors.IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data := map[string]string{}
0000000000000000000000000000000000000000;;		if len(h.ClientCA) > 0 {
0000000000000000000000000000000000000000;;			data["client-ca-file"] = string(h.ClientCA)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(h.RequestHeaderCA) > 0 {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// encoding errors aren't going to get better, so just fail on them.
0000000000000000000000000000000000000000;;			data["requestheader-username-headers"], err = jsonSerializeStringSlice(h.RequestHeaderUsernameHeaders)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data["requestheader-group-headers"], err = jsonSerializeStringSlice(h.RequestHeaderGroupHeaders)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data["requestheader-extra-headers-prefix"], err = jsonSerializeStringSlice(h.RequestHeaderExtraHeaderPrefixes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data["requestheader-client-ca-file"] = string(h.RequestHeaderCA)
0000000000000000000000000000000000000000;;			data["requestheader-allowed-names"], err = jsonSerializeStringSlice(h.RequestHeaderAllowedNames)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write errors may work next time if we retry, so queue for retry
0000000000000000000000000000000000000000;;		if err := writeConfigMap(client, "extension-apiserver-authentication", data); err != nil {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonSerializeStringSlice(in []string) (string, error) {
0000000000000000000000000000000000000000;;		out, err := json.Marshal(in)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(out), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeConfigMap(client coreclient.ConfigMapsGetter, name string, data map[string]string) error {
0000000000000000000000000000000000000000;;		existing, err := client.ConfigMaps(metav1.NamespaceSystem).Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if apierrors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			_, err := client.ConfigMaps(metav1.NamespaceSystem).Create(&api.ConfigMap{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceSystem, Name: name},
0000000000000000000000000000000000000000;;				Data:       data,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		existing.Data = data
0000000000000000000000000000000000000000;;		_, err = client.ConfigMaps(metav1.NamespaceSystem).Update(existing)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
