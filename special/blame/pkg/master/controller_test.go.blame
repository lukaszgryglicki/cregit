0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
370a205513930b0a606cbab3ba7028e9b814d99a;pkg/master/publish_test.go[pkg/master/publish_test.go][pkg/master/controller_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReconcileEndpoints(t *testing.T) {
0000000000000000000000000000000000000000;;		ns := metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		om := func(name string) metav1.ObjectMeta {
0000000000000000000000000000000000000000;;			return metav1.ObjectMeta{Namespace: ns, Name: name}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reconcile_tests := []struct {
0000000000000000000000000000000000000000;;			testName          string
0000000000000000000000000000000000000000;;			serviceName       string
0000000000000000000000000000000000000000;;			ip                string
0000000000000000000000000000000000000000;;			endpointPorts     []api.EndpointPort
0000000000000000000000000000000000000000;;			additionalMasters int
0000000000000000000000000000000000000000;;			endpoints         *api.EndpointsList
0000000000000000000000000000000000000000;;			expectUpdate      *api.Endpoints // nil means none expected
0000000000000000000000000000000000000000;;			expectCreate      *api.Endpoints // nil means none expected
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "no existing endpoints",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints:     nil,
0000000000000000000000000000000000000000;;				expectCreate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints satisfy",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints satisfy but too many",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}, {IP: "4.3.2.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:          "existing endpoints satisfy but too many + extra masters",
0000000000000000000000000000000000000000;;				serviceName:       "foo",
0000000000000000000000000000000000000000;;				ip:                "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				additionalMasters: 3,
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;								{IP: "1.2.3.4"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.3"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.4"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;							{IP: "1.2.3.4"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.3"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.4"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:          "existing endpoints satisfy but too many + extra masters + delete first",
0000000000000000000000000000000000000000;;				serviceName:       "foo",
0000000000000000000000000000000000000000;;				ip:                "4.3.2.4",
0000000000000000000000000000000000000000;;				endpointPorts:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				additionalMasters: 3,
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;								{IP: "1.2.3.4"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.3"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.4"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;							{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.3"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.4"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:          "existing endpoints satisfy and endpoint addresses length less than master count",
0000000000000000000000000000000000000000;;				serviceName:       "foo",
0000000000000000000000000000000000000000;;				ip:                "4.3.2.2",
0000000000000000000000000000000000000000;;				endpointPorts:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				additionalMasters: 3,
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;								{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;								{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:          "existing endpoints current IP missing and address length less than master count",
0000000000000000000000000000000000000000;;				serviceName:       "foo",
0000000000000000000000000000000000000000;;				ip:                "4.3.2.2",
0000000000000000000000000000000000000000;;				endpointPorts:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				additionalMasters: 3,
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;								{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{
0000000000000000000000000000000000000000;;							{IP: "4.3.2.1"},
0000000000000000000000000000000000000000;;							{IP: "4.3.2.2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints wrong name",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("bar"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectCreate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints wrong IP",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "4.3.2.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints wrong port",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 9090, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints wrong protocol",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "UDP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "existing endpoints wrong port name",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "baz", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "baz", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "existing endpoints extra service ports satisfy",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				ip:          "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "baz", Port: 1010, Protocol: "TCP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports: []api.EndpointPort{
0000000000000000000000000000000000000000;;								{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;								{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;								{Name: "baz", Port: 1010, Protocol: "TCP"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "existing endpoints extra service ports missing port",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				ip:          "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports: []api.EndpointPort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;							{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range reconcile_tests {
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			if test.endpoints != nil {
0000000000000000000000000000000000000000;;				fakeClient = fake.NewSimpleClientset(test.endpoints)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			reconciler := NewMasterCountEndpointReconciler(test.additionalMasters+1, fakeClient.Core())
0000000000000000000000000000000000000000;;			err := reconciler.ReconcileEndpoints(test.serviceName, net.ParseIP(test.ip), test.endpointPorts, true)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: unexpected error: %v", test.testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			updates := []core.UpdateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() != "update" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				updates = append(updates, action.(core.UpdateAction))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate != nil {
0000000000000000000000000000000000000000;;				if len(updates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected updates: %v", test.testName, updates)
0000000000000000000000000000000000000000;;				} else if e, a := test.expectUpdate, updates[0].GetObject(); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: expected update:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate == nil && len(updates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no update expected, yet saw: %v", test.testName, updates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			creates := []core.CreateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() != "create" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				creates = append(creates, action.(core.CreateAction))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate != nil {
0000000000000000000000000000000000000000;;				if len(creates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected creates: %v", test.testName, creates)
0000000000000000000000000000000000000000;;				} else if e, a := test.expectCreate, creates[0].GetObject(); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: expected create:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate == nil && len(creates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no create expected, yet saw: %v", test.testName, creates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		non_reconcile_tests := []struct {
0000000000000000000000000000000000000000;;			testName          string
0000000000000000000000000000000000000000;;			serviceName       string
0000000000000000000000000000000000000000;;			ip                string
0000000000000000000000000000000000000000;;			endpointPorts     []api.EndpointPort
0000000000000000000000000000000000000000;;			additionalMasters int
0000000000000000000000000000000000000000;;			endpoints         *api.EndpointsList
0000000000000000000000000000000000000000;;			expectUpdate      *api.Endpoints // nil means none expected
0000000000000000000000000000000000000000;;			expectCreate      *api.Endpoints // nil means none expected
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "existing endpoints extra service ports missing port no update",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				ip:          "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "existing endpoints extra service ports, wrong ports, wrong IP",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				ip:          "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					{Name: "bar", Port: 1000, Protocol: "TCP"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: &api.EndpointsList{
0000000000000000000000000000000000000000;;					Items: []api.Endpoints{{
0000000000000000000000000000000000000000;;						ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;						Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;							Addresses: []api.EndpointAddress{{IP: "4.3.2.1"}},
0000000000000000000000000000000000000000;;							Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:      "no existing endpoints",
0000000000000000000000000000000000000000;;				serviceName:   "foo",
0000000000000000000000000000000000000000;;				ip:            "1.2.3.4",
0000000000000000000000000000000000000000;;				endpointPorts: []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;				endpoints:     nil,
0000000000000000000000000000000000000000;;				expectCreate: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "1.2.3.4"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Name: "foo", Port: 8080, Protocol: "TCP"}},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range non_reconcile_tests {
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			if test.endpoints != nil {
0000000000000000000000000000000000000000;;				fakeClient = fake.NewSimpleClientset(test.endpoints)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			reconciler := NewMasterCountEndpointReconciler(test.additionalMasters+1, fakeClient.Core())
0000000000000000000000000000000000000000;;			err := reconciler.ReconcileEndpoints(test.serviceName, net.ParseIP(test.ip), test.endpointPorts, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: unexpected error: %v", test.testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			updates := []core.UpdateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() != "update" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				updates = append(updates, action.(core.UpdateAction))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate != nil {
0000000000000000000000000000000000000000;;				if len(updates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected updates: %v", test.testName, updates)
0000000000000000000000000000000000000000;;				} else if e, a := test.expectUpdate, updates[0].GetObject(); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: expected update:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate == nil && len(updates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no update expected, yet saw: %v", test.testName, updates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			creates := []core.CreateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() != "create" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				creates = append(creates, action.(core.CreateAction))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate != nil {
0000000000000000000000000000000000000000;;				if len(creates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected creates: %v", test.testName, creates)
0000000000000000000000000000000000000000;;				} else if e, a := test.expectCreate, creates[0].GetObject(); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: expected create:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate == nil && len(creates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no create expected, yet saw: %v", test.testName, creates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateOrUpdateMasterService(t *testing.T) {
0000000000000000000000000000000000000000;;		ns := metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		om := func(name string) metav1.ObjectMeta {
0000000000000000000000000000000000000000;;			return metav1.ObjectMeta{Namespace: ns, Name: name}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		create_tests := []struct {
0000000000000000000000000000000000000000;;			testName     string
0000000000000000000000000000000000000000;;			serviceName  string
0000000000000000000000000000000000000000;;			servicePorts []api.ServicePort
0000000000000000000000000000000000000000;;			serviceType  api.ServiceType
0000000000000000000000000000000000000000;;			expectCreate *api.Service // nil means none expected
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service does not exist",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				expectCreate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range create_tests {
0000000000000000000000000000000000000000;;			master := Controller{}
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			master.ServiceClient = fakeClient.Core()
0000000000000000000000000000000000000000;;			master.CreateOrUpdateMasterServiceIfNeeded(test.serviceName, net.ParseIP("1.2.3.4"), test.servicePorts, test.serviceType, false)
0000000000000000000000000000000000000000;;			creates := []core.CreateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() == "create" {
0000000000000000000000000000000000000000;;					creates = append(creates, action.(core.CreateAction))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate != nil {
0000000000000000000000000000000000000000;;				if len(creates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected creations: %v", test.testName, creates)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					obj := creates[0].GetObject()
0000000000000000000000000000000000000000;;					if e, a := test.expectCreate.Spec, obj.(*api.Service).Spec; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;						t.Errorf("case %q: expected create:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectCreate == nil && len(creates) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no create expected, yet saw: %v", test.testName, creates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reconcile_tests := []struct {
0000000000000000000000000000000000000000;;			testName     string
0000000000000000000000000000000000000000;;			serviceName  string
0000000000000000000000000000000000000000;;			servicePorts []api.ServicePort
0000000000000000000000000000000000000000;;			serviceType  api.ServiceType
0000000000000000000000000000000000000000;;			service      *api.Service
0000000000000000000000000000000000000000;;			expectUpdate *api.Service // nil means none expected
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition wrong port",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8000, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition missing port",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;					{Name: "baz", Port: 1000, Protocol: "TCP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;							{Name: "baz", Port: 1000, Protocol: "TCP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition incorrect port",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "bar", Port: 1000, Protocol: "UDP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition incorrect port name",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 1000, Protocol: "UDP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition incorrect target port",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition incorrect protocol",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "UDP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition has incorrect type",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition satisfies",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range reconcile_tests {
0000000000000000000000000000000000000000;;			master := Controller{}
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset(test.service)
0000000000000000000000000000000000000000;;			master.ServiceClient = fakeClient.Core()
0000000000000000000000000000000000000000;;			err := master.CreateOrUpdateMasterServiceIfNeeded(test.serviceName, net.ParseIP("1.2.3.4"), test.servicePorts, test.serviceType, true)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: unexpected error: %v", test.testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updates := []core.UpdateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() == "update" {
0000000000000000000000000000000000000000;;					updates = append(updates, action.(core.UpdateAction))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate != nil {
0000000000000000000000000000000000000000;;				if len(updates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected updates: %v", test.testName, updates)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					obj := updates[0].GetObject()
0000000000000000000000000000000000000000;;					if e, a := test.expectUpdate.Spec, obj.(*api.Service).Spec; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;						t.Errorf("case %q: expected update:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate == nil && len(updates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no update expected, yet saw: %v", test.testName, updates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		non_reconcile_tests := []struct {
0000000000000000000000000000000000000000;;			testName     string
0000000000000000000000000000000000000000;;			serviceName  string
0000000000000000000000000000000000000000;;			servicePorts []api.ServicePort
0000000000000000000000000000000000000000;;			serviceType  api.ServiceType
0000000000000000000000000000000000000000;;			service      *api.Service
0000000000000000000000000000000000000000;;			expectUpdate *api.Service // nil means none expected
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:    "service definition wrong port, no expected update",
0000000000000000000000000000000000000000;;				serviceName: "foo",
0000000000000000000000000000000000000000;;				servicePorts: []api.ServicePort{
0000000000000000000000000000000000000000;;					{Name: "foo", Port: 8080, Protocol: "TCP", TargetPort: intstr.FromInt(8080)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				service: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: om("foo"),
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Name: "foo", Port: 1000, Protocol: "TCP", TargetPort: intstr.FromInt(1000)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        nil,
0000000000000000000000000000000000000000;;						ClusterIP:       "1.2.3.4",
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectUpdate: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range non_reconcile_tests {
0000000000000000000000000000000000000000;;			master := Controller{}
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset(test.service)
0000000000000000000000000000000000000000;;			master.ServiceClient = fakeClient.Core()
0000000000000000000000000000000000000000;;			err := master.CreateOrUpdateMasterServiceIfNeeded(test.serviceName, net.ParseIP("1.2.3.4"), test.servicePorts, test.serviceType, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: unexpected error: %v", test.testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updates := []core.UpdateAction{}
0000000000000000000000000000000000000000;;			for _, action := range fakeClient.Actions() {
0000000000000000000000000000000000000000;;				if action.GetVerb() == "update" {
0000000000000000000000000000000000000000;;					updates = append(updates, action.(core.UpdateAction))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate != nil {
0000000000000000000000000000000000000000;;				if len(updates) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("case %q: unexpected updates: %v", test.testName, updates)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					obj := updates[0].GetObject()
0000000000000000000000000000000000000000;;					if e, a := test.expectUpdate.Spec, obj.(*api.Service).Spec; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;						t.Errorf("case %q: expected update:\n%#v\ngot:\n%#v\n", test.testName, e, a)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectUpdate == nil && len(updates) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %q: no update expected, yet saw: %v", test.testName, updates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
