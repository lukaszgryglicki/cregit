0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e7e14dae295bf58ee8e386180dd74c03fc52c1b6;pkg/master/thirdparty/tprregistration_controller_test.go[pkg/master/thirdparty/tprregistration_controller_test.go][pkg/master/controller/crdregistration/crdregistration_controller_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package crdregistration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
0000000000000000000000000000000000000000;;		crdlisters "k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandleVersionUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name         string
0000000000000000000000000000000000000000;;			startingCRDs []*apiextensions.CustomResourceDefinition
0000000000000000000000000000000000000000;;			version      schema.GroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedAdded   []*apiregistration.APIService
0000000000000000000000000000000000000000;;			expectedRemoved []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple add crd",
0000000000000000000000000000000000000000;;				startingCRDs: []*apiextensions.CustomResourceDefinition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Spec: apiextensions.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;							Group:   "group.com",
0000000000000000000000000000000000000000;;							Version: "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				version: schema.GroupVersion{Group: "group.com", Version: "v1"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedAdded: []*apiregistration.APIService{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.group.com"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Group:                "group.com",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 1000,
0000000000000000000000000000000000000000;;							VersionPriority:      100,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple remove crd",
0000000000000000000000000000000000000000;;				startingCRDs: []*apiextensions.CustomResourceDefinition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Spec: apiextensions.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;							Group:   "group.com",
0000000000000000000000000000000000000000;;							Version: "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				version: schema.GroupVersion{Group: "group.com", Version: "v2"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedRemoved: []string{"v2.group.com"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			registration := &fakeAPIServiceRegistration{}
0000000000000000000000000000000000000000;;			crdCache := cache.NewIndexer(cache.DeletionHandlingMetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			crdLister := crdlisters.NewCustomResourceDefinitionLister(crdCache)
0000000000000000000000000000000000000000;;			c := crdRegistrationController{
0000000000000000000000000000000000000000;;				crdLister:              crdLister,
0000000000000000000000000000000000000000;;				apiServiceRegistration: registration,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range test.startingCRDs {
0000000000000000000000000000000000000000;;				crdCache.Add(test.startingCRDs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			c.handleVersionUpdate(test.version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedAdded, registration.added) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected %v, got %v", test.name, test.expectedAdded, registration.added)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedRemoved, registration.removed) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected %v, got %v", test.name, test.expectedRemoved, registration.removed)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAPIServiceRegistration struct {
0000000000000000000000000000000000000000;;		added   []*apiregistration.APIService
0000000000000000000000000000000000000000;;		removed []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *fakeAPIServiceRegistration) AddAPIServiceToSync(in *apiregistration.APIService) {
0000000000000000000000000000000000000000;;		a.added = append(a.added, in)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a *fakeAPIServiceRegistration) RemoveAPIServiceToSync(name string) {
0000000000000000000000000000000000000000;;		a.removed = append(a.removed, name)
0000000000000000000000000000000000000000;;	}
