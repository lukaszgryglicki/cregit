0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e9c7c9f939fce6eaa13e3330f4498ca314738d66;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cloudprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Factory is a function that returns a cloudprovider.Interface.
0000000000000000000000000000000000000000;;	// The config parameter provides an io.Reader handler to the factory in
0000000000000000000000000000000000000000;;	// order to load specific configurations. If no configuration is provided
0000000000000000000000000000000000000000;;	// the parameter is nil.
0000000000000000000000000000000000000000;;	type Factory func(config io.Reader) (Interface, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// All registered cloud providers.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		providersMutex sync.Mutex
0000000000000000000000000000000000000000;;		providers      = make(map[string]Factory)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const externalCloudProvider = "external"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterCloudProvider registers a cloudprovider.Factory by name.  This
0000000000000000000000000000000000000000;;	// is expected to happen during app startup.
0000000000000000000000000000000000000000;;	func RegisterCloudProvider(name string, cloud Factory) {
0000000000000000000000000000000000000000;;		providersMutex.Lock()
0000000000000000000000000000000000000000;;		defer providersMutex.Unlock()
0000000000000000000000000000000000000000;;		if _, found := providers[name]; found {
0000000000000000000000000000000000000000;;			glog.Fatalf("Cloud provider %q was registered twice", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(1).Infof("Registered cloud provider %q", name)
0000000000000000000000000000000000000000;;		providers[name] = cloud
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCloudProvider returns true if name corresponds to an already registered
0000000000000000000000000000000000000000;;	// cloud provider.
0000000000000000000000000000000000000000;;	func IsCloudProvider(name string) bool {
0000000000000000000000000000000000000000;;		providersMutex.Lock()
0000000000000000000000000000000000000000;;		defer providersMutex.Unlock()
0000000000000000000000000000000000000000;;		_, found := providers[name]
0000000000000000000000000000000000000000;;		return found
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloudProviders returns the name of all registered cloud providers in a
0000000000000000000000000000000000000000;;	// string slice
0000000000000000000000000000000000000000;;	func CloudProviders() []string {
0000000000000000000000000000000000000000;;		names := []string{}
0000000000000000000000000000000000000000;;		providersMutex.Lock()
0000000000000000000000000000000000000000;;		defer providersMutex.Unlock()
0000000000000000000000000000000000000000;;		for name := range providers {
0000000000000000000000000000000000000000;;			names = append(names, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return names
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCloudProvider creates an instance of the named cloud provider, or nil if
0000000000000000000000000000000000000000;;	// the name is unknown.  The error return is only used if the named provider
0000000000000000000000000000000000000000;;	// was known but failed to initialize. The config parameter specifies the
0000000000000000000000000000000000000000;;	// io.Reader handler of the configuration file for the cloud provider, or nil
0000000000000000000000000000000000000000;;	// for no configuation.
0000000000000000000000000000000000000000;;	func GetCloudProvider(name string, config io.Reader) (Interface, error) {
0000000000000000000000000000000000000000;;		providersMutex.Lock()
0000000000000000000000000000000000000000;;		defer providersMutex.Unlock()
0000000000000000000000000000000000000000;;		f, found := providers[name]
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f(config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Detects if the string is an external cloud provider
0000000000000000000000000000000000000000;;	func IsExternal(name string) bool {
0000000000000000000000000000000000000000;;		return name == externalCloudProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitCloudProvider creates an instance of the named cloud provider.
0000000000000000000000000000000000000000;;	func InitCloudProvider(name string, configFilePath string) (Interface, error) {
0000000000000000000000000000000000000000;;		var cloud Interface
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			glog.Info("No cloud provider specified.")
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if IsExternal(name) {
0000000000000000000000000000000000000000;;			glog.Info("External cloud provider specified")
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if configFilePath != "" {
0000000000000000000000000000000000000000;;			var config *os.File
0000000000000000000000000000000000000000;;			config, err = os.Open(configFilePath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Couldn't open cloud provider configuration %s: %#v",
0000000000000000000000000000000000000000;;					configFilePath, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			defer config.Close()
0000000000000000000000000000000000000000;;			cloud, err = GetCloudProvider(name, config)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// Pass explicit nil so plugins can actually check for nil. See
0000000000000000000000000000000000000000;;			// "Why is my nil error value not equal to nil?" in golang.org/doc/faq.
0000000000000000000000000000000000000000;;			cloud, err = GetCloudProvider(name, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("could not init cloud provider %q: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cloud == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unknown cloud provider %q", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cloud, nil
0000000000000000000000000000000000000000;;	}
