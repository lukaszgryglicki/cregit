0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
2a486c7b19c1b799d312914615cd4a257444ef68;pkg/cloudprovider/fake_cloud.go[pkg/cloudprovider/fake_cloud.go][pkg/cloudprovider/providers/fake/fake.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultProviderName = "fake"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeBalancer is a fake storage of balancer information
0000000000000000000000000000000000000000;;	type FakeBalancer struct {
0000000000000000000000000000000000000000;;		Name           string
0000000000000000000000000000000000000000;;		Region         string
0000000000000000000000000000000000000000;;		LoadBalancerIP string
0000000000000000000000000000000000000000;;		Ports          []v1.ServicePort
0000000000000000000000000000000000000000;;		Hosts          []*v1.Node
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeUpdateBalancerCall struct {
0000000000000000000000000000000000000000;;		Service *v1.Service
0000000000000000000000000000000000000000;;		Hosts   []*v1.Node
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeCloud is a test-double implementation of Interface, LoadBalancer, Instances, and Routes. It is useful for testing.
0000000000000000000000000000000000000000;;	type FakeCloud struct {
0000000000000000000000000000000000000000;;		Exists        bool
0000000000000000000000000000000000000000;;		Err           error
0000000000000000000000000000000000000000;;		Calls         []string
0000000000000000000000000000000000000000;;		Addresses     []v1.NodeAddress
0000000000000000000000000000000000000000;;		ExtID         map[types.NodeName]string
0000000000000000000000000000000000000000;;		InstanceTypes map[types.NodeName]string
0000000000000000000000000000000000000000;;		Machines      []types.NodeName
0000000000000000000000000000000000000000;;		NodeResources *v1.NodeResources
0000000000000000000000000000000000000000;;		ClusterList   []string
0000000000000000000000000000000000000000;;		MasterName    string
0000000000000000000000000000000000000000;;		ExternalIP    net.IP
0000000000000000000000000000000000000000;;		Balancers     map[string]FakeBalancer
0000000000000000000000000000000000000000;;		UpdateCalls   []FakeUpdateBalancerCall
0000000000000000000000000000000000000000;;		RouteMap      map[string]*FakeRoute
0000000000000000000000000000000000000000;;		Lock          sync.Mutex
0000000000000000000000000000000000000000;;		Provider      string
0000000000000000000000000000000000000000;;		addCallLock   sync.Mutex
0000000000000000000000000000000000000000;;		cloudprovider.Zone
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeRoute struct {
0000000000000000000000000000000000000000;;		ClusterName string
0000000000000000000000000000000000000000;;		Route       cloudprovider.Route
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) addCall(desc string) {
0000000000000000000000000000000000000000;;		f.addCallLock.Lock()
0000000000000000000000000000000000000000;;		defer f.addCallLock.Unlock()
0000000000000000000000000000000000000000;;		f.Calls = append(f.Calls, desc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClearCalls clears internal record of method calls to this FakeCloud.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ClearCalls() {
0000000000000000000000000000000000000000;;		f.Calls = []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialize passes a Kubernetes clientBuilder interface to the cloud provider
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Initialize(clientBuilder controller.ControllerClientBuilder) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ListClusters() ([]string, error) {
0000000000000000000000000000000000000000;;		return f.ClusterList, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Master(name string) (string, error) {
0000000000000000000000000000000000000000;;		return f.MasterName, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Clusters() (cloudprovider.Clusters, bool) {
0000000000000000000000000000000000000000;;		return f, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderName returns the cloud provider ID.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ProviderName() string {
0000000000000000000000000000000000000000;;		if f.Provider == "" {
0000000000000000000000000000000000000000;;			return defaultProviderName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.Provider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScrubDNS filters DNS settings for pods.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ScrubDNS(nameservers, searches []string) (nsOut, srchOut []string) {
0000000000000000000000000000000000000000;;		return nameservers, searches
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancer returns a fake implementation of LoadBalancer.
0000000000000000000000000000000000000000;;	// Actually it just returns f itself.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) LoadBalancer() (cloudprovider.LoadBalancer, bool) {
0000000000000000000000000000000000000000;;		return f, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instances returns a fake implementation of Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Actually it just returns f itself.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Instances() (cloudprovider.Instances, bool) {
0000000000000000000000000000000000000000;;		return f, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Zones() (cloudprovider.Zones, bool) {
0000000000000000000000000000000000000000;;		return f, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) Routes() (cloudprovider.Routes, bool) {
0000000000000000000000000000000000000000;;		return f, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetLoadBalancer is a stub implementation of LoadBalancer.GetLoadBalancer.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) GetLoadBalancer(clusterName string, service *v1.Service) (*v1.LoadBalancerStatus, bool, error) {
0000000000000000000000000000000000000000;;		status := &v1.LoadBalancerStatus{}
0000000000000000000000000000000000000000;;		status.Ingress = []v1.LoadBalancerIngress{{IP: f.ExternalIP.String()}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return status, f.Exists, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnsureLoadBalancer is a test-spy implementation of LoadBalancer.EnsureLoadBalancer.
0000000000000000000000000000000000000000;;	// It adds an entry "create" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) EnsureLoadBalancer(clusterName string, service *v1.Service, nodes []*v1.Node) (*v1.LoadBalancerStatus, error) {
0000000000000000000000000000000000000000;;		f.addCall("create")
0000000000000000000000000000000000000000;;		if f.Balancers == nil {
0000000000000000000000000000000000000000;;			f.Balancers = make(map[string]FakeBalancer)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := cloudprovider.GetLoadBalancerName(service)
0000000000000000000000000000000000000000;;		spec := service.Spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zone, err := f.GetZone()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		region := zone.Region
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.Balancers[name] = FakeBalancer{name, region, spec.LoadBalancerIP, spec.Ports, nodes}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status := &v1.LoadBalancerStatus{}
0000000000000000000000000000000000000000;;		status.Ingress = []v1.LoadBalancerIngress{{IP: f.ExternalIP.String()}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return status, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateLoadBalancer is a test-spy implementation of LoadBalancer.UpdateLoadBalancer.
0000000000000000000000000000000000000000;;	// It adds an entry "update" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) UpdateLoadBalancer(clusterName string, service *v1.Service, nodes []*v1.Node) error {
0000000000000000000000000000000000000000;;		f.addCall("update")
0000000000000000000000000000000000000000;;		f.UpdateCalls = append(f.UpdateCalls, FakeUpdateBalancerCall{service, nodes})
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnsureLoadBalancerDeleted is a test-spy implementation of LoadBalancer.EnsureLoadBalancerDeleted.
0000000000000000000000000000000000000000;;	// It adds an entry "delete" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) EnsureLoadBalancerDeleted(clusterName string, service *v1.Service) error {
0000000000000000000000000000000000000000;;		f.addCall("delete")
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) AddSSHKeyToAllInstances(user string, keyData []byte) error {
0000000000000000000000000000000000000000;;		return errors.New("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implementation of Instances.CurrentNodeName
0000000000000000000000000000000000000000;;	func (f *FakeCloud) CurrentNodeName(hostname string) (types.NodeName, error) {
0000000000000000000000000000000000000000;;		return types.NodeName(hostname), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddresses is a test-spy implementation of Instances.NodeAddresses.
0000000000000000000000000000000000000000;;	// It adds an entry "node-addresses" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) NodeAddresses(instance types.NodeName) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		f.addCall("node-addresses")
0000000000000000000000000000000000000000;;		return f.Addresses, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddressesByProviderID is a test-spy implementation of Instances.NodeAddressesByProviderID.
0000000000000000000000000000000000000000;;	// It adds an entry "node-addresses-by-provider-id" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) NodeAddressesByProviderID(providerID string) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		f.addCall("node-addresses-by-provider-id")
0000000000000000000000000000000000000000;;		return f.Addresses, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalID is a test-spy implementation of Instances.ExternalID.
0000000000000000000000000000000000000000;;	// It adds an entry "external-id" into the internal method call record.
0000000000000000000000000000000000000000;;	// It returns an external id to the mapped instance name, if not found, it will return "ext-{instance}"
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ExternalID(nodeName types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		f.addCall("external-id")
0000000000000000000000000000000000000000;;		return f.ExtID[nodeName], f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceID returns the cloud provider ID of the node with the specified Name.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) InstanceID(nodeName types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		f.addCall("instance-id")
0000000000000000000000000000000000000000;;		return f.ExtID[nodeName], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceType returns the type of the specified instance.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) InstanceType(instance types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		f.addCall("instance-type")
0000000000000000000000000000000000000000;;		return f.InstanceTypes[instance], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceTypeByProviderID returns the type of the specified instance.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) InstanceTypeByProviderID(providerID string) (string, error) {
0000000000000000000000000000000000000000;;		f.addCall("instance-type-by-provider-id")
0000000000000000000000000000000000000000;;		return f.InstanceTypes[types.NodeName(providerID)], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List is a test-spy implementation of Instances.List.
0000000000000000000000000000000000000000;;	// It adds an entry "list" into the internal method call record.
0000000000000000000000000000000000000000;;	func (f *FakeCloud) List(filter string) ([]types.NodeName, error) {
0000000000000000000000000000000000000000;;		f.addCall("list")
0000000000000000000000000000000000000000;;		result := []types.NodeName{}
0000000000000000000000000000000000000000;;		for _, machine := range f.Machines {
0000000000000000000000000000000000000000;;			if match, _ := regexp.MatchString(filter, string(machine)); match {
0000000000000000000000000000000000000000;;				result = append(result, machine)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) GetZone() (cloudprovider.Zone, error) {
0000000000000000000000000000000000000000;;		f.addCall("get-zone")
0000000000000000000000000000000000000000;;		return f.Zone, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) ListRoutes(clusterName string) ([]*cloudprovider.Route, error) {
0000000000000000000000000000000000000000;;		f.Lock.Lock()
0000000000000000000000000000000000000000;;		defer f.Lock.Unlock()
0000000000000000000000000000000000000000;;		f.addCall("list-routes")
0000000000000000000000000000000000000000;;		var routes []*cloudprovider.Route
0000000000000000000000000000000000000000;;		for _, fakeRoute := range f.RouteMap {
0000000000000000000000000000000000000000;;			if clusterName == fakeRoute.ClusterName {
0000000000000000000000000000000000000000;;				routeCopy := fakeRoute.Route
0000000000000000000000000000000000000000;;				routes = append(routes, &routeCopy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return routes, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) CreateRoute(clusterName string, nameHint string, route *cloudprovider.Route) error {
0000000000000000000000000000000000000000;;		f.Lock.Lock()
0000000000000000000000000000000000000000;;		defer f.Lock.Unlock()
0000000000000000000000000000000000000000;;		f.addCall("create-route")
0000000000000000000000000000000000000000;;		name := clusterName + "-" + nameHint
0000000000000000000000000000000000000000;;		if _, exists := f.RouteMap[name]; exists {
0000000000000000000000000000000000000000;;			f.Err = fmt.Errorf("route %q already exists", name)
0000000000000000000000000000000000000000;;			return f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeRoute := FakeRoute{}
0000000000000000000000000000000000000000;;		fakeRoute.Route = *route
0000000000000000000000000000000000000000;;		fakeRoute.Route.Name = name
0000000000000000000000000000000000000000;;		fakeRoute.ClusterName = clusterName
0000000000000000000000000000000000000000;;		f.RouteMap[name] = &fakeRoute
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCloud) DeleteRoute(clusterName string, route *cloudprovider.Route) error {
0000000000000000000000000000000000000000;;		f.Lock.Lock()
0000000000000000000000000000000000000000;;		defer f.Lock.Unlock()
0000000000000000000000000000000000000000;;		f.addCall("delete-route")
0000000000000000000000000000000000000000;;		name := route.Name
0000000000000000000000000000000000000000;;		if _, exists := f.RouteMap[name]; !exists {
0000000000000000000000000000000000000000;;			f.Err = fmt.Errorf("no route found with name %q", name)
0000000000000000000000000000000000000000;;			return f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delete(f.RouteMap, name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
