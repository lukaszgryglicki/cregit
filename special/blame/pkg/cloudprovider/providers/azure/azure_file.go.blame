0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2382db0e62595fdf7843e8a357e546360a02fb25;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		azs "github.com/Azure/azure-sdk-for-go/storage"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// create file share
0000000000000000000000000000000000000000;;	func (az *Cloud) createFileShare(accountName, accountKey, name string, sizeGB int) error {
0000000000000000000000000000000000000000;;		fileClient, err := az.getFileSvcClient(accountName, accountKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// create a file share and set quota
0000000000000000000000000000000000000000;;		// Note. Per https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Create-Share,
0000000000000000000000000000000000000000;;		// setting x-ms-share-quota can set quota on the new share, but in reality, setting quota in CreateShare
0000000000000000000000000000000000000000;;		// receives error "The metadata specified is invalid. It has characters that are not permitted."
0000000000000000000000000000000000000000;;		// As a result,breaking into two API calls: create share and set quota
0000000000000000000000000000000000000000;;		share := fileClient.GetShareReference(name)
0000000000000000000000000000000000000000;;		if err = share.Create(nil); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create file share, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		share.Properties.Quota = sizeGB
0000000000000000000000000000000000000000;;		if err = share.SetProperties(nil); err != nil {
0000000000000000000000000000000000000000;;			if err := share.Delete(nil); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Error deleting share: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to set quota on file share %s, err: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// delete a file share
0000000000000000000000000000000000000000;;	func (az *Cloud) deleteFileShare(accountName, accountKey, name string) error {
0000000000000000000000000000000000000000;;		fileClient, err := az.getFileSvcClient(accountName, accountKey)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			share := fileClient.GetShareReference(name)
0000000000000000000000000000000000000000;;			return share.Delete(nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getFileSvcClient(accountName, accountKey string) (*azs.FileServiceClient, error) {
0000000000000000000000000000000000000000;;		client, err := azs.NewClient(accountName, accountKey, az.Environment.StorageEndpointSuffix, azs.DefaultAPIVersion, useHTTPS)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error creating azure client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f := client.GetFileService()
0000000000000000000000000000000000000000;;		return &f, nil
0000000000000000000000000000000000000000;;	}
