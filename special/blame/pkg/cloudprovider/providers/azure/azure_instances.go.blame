0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f050e96cf08b79e447c6733a930c9ec7df26eb44;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/azure-sdk-for-go/arm/compute"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddresses returns the addresses of the specified instance.
0000000000000000000000000000000000000000;;	func (az *Cloud) NodeAddresses(name types.NodeName) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		if az.UseInstanceMetadata {
0000000000000000000000000000000000000000;;			text, err := QueryMetadataText("instance/network/interface/0/ipv4/ipAddress/0/privateIpAddress")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return []v1.NodeAddress{
0000000000000000000000000000000000000000;;				{Type: v1.NodeInternalIP, Address: text},
0000000000000000000000000000000000000000;;				{Type: v1.NodeHostName, Address: string(name)},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ip, err := az.getIPForMachine(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("error: az.NodeAddresses, az.getIPForMachine(%s), err=%v", name, err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []v1.NodeAddress{
0000000000000000000000000000000000000000;;			{Type: v1.NodeInternalIP, Address: ip},
0000000000000000000000000000000000000000;;			{Type: v1.NodeHostName, Address: string(name)},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddressesByProviderID returns the node addresses of an instances with the specified unique providerID
0000000000000000000000000000000000000000;;	// This method will not be called from the node that is requesting this ID. i.e. metadata service
0000000000000000000000000000000000000000;;	// and other local methods cannot be used here
0000000000000000000000000000000000000000;;	func (az *Cloud) NodeAddressesByProviderID(providerID string) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		name, err := splitProviderID(providerID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return az.NodeAddresses(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalID returns the cloud provider ID of the specified instance (deprecated).
0000000000000000000000000000000000000000;;	func (az *Cloud) ExternalID(name types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		return az.InstanceID(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceID returns the cloud provider ID of the specified instance.
0000000000000000000000000000000000000000;;	// Note that if the instance does not exist or is no longer running, we must return ("", cloudprovider.InstanceNotFound)
0000000000000000000000000000000000000000;;	func (az *Cloud) InstanceID(name types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		var machine compute.VirtualMachine
0000000000000000000000000000000000000000;;		var exists bool
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		machine, exists, err = az.getVirtualMachine(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if az.CloudProviderBackoff {
0000000000000000000000000000000000000000;;				glog.V(2).Infof("InstanceID(%s) backing off", name)
0000000000000000000000000000000000000000;;				machine, exists, err = az.GetVirtualMachineWithRetry(name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					glog.V(2).Infof("InstanceID(%s) abort backoff", name)
0000000000000000000000000000000000000000;;					return "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if !exists {
0000000000000000000000000000000000000000;;			return "", cloudprovider.InstanceNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *machine.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceTypeByProviderID returns the cloudprovider instance type of the node with the specified unique providerID
0000000000000000000000000000000000000000;;	// This method will not be called from the node that is requesting this ID. i.e. metadata service
0000000000000000000000000000000000000000;;	// and other local methods cannot be used here
0000000000000000000000000000000000000000;;	func (az *Cloud) InstanceTypeByProviderID(providerID string) (string, error) {
0000000000000000000000000000000000000000;;		name, err := splitProviderID(providerID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return az.InstanceID(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceType returns the type of the specified instance.
0000000000000000000000000000000000000000;;	// Note that if the instance does not exist or is no longer running, we must return ("", cloudprovider.InstanceNotFound)
0000000000000000000000000000000000000000;;	// (Implementer Note): This is used by kubelet. Kubelet will label the node. Real log from kubelet:
0000000000000000000000000000000000000000;;	//       Adding node label from cloud provider: beta.kubernetes.io/instance-type=[value]
0000000000000000000000000000000000000000;;	func (az *Cloud) InstanceType(name types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		machine, exists, err := az.getVirtualMachine(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("error: az.InstanceType(%s), az.getVirtualMachine(%s) err=%v", name, name, err)
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		} else if !exists {
0000000000000000000000000000000000000000;;			return "", cloudprovider.InstanceNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(machine.HardwareProfile.VMSize), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddSSHKeyToAllInstances adds an SSH public key as a legal identity for all instances
0000000000000000000000000000000000000000;;	// expected format for the key is standard ssh-keygen format: <protocol> <blob>
0000000000000000000000000000000000000000;;	func (az *Cloud) AddSSHKeyToAllInstances(user string, keyData []byte) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("not supported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CurrentNodeName returns the name of the node we are currently running on
0000000000000000000000000000000000000000;;	// On most clouds (e.g. GCE) this is the hostname, so we provide the hostname
0000000000000000000000000000000000000000;;	func (az *Cloud) CurrentNodeName(hostname string) (types.NodeName, error) {
0000000000000000000000000000000000000000;;		return types.NodeName(hostname), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) listAllNodesInResourceGroup() ([]compute.VirtualMachine, error) {
0000000000000000000000000000000000000000;;		allNodes := []compute.VirtualMachine{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		result, err := az.VirtualMachinesClient.List(az.ResourceGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("error: az.listAllNodesInResourceGroup(), az.VirtualMachinesClient.List(%s), err=%v", az.ResourceGroup, err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		morePages := (result.Value != nil && len(*result.Value) > 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for morePages {
0000000000000000000000000000000000000000;;			allNodes = append(allNodes, *result.Value...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;			result, err = az.VirtualMachinesClient.ListAllNextResults(result)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("error: az.listAllNodesInResourceGroup(), az.VirtualMachinesClient.ListAllNextResults(%v), err=%v", result, err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			morePages = (result.Value != nil && len(*result.Value) > 1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allNodes, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapNodeNameToVMName maps a k8s NodeName to an Azure VM Name
0000000000000000000000000000000000000000;;	// This is a simple string cast.
0000000000000000000000000000000000000000;;	func mapNodeNameToVMName(nodeName types.NodeName) string {
0000000000000000000000000000000000000000;;		return string(nodeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapVMNameToNodeName maps an Azure VM Name to a k8s NodeName
0000000000000000000000000000000000000000;;	// This is a simple string cast.
0000000000000000000000000000000000000000;;	func mapVMNameToNodeName(vmName string) types.NodeName {
0000000000000000000000000000000000000000;;		return types.NodeName(vmName)
0000000000000000000000000000000000000000;;	}
