0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f050e96cf08b79e447c6733a930c9ec7df26eb44;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/azure-sdk-for-go/arm/compute"
0000000000000000000000000000000000000000;;		"github.com/Azure/azure-sdk-for-go/arm/network"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// checkExistsFromError inspects an error and returns a true if err is nil,
0000000000000000000000000000000000000000;;	// false if error is an autorest.Error with StatusCode=404 and will return the
0000000000000000000000000000000000000000;;	// error back if error is another status code or another type of error.
0000000000000000000000000000000000000000;;	func checkResourceExistsFromError(err error) (bool, error) {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, ok := err.(autorest.DetailedError)
0000000000000000000000000000000000000000;;		if ok && v.StatusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getVirtualMachine(nodeName types.NodeName) (vm compute.VirtualMachine, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vmName := string(nodeName)
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		vm, err = az.VirtualMachinesClient.Get(az.ResourceGroup, vmName, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return vm, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return vm, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return vm, exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getRouteTable() (routeTable network.RouteTable, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		routeTable, err = az.RouteTablesClient.Get(az.ResourceGroup, az.RouteTableName, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return routeTable, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return routeTable, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return routeTable, exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getSecurityGroup() (sg network.SecurityGroup, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		sg, err = az.SecurityGroupsClient.Get(az.ResourceGroup, az.SecurityGroupName, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return sg, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return sg, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sg, exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getAzureLoadBalancer(name string) (lb network.LoadBalancer, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		lb, err = az.LoadBalancerClient.Get(az.ResourceGroup, name, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return lb, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return lb, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lb, exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getPublicIPAddress(name string) (pip network.PublicIPAddress, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		pip, err = az.PublicIPAddressesClient.Get(az.ResourceGroup, name, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return pip, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return pip, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pip, exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getSubnet(virtualNetworkName string, subnetName string) (subnet network.Subnet, exists bool, err error) {
0000000000000000000000000000000000000000;;		var realErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		subnet, err = az.SubnetsClient.Get(az.ResourceGroup, virtualNetworkName, subnetName, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exists, realErr = checkResourceExistsFromError(err)
0000000000000000000000000000000000000000;;		if realErr != nil {
0000000000000000000000000000000000000000;;			return subnet, false, realErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return subnet, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return subnet, exists, err
0000000000000000000000000000000000000000;;	}
