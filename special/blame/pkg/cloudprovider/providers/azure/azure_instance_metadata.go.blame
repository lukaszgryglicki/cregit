0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2a4f886bf4664650d635da85e84a889b20d7ad4c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is just for tests injection
0000000000000000000000000000000000000000;;	var metadataURL = "http://169.254.169.254/metadata"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMetadataURLForTesting is used to modify the URL used for
0000000000000000000000000000000000000000;;	// accessing the metadata server. Should only be used for testing!
0000000000000000000000000000000000000000;;	func SetMetadataURLForTesting(url string) {
0000000000000000000000000000000000000000;;		metadataURL = url
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkMetadata contains metadata about an instance's network
0000000000000000000000000000000000000000;;	type NetworkMetadata struct {
0000000000000000000000000000000000000000;;		Interface []NetworkInterface `json:"interface"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkInterface represents an instances network interface.
0000000000000000000000000000000000000000;;	type NetworkInterface struct {
0000000000000000000000000000000000000000;;		IPV4 NetworkData `json:"ipv4"`
0000000000000000000000000000000000000000;;		IPV6 NetworkData `json:"ipv6"`
0000000000000000000000000000000000000000;;		MAC  string      `json:"macAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkData contains IP information for a network.
0000000000000000000000000000000000000000;;	type NetworkData struct {
0000000000000000000000000000000000000000;;		IPAddress []IPAddress `json:"ipAddress"`
0000000000000000000000000000000000000000;;		Subnet    []Subnet    `json:"subnet"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPAddress represents IP address information.
0000000000000000000000000000000000000000;;	type IPAddress struct {
0000000000000000000000000000000000000000;;		PrivateIP string `json:"privateIPAddress"`
0000000000000000000000000000000000000000;;		PublicIP  string `json:"publicIPAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subnet represents subnet information.
0000000000000000000000000000000000000000;;	type Subnet struct {
0000000000000000000000000000000000000000;;		Address string `json:"address"`
0000000000000000000000000000000000000000;;		Prefix  string `json:"prefix"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryMetadataJSON queries the metadata server and populates the passed in object
0000000000000000000000000000000000000000;;	func QueryMetadataJSON(path string, obj interface{}) error {
0000000000000000000000000000000000000000;;		data, err := queryMetadataBytes(path, "json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Unmarshal(data, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryMetadataText queries the metadata server and returns the corresponding text
0000000000000000000000000000000000000000;;	func QueryMetadataText(path string) (string, error) {
0000000000000000000000000000000000000000;;		data, err := queryMetadataBytes(path, "text")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(data), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func queryMetadataBytes(path, format string) ([]byte, error) {
0000000000000000000000000000000000000000;;		client := &http.Client{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", metadataURL+path, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Add("Metadata", "True")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q := req.URL.Query()
0000000000000000000000000000000000000000;;		q.Add("format", format)
0000000000000000000000000000000000000000;;		q.Add("api-version", "2017-04-02")
0000000000000000000000000000000000000000;;		req.URL.RawQuery = q.Encode()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;	}
