0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4dec6267c2fae1c336918a1fef3dfa5ba9bdb0f9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		azs "github.com/Azure/azure-sdk-for-go/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		vhdContainerName = "vhds"
0000000000000000000000000000000000000000;;		useHTTPS         = true
0000000000000000000000000000000000000000;;		blobServiceName  = "blob"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// create page blob
0000000000000000000000000000000000000000;;	func (az *Cloud) createVhdBlob(accountName, accountKey, name string, sizeGB int64, tags map[string]string) (string, string, error) {
0000000000000000000000000000000000000000;;		blobClient, err := az.getBlobClient(accountName, accountKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size := 1024 * 1024 * 1024 * sizeGB
0000000000000000000000000000000000000000;;		vhdSize := size + vhdHeaderSize /* header size */
0000000000000000000000000000000000000000;;		// Blob name in URL must end with '.vhd' extension.
0000000000000000000000000000000000000000;;		name = name + ".vhd"
0000000000000000000000000000000000000000;;		cnt := blobClient.GetContainerReference(vhdContainerName)
0000000000000000000000000000000000000000;;		b := cnt.GetBlobReference(name)
0000000000000000000000000000000000000000;;		b.Properties.ContentLength = vhdSize
0000000000000000000000000000000000000000;;		b.Metadata = tags
0000000000000000000000000000000000000000;;		err = b.PutPageBlob(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// if container doesn't exist, create one and retry PutPageBlob
0000000000000000000000000000000000000000;;			detail := err.Error()
0000000000000000000000000000000000000000;;			if strings.Contains(detail, errContainerNotFound) {
0000000000000000000000000000000000000000;;				err = cnt.Create(&azs.CreateContainerOptions{Access: azs.ContainerAccessTypePrivate})
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					b := cnt.GetBlobReference(name)
0000000000000000000000000000000000000000;;					b.Properties.ContentLength = vhdSize
0000000000000000000000000000000000000000;;					b.Metadata = tags
0000000000000000000000000000000000000000;;					err = b.PutPageBlob(nil)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("failed to put page blob: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// add VHD signature to the blob
0000000000000000000000000000000000000000;;		h, err := createVHDHeader(uint64(size))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			az.deleteVhdBlob(accountName, accountKey, name)
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("failed to create vhd header, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		blobRange := azs.BlobRange{
0000000000000000000000000000000000000000;;			Start: uint64(size),
0000000000000000000000000000000000000000;;			End:   uint64(vhdSize - 1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = b.WriteRange(blobRange, bytes.NewBuffer(h[:vhdHeaderSize]), nil); err != nil {
0000000000000000000000000000000000000000;;			az.deleteVhdBlob(accountName, accountKey, name)
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("failed to update vhd header, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := "http"
0000000000000000000000000000000000000000;;		if useHTTPS {
0000000000000000000000000000000000000000;;			scheme = "https"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		host := fmt.Sprintf("%s://%s.%s.%s", scheme, accountName, blobServiceName, az.Environment.StorageEndpointSuffix)
0000000000000000000000000000000000000000;;		uri := fmt.Sprintf("%s/%s/%s", host, vhdContainerName, name)
0000000000000000000000000000000000000000;;		return name, uri, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// delete a vhd blob
0000000000000000000000000000000000000000;;	func (az *Cloud) deleteVhdBlob(accountName, accountKey, blobName string) error {
0000000000000000000000000000000000000000;;		blobClient, err := az.getBlobClient(accountName, accountKey)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			cnt := blobClient.GetContainerReference(vhdContainerName)
0000000000000000000000000000000000000000;;			b := cnt.GetBlobReference(blobName)
0000000000000000000000000000000000000000;;			return b.Delete(nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (az *Cloud) getBlobClient(accountName, accountKey string) (*azs.BlobStorageClient, error) {
0000000000000000000000000000000000000000;;		client, err := azs.NewClient(accountName, accountKey, az.Environment.StorageEndpointSuffix, azs.DefaultAPIVersion, useHTTPS)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error creating azure client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := client.GetBlobService()
0000000000000000000000000000000000000000;;		return &b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// get uri https://foo.blob.core.windows.net/vhds/bar.vhd and return foo (account) and bar.vhd (blob name)
0000000000000000000000000000000000000000;;	func (az *Cloud) getBlobNameAndAccountFromURI(uri string) (string, string, error) {
0000000000000000000000000000000000000000;;		scheme := "http"
0000000000000000000000000000000000000000;;		if useHTTPS {
0000000000000000000000000000000000000000;;			scheme = "https"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		host := fmt.Sprintf("%s://(.*).%s.%s", scheme, blobServiceName, az.Environment.StorageEndpointSuffix)
0000000000000000000000000000000000000000;;		reStr := fmt.Sprintf("%s/%s/(.*)", host, vhdContainerName)
0000000000000000000000000000000000000000;;		re := regexp.MustCompile(reStr)
0000000000000000000000000000000000000000;;		res := re.FindSubmatch([]byte(uri))
0000000000000000000000000000000000000000;;		if len(res) < 3 {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("invalid vhd URI for regex %s: %s", reStr, uri)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(res[1]), string(res[2]), nil
0000000000000000000000000000000000000000;;	}
