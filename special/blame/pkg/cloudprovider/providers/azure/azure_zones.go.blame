0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f050e96cf08b79e447c6733a930c9ec7df26eb44;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const instanceInfoURL = "http://169.254.169.254/metadata/v1/InstanceInfo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var faultMutex = &sync.Mutex{}
0000000000000000000000000000000000000000;;	var faultDomain *string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type instanceInfo struct {
0000000000000000000000000000000000000000;;		ID           string `json:"ID"`
0000000000000000000000000000000000000000;;		UpdateDomain string `json:"UD"`
0000000000000000000000000000000000000000;;		FaultDomain  string `json:"FD"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetZone returns the Zone containing the current failure zone and locality region that the program is running in
0000000000000000000000000000000000000000;;	func (az *Cloud) GetZone() (cloudprovider.Zone, error) {
0000000000000000000000000000000000000000;;		faultMutex.Lock()
0000000000000000000000000000000000000000;;		if faultDomain == nil {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			faultDomain, err = fetchFaultDomain()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return cloudprovider.Zone{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone := cloudprovider.Zone{
0000000000000000000000000000000000000000;;			FailureDomain: *faultDomain,
0000000000000000000000000000000000000000;;			Region:        az.Location,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		faultMutex.Unlock()
0000000000000000000000000000000000000000;;		return zone, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fetchFaultDomain() (*string, error) {
0000000000000000000000000000000000000000;;		resp, err := http.Get(instanceInfoURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		return readFaultDomain(resp.Body)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readFaultDomain(reader io.Reader) (*string, error) {
0000000000000000000000000000000000000000;;		var instanceInfo instanceInfo
0000000000000000000000000000000000000000;;		body, err := ioutil.ReadAll(reader)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(body, &instanceInfo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &instanceInfo.FaultDomain, nil
0000000000000000000000000000000000000000;;	}
