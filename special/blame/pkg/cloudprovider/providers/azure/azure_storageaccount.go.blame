0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4dec6267c2fae1c336918a1fef3dfa5ba9bdb0f9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type accountWithLocation struct {
0000000000000000000000000000000000000000;;		Name, StorageType, Location string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getStorageAccounts gets the storage accounts' name, type, location in a resource group
0000000000000000000000000000000000000000;;	func (az *Cloud) getStorageAccounts() ([]accountWithLocation, error) {
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		result, err := az.StorageAccountClient.ListByResourceGroup(az.ResourceGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result.Value == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no storage accounts from resource group %s", az.ResourceGroup)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		accounts := []accountWithLocation{}
0000000000000000000000000000000000000000;;		for _, acct := range *result.Value {
0000000000000000000000000000000000000000;;			if acct.Name != nil {
0000000000000000000000000000000000000000;;				name := *acct.Name
0000000000000000000000000000000000000000;;				loc := ""
0000000000000000000000000000000000000000;;				if acct.Location != nil {
0000000000000000000000000000000000000000;;					loc = *acct.Location
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				storageType := ""
0000000000000000000000000000000000000000;;				if acct.Sku != nil {
0000000000000000000000000000000000000000;;					storageType = string((*acct.Sku).Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				accounts = append(accounts, accountWithLocation{Name: name, StorageType: storageType, Location: loc})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return accounts, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getStorageAccesskey gets the storage account access key
0000000000000000000000000000000000000000;;	func (az *Cloud) getStorageAccesskey(account string) (string, error) {
0000000000000000000000000000000000000000;;		az.operationPollRateLimiter.Accept()
0000000000000000000000000000000000000000;;		result, err := az.StorageAccountClient.ListKeys(az.ResourceGroup, account)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result.Keys == nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("empty keys")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, k := range *result.Keys {
0000000000000000000000000000000000000000;;			if k.Value != nil && *k.Value != "" {
0000000000000000000000000000000000000000;;				v := *k.Value
0000000000000000000000000000000000000000;;				if ind := strings.LastIndex(v, " "); ind >= 0 {
0000000000000000000000000000000000000000;;					v = v[(ind + 1):]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return v, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("no valid keys")
0000000000000000000000000000000000000000;;	}
