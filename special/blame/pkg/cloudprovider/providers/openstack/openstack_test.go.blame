0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0bdc5b25c1641c2bffdfb0a6f5f80cb829771a8a;pkg/cloudprovider/openstack/openstack_test.go[pkg/cloudprovider/openstack/openstack_test.go][pkg/cloudprovider/providers/openstack/openstack_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/blockstorage/v1/apiversions"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		volumeAvailableStatus = "available"
0000000000000000000000000000000000000000;;		volumeInUseStatus     = "in-use"
0000000000000000000000000000000000000000;;		testClusterName       = "testCluster"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeStatusTimeoutSeconds = 30
0000000000000000000000000000000000000000;;		// volumeStatus* is configuration of exponential backoff for
0000000000000000000000000000000000000000;;		// waiting for specified volume status. Starting with 1
0000000000000000000000000000000000000000;;		// seconds, multiplying by 1.2 with each step and taking 13 steps at maximum
0000000000000000000000000000000000000000;;		// it will time out after 32s, which roughly corresponds to 30s
0000000000000000000000000000000000000000;;		volumeStatusInitDealy = 1 * time.Second
0000000000000000000000000000000000000000;;		volumeStatusFactor    = 1.2
0000000000000000000000000000000000000000;;		volumeStatusSteps     = 13
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WaitForVolumeStatus(t *testing.T, os *OpenStack, volumeName string, status string) {
0000000000000000000000000000000000000000;;		backoff := wait.Backoff{
0000000000000000000000000000000000000000;;			Duration: volumeStatusInitDealy,
0000000000000000000000000000000000000000;;			Factor:   volumeStatusFactor,
0000000000000000000000000000000000000000;;			Steps:    volumeStatusSteps,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := wait.ExponentialBackoff(backoff, func() (bool, error) {
0000000000000000000000000000000000000000;;			getVol, err := os.getVolume(volumeName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if getVol.Status == status {
0000000000000000000000000000000000000000;;				t.Logf("Volume (%s) status changed to %s after %v seconds\n",
0000000000000000000000000000000000000000;;					volumeName,
0000000000000000000000000000000000000000;;					status,
0000000000000000000000000000000000000000;;					volumeStatusTimeoutSeconds)
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err == wait.ErrWaitTimeout {
0000000000000000000000000000000000000000;;			t.Logf("Volume (%s) status did not change to %s after %v seconds\n",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				status,
0000000000000000000000000000000000000000;;				volumeStatusTimeoutSeconds)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot get existing Cinder volume (%s): %v", volumeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := readConfig(nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when no config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg, err := readConfig(strings.NewReader(`
0000000000000000000000000000000000000000;;	 [Global]
0000000000000000000000000000000000000000;;	 auth-url = http://auth.url
0000000000000000000000000000000000000000;;	 username = user
0000000000000000000000000000000000000000;;	 [LoadBalancer]
0000000000000000000000000000000000000000;;	 create-monitor = yes
0000000000000000000000000000000000000000;;	 monitor-delay = 1m
0000000000000000000000000000000000000000;;	 monitor-timeout = 30s
0000000000000000000000000000000000000000;;	 monitor-max-retries = 3
0000000000000000000000000000000000000000;;	 [BlockStorage]
0000000000000000000000000000000000000000;;	 bs-version = auto
0000000000000000000000000000000000000000;;	 trust-device-path = yes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 `))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when a valid config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.Global.AuthUrl != "http://auth.url" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect authurl: %s", cfg.Global.AuthUrl)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !cfg.LoadBalancer.CreateMonitor {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.createmonitor: %t", cfg.LoadBalancer.CreateMonitor)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorDelay.Duration != 1*time.Minute {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitordelay: %s", cfg.LoadBalancer.MonitorDelay)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorTimeout.Duration != 30*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitortimeout: %s", cfg.LoadBalancer.MonitorTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorMaxRetries != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitormaxretries: %d", cfg.LoadBalancer.MonitorMaxRetries)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.BlockStorage.TrustDevicePath != true {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect bs.trustdevicepath: %v", cfg.BlockStorage.TrustDevicePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.BlockStorage.BSVersion != "auto" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect bs.bs-version: %v", cfg.BlockStorage.BSVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToAuthOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg := Config{}
0000000000000000000000000000000000000000;;		cfg.Global.Username = "user"
0000000000000000000000000000000000000000;;		// etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ao := cfg.toAuthOptions()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ao.AllowReauth {
0000000000000000000000000000000000000000;;			t.Errorf("Will need to be able to reauthenticate")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ao.Username != cfg.Global.Username {
0000000000000000000000000000000000000000;;			t.Errorf("Username %s != %s", ao.Username, cfg.Global.Username)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckOpenStackOpts(t *testing.T) {
0000000000000000000000000000000000000000;;		delay := MyDuration{60 * time.Second}
0000000000000000000000000000000000000000;;		timeout := MyDuration{30 * time.Second}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			openstackOpts *OpenStack
0000000000000000000000000000000000000000;;			expectedError error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test1",
0000000000000000000000000000000000000000;;				openstackOpts: &OpenStack{
0000000000000000000000000000000000000000;;					provider: nil,
0000000000000000000000000000000000000000;;					lbOpts: LoadBalancerOpts{
0000000000000000000000000000000000000000;;						LBVersion:            "v2",
0000000000000000000000000000000000000000;;						SubnetId:             "6261548e-ffde-4bc7-bd22-59c83578c5ef",
0000000000000000000000000000000000000000;;						FloatingNetworkId:    "38b8b5f9-64dc-4424-bf86-679595714786",
0000000000000000000000000000000000000000;;						LBMethod:             "ROUND_ROBIN",
0000000000000000000000000000000000000000;;						CreateMonitor:        true,
0000000000000000000000000000000000000000;;						MonitorDelay:         delay,
0000000000000000000000000000000000000000;;						MonitorTimeout:       timeout,
0000000000000000000000000000000000000000;;						MonitorMaxRetries:    uint(3),
0000000000000000000000000000000000000000;;						ManageSecurityGroups: true,
0000000000000000000000000000000000000000;;						NodeSecurityGroupID:  "b41d28c2-d02f-4e1e-8ffb-23b8e4f5c144",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test2",
0000000000000000000000000000000000000000;;				openstackOpts: &OpenStack{
0000000000000000000000000000000000000000;;					provider: nil,
0000000000000000000000000000000000000000;;					lbOpts: LoadBalancerOpts{
0000000000000000000000000000000000000000;;						LBVersion:            "v2",
0000000000000000000000000000000000000000;;						FloatingNetworkId:    "38b8b5f9-64dc-4424-bf86-679595714786",
0000000000000000000000000000000000000000;;						LBMethod:             "ROUND_ROBIN",
0000000000000000000000000000000000000000;;						CreateMonitor:        true,
0000000000000000000000000000000000000000;;						MonitorDelay:         delay,
0000000000000000000000000000000000000000;;						MonitorTimeout:       timeout,
0000000000000000000000000000000000000000;;						MonitorMaxRetries:    uint(3),
0000000000000000000000000000000000000000;;						ManageSecurityGroups: true,
0000000000000000000000000000000000000000;;						NodeSecurityGroupID:  "b41d28c2-d02f-4e1e-8ffb-23b8e4f5c144",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: fmt.Errorf("subnet-id not set in cloud provider config"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test3",
0000000000000000000000000000000000000000;;				openstackOpts: &OpenStack{
0000000000000000000000000000000000000000;;					provider: nil,
0000000000000000000000000000000000000000;;					lbOpts: LoadBalancerOpts{
0000000000000000000000000000000000000000;;						LBVersion:            "v2",
0000000000000000000000000000000000000000;;						SubnetId:             "6261548e-ffde-4bc7-bd22-59c83578c5ef",
0000000000000000000000000000000000000000;;						FloatingNetworkId:    "38b8b5f9-64dc-4424-bf86-679595714786",
0000000000000000000000000000000000000000;;						LBMethod:             "ROUND_ROBIN",
0000000000000000000000000000000000000000;;						CreateMonitor:        true,
0000000000000000000000000000000000000000;;						ManageSecurityGroups: true,
0000000000000000000000000000000000000000;;						NodeSecurityGroupID:  "b41d28c2-d02f-4e1e-8ffb-23b8e4f5c144",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: fmt.Errorf("monitor-delay not set in cloud provider config"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test4",
0000000000000000000000000000000000000000;;				openstackOpts: &OpenStack{
0000000000000000000000000000000000000000;;					provider: nil,
0000000000000000000000000000000000000000;;					lbOpts: LoadBalancerOpts{
0000000000000000000000000000000000000000;;						LBVersion:            "v2",
0000000000000000000000000000000000000000;;						SubnetId:             "6261548e-ffde-4bc7-bd22-59c83578c5ef",
0000000000000000000000000000000000000000;;						FloatingNetworkId:    "38b8b5f9-64dc-4424-bf86-679595714786",
0000000000000000000000000000000000000000;;						LBMethod:             "ROUND_ROBIN",
0000000000000000000000000000000000000000;;						CreateMonitor:        true,
0000000000000000000000000000000000000000;;						MonitorDelay:         delay,
0000000000000000000000000000000000000000;;						MonitorTimeout:       timeout,
0000000000000000000000000000000000000000;;						MonitorMaxRetries:    uint(3),
0000000000000000000000000000000000000000;;						ManageSecurityGroups: true,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: fmt.Errorf("node-security-group not set in cloud provider config"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testcase := range tests {
0000000000000000000000000000000000000000;;			err := checkOpenStackOpts(testcase.openstackOpts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil && testcase.expectedError == nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (err != nil && testcase.expectedError == nil) || (err == nil && testcase.expectedError != nil) || err.Error() != testcase.expectedError.Error() {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed: expected err=%q, got %q",
0000000000000000000000000000000000000000;;					testcase.name, testcase.expectedError, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCaller(t *testing.T) {
0000000000000000000000000000000000000000;;		called := false
0000000000000000000000000000000000000000;;		myFunc := func() { called = true }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := NewCaller()
0000000000000000000000000000000000000000;;		c.Call(myFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !called {
0000000000000000000000000000000000000000;;			t.Errorf("Caller failed to call function in default case")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Disarm()
0000000000000000000000000000000000000000;;		called = false
0000000000000000000000000000000000000000;;		c.Call(myFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if called {
0000000000000000000000000000000000000000;;			t.Error("Caller still called function when disarmed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Confirm the "usual" deferred Caller pattern works as expected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		called = false
0000000000000000000000000000000000000000;;		success_case := func() {
0000000000000000000000000000000000000000;;			c := NewCaller()
0000000000000000000000000000000000000000;;			defer c.Call(func() { called = true })
0000000000000000000000000000000000000000;;			c.Disarm()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if success_case(); called {
0000000000000000000000000000000000000000;;			t.Error("Deferred success case still invoked unwind")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		called = false
0000000000000000000000000000000000000000;;		failure_case := func() {
0000000000000000000000000000000000000000;;			c := NewCaller()
0000000000000000000000000000000000000000;;			defer c.Call(func() { called = true })
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if failure_case(); !called {
0000000000000000000000000000000000000000;;			t.Error("Deferred failure case failed to invoke unwind")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An arbitrary sort.Interface, just for easier comparison
0000000000000000000000000000000000000000;;	type AddressSlice []v1.NodeAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a AddressSlice) Len() int           { return len(a) }
0000000000000000000000000000000000000000;;	func (a AddressSlice) Less(i, j int) bool { return a[i].Address < a[j].Address }
0000000000000000000000000000000000000000;;	func (a AddressSlice) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAddresses(t *testing.T) {
0000000000000000000000000000000000000000;;		srv := servers.Server{
0000000000000000000000000000000000000000;;			Status:     "ACTIVE",
0000000000000000000000000000000000000000;;			HostID:     "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;			AccessIPv4: "50.56.176.99",
0000000000000000000000000000000000000000;;			AccessIPv6: "2001:4800:790e:510:be76:4eff:fe04:82a8",
0000000000000000000000000000000000000000;;			Addresses: map[string]interface{}{
0000000000000000000000000000000000000000;;				"private": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:7c:1b:2b",
0000000000000000000000000000000000000000;;						"version":                 float64(4),
0000000000000000000000000000000000000000;;						"addr":                    "10.0.0.32",
0000000000000000000000000000000000000000;;						"OS-EXT-IPS:type":         "fixed",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"version":         float64(4),
0000000000000000000000000000000000000000;;						"addr":            "50.56.176.36",
0000000000000000000000000000000000000000;;						"OS-EXT-IPS:type": "floating",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"version": float64(4),
0000000000000000000000000000000000000000;;						"addr":    "10.0.0.31",
0000000000000000000000000000000000000000;;						// No OS-EXT-IPS:type
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"public": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"version": float64(4),
0000000000000000000000000000000000000000;;						"addr":    "50.56.176.35",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"version": float64(6),
0000000000000000000000000000000000000000;;						"addr":    "2001:4800:780e:510:be76:4eff:fe04:84a8",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addrs, err := nodeAddresses(&srv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("nodeAddresses returned error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Sort(AddressSlice(addrs))
0000000000000000000000000000000000000000;;		t.Logf("addresses is %v", addrs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := []v1.NodeAddress{
0000000000000000000000000000000000000000;;			{Type: v1.NodeInternalIP, Address: "10.0.0.31"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeInternalIP, Address: "10.0.0.32"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: "2001:4800:780e:510:be76:4eff:fe04:84a8"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: "2001:4800:790e:510:be76:4eff:fe04:82a8"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: "50.56.176.35"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: "50.56.176.36"},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: "50.56.176.99"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(want, addrs) {
0000000000000000000000000000000000000000;;			t.Errorf("nodeAddresses returned incorrect value %v", addrs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This allows acceptance testing against an existing OpenStack
0000000000000000000000000000000000000000;;	// install, using the standard OS_* OpenStack client environment
0000000000000000000000000000000000000000;;	// variables.
0000000000000000000000000000000000000000;;	// FIXME: it would be better to hermetically test against canned JSON
0000000000000000000000000000000000000000;;	// requests/responses.
0000000000000000000000000000000000000000;;	func configFromEnv() (cfg Config, ok bool) {
0000000000000000000000000000000000000000;;		cfg.Global.AuthUrl = os.Getenv("OS_AUTH_URL")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.Global.TenantId = os.Getenv("OS_TENANT_ID")
0000000000000000000000000000000000000000;;		// Rax/nova _insists_ that we don't specify both tenant ID and name
0000000000000000000000000000000000000000;;		if cfg.Global.TenantId == "" {
0000000000000000000000000000000000000000;;			cfg.Global.TenantName = os.Getenv("OS_TENANT_NAME")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.Global.Username = os.Getenv("OS_USERNAME")
0000000000000000000000000000000000000000;;		cfg.Global.Password = os.Getenv("OS_PASSWORD")
0000000000000000000000000000000000000000;;		cfg.Global.Region = os.Getenv("OS_REGION_NAME")
0000000000000000000000000000000000000000;;		cfg.Global.DomainId = os.Getenv("OS_DOMAIN_ID")
0000000000000000000000000000000000000000;;		cfg.Global.DomainName = os.Getenv("OS_DOMAIN_NAME")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok = (cfg.Global.AuthUrl != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.Username != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.Password != "" &&
0000000000000000000000000000000000000000;;			(cfg.Global.TenantId != "" || cfg.Global.TenantName != "" ||
0000000000000000000000000000000000000000;;				cfg.Global.DomainId != "" || cfg.Global.DomainName != ""))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewOpenStack(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := newOpenStack(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate OpenStack: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadBalancer(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		versions := []string{"v1", "v2", ""}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range versions {
0000000000000000000000000000000000000000;;			t.Logf("Trying LBVersion = '%s'\n", v)
0000000000000000000000000000000000000000;;			cfg.LoadBalancer.LBVersion = v
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			os, err := newOpenStack(cfg)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to construct/authenticate OpenStack: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			lb, ok := os.LoadBalancer()
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Fatalf("LoadBalancer() returned false - perhaps your stack doesn't support Neutron?")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, exists, err := lb.GetLoadBalancer(testClusterName, &v1.Service{ObjectMeta: metav1.ObjectMeta{Name: "noexist"}})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("GetLoadBalancer(\"noexist\") returned error: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exists {
0000000000000000000000000000000000000000;;				t.Fatalf("GetLoadBalancer(\"noexist\") returned exists")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestZones(t *testing.T) {
0000000000000000000000000000000000000000;;		SetMetadataFixture(&FakeMetadata)
0000000000000000000000000000000000000000;;		defer ClearMetadata()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os := OpenStack{
0000000000000000000000000000000000000000;;			provider: &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;				IdentityBase: "http://auth.url/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			region: "myRegion",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		z, ok := os.Zones()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Zones() returned false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zone, err := z.GetZone()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("GetZone() returned error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if zone.Region != "myRegion" {
0000000000000000000000000000000000000000;;			t.Fatalf("GetZone() returned wrong region (%s)", zone.Region)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if zone.FailureDomain != "nova" {
0000000000000000000000000000000000000000;;			t.Fatalf("GetZone() returned wrong failure domain (%s)", zone.FailureDomain)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os, err := newOpenStack(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate OpenStack: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tags := map[string]string{
0000000000000000000000000000000000000000;;			"test": "value",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		vol, _, err := os.CreateVolume("kubernetes-test-volume-"+rand.String(10), 1, "", "", &tags)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot create a new Cinder volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Volume (%s) created\n", vol)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WaitForVolumeStatus(t, os, vol, volumeAvailableStatus)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		diskId, err := os.AttachDisk(os.localInstanceID, vol)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot AttachDisk Cinder volume %s: %v", vol, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Volume (%s) attached, disk ID: %s\n", vol, diskId)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WaitForVolumeStatus(t, os, vol, volumeInUseStatus)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		devicePath := os.GetDevicePath(diskId)
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(devicePath, "/dev/disk/by-id/") {
0000000000000000000000000000000000000000;;			t.Fatalf("GetDevicePath returned and unexpected path for Cinder volume %s, returned %s", vol, devicePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Volume (%s) found at path: %s\n", vol, devicePath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = os.DetachDisk(os.localInstanceID, vol)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot DetachDisk Cinder volume %s: %v", vol, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Volume (%s) detached\n", vol)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WaitForVolumeStatus(t, os, vol, volumeAvailableStatus)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = os.DeleteVolume(vol)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot delete Cinder volume %s: %v", vol, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Volume (%s) deleted\n", vol)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCinderAutoDetectApiVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		updated := "" // not relevant to this test, can be set to any value
0000000000000000000000000000000000000000;;		status_current := "CURRENT"
0000000000000000000000000000000000000000;;		status_supported := "SUPpORTED" // lowercase to test regression resitance if api returns different case
0000000000000000000000000000000000000000;;		status_deprecated := "DEPRECATED"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var result_version, api_version [4]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for ver := 0; ver <= 3; ver++ {
0000000000000000000000000000000000000000;;			api_version[ver] = fmt.Sprintf("v%d.0", ver)
0000000000000000000000000000000000000000;;			result_version[ver] = fmt.Sprintf("v%d", ver)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result_version[0] = ""
0000000000000000000000000000000000000000;;		api_current_v1 := apiversions.APIVersion{ID: api_version[1], Status: status_current, Updated: updated}
0000000000000000000000000000000000000000;;		api_current_v2 := apiversions.APIVersion{ID: api_version[2], Status: status_current, Updated: updated}
0000000000000000000000000000000000000000;;		api_current_v3 := apiversions.APIVersion{ID: api_version[3], Status: status_current, Updated: updated}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api_supported_v1 := apiversions.APIVersion{ID: api_version[1], Status: status_supported, Updated: updated}
0000000000000000000000000000000000000000;;		api_supported_v2 := apiversions.APIVersion{ID: api_version[2], Status: status_supported, Updated: updated}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api_deprecated_v1 := apiversions.APIVersion{ID: api_version[1], Status: status_deprecated, Updated: updated}
0000000000000000000000000000000000000000;;		api_deprecated_v2 := apiversions.APIVersion{ID: api_version[2], Status: status_deprecated, Updated: updated}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var testCases = []struct {
0000000000000000000000000000000000000000;;			test_case     []apiversions.APIVersion
0000000000000000000000000000000000000000;;			wanted_result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_current_v1}, result_version[1]},
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_current_v2}, result_version[2]},
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_supported_v1, api_current_v2}, result_version[2]},                     // current always selected
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_current_v1, api_supported_v2}, result_version[1]},                     // current always selected
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_current_v3, api_supported_v2, api_deprecated_v1}, result_version[2]},  // with current v3, but should fall back to v2
0000000000000000000000000000000000000000;;			{[]apiversions.APIVersion{api_current_v3, api_deprecated_v2, api_deprecated_v1}, result_version[0]}, // v3 is not supported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, suite := range testCases {
0000000000000000000000000000000000000000;;			if autodetectedVersion := doBsApiVersionAutodetect(suite.test_case); autodetectedVersion != suite.wanted_result {
0000000000000000000000000000000000000000;;				t.Fatalf("Autodetect for suite: %s, failed with result: '%s', wanted '%s'", suite.test_case, autodetectedVersion, suite.wanted_result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInstanceIDFromProviderID(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			providerID string
0000000000000000000000000000000000000000;;			instanceID string
0000000000000000000000000000000000000000;;			fail       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: "openstack://7b9cf879-7146-417c-abfd-cb4272f0c935",
0000000000000000000000000000000000000000;;				instanceID: "7b9cf879-7146-417c-abfd-cb4272f0c935",
0000000000000000000000000000000000000000;;				fail:       false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: "7b9cf879-7146-417c-abfd-cb4272f0c935",
0000000000000000000000000000000000000000;;				instanceID: "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: "other-provider://7b9cf879-7146-417c-abfd-cb4272f0c935",
0000000000000000000000000000000000000000;;				instanceID: "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			instanceID, err := instanceIDFromProviderID(test.providerID)
0000000000000000000000000000000000000000;;			if (err != nil) != test.fail {
0000000000000000000000000000000000000000;;				t.Errorf("%s yielded `err != nil` as %t. expected %t", test.providerID, (err != nil), test.fail)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.fail {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if instanceID != test.instanceID {
0000000000000000000000000000000000000000;;				t.Errorf("%s yielded %s. expected %s", test.providerID, instanceID, test.instanceID)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
