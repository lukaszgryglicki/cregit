0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
124fde27261349bdcd84ba3aa14da22f0130b997;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var FakeMetadata = Metadata{
0000000000000000000000000000000000000000;;		Uuid:             "83679162-1378-4288-a2d4-70e13ec132aa",
0000000000000000000000000000000000000000;;		Name:             "test",
0000000000000000000000000000000000000000;;		AvailabilityZone: "nova",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetMetadataFixture(value *Metadata) {
0000000000000000000000000000000000000000;;		metadataCache = value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ClearMetadata() {
0000000000000000000000000000000000000000;;		metadataCache = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseMetadata(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := parseMetadata(strings.NewReader("bogus"))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when bad data is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data := strings.NewReader(`
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "availability_zone": "nova",
0000000000000000000000000000000000000000;;	    "files": [
0000000000000000000000000000000000000000;;	        {
0000000000000000000000000000000000000000;;	            "content_path": "/content/0000",
0000000000000000000000000000000000000000;;	            "path": "/etc/network/interfaces"
0000000000000000000000000000000000000000;;	        },
0000000000000000000000000000000000000000;;	        {
0000000000000000000000000000000000000000;;	            "content_path": "/content/0001",
0000000000000000000000000000000000000000;;	            "path": "known_hosts"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    ],
0000000000000000000000000000000000000000;;	    "hostname": "test.novalocal",
0000000000000000000000000000000000000000;;	    "launch_index": 0,
0000000000000000000000000000000000000000;;	    "name": "test",
0000000000000000000000000000000000000000;;	    "meta": {
0000000000000000000000000000000000000000;;	        "role": "webservers",
0000000000000000000000000000000000000000;;	        "essential": "false"
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "public_keys": {
0000000000000000000000000000000000000000;;	        "mykey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDBqUfVvCSez0/Wfpd8dLLgZXV9GtXQ7hnMN+Z0OWQUyebVEHey1CXuin0uY1cAJMhUq8j98SiW+cU0sU4J3x5l2+xi1bodDm1BtFWVeLIOQINpfV1n8fKjHB+ynPpe1F6tMDvrFGUlJs44t30BrujMXBe8Rq44cCk6wqyjATA3rQ== Generated by Nova\n"
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "uuid": "83679162-1378-4288-a2d4-70e13ec132aa"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		md, err := parseMetadata(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when provided with valid data: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if md.Name != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect name: %s", md.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if md.Uuid != "83679162-1378-4288-a2d4-70e13ec132aa" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect uuid: %s", md.Uuid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if md.AvailabilityZone != "nova" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect az: %s", md.AvailabilityZone)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
