0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a115a1d7b866bbd70f48a3e45f564d33d4a97e5c;pkg/cloudprovider/ovirt/ovirt.go[pkg/cloudprovider/ovirt/ovirt.go][pkg/cloudprovider/providers/ovirt/ovirt.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ovirt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"gopkg.in/gcfg.v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ProviderName = "ovirt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OVirtInstance struct {
0000000000000000000000000000000000000000;;		UUID      string
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;		IPAddress string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OVirtInstanceMap map[string]OVirtInstance
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OVirtCloud struct {
0000000000000000000000000000000000000000;;		VmsRequest   *url.URL
0000000000000000000000000000000000000000;;		HostsRequest *url.URL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OVirtApiConfig struct {
0000000000000000000000000000000000000000;;		Connection struct {
0000000000000000000000000000000000000000;;			ApiEntry string `gcfg:"uri"`
0000000000000000000000000000000000000000;;			Username string `gcfg:"username"`
0000000000000000000000000000000000000000;;			Password string `gcfg:"password"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Filters struct {
0000000000000000000000000000000000000000;;			VmsQuery string `gcfg:"vms"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlVmAddress struct {
0000000000000000000000000000000000000000;;		Address string `xml:"address,attr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlVmInfo struct {
0000000000000000000000000000000000000000;;		UUID      string         `xml:"id,attr"`
0000000000000000000000000000000000000000;;		Name      string         `xml:"name"`
0000000000000000000000000000000000000000;;		Hostname  string         `xml:"guest_info>fqdn"`
0000000000000000000000000000000000000000;;		Addresses []XmlVmAddress `xml:"guest_info>ips>ip"`
0000000000000000000000000000000000000000;;		State     string         `xml:"status>state"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlVmsList struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name    `xml:"vms"`
0000000000000000000000000000000000000000;;		Vm      []XmlVmInfo `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		cloudprovider.RegisterCloudProvider(ProviderName,
0000000000000000000000000000000000000000;;			func(config io.Reader) (cloudprovider.Interface, error) {
0000000000000000000000000000000000000000;;				return newOVirtCloud(config)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newOVirtCloud(config io.Reader) (*OVirtCloud, error) {
0000000000000000000000000000000000000000;;		if config == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("missing configuration file for ovirt cloud provider")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oVirtConfig := OVirtApiConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		/* defaults */
0000000000000000000000000000000000000000;;		oVirtConfig.Connection.Username = "admin@internal"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := gcfg.ReadInto(&oVirtConfig, config); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if oVirtConfig.Connection.ApiEntry == "" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("missing ovirt uri in cloud provider configuration")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		request, err := url.Parse(oVirtConfig.Connection.ApiEntry)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		request.Path = path.Join(request.Path, "vms")
0000000000000000000000000000000000000000;;		request.User = url.UserPassword(oVirtConfig.Connection.Username, oVirtConfig.Connection.Password)
0000000000000000000000000000000000000000;;		request.RawQuery = url.Values{"search": {oVirtConfig.Filters.VmsQuery}}.Encode()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &OVirtCloud{VmsRequest: request}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialize passes a Kubernetes clientBuilder interface to the cloud provider
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) Initialize(clientBuilder controller.ControllerClientBuilder) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) Clusters() (cloudprovider.Clusters, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderName returns the cloud provider ID.
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) ProviderName() string {
0000000000000000000000000000000000000000;;		return ProviderName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScrubDNS filters DNS settings for pods.
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) ScrubDNS(nameservers, searches []string) (nsOut, srchOut []string) {
0000000000000000000000000000000000000000;;		return nameservers, searches
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancer returns an implementation of LoadBalancer for oVirt cloud
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) LoadBalancer() (cloudprovider.LoadBalancer, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instances returns an implementation of Instances for oVirt cloud
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) Instances() (cloudprovider.Instances, bool) {
0000000000000000000000000000000000000000;;		return v, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zones returns an implementation of Zones for oVirt cloud
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) Zones() (cloudprovider.Zones, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routes returns an implementation of Routes for oVirt cloud
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) Routes() (cloudprovider.Routes, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddresses returns the NodeAddresses of the instance with the specified nodeName.
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) NodeAddresses(nodeName types.NodeName) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		name := mapNodeNameToInstanceName(nodeName)
0000000000000000000000000000000000000000;;		instance, err := v.fetchInstance(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var address net.IP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if instance.IPAddress != "" {
0000000000000000000000000000000000000000;;			address = net.ParseIP(instance.IPAddress)
0000000000000000000000000000000000000000;;			if address == nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("couldn't parse address: %s", instance.IPAddress)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			resolved, err := net.LookupIP(name)
0000000000000000000000000000000000000000;;			if err != nil || len(resolved) < 1 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("couldn't lookup address: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			address = resolved[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []v1.NodeAddress{
0000000000000000000000000000000000000000;;			{Type: v1.NodeInternalIP, Address: address.String()},
0000000000000000000000000000000000000000;;			{Type: v1.NodeExternalIP, Address: address.String()},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeAddressesByProviderID returns the node addresses of an instances with the specified unique providerID
0000000000000000000000000000000000000000;;	// This method will not be called from the node that is requesting this ID. i.e. metadata service
0000000000000000000000000000000000000000;;	// and other local methods cannot be used here
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) NodeAddressesByProviderID(providerID string) ([]v1.NodeAddress, error) {
0000000000000000000000000000000000000000;;		return []v1.NodeAddress{}, errors.New("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapNodeNameToInstanceName maps from a k8s NodeName to an ovirt instance name (the hostname)
0000000000000000000000000000000000000000;;	// This is a simple string cast
0000000000000000000000000000000000000000;;	func mapNodeNameToInstanceName(nodeName types.NodeName) string {
0000000000000000000000000000000000000000;;		return string(nodeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalID returns the cloud provider ID of the specified node with the specified NodeName (deprecated).
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) ExternalID(nodeName types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		name := mapNodeNameToInstanceName(nodeName)
0000000000000000000000000000000000000000;;		instance, err := v.fetchInstance(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return instance.UUID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceID returns the cloud provider ID of the node with the specified NodeName.
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) InstanceID(nodeName types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		name := mapNodeNameToInstanceName(nodeName)
0000000000000000000000000000000000000000;;		instance, err := v.fetchInstance(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: define a way to identify the provider instance to complete
0000000000000000000000000000000000000000;;		// the format <provider_instance_id>/<instance_id>.
0000000000000000000000000000000000000000;;		return "/" + instance.UUID, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceTypeByProviderID returns the cloudprovider instance type of the node with the specified unique providerID
0000000000000000000000000000000000000000;;	// This method will not be called from the node that is requesting this ID. i.e. metadata service
0000000000000000000000000000000000000000;;	// and other local methods cannot be used here
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) InstanceTypeByProviderID(providerID string) (string, error) {
0000000000000000000000000000000000000000;;		return "", errors.New("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceType returns the type of the specified instance.
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) InstanceType(name types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getInstancesFromXml(body io.Reader) (OVirtInstanceMap, error) {
0000000000000000000000000000000000000000;;		if body == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ovirt rest-api response body is missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		content, err := ioutil.ReadAll(body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vmlist := XmlVmsList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := xml.Unmarshal(content, &vmlist); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances := make(OVirtInstanceMap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, vm := range vmlist.Vm {
0000000000000000000000000000000000000000;;			// Always return only vms that are up and running
0000000000000000000000000000000000000000;;			if vm.Hostname != "" && strings.ToLower(vm.State) == "up" {
0000000000000000000000000000000000000000;;				address := ""
0000000000000000000000000000000000000000;;				if len(vm.Addresses) > 0 {
0000000000000000000000000000000000000000;;					address = vm.Addresses[0].Address
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				instances[vm.Hostname] = OVirtInstance{
0000000000000000000000000000000000000000;;					UUID:      vm.UUID,
0000000000000000000000000000000000000000;;					Name:      vm.Name,
0000000000000000000000000000000000000000;;					IPAddress: address,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return instances, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) fetchAllInstances() (OVirtInstanceMap, error) {
0000000000000000000000000000000000000000;;		response, err := http.Get(v.VmsRequest.String())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer response.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return getInstancesFromXml(response.Body)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) fetchInstance(name string) (*OVirtInstance, error) {
0000000000000000000000000000000000000000;;		allInstances, err := v.fetchAllInstances()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instance, found := allInstances[name]
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("cannot find instance: %s", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &instance, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *OVirtInstanceMap) ListSortedNames() []string {
0000000000000000000000000000000000000000;;		var names []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k := range *m {
0000000000000000000000000000000000000000;;			names = append(names, k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Strings(names)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return names
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implementation of Instances.CurrentNodeName
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) CurrentNodeName(hostname string) (types.NodeName, error) {
0000000000000000000000000000000000000000;;		return types.NodeName(hostname), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *OVirtCloud) AddSSHKeyToAllInstances(user string, keyData []byte) error {
0000000000000000000000000000000000000000;;		return errors.New("unimplemented")
0000000000000000000000000000000000000000;;	}
