0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a115a1d7b866bbd70f48a3e45f564d33d4a97e5c;pkg/cloudprovider/ovirt/ovirt_test.go[pkg/cloudprovider/ovirt/ovirt_test.go][pkg/cloudprovider/providers/ovirt/ovirt_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ovirt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOVirtCloudConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;		config1 := (io.Reader)(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err1 := cloudprovider.GetCloudProvider("ovirt", config1)
0000000000000000000000000000000000000000;;		if err1 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error is expected when the configuration is missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config2 := strings.NewReader("")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err2 := cloudprovider.GetCloudProvider("ovirt", config2)
0000000000000000000000000000000000000000;;		if err2 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error is expected when the configuration is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config3 := strings.NewReader(`
0000000000000000000000000000000000000000;;	[connection]
0000000000000000000000000000000000000000;;		`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err3 := cloudprovider.GetCloudProvider("ovirt", config3)
0000000000000000000000000000000000000000;;		if err3 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error is expected when the uri is missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config4 := strings.NewReader(`
0000000000000000000000000000000000000000;;	[connection]
0000000000000000000000000000000000000000;;	uri = https://localhost:8443/ovirt-engine/api
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err4 := cloudprovider.GetCloudProvider("ovirt", config4)
0000000000000000000000000000000000000000;;		if err4 != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error creating the provider: %s", err4)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOVirtCloudXmlParsing(t *testing.T) {
0000000000000000000000000000000000000000;;		body1 := (io.Reader)(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err1 := getInstancesFromXml(body1)
0000000000000000000000000000000000000000;;		if err1 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error is expected when body is missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body2 := strings.NewReader("")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err2 := getInstancesFromXml(body2)
0000000000000000000000000000000000000000;;		if err2 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error is expected when body is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body3 := strings.NewReader(`
0000000000000000000000000000000000000000;;	<vms>
0000000000000000000000000000000000000000;;	  <vm></vm>
0000000000000000000000000000000000000000;;	</vms>
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances3, err3 := getInstancesFromXml(body3)
0000000000000000000000000000000000000000;;		if err3 != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error listing instances: %s", err3)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(instances3) > 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected number of instance(s): %d", len(instances3))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body4 := strings.NewReader(`
0000000000000000000000000000000000000000;;	<vms>
0000000000000000000000000000000000000000;;	  <vm>
0000000000000000000000000000000000000000;;	    <status><state>Up</state></status>
0000000000000000000000000000000000000000;;	    <guest_info><fqdn>host1</fqdn></guest_info>
0000000000000000000000000000000000000000;;	  </vm>
0000000000000000000000000000000000000000;;	  <vm>
0000000000000000000000000000000000000000;;	    <!-- empty -->
0000000000000000000000000000000000000000;;	  </vm>
0000000000000000000000000000000000000000;;	  <vm>
0000000000000000000000000000000000000000;;	    <status><state>Up</state></status>
0000000000000000000000000000000000000000;;	  </vm>
0000000000000000000000000000000000000000;;	  <vm>
0000000000000000000000000000000000000000;;	    <status><state>Down</state></status>
0000000000000000000000000000000000000000;;	    <guest_info><fqdn>host2</fqdn></guest_info>
0000000000000000000000000000000000000000;;	  </vm>
0000000000000000000000000000000000000000;;	  <vm>
0000000000000000000000000000000000000000;;	    <status><state>Up</state></status>
0000000000000000000000000000000000000000;;	    <guest_info><fqdn>host3</fqdn></guest_info>
0000000000000000000000000000000000000000;;	  </vm>
0000000000000000000000000000000000000000;;	</vms>
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances4, err4 := getInstancesFromXml(body4)
0000000000000000000000000000000000000000;;		if err4 != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error listing instances: %s", err4)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(instances4) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected number of instance(s): %d", len(instances4))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		names := instances4.ListSortedNames()
0000000000000000000000000000000000000000;;		if names[0] != "host1" || names[1] != "host3" {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected instance(s): %s", instances4)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
