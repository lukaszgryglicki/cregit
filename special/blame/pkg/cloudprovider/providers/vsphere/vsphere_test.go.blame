0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
57533cf6bb728ec46476f2d0677ac79490905d05;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package vsphere
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func configFromEnv() (cfg VSphereConfig, ok bool) {
0000000000000000000000000000000000000000;;		var InsecureFlag bool
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		cfg.Global.VCenterIP = os.Getenv("VSPHERE_VCENTER")
0000000000000000000000000000000000000000;;		cfg.Global.User = os.Getenv("VSPHERE_USER")
0000000000000000000000000000000000000000;;		cfg.Global.Password = os.Getenv("VSPHERE_PASSWORD")
0000000000000000000000000000000000000000;;		cfg.Global.Datacenter = os.Getenv("VSPHERE_DATACENTER")
0000000000000000000000000000000000000000;;		cfg.Network.PublicNetwork = os.Getenv("VSPHERE_PUBLIC_NETWORK")
0000000000000000000000000000000000000000;;		cfg.Global.Datastore = os.Getenv("VSPHERE_DATASTORE")
0000000000000000000000000000000000000000;;		cfg.Disk.SCSIControllerType = os.Getenv("VSPHERE_SCSICONTROLLER_TYPE")
0000000000000000000000000000000000000000;;		cfg.Global.WorkingDir = os.Getenv("VSPHERE_WORKING_DIR")
0000000000000000000000000000000000000000;;		cfg.Global.VMName = os.Getenv("VSPHERE_VM_NAME")
0000000000000000000000000000000000000000;;		if os.Getenv("VSPHERE_INSECURE") != "" {
0000000000000000000000000000000000000000;;			InsecureFlag, err = strconv.ParseBool(os.Getenv("VSPHERE_INSECURE"))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			InsecureFlag = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.Global.InsecureFlag = InsecureFlag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok = (cfg.Global.VCenterIP != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.User != "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := readConfig(nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when no config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg, err := readConfig(strings.NewReader(`
0000000000000000000000000000000000000000;;	[Global]
0000000000000000000000000000000000000000;;	server = 0.0.0.0
0000000000000000000000000000000000000000;;	port = 443
0000000000000000000000000000000000000000;;	user = user
0000000000000000000000000000000000000000;;	password = password
0000000000000000000000000000000000000000;;	insecure-flag = true
0000000000000000000000000000000000000000;;	datacenter = us-west
0000000000000000000000000000000000000000;;	vm-uuid = 1234
0000000000000000000000000000000000000000;;	vm-name = vmname
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when a valid config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.VCenterIP != "0.0.0.0" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect vcenter ip: %s", cfg.Global.VCenterIP)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.Datacenter != "us-west" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect datacenter: %s", cfg.Global.Datacenter)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.VMUUID != "1234" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect vm-uuid: %s", cfg.Global.VMUUID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.VMName != "vmname" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect vm-name: %s", cfg.Global.VMName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewVSphere(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := newVSphere(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate vSphere: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVSphereLogin(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create vSphere configuration object
0000000000000000000000000000000000000000;;		vs, err := newVSphere(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate vSphere: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create context
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create vSphere client
0000000000000000000000000000000000000000;;		err = vSphereLogin(ctx, vs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create vSpere client: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer vs.client.Logout(ctx)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestZones(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg := VSphereConfig{}
0000000000000000000000000000000000000000;;		cfg.Global.Datacenter = "myDatacenter"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create vSphere configuration object
0000000000000000000000000000000000000000;;		vs := VSphere{
0000000000000000000000000000000000000000;;			cfg: &cfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok := vs.Zones()
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Zones() returned true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInstances(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vs, err := newVSphere(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate vSphere: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i, ok := vs.Instances()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances() returned false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeName, err := vs.CurrentNodeName("")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("CurrentNodeName() failed: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		externalId, err := i.ExternalID(nodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID(%s) failed: %s", nodeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found ExternalID(%s) = %s\n", nodeName, externalId)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonExistingVM := types.NodeName(rand.String(15))
0000000000000000000000000000000000000000;;		externalId, err = i.ExternalID(nonExistingVM)
0000000000000000000000000000000000000000;;		if err == cloudprovider.InstanceNotFound {
0000000000000000000000000000000000000000;;			t.Logf("VM %s was not found as expected\n", nonExistingVM)
0000000000000000000000000000000000000000;;		} else if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID did not fail as expected, VM %s was found", nonExistingVM)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID did not fail as expected, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instanceId, err := i.InstanceID(nodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID(%s) failed: %s", nodeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found InstanceID(%s) = %s\n", nodeName, instanceId)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instanceId, err = i.InstanceID(nonExistingVM)
0000000000000000000000000000000000000000;;		if err == cloudprovider.InstanceNotFound {
0000000000000000000000000000000000000000;;			t.Logf("VM %s was not found as expected\n", nonExistingVM)
0000000000000000000000000000000000000000;;		} else if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID did not fail as expected, VM %s was found", nonExistingVM)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID did not fail as expected, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addrs, err := i.NodeAddresses(nodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.NodeAddresses(%s) failed: %s", nodeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found NodeAddresses(%s) = %s\n", nodeName, addrs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vs, err := newVSphere(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate vSphere: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeName, err := vs.CurrentNodeName("")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("CurrentNodeName() failed: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeOptions := &VolumeOptions{
0000000000000000000000000000000000000000;;			CapacityKB: 1 * 1024 * 1024,
0000000000000000000000000000000000000000;;			Tags:       nil,
0000000000000000000000000000000000000000;;			Name:       "kubernetes-test-volume-" + rand.String(10),
0000000000000000000000000000000000000000;;			DiskFormat: "thin"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volPath, err := vs.CreateVolume(volumeOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot create a new VMDK volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err = vs.AttachDisk(volPath, "", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot attach volume(%s) to VM(%s): %v", volPath, nodeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = vs.DetachDisk(volPath, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot detach disk(%s) from VM(%s): %v", volPath, nodeName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// todo: Deleting a volume after detach currently not working through API or UI (vSphere)
0000000000000000000000000000000000000000;;		// err = vs.DeleteVolume(volPath)
0000000000000000000000000000000000000000;;		// if err != nil {
0000000000000000000000000000000000000000;;		// 	t.Fatalf("Cannot delete VMDK volume %s: %v", volPath, err)
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetVMName(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create vSphere configuration object
0000000000000000000000000000000000000000;;		vs, err := newVSphere(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate vSphere: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create context
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create vSphere client
0000000000000000000000000000000000000000;;		err = vSphereLogin(ctx, vs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create vSpere client: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer vs.client.Logout(ctx)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get VM name
0000000000000000000000000000000000000000;;		vmName, err := getVMName(vs.client, &cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to get VM name: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vmName != "vmname" {
0000000000000000000000000000000000000000;;			t.Errorf("Expect VM name 'vmname', got: %s", vmName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
