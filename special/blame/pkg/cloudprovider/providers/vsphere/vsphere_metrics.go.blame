0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d565b07fabe839fe7558907f909a6a51f078ddb9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package vsphere
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		api_createvolume = "CreateVolume"
0000000000000000000000000000000000000000;;		api_deletevolume = "DeleteVolume"
0000000000000000000000000000000000000000;;		api_attachvolume = "AttachVolume"
0000000000000000000000000000000000000000;;		api_detachvolume = "DetachVolume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		operation_deletevolume                      = "DeleteVolumeOperation"
0000000000000000000000000000000000000000;;		operation_attachvolume                      = "AttachVolumeOperation"
0000000000000000000000000000000000000000;;		operation_detachvolume                      = "DetachVolumeOperation"
0000000000000000000000000000000000000000;;		operation_diskIsAttached                    = "DiskIsAttachedOperation"
0000000000000000000000000000000000000000;;		operation_disksAreAttached                  = "DisksAreAttachedOperation"
0000000000000000000000000000000000000000;;		operation_createvolume                      = "CreateVolumeOperation"
0000000000000000000000000000000000000000;;		operation_createvolume_with_policy          = "CreateVolumeWithPolicyOperation"
0000000000000000000000000000000000000000;;		operation_createvolume_with_raw_vsan_policy = "CreateVolumeWithRawVSANPolicyOperation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// vsphereApiMetric is for recording latency of Single API Call.
0000000000000000000000000000000000000000;;	var vsphereApiMetric = prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;		prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;			Name: "cloudprovider_vsphere_api_request_duration_seconds",
0000000000000000000000000000000000000000;;			Help: "Latency of vsphere api call",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		[]string{"request"},
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var vsphereApiErrorMetric = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;		prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Name: "cloudprovider_vsphere_api_request_errors",
0000000000000000000000000000000000000000;;			Help: "vsphere Api errors",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		[]string{"request"},
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// vsphereOperationMetric is for recording latency of vSphere Operation which invokes multiple APIs to get the task done.
0000000000000000000000000000000000000000;;	var vsphereOperationMetric = prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;		prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;			Name: "cloudprovider_vsphere_operation_duration_seconds",
0000000000000000000000000000000000000000;;			Help: "Latency of vsphere operation call",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		[]string{"operation"},
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var vsphereOperationErrorMetric = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;		prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Name: "cloudprovider_vsphere_operation_errors",
0000000000000000000000000000000000000000;;			Help: "vsphere operation errors",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		[]string{"operation"},
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func registerMetrics() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(vsphereApiMetric)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(vsphereApiErrorMetric)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(vsphereOperationMetric)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(vsphereOperationErrorMetric)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recordvSphereMetric(actionName string, requestTime time.Time, err error) {
0000000000000000000000000000000000000000;;		switch actionName {
0000000000000000000000000000000000000000;;		case api_createvolume, api_deletevolume, api_attachvolume, api_detachvolume:
0000000000000000000000000000000000000000;;			recordvSphereAPIMetric(actionName, requestTime, err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			recordvSphereOperationMetric(actionName, requestTime, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recordvSphereAPIMetric(actionName string, requestTime time.Time, err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			vsphereApiErrorMetric.With(prometheus.Labels{"request": actionName}).Inc()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			vsphereApiMetric.With(prometheus.Labels{"request": actionName}).Observe(calculateTimeTaken(requestTime))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recordvSphereOperationMetric(actionName string, requestTime time.Time, err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			vsphereOperationErrorMetric.With(prometheus.Labels{"operation": actionName}).Inc()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			vsphereOperationMetric.With(prometheus.Labels{"operation": actionName}).Observe(calculateTimeTaken(requestTime))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recordCreateVolumeMetric(volumeOptions *VolumeOptions, requestTime time.Time, err error) {
0000000000000000000000000000000000000000;;		var actionName string
0000000000000000000000000000000000000000;;		if volumeOptions.StoragePolicyName != "" {
0000000000000000000000000000000000000000;;			actionName = operation_createvolume_with_policy
0000000000000000000000000000000000000000;;		} else if volumeOptions.VSANStorageProfileData != "" {
0000000000000000000000000000000000000000;;			actionName = operation_createvolume_with_raw_vsan_policy
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			actionName = operation_createvolume
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		recordvSphereMetric(actionName, requestTime, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func calculateTimeTaken(requestBeginTime time.Time) (timeTaken float64) {
0000000000000000000000000000000000000000;;		if !requestBeginTime.IsZero() {
0000000000000000000000000000000000000000;;			timeTaken = time.Since(requestBeginTime).Seconds()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			timeTaken = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return timeTaken
0000000000000000000000000000000000000000;;	}
