0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6448488a5355da2b4d80b12aa8b413809b339d39;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeviceAllocator(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			existingDevices ExistingDevices
0000000000000000000000000000000000000000;;			deviceMap       map[mountDevice]int
0000000000000000000000000000000000000000;;			expectedOutput  mountDevice
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty device list with wrap",
0000000000000000000000000000000000000000;;				ExistingDevices{},
0000000000000000000000000000000000000000;;				generateUnsortedDeviceList(),
0000000000000000000000000000000000000000;;				"bd", // next to 'zz' is the first one, 'ba'
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			allocator := NewDeviceAllocator().(*deviceAllocator)
0000000000000000000000000000000000000000;;			for k, v := range test.deviceMap {
0000000000000000000000000000000000000000;;				allocator.possibleDevices[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := allocator.GetNext(test.existingDevices)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("text %q: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got != test.expectedOutput {
0000000000000000000000000000000000000000;;				t.Errorf("text %q: expected %q, got %q", test.name, test.expectedOutput, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateUnsortedDeviceList() map[mountDevice]int {
0000000000000000000000000000000000000000;;		possibleDevices := make(map[mountDevice]int)
0000000000000000000000000000000000000000;;		for _, firstChar := range []rune{'b', 'c'} {
0000000000000000000000000000000000000000;;			for i := 'a'; i <= 'z'; i++ {
0000000000000000000000000000000000000000;;				dev := mountDevice([]rune{firstChar, i})
0000000000000000000000000000000000000000;;				possibleDevices[dev] = 3
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		possibleDevices["bd"] = 0
0000000000000000000000000000000000000000;;		return possibleDevices
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeviceAllocatorError(t *testing.T) {
0000000000000000000000000000000000000000;;		allocator := NewDeviceAllocator().(*deviceAllocator)
0000000000000000000000000000000000000000;;		existingDevices := ExistingDevices{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// make all devices used
0000000000000000000000000000000000000000;;		var first, second byte
0000000000000000000000000000000000000000;;		for first = 'b'; first <= 'c'; first++ {
0000000000000000000000000000000000000000;;			for second = 'a'; second <= 'z'; second++ {
0000000000000000000000000000000000000000;;				device := [2]byte{first, second}
0000000000000000000000000000000000000000;;				existingDevices[mountDevice(device[:])] = "used"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		device, err := allocator.GetNext(existingDevices)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected error, got device  %q", device)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
