0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
41ea0d9ac2068c0aa95581cc08ce032472766355;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/ec2"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseInstance(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			Kubernetes  kubernetesInstanceID
0000000000000000000000000000000000000000;;			Aws         awsInstanceID
0000000000000000000000000000000000000000;;			ExpectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "aws:///us-east-1a/i-12345678",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "aws:////i-12345678",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "i-12345678",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "aws:///us-east-1a/i-12345678abcdef01",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678abcdef01",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "aws:////i-12345678abcdef01",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678abcdef01",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes: "i-12345678abcdef01",
0000000000000000000000000000000000000000;;				Aws:        "i-12345678abcdef01",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes:  "vol-123456789",
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes:  "aws:///us-east-1a/vol-12345678abcdef01",
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes:  "aws://accountid/us-east-1a/vol-12345678abcdef01",
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes:  "aws:///us-east-1a/vol-12345678abcdef01/suffix",
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kubernetes:  "",
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			awsID, err := test.Kubernetes.mapToAWSInstanceID()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if !test.ExpectError {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error parsing %s: %v", test.Kubernetes, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if test.ExpectError {
0000000000000000000000000000000000000000;;					t.Errorf("expected error parsing %s", test.Kubernetes)
0000000000000000000000000000000000000000;;				} else if test.Aws != awsID {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected value parsing %s, got %s", test.Kubernetes, awsID)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			node := &v1.Node{}
0000000000000000000000000000000000000000;;			node.Spec.ProviderID = string(test.Kubernetes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			awsInstanceIds, err := mapToAWSInstanceIDs([]*v1.Node{node})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if !test.ExpectError {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error parsing %s: %v", test.Kubernetes, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if test.ExpectError {
0000000000000000000000000000000000000000;;					t.Errorf("expected error parsing %s", test.Kubernetes)
0000000000000000000000000000000000000000;;				} else if len(awsInstanceIds) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected value parsing %s, got %s", test.Kubernetes, awsInstanceIds)
0000000000000000000000000000000000000000;;				} else if awsInstanceIds[0] != test.Aws {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected value parsing %s, got %s", test.Kubernetes, awsInstanceIds)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			awsInstanceIds = mapToAWSInstanceIDsTolerant([]*v1.Node{node})
0000000000000000000000000000000000000000;;			if test.ExpectError {
0000000000000000000000000000000000000000;;				if len(awsInstanceIds) != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected results parsing %s: %s", test.Kubernetes, awsInstanceIds)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if len(awsInstanceIds) != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected value parsing %s, got %s", test.Kubernetes, awsInstanceIds)
0000000000000000000000000000000000000000;;				} else if awsInstanceIds[0] != test.Aws {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected value parsing %s, got %s", test.Kubernetes, awsInstanceIds)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSnapshotMeetsCriteria(t *testing.T) {
0000000000000000000000000000000000000000;;		snapshot := &allInstancesSnapshot{timestamp: time.Now().Add(-3601 * time.Second)}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !snapshot.MeetsCriteria(cacheCriteria{}) {
0000000000000000000000000000000000000000;;			t.Errorf("Snapshot should always meet empty criteria")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if snapshot.MeetsCriteria(cacheCriteria{MaxAge: time.Hour}) {
0000000000000000000000000000000000000000;;			t.Errorf("Snapshot did not honor MaxAge")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if snapshot.MeetsCriteria(cacheCriteria{HasInstances: []awsInstanceID{awsInstanceID("i-12345678")}}) {
0000000000000000000000000000000000000000;;			t.Errorf("Snapshot did not honor HasInstances with missing instances")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		snapshot.instances = make(map[awsInstanceID]*ec2.Instance)
0000000000000000000000000000000000000000;;		snapshot.instances[awsInstanceID("i-12345678")] = &ec2.Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !snapshot.MeetsCriteria(cacheCriteria{HasInstances: []awsInstanceID{awsInstanceID("i-12345678")}}) {
0000000000000000000000000000000000000000;;			t.Errorf("Snapshot did not honor HasInstances with matching instances")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if snapshot.MeetsCriteria(cacheCriteria{HasInstances: []awsInstanceID{awsInstanceID("i-12345678"), awsInstanceID("i-00000000")}}) {
0000000000000000000000000000000000000000;;			t.Errorf("Snapshot did not honor HasInstances with partially matching instances")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOlderThan(t *testing.T) {
0000000000000000000000000000000000000000;;		t1 := time.Now()
0000000000000000000000000000000000000000;;		t2 := t1.Add(time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s1 := &allInstancesSnapshot{timestamp: t1}
0000000000000000000000000000000000000000;;		s2 := &allInstancesSnapshot{timestamp: t2}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.True(t, s1.olderThan(s2), "s1 should be olderThan s2")
0000000000000000000000000000000000000000;;		assert.False(t, s2.olderThan(s1), "s2 not should be olderThan s1")
0000000000000000000000000000000000000000;;		assert.False(t, s1.olderThan(s1), "s1 not should be olderThan itself")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSnapshotFindInstances(t *testing.T) {
0000000000000000000000000000000000000000;;		snapshot := &allInstancesSnapshot{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		snapshot.instances = make(map[awsInstanceID]*ec2.Instance)
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			id := awsInstanceID("i-12345678")
0000000000000000000000000000000000000000;;			snapshot.instances[id] = &ec2.Instance{InstanceId: id.awsString()}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			id := awsInstanceID("i-23456789")
0000000000000000000000000000000000000000;;			snapshot.instances[id] = &ec2.Instance{InstanceId: id.awsString()}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances := snapshot.FindInstances([]awsInstanceID{awsInstanceID("i-12345678"), awsInstanceID("i-23456789"), awsInstanceID("i-00000000")})
0000000000000000000000000000000000000000;;		if len(instances) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("findInstances returned %d results, expected 2", len(instances))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, id := range []awsInstanceID{awsInstanceID("i-12345678"), awsInstanceID("i-23456789")} {
0000000000000000000000000000000000000000;;			i := instances[id]
0000000000000000000000000000000000000000;;			if i == nil {
0000000000000000000000000000000000000000;;				t.Errorf("findInstances did not return %s", id)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if aws.StringValue(i.InstanceId) != string(id) {
0000000000000000000000000000000000000000;;				t.Errorf("findInstances did not return expected instanceId for %s", id)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if i != snapshot.instances[id] {
0000000000000000000000000000000000000000;;				t.Errorf("findInstances did not return expected instance (reference equality) for %s", id)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
