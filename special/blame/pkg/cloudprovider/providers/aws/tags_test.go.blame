0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e95298f55dc89584a5908a239c3df6137f080976;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/ec2"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFilterTags(t *testing.T) {
0000000000000000000000000000000000000000;;		awsServices := NewFakeAWSServices()
0000000000000000000000000000000000000000;;		c, err := newAWSCloud(strings.NewReader("[global]"), awsServices)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error building aws cloud: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.tagging.ClusterID != TestClusterId {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected ClusterID: %v", c.tagging.ClusterID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindClusterID(t *testing.T) {
0000000000000000000000000000000000000000;;		grid := []struct {
0000000000000000000000000000000000000000;;			Tags           map[string]string
0000000000000000000000000000000000000000;;			ExpectedNew    string
0000000000000000000000000000000000000000;;			ExpectedLegacy string
0000000000000000000000000000000000000000;;			ExpectError    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterLegacy: "a",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedLegacy: "a",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterPrefix + "a": "owned",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedNew: "a",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterPrefix + "a": "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedNew: "a",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterLegacy:       "a",
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterPrefix + "a": "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedLegacy: "a",
0000000000000000000000000000000000000000;;				ExpectedNew:    "a",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Tags: map[string]string{
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterPrefix + "a": "",
0000000000000000000000000000000000000000;;					TagNameKubernetesClusterPrefix + "b": "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, g := range grid {
0000000000000000000000000000000000000000;;			var ec2Tags []*ec2.Tag
0000000000000000000000000000000000000000;;			for k, v := range g.Tags {
0000000000000000000000000000000000000000;;				ec2Tags = append(ec2Tags, &ec2.Tag{Key: aws.String(k), Value: aws.String(v)})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			actualLegacy, actualNew, err := findClusterIDs(ec2Tags)
0000000000000000000000000000000000000000;;			if g.ExpectError {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("expected error for tags %v", g.Tags)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected error for tags %v: %v", g.Tags, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if g.ExpectedNew != actualNew {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected new clusterid for tags %v: %s vs %s", g.Tags, g.ExpectedNew, actualNew)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if g.ExpectedLegacy != actualLegacy {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected new clusterid for tags %v: %s vs %s", g.Tags, g.ExpectedLegacy, actualLegacy)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
