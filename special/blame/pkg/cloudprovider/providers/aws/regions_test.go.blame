0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7e75b4c5b709cc5d20c51056c502771b39346629;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRegions does basic checking of region verification / addition
0000000000000000000000000000000000000000;;	func TestRegions(t *testing.T) {
0000000000000000000000000000000000000000;;		RecognizeWellKnownRegions()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			Add            string
0000000000000000000000000000000000000000;;			Lookup         string
0000000000000000000000000000000000000000;;			ExpectIsRegion bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Lookup:         "us-east-1",
0000000000000000000000000000000000000000;;				ExpectIsRegion: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Lookup:         "us-east-1a",
0000000000000000000000000000000000000000;;				ExpectIsRegion: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Add:            "us-test-1",
0000000000000000000000000000000000000000;;				Lookup:         "us-east-1",
0000000000000000000000000000000000000000;;				ExpectIsRegion: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Lookup:         "us-test-1",
0000000000000000000000000000000000000000;;				ExpectIsRegion: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Add:            "us-test-1",
0000000000000000000000000000000000000000;;				Lookup:         "us-test-1",
0000000000000000000000000000000000000000;;				ExpectIsRegion: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if test.Add != "" {
0000000000000000000000000000000000000000;;				RecognizeRegion(test.Add)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.Lookup != "" {
0000000000000000000000000000000000000000;;				if isRegionValid(test.Lookup) != test.ExpectIsRegion {
0000000000000000000000000000000000000000;;					t.Fatalf("region valid mismatch: %q", test.Lookup)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRecognizesNewRegion verifies that we see a region from metadata, we recognize it as valid
0000000000000000000000000000000000000000;;	func TestRecognizesNewRegion(t *testing.T) {
0000000000000000000000000000000000000000;;		region := "us-testrecognizesnewregion-1"
0000000000000000000000000000000000000000;;		if isRegionValid(region) {
0000000000000000000000000000000000000000;;			t.Fatalf("region already valid: %q", region)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		awsServices := NewFakeAWSServices().withAz(region + "a")
0000000000000000000000000000000000000000;;		_, err := newAWSCloud(nil, awsServices)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error building AWS cloud: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !isRegionValid(region) {
0000000000000000000000000000000000000000;;			t.Fatalf("newly discovered region not valid: %q", region)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
