0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f12c58ee64b2c3e5410755b455ad51292167a52a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// awsVolumeID represents the ID of the volume in the AWS API, e.g. vol-12345678
0000000000000000000000000000000000000000;;	// The "traditional" format is "vol-12345678"
0000000000000000000000000000000000000000;;	// A new longer format is also being introduced: "vol-12345678abcdef01"
0000000000000000000000000000000000000000;;	// We should not assume anything about the length or format, though it seems
0000000000000000000000000000000000000000;;	// reasonable to assume that volumes will continue to start with "vol-".
0000000000000000000000000000000000000000;;	type awsVolumeID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i awsVolumeID) awsString() *string {
0000000000000000000000000000000000000000;;		return aws.String(string(i))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KubernetesVolumeID represents the id for a volume in the kubernetes API;
0000000000000000000000000000000000000000;;	// a few forms are recognized:
0000000000000000000000000000000000000000;;	//  * aws://<zone>/<awsVolumeId>
0000000000000000000000000000000000000000;;	//  * aws:///<awsVolumeId>
0000000000000000000000000000000000000000;;	//  * <awsVolumeId>
0000000000000000000000000000000000000000;;	type KubernetesVolumeID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapToAWSVolumeID extracts the awsVolumeID from the KubernetesVolumeID
0000000000000000000000000000000000000000;;	func (name KubernetesVolumeID) mapToAWSVolumeID() (awsVolumeID, error) {
0000000000000000000000000000000000000000;;		// name looks like aws://availability-zone/awsVolumeId
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The original idea of the URL-style name was to put the AZ into the
0000000000000000000000000000000000000000;;		// host, so we could find the AZ immediately from the name without
0000000000000000000000000000000000000000;;		// querying the API.  But it turns out we don't actually need it for
0000000000000000000000000000000000000000;;		// multi-AZ clusters, as we put the AZ into the labels on the PV instead.
0000000000000000000000000000000000000000;;		// However, if in future we want to support multi-AZ cluster
0000000000000000000000000000000000000000;;		// volume-awareness without using PersistentVolumes, we likely will
0000000000000000000000000000000000000000;;		// want the AZ in the host.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := string(name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(s, "aws://") {
0000000000000000000000000000000000000000;;			// Assume a bare aws volume id (vol-1234...)
0000000000000000000000000000000000000000;;			// Build a URL with an empty host (AZ)
0000000000000000000000000000000000000000;;			s = "aws://" + "" + "/" + s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		url, err := url.Parse(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// TODO: Maybe we should pass a URL into the Volume functions
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Invalid disk name (%s): %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if url.Scheme != "aws" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Invalid scheme for AWS volume (%s)", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		awsID := url.Path
0000000000000000000000000000000000000000;;		awsID = strings.Trim(awsID, "/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We sanity check the resulting volume; the two known formats are
0000000000000000000000000000000000000000;;		// vol-12345678 and vol-12345678abcdef01
0000000000000000000000000000000000000000;;		// TODO: Regex match?
0000000000000000000000000000000000000000;;		if strings.Contains(awsID, "/") || !strings.HasPrefix(awsID, "vol-") {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Invalid format for AWS volume (%s)", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return awsVolumeID(awsID), nil
0000000000000000000000000000000000000000;;	}
