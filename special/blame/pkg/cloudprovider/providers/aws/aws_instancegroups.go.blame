0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
3f381ed1f7865c02ffc8dceabac4a8be5343ac36;pkg/cloudprovider/aws/aws_instancegroups.go[pkg/cloudprovider/aws/aws_instancegroups.go][pkg/cloudprovider/providers/aws/aws_instancegroups.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/autoscaling"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AWSCloud implements InstanceGroups
0000000000000000000000000000000000000000;;	var _ InstanceGroups = &Cloud{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResizeInstanceGroup sets the size of the specificed instancegroup Exported
0000000000000000000000000000000000000000;;	// so it can be used by the e2e tests, which don't want to instantiate a full
0000000000000000000000000000000000000000;;	// cloudprovider.
0000000000000000000000000000000000000000;;	func ResizeInstanceGroup(asg ASG, instanceGroupName string, size int) error {
0000000000000000000000000000000000000000;;		request := &autoscaling.UpdateAutoScalingGroupInput{
0000000000000000000000000000000000000000;;			AutoScalingGroupName: aws.String(instanceGroupName),
0000000000000000000000000000000000000000;;			MinSize:              aws.Int64(int64(size)),
0000000000000000000000000000000000000000;;			MaxSize:              aws.Int64(int64(size)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := asg.UpdateAutoScalingGroup(request); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error resizing AWS autoscaling group: %q", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement InstanceGroups.ResizeInstanceGroup
0000000000000000000000000000000000000000;;	// Set the size to the fixed size
0000000000000000000000000000000000000000;;	func (c *Cloud) ResizeInstanceGroup(instanceGroupName string, size int) error {
0000000000000000000000000000000000000000;;		return ResizeInstanceGroup(c.asg, instanceGroupName, size)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceGroup gets info about the specified instancegroup
0000000000000000000000000000000000000000;;	// Exported so it can be used by the e2e tests,
0000000000000000000000000000000000000000;;	// which don't want to instantiate a full cloudprovider.
0000000000000000000000000000000000000000;;	func DescribeInstanceGroup(asg ASG, instanceGroupName string) (InstanceGroupInfo, error) {
0000000000000000000000000000000000000000;;		request := &autoscaling.DescribeAutoScalingGroupsInput{
0000000000000000000000000000000000000000;;			AutoScalingGroupNames: []*string{aws.String(instanceGroupName)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		response, err := asg.DescribeAutoScalingGroups(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error listing AWS autoscaling group (%s): %q", instanceGroupName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(response.AutoScalingGroups) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(response.AutoScalingGroups) > 1 {
0000000000000000000000000000000000000000;;			glog.Warning("AWS returned multiple autoscaling groups with name ", instanceGroupName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		group := response.AutoScalingGroups[0]
0000000000000000000000000000000000000000;;		return &awsInstanceGroup{group: group}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement InstanceGroups.DescribeInstanceGroup
0000000000000000000000000000000000000000;;	// Queries the cloud provider for information about the specified instance group
0000000000000000000000000000000000000000;;	func (c *Cloud) DescribeInstanceGroup(instanceGroupName string) (InstanceGroupInfo, error) {
0000000000000000000000000000000000000000;;		return DescribeInstanceGroup(c.asg, instanceGroupName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// awsInstanceGroup implements InstanceGroupInfo
0000000000000000000000000000000000000000;;	var _ InstanceGroupInfo = &awsInstanceGroup{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type awsInstanceGroup struct {
0000000000000000000000000000000000000000;;		group *autoscaling.Group
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement InstanceGroupInfo.CurrentSize
0000000000000000000000000000000000000000;;	// The number of instances currently running under control of this group
0000000000000000000000000000000000000000;;	func (g *awsInstanceGroup) CurrentSize() (int, error) {
0000000000000000000000000000000000000000;;		return len(g.group.Instances), nil
0000000000000000000000000000000000000000;;	}
