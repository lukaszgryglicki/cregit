0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9bd82534e4ebb069ec834b6686cb86549d01bdd6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/xanzy/go-cloudstack/cloudstack"
0000000000000000000000000000000000000000;;		"gopkg.in/gcfg.v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderName is the name of this cloud provider.
0000000000000000000000000000000000000000;;	const ProviderName = "cloudstack"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CSConfig wraps the config for the CloudStack cloud provider.
0000000000000000000000000000000000000000;;	type CSConfig struct {
0000000000000000000000000000000000000000;;		Global struct {
0000000000000000000000000000000000000000;;			APIURL      string `gcfg:"api-url"`
0000000000000000000000000000000000000000;;			APIKey      string `gcfg:"api-key"`
0000000000000000000000000000000000000000;;			SecretKey   string `gcfg:"secret-key"`
0000000000000000000000000000000000000000;;			SSLNoVerify bool   `gcfg:"ssl-no-verify"`
0000000000000000000000000000000000000000;;			ProjectID   string `gcfg:"project-id"`
0000000000000000000000000000000000000000;;			Zone        string `gcfg:"zone"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CSCloud is an implementation of Interface for CloudStack.
0000000000000000000000000000000000000000;;	type CSCloud struct {
0000000000000000000000000000000000000000;;		client    *cloudstack.CloudStackClient
0000000000000000000000000000000000000000;;		projectID string // If non-"", all resources will be created within this project
0000000000000000000000000000000000000000;;		zone      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		cloudprovider.RegisterCloudProvider(ProviderName, func(config io.Reader) (cloudprovider.Interface, error) {
0000000000000000000000000000000000000000;;			cfg, err := readConfig(config)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return newCSCloud(cfg)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readConfig(config io.Reader) (*CSConfig, error) {
0000000000000000000000000000000000000000;;		if config == nil {
0000000000000000000000000000000000000000;;			err := fmt.Errorf("no cloud provider config given")
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &CSConfig{}
0000000000000000000000000000000000000000;;		if err := gcfg.ReadInto(cfg, config); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Couldn't parse config: %v", err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newCSCloud creates a new instance of CSCloud.
0000000000000000000000000000000000000000;;	func newCSCloud(cfg *CSConfig) (*CSCloud, error) {
0000000000000000000000000000000000000000;;		client := cloudstack.NewAsyncClient(cfg.Global.APIURL, cfg.Global.APIKey, cfg.Global.SecretKey, !cfg.Global.SSLNoVerify)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &CSCloud{client, cfg.Global.ProjectID, cfg.Global.Zone}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialize passes a Kubernetes clientBuilder interface to the cloud provider
0000000000000000000000000000000000000000;;	func (cs *CSCloud) Initialize(clientBuilder controller.ControllerClientBuilder) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancer returns an implementation of LoadBalancer for CloudStack.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) LoadBalancer() (cloudprovider.LoadBalancer, bool) {
0000000000000000000000000000000000000000;;		return cs, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instances returns an implementation of Instances for CloudStack.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) Instances() (cloudprovider.Instances, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zones returns an implementation of Zones for CloudStack.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) Zones() (cloudprovider.Zones, bool) {
0000000000000000000000000000000000000000;;		return cs, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clusters returns an implementation of Clusters for CloudStack.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) Clusters() (cloudprovider.Clusters, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routes returns an implementation of Routes for CloudStack.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) Routes() (cloudprovider.Routes, bool) {
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderName returns the cloud provider ID.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) ProviderName() string {
0000000000000000000000000000000000000000;;		return ProviderName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScrubDNS filters DNS settings for pods.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) ScrubDNS(nameservers, searches []string) (nsOut, srchOut []string) {
0000000000000000000000000000000000000000;;		return nameservers, searches
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetZone returns the Zone containing the region that the program is running in.
0000000000000000000000000000000000000000;;	func (cs *CSCloud) GetZone() (cloudprovider.Zone, error) {
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Current zone is %v", cs.zone)
0000000000000000000000000000000000000000;;		return cloudprovider.Zone{Region: cs.zone}, nil
0000000000000000000000000000000000000000;;	}
