0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6e2653a484377c9b7931f70d0197def098cf9ae1;pkg/cloudprovider/rackspace/rackspace_test.go[pkg/cloudprovider/rackspace/rackspace_test.go][pkg/cloudprovider/providers/rackspace/rackspace_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rackspace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := readConfig(nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when no config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg, err := readConfig(strings.NewReader(`
0000000000000000000000000000000000000000;;	[Global]
0000000000000000000000000000000000000000;;	auth-url = http://auth.url
0000000000000000000000000000000000000000;;	username = user
0000000000000000000000000000000000000000;;	[LoadBalancer]
0000000000000000000000000000000000000000;;	create-monitor = yes
0000000000000000000000000000000000000000;;	monitor-delay = 1m
0000000000000000000000000000000000000000;;	monitor-timeout = 30s
0000000000000000000000000000000000000000;;	monitor-max-retries = 3
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when a valid config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.Global.AuthUrl != "http://auth.url" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect authurl: %s", cfg.Global.AuthUrl)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !cfg.LoadBalancer.CreateMonitor {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.createmonitor: %t", cfg.LoadBalancer.CreateMonitor)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorDelay.Duration != 1*time.Minute {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitordelay: %s", cfg.LoadBalancer.MonitorDelay)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorTimeout.Duration != 30*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitortimeout: %s", cfg.LoadBalancer.MonitorTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg.LoadBalancer.MonitorMaxRetries != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect lb.monitormaxretries: %d", cfg.LoadBalancer.MonitorMaxRetries)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToAuthOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg := Config{}
0000000000000000000000000000000000000000;;		cfg.Global.Username = "user"
0000000000000000000000000000000000000000;;		// etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ao := cfg.toAuthOptions()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ao.AllowReauth {
0000000000000000000000000000000000000000;;			t.Errorf("Will need to be able to reauthenticate")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ao.Username != cfg.Global.Username {
0000000000000000000000000000000000000000;;			t.Errorf("Username %s != %s", ao.Username, cfg.Global.Username)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This allows acceptance testing against an existing Rackspace
0000000000000000000000000000000000000000;;	// install, using the standard OS_* Rackspace client environment
0000000000000000000000000000000000000000;;	// variables.
0000000000000000000000000000000000000000;;	// FIXME: it would be better to hermetically test against canned JSON
0000000000000000000000000000000000000000;;	// requests/responses.
0000000000000000000000000000000000000000;;	func configFromEnv() (cfg Config, ok bool) {
0000000000000000000000000000000000000000;;		cfg.Global.AuthUrl = os.Getenv("OS_AUTH_URL")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.Global.TenantId = os.Getenv("OS_TENANT_ID")
0000000000000000000000000000000000000000;;		// Rax/nova _insists_ that we don't specify both tenant ID and name
0000000000000000000000000000000000000000;;		if cfg.Global.TenantId == "" {
0000000000000000000000000000000000000000;;			cfg.Global.TenantName = os.Getenv("OS_TENANT_NAME")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.Global.Username = os.Getenv("OS_USERNAME")
0000000000000000000000000000000000000000;;		cfg.Global.Password = os.Getenv("OS_PASSWORD")
0000000000000000000000000000000000000000;;		cfg.Global.ApiKey = os.Getenv("OS_API_KEY")
0000000000000000000000000000000000000000;;		cfg.Global.Region = os.Getenv("OS_REGION_NAME")
0000000000000000000000000000000000000000;;		cfg.Global.DomainId = os.Getenv("OS_DOMAIN_ID")
0000000000000000000000000000000000000000;;		cfg.Global.DomainName = os.Getenv("OS_DOMAIN_NAME")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok = (cfg.Global.AuthUrl != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.Username != "" &&
0000000000000000000000000000000000000000;;			(cfg.Global.Password != "" || cfg.Global.ApiKey != "") &&
0000000000000000000000000000000000000000;;			(cfg.Global.TenantId != "" || cfg.Global.TenantName != "" ||
0000000000000000000000000000000000000000;;				cfg.Global.DomainId != "" || cfg.Global.DomainName != ""))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseMetaData(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := parseMetaData(strings.NewReader(""))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when invalid meta data is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		id, err := parseMetaData(strings.NewReader(`
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			"UUID":"someuuid",
0000000000000000000000000000000000000000;;			"name":"somename",
0000000000000000000000000000000000000000;;			"project_id":"someprojectid"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		`))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when valid meta data is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if id != "someuuid" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect uuid: %s", id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewRackspace(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := newRackspace(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to construct/authenticate Rackspace: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestZones(t *testing.T) {
0000000000000000000000000000000000000000;;		os := Rackspace{
0000000000000000000000000000000000000000;;			provider: &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;				IdentityBase: "http://auth.url/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			region: "myRegion",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		z, ok := os.Zones()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Zones() returned false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zone, err := z.GetZone()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("GetZone() returned error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if zone.Region != "myRegion" {
0000000000000000000000000000000000000000;;			t.Fatalf("GetZone() returned wrong region (%s)", zone.Region)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
