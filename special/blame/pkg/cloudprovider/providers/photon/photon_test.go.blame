0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d6825686a3614f2a83a58338ae1cabf7e3bbea85;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func configFromEnv() (TestVM string, TestFlavor string, cfg PCConfig, ok bool) {
0000000000000000000000000000000000000000;;		var AuthEnabled bool
0000000000000000000000000000000000000000;;		var OverrideIP bool
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		cfg.Global.CloudTarget = os.Getenv("PHOTON_TARGET")
0000000000000000000000000000000000000000;;		cfg.Global.Project = os.Getenv("PHOTON_PROJECT")
0000000000000000000000000000000000000000;;		cfg.Global.VMID = os.Getenv("PHOTON_VMID")
0000000000000000000000000000000000000000;;		if os.Getenv("PHOTON_AUTH_ENABLED") != "" {
0000000000000000000000000000000000000000;;			AuthEnabled, err = strconv.ParseBool(os.Getenv("PHOTON_AUTH_ENABLED"))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			AuthEnabled = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.Global.AuthEnabled = AuthEnabled
0000000000000000000000000000000000000000;;		if os.Getenv("PHOTON_OVERRIDE_IP") != "" {
0000000000000000000000000000000000000000;;			OverrideIP, err = strconv.ParseBool(os.Getenv("PHOTON_OVERRIDE_IP"))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			OverrideIP = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.Global.OverrideIP = OverrideIP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TestVM = os.Getenv("PHOTON_TEST_VM")
0000000000000000000000000000000000000000;;		if os.Getenv("PHOTON_TEST_FLAVOR") != "" {
0000000000000000000000000000000000000000;;			TestFlavor = os.Getenv("PHOTON_TEST_FLAVOR")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			TestFlavor = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok = (cfg.Global.CloudTarget != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.Project != "" &&
0000000000000000000000000000000000000000;;			cfg.Global.VMID != "" &&
0000000000000000000000000000000000000000;;			TestVM != "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := readConfig(nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Should fail when no config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg, err := readConfig(strings.NewReader(`
0000000000000000000000000000000000000000;;	[Global]
0000000000000000000000000000000000000000;;	target = 0.0.0.0
0000000000000000000000000000000000000000;;	project = project
0000000000000000000000000000000000000000;;	overrideIP = true
0000000000000000000000000000000000000000;;	vmID = vmid
0000000000000000000000000000000000000000;;	authentication = false
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Should succeed when a valid config is provided: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.CloudTarget != "0.0.0.0" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect photon target ip: %s", cfg.Global.CloudTarget)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.Project != "project" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect project: %s", cfg.Global.Project)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Global.VMID != "vmid" {
0000000000000000000000000000000000000000;;			t.Errorf("incorrect vmid: %s", cfg.Global.VMID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewPCCloud(t *testing.T) {
0000000000000000000000000000000000000000;;		_, _, cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := newPCCloud(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create new Photon client: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInstances(t *testing.T) {
0000000000000000000000000000000000000000;;		testVM, _, cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		NodeName := types.NodeName(testVM)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pc, err := newPCCloud(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create new Photon client: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i, ok := pc.Instances()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances() returned false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		externalId, err := i.ExternalID(NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID(%s) failed: %s", testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found ExternalID(%s) = %s\n", testVM, externalId)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonExistingVM := types.NodeName(rand.String(15))
0000000000000000000000000000000000000000;;		externalId, err = i.ExternalID(nonExistingVM)
0000000000000000000000000000000000000000;;		if err == cloudprovider.InstanceNotFound {
0000000000000000000000000000000000000000;;			t.Logf("VM %s was not found as expected\n", nonExistingVM)
0000000000000000000000000000000000000000;;		} else if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID did not fail as expected, VM %s was found", nonExistingVM)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.ExternalID did not fail as expected, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instanceId, err := i.InstanceID(NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID(%s) failed: %s", testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found InstanceID(%s) = %s\n", testVM, instanceId)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instanceId, err = i.InstanceID(nonExistingVM)
0000000000000000000000000000000000000000;;		if err == cloudprovider.InstanceNotFound {
0000000000000000000000000000000000000000;;			t.Logf("VM %s was not found as expected\n", nonExistingVM)
0000000000000000000000000000000000000000;;		} else if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID did not fail as expected, VM %s was found", nonExistingVM)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.InstanceID did not fail as expected, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addrs, err := i.NodeAddresses(NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Instances.NodeAddresses(%s) failed: %s", testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Found NodeAddresses(%s) = %s\n", testVM, addrs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		testVM, testFlavor, cfg, ok := configFromEnv()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Skipf("No config found in environment")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pc, err := newPCCloud(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create new Photon client: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodeName := types.NodeName(testVM)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeOptions := &VolumeOptions{
0000000000000000000000000000000000000000;;			CapacityGB: 2,
0000000000000000000000000000000000000000;;			Tags:       nil,
0000000000000000000000000000000000000000;;			Name:       "kubernetes-test-volume-" + rand.String(10),
0000000000000000000000000000000000000000;;			Flavor:     testFlavor}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pdID, err := pc.CreateDisk(volumeOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot create a Photon persistent disk: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = pc.AttachDisk(pdID, NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot attach persistent disk(%s) to VM(%s): %v", pdID, testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = pc.DiskIsAttached(pdID, NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot attach persistent disk(%s) to VM(%s): %v", pdID, testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = pc.DetachDisk(pdID, NodeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot detach persisten disk(%s) from VM(%s): %v", pdID, testVM, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = pc.DeleteDisk(pdID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Cannot delete persisten disk(%s): %v", pdID, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
