0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master/ports"
0000000000000000000000000000000000000000;;		utilversion "k8s.io/kubernetes/pkg/util/version"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		nodesHealthCheckPath   = "/healthz"
0000000000000000000000000000000000000000;;		lbNodesHealthCheckPort = ports.ProxyHealthzPort
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		minNodesHealthCheckVersion *utilversion.Version
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		if v, err := utilversion.ParseGeneric("1.7.0"); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			minNodesHealthCheckVersion = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHealthcheckMetricContext(request string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"healthcheck_" + request, unusedMetricLabel, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHttpHealthCheck returns the given HttpHealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetHttpHealthCheck(name string) (*compute.HttpHealthCheck, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("get_legacy")
0000000000000000000000000000000000000000;;		v, err := gce.service.HttpHealthChecks.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHttpHealthCheck applies the given HttpHealthCheck as an update.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) UpdateHttpHealthCheck(hc *compute.HttpHealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("update_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpHealthChecks.Update(gce.projectID, hc.Name, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHttpHealthCheck deletes the given HttpHealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteHttpHealthCheck(name string) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("delete_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpHealthChecks.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHttpHealthCheck creates the given HttpHealthCheck.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateHttpHealthCheck(hc *compute.HttpHealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("create_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpHealthChecks.Insert(gce.projectID, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHttpHealthChecks lists all HttpHealthChecks in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListHttpHealthChecks() (*compute.HttpHealthCheckList, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("list_legacy")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.HttpHealthChecks.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Legacy HTTPS Health Checks
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHttpsHealthCheck returns the given HttpsHealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetHttpsHealthCheck(name string) (*compute.HttpsHealthCheck, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("get_legacy")
0000000000000000000000000000000000000000;;		v, err := gce.service.HttpsHealthChecks.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		mc.Observe(err)
0000000000000000000000000000000000000000;;		return v, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHttpsHealthCheck applies the given HttpsHealthCheck as an update.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) UpdateHttpsHealthCheck(hc *compute.HttpsHealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("update_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpsHealthChecks.Update(gce.projectID, hc.Name, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			mc.Observe(err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHttpsHealthCheck deletes the given HttpsHealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteHttpsHealthCheck(name string) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("delete_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpsHealthChecks.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHttpsHealthCheck creates the given HttpsHealthCheck.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateHttpsHealthCheck(hc *compute.HttpsHealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("create_legacy")
0000000000000000000000000000000000000000;;		op, err := gce.service.HttpsHealthChecks.Insert(gce.projectID, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHttpsHealthChecks lists all HttpsHealthChecks in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListHttpsHealthChecks() (*compute.HttpsHealthCheckList, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("list_legacy")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.HttpsHealthChecks.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generic HealthCheck
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheck returns the given HealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetHealthCheck(name string) (*compute.HealthCheck, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("get")
0000000000000000000000000000000000000000;;		v, err := gce.service.HealthChecks.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHealthCheck applies the given HealthCheck as an update.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) UpdateHealthCheck(hc *compute.HealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("update")
0000000000000000000000000000000000000000;;		op, err := gce.service.HealthChecks.Update(gce.projectID, hc.Name, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHealthCheck deletes the given HealthCheck by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteHealthCheck(name string) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("delete")
0000000000000000000000000000000000000000;;		op, err := gce.service.HealthChecks.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHealthCheck creates the given HealthCheck.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateHealthCheck(hc *compute.HealthCheck) error {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("create")
0000000000000000000000000000000000000000;;		op, err := gce.service.HealthChecks.Insert(gce.projectID, hc).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHealthChecks lists all HealthCheck in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListHealthChecks() (*compute.HealthCheckList, error) {
0000000000000000000000000000000000000000;;		mc := newHealthcheckMetricContext("list")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.HealthChecks.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNodesHealthCheckPort returns the health check port used by the GCE load
0000000000000000000000000000000000000000;;	// balancers (l4) for performing health checks on nodes.
0000000000000000000000000000000000000000;;	func GetNodesHealthCheckPort() int32 {
0000000000000000000000000000000000000000;;		return lbNodesHealthCheckPort
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNodesHealthCheckPath returns the health check path used by the GCE load
0000000000000000000000000000000000000000;;	// balancers (l4) for performing health checks on nodes.
0000000000000000000000000000000000000000;;	func GetNodesHealthCheckPath() string {
0000000000000000000000000000000000000000;;		return nodesHealthCheckPath
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isAtLeastMinNodesHealthCheckVersion checks if a version is higher than
0000000000000000000000000000000000000000;;	// `minNodesHealthCheckVersion`.
0000000000000000000000000000000000000000;;	func isAtLeastMinNodesHealthCheckVersion(vstring string) bool {
0000000000000000000000000000000000000000;;		version, err := utilversion.ParseGeneric(vstring)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("vstring (%s) is not a valid version string: %v", vstring, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return version.AtLeast(minNodesHealthCheckVersion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// supportsNodesHealthCheck returns false if anyone of the nodes has version
0000000000000000000000000000000000000000;;	// lower than `minNodesHealthCheckVersion`.
0000000000000000000000000000000000000000;;	func supportsNodesHealthCheck(nodes []*v1.Node) bool {
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			if !isAtLeastMinNodesHealthCheckVersion(node.Status.NodeInfo.KubeProxyVersion) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
