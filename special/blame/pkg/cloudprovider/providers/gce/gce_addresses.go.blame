0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;pkg/cloudprovider/providers/gce/gce_staticip.go[pkg/cloudprovider/providers/gce/gce_staticip.go][pkg/cloudprovider/providers/gce/gce_addresses.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAddressMetricContext(request, region string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"address_" + request, region, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReserveGlobalAddress creates a global address.
0000000000000000000000000000000000000000;;	// Caller is allocated a random IP if they do not specify an ipAddress. If an
0000000000000000000000000000000000000000;;	// ipAddress is specified, it must belong to the current project, eg: an
0000000000000000000000000000000000000000;;	// ephemeral IP associated with a global forwarding rule.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ReserveGlobalAddress(addr *compute.Address) error {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("reserve", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.GlobalAddresses.Insert(gce.projectID, addr).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteGlobalAddress deletes a global address by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteGlobalAddress(name string) error {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("delete", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.GlobalAddresses.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGlobalAddress returns the global address by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetGlobalAddress(name string) (*compute.Address, error) {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("get", "")
0000000000000000000000000000000000000000;;		v, err := gce.service.GlobalAddresses.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReserveRegionAddress creates a region address
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ReserveRegionAddress(addr *compute.Address, region string) error {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("reserve", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.Addresses.Insert(gce.projectID, region, addr).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRegionAddress deletes a region address by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteRegionAddress(name, region string) error {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("delete", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.Addresses.Delete(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRegionAddress returns the region address by name
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetRegionAddress(name, region string) (*compute.Address, error) {
0000000000000000000000000000000000000000;;		mc := newAddressMetricContext("get", region)
0000000000000000000000000000000000000000;;		v, err := gce.service.Addresses.Get(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
