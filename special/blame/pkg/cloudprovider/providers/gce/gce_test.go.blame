0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d6fe03e09d2a169f9441884ca0009c0e86c725c0;pkg/cloudprovider/gce_test.go[pkg/cloudprovider/gce_test.go][pkg/cloudprovider/providers/gce/gce_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetRegion(t *testing.T) {
0000000000000000000000000000000000000000;;		zoneName := "us-central1-b"
0000000000000000000000000000000000000000;;		regionName, err := GetGCERegion(zoneName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error from GetGCERegion: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if regionName != "us-central1" {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected region from GetGCERegion: %s", regionName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gce := &GCECloud{
0000000000000000000000000000000000000000;;			localZone: zoneName,
0000000000000000000000000000000000000000;;			region:    regionName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zones, ok := gce.Zones()
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected missing zones impl")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone, err := zones.GetZone()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if zone.Region != "us-central1" {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected region: %s", zone.Region)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestComparingHostURLs(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			host1       string
0000000000000000000000000000000000000000;;			zone        string
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			expectEqual bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v1/projects/1234567/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v1/projects/cool-project/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v23/projects/1234567/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v24/projects/1234567/regions/us-central1/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v1/projects/1234567/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-c",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v1/projects/1234567/zones/us-central1-f/instances/kubernetes-node-fhx",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				expectEqual: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				host1:       "https://www.googleapis.com/compute/v1/projects/1234567/zones/us-central1-f/instances/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				zone:        "us-central1-f",
0000000000000000000000000000000000000000;;				name:        "kubernetes-node-fhx",
0000000000000000000000000000000000000000;;				expectEqual: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			link1 := hostURLToComparablePath(test.host1)
0000000000000000000000000000000000000000;;			testInstance := &gceInstance{
0000000000000000000000000000000000000000;;				Name: canonicalizeInstanceName(test.name),
0000000000000000000000000000000000000000;;				Zone: test.zone,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			link2 := testInstance.makeComparableHostPath()
0000000000000000000000000000000000000000;;			if test.expectEqual && link1 != link2 {
0000000000000000000000000000000000000000;;				t.Errorf("expected link1 and link2 to be equal, got %s and %s", link1, link2)
0000000000000000000000000000000000000000;;			} else if !test.expectEqual && link1 == link2 {
0000000000000000000000000000000000000000;;				t.Errorf("expected link1 and link2 not to be equal, got %s and %s", link1, link2)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScrubDNS(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			nameserversIn  []string
0000000000000000000000000000000000000000;;			searchesIn     []string
0000000000000000000000000000000000000000;;			nameserversOut []string
0000000000000000000000000000000000000000;;			searchesOut    []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nameserversIn:  []string{"1.2.3.4", "5.6.7.8"},
0000000000000000000000000000000000000000;;				nameserversOut: []string{"1.2.3.4", "5.6.7.8"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				searchesIn:  []string{"c.prj.internal.", "12345678910.google.internal.", "google.internal."},
0000000000000000000000000000000000000000;;				searchesOut: []string{"c.prj.internal.", "google.internal."},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				searchesIn:  []string{"c.prj.internal.", "12345678910.google.internal.", "zone.c.prj.internal.", "google.internal."},
0000000000000000000000000000000000000000;;				searchesOut: []string{"c.prj.internal.", "zone.c.prj.internal.", "google.internal."},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				searchesIn:  []string{"c.prj.internal.", "12345678910.google.internal.", "zone.c.prj.internal.", "google.internal.", "unexpected"},
0000000000000000000000000000000000000000;;				searchesOut: []string{"c.prj.internal.", "zone.c.prj.internal.", "google.internal.", "unexpected"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gce := &GCECloud{}
0000000000000000000000000000000000000000;;		for i := range tcs {
0000000000000000000000000000000000000000;;			n, s := gce.ScrubDNS(tcs[i].nameserversIn, tcs[i].searchesIn)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(n, tcs[i].nameserversOut) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", tcs[i].nameserversOut, n)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(s, tcs[i].searchesOut) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", tcs[i].searchesOut, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSplitProviderID(t *testing.T) {
0000000000000000000000000000000000000000;;		providers := []struct {
0000000000000000000000000000000000000000;;			providerID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			project  string
0000000000000000000000000000000000000000;;			zone     string
0000000000000000000000000000000000000000;;			instance string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fail bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example-164317/us-central1-f/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "project-example-164317",
0000000000000000000000000000000000000000;;				zone:       "us-central1-f",
0000000000000000000000000000000000000000;;				instance:   "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				fail:       false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example.164317/us-central1-f/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "project-example.164317",
0000000000000000000000000000000000000000;;				zone:       "us-central1-f",
0000000000000000000000000000000000000000;;				instance:   "kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				fail:       false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example-164317/us-central1-fkubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + ":/project-example-164317/us-central1-f/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: "aws://project-example-164317/us-central1-f/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example-164317/us-central1-f/kubernetes-node-fhx1/",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example.164317//kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				providerID: ProviderName + "://project-example.164317/kubernetes-node-fhx1",
0000000000000000000000000000000000000000;;				project:    "",
0000000000000000000000000000000000000000;;				zone:       "",
0000000000000000000000000000000000000000;;				instance:   "",
0000000000000000000000000000000000000000;;				fail:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range providers {
0000000000000000000000000000000000000000;;			project, zone, instance, err := splitProviderID(test.providerID)
0000000000000000000000000000000000000000;;			if (err != nil) != test.fail {
0000000000000000000000000000000000000000;;				t.Errorf("Expected to failt=%t, with pattern %v", test.fail, test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.fail {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if project != test.project {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, but got %v", test.project, project)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if zone != test.zone {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, but got %v", test.zone, zone)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if instance != test.instance {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, but got %v", test.instance, instance)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
