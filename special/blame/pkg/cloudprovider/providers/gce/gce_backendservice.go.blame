0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBackendServiceMetricContext(request, region string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"backendservice_" + request, region, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGlobalBackendService retrieves a backend by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetGlobalBackendService(name string) (*compute.BackendService, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("get", "")
0000000000000000000000000000000000000000;;		v, err := gce.service.BackendServices.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateGlobalBackendService applies the given BackendService as an update to an existing service.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) UpdateGlobalBackendService(bg *compute.BackendService) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("update", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.BackendServices.Update(gce.projectID, bg.Name, bg).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteGlobalBackendService deletes the given BackendService by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteGlobalBackendService(name string) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("delete", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.BackendServices.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if isHTTPErrorCode(err, http.StatusNotFound) {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateGlobalBackendService creates the given BackendService.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateGlobalBackendService(bg *compute.BackendService) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("create", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.BackendServices.Insert(gce.projectID, bg).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGlobalBackendServices lists all backend services in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListGlobalBackendServices() (*compute.BackendServiceList, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("list", "")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.BackendServices.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGlobalBackendServiceHealth returns the health of the BackendService identified by the given
0000000000000000000000000000000000000000;;	// name, in the given instanceGroup. The instanceGroupLink is the fully
0000000000000000000000000000000000000000;;	// qualified self link of an instance group.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetGlobalBackendServiceHealth(name string, instanceGroupLink string) (*compute.BackendServiceGroupHealth, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("get_health", "")
0000000000000000000000000000000000000000;;		groupRef := &compute.ResourceGroupReference{Group: instanceGroupLink}
0000000000000000000000000000000000000000;;		v, err := gce.service.BackendServices.GetHealth(gce.projectID, name, groupRef).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRegionBackendService retrieves a backend by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetRegionBackendService(name, region string) (*compute.BackendService, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("get", region)
0000000000000000000000000000000000000000;;		v, err := gce.service.RegionBackendServices.Get(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateRegionBackendService applies the given BackendService as an update to an existing service.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) UpdateRegionBackendService(bg *compute.BackendService, region string) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("update", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.RegionBackendServices.Update(gce.projectID, region, bg.Name, bg).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRegionBackendService deletes the given BackendService by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteRegionBackendService(name, region string) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("delete", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.RegionBackendServices.Delete(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if isHTTPErrorCode(err, http.StatusNotFound) {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRegionBackendService creates the given BackendService.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateRegionBackendService(bg *compute.BackendService, region string) error {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("create", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.RegionBackendServices.Insert(gce.projectID, region, bg).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListRegionBackendServices lists all backend services in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListRegionBackendServices(region string) (*compute.BackendServiceList, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("list", region)
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.RegionBackendServices.List(gce.projectID, region).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRegionalBackendServiceHealth returns the health of the BackendService identified by the given
0000000000000000000000000000000000000000;;	// name, in the given instanceGroup. The instanceGroupLink is the fully
0000000000000000000000000000000000000000;;	// qualified self link of an instance group.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetRegionalBackendServiceHealth(name, region string, instanceGroupLink string) (*compute.BackendServiceGroupHealth, error) {
0000000000000000000000000000000000000000;;		mc := newBackendServiceMetricContext("get_health", region)
0000000000000000000000000000000000000000;;		groupRef := &compute.ResourceGroupReference{Group: instanceGroupLink}
0000000000000000000000000000000000000000;;		v, err := gce.service.RegionBackendServices.GetHealth(gce.projectID, region, name, groupRef).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
