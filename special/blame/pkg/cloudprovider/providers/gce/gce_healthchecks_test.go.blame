0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
756312309b5260e16ae0549ff3f52efc307c4eb2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsAtLeastMinNodesHealthCheckVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			version string
0000000000000000000000000000000000000000;;			expect  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"v1.7.1", true},
0000000000000000000000000000000000000000;;			{"v1.7.0-alpha.2.597+276d289b90d322", true},
0000000000000000000000000000000000000000;;			{"v1.6.0-beta.3.472+831q821c907t31a", false},
0000000000000000000000000000000000000000;;			{"v1.5.2", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if res := isAtLeastMinNodesHealthCheckVersion(tc.version); res != tc.expect {
0000000000000000000000000000000000000000;;				t.Errorf("%v: want %v, got %v", tc.version, tc.expect, res)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSupportsNodesHealthCheck(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			desc   string
0000000000000000000000000000000000000000;;			nodes  []*v1.Node
0000000000000000000000000000000000000000;;			expect bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"All nodes support nodes health check",
0000000000000000000000000000000000000000;;				[]*v1.Node{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.7.1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.7.0-alpha.2.597+276d289b90d322",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"All nodes don't support nodes health check",
0000000000000000000000000000000000000000;;				[]*v1.Node{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.6.0-beta.3.472+831q821c907t31a",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.5.2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"One node doesn't support nodes health check",
0000000000000000000000000000000000000000;;				[]*v1.Node{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.7.1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.7.0-alpha.2.597+276d289b90d322",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;							NodeInfo: v1.NodeSystemInfo{
0000000000000000000000000000000000000000;;								KubeProxyVersion: "v1.5.2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if res := supportsNodesHealthCheck(tc.nodes); res != tc.expect {
0000000000000000000000000000000000000000;;				t.Errorf("%v: want %v, got %v", tc.desc, tc.expect, res)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
