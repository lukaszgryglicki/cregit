0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a9c2f7b28ff7908be3bd6c902d9b2fdf3786462d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Internal Load Balancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instance groups remain legacy named to stay consistent with ingress
0000000000000000000000000000000000000000;;	func makeInstanceGroupName(clusterID string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("k8s-ig--%s", clusterID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeBackendServiceName(loadBalancerName, clusterID string, shared bool, scheme lbScheme, protocol v1.Protocol, svcAffinity v1.ServiceAffinity) string {
0000000000000000000000000000000000000000;;		if shared {
0000000000000000000000000000000000000000;;			hash := sha1.New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// For every non-nil option, hash its value. Currently, only service affinity is relevant.
0000000000000000000000000000000000000000;;			hash.Write([]byte(string(svcAffinity)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hashed := hex.EncodeToString(hash.Sum(nil))
0000000000000000000000000000000000000000;;			hashed = hashed[:16]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// k8s-          4
0000000000000000000000000000000000000000;;			// {clusterid}-  17
0000000000000000000000000000000000000000;;			// {scheme}-     9   (internal/external)
0000000000000000000000000000000000000000;;			// {protocol}-   4   (tcp/udp)
0000000000000000000000000000000000000000;;			// nmv1-         5   (naming convention version)
0000000000000000000000000000000000000000;;			// {suffix}      16  (hash of settings)
0000000000000000000000000000000000000000;;			// -----------------
0000000000000000000000000000000000000000;;			//               55  characters used
0000000000000000000000000000000000000000;;			return fmt.Sprintf("k8s-%s-%s-%s-nmv1-%s", clusterID, strings.ToLower(string(scheme)), strings.ToLower(string(protocol)), hashed)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return loadBalancerName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeHealthCheckName(loadBalancerName, clusterID string, shared bool) string {
0000000000000000000000000000000000000000;;		if shared {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("k8s-%s-node", clusterID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return loadBalancerName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeHealthCheckFirewallNameFromHC(healthCheckName string) string {
0000000000000000000000000000000000000000;;		return healthCheckName + "-hc"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeHealthCheckFirewallName(loadBalancerName, clusterID string, shared bool) string {
0000000000000000000000000000000000000000;;		if shared {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("k8s-%s-node-hc", clusterID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return loadBalancerName + "-hc"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeBackendServiceDescription(nm types.NamespacedName, shared bool) string {
0000000000000000000000000000000000000000;;		if shared {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf(`{"kubernetes.io/service-name":"%s"}`, nm.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// External Load Balancer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// makeNodesHealthCheckName returns name of the health check resource used by
0000000000000000000000000000000000000000;;	// the GCE load balancers (l4) for performing health checks on nodes.
0000000000000000000000000000000000000000;;	func makeNodesHealthCheckName(clusterID string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("k8s-%v-node", clusterID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeHealthCheckDescription(serviceName string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(`{"kubernetes.io/service-name":"%s"}`, serviceName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeHealthCheckFirewallName returns the firewall name used by the GCE load
0000000000000000000000000000000000000000;;	// balancers (l4) for performing health checks.
0000000000000000000000000000000000000000;;	func MakeHealthCheckFirewallName(clusterID, hcName string, isNodesHealthCheck bool) string {
0000000000000000000000000000000000000000;;		if isNodesHealthCheck {
0000000000000000000000000000000000000000;;			return makeNodesHealthCheckName(clusterID) + "-http-hc"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "k8s-" + hcName + "-http-hc"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeFirewallName(name string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("k8s-fw-%s", name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeFirewallDescription(serviceName, ipAddress string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(`{"kubernetes.io/service-name":"%s", "kubernetes.io/service-ip":"%s"}`,
0000000000000000000000000000000000000000;;			serviceName, ipAddress)
0000000000000000000000000000000000000000;;	}
