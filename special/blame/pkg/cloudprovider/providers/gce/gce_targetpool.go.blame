0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
85f570e9cc686559390c2cc6ba2b6b302186ca40;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTargetPoolMetricContext(request, region string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"targetpool_" + request, region, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTargetPool returns the TargetPool by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetTargetPool(name, region string) (*compute.TargetPool, error) {
0000000000000000000000000000000000000000;;		mc := newTargetPoolMetricContext("get", region)
0000000000000000000000000000000000000000;;		v, err := gce.service.TargetPools.Get(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTargetPool creates the passed TargetPool
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateTargetPool(tp *compute.TargetPool, region string) (*compute.TargetPool, error) {
0000000000000000000000000000000000000000;;		mc := newTargetPoolMetricContext("create", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetPools.Insert(gce.projectID, region, tp).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := gce.waitForRegionOp(op, region, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.GetTargetPool(tp.Name, region)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTargetPool deletes TargetPool by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteTargetPool(name, region string) error {
0000000000000000000000000000000000000000;;		mc := newTargetPoolMetricContext("delete", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetPools.Delete(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddInstancesToTargetPool adds instances by link to the TargetPool
0000000000000000000000000000000000000000;;	func (gce *GCECloud) AddInstancesToTargetPool(name, region string, instanceRefs []*compute.InstanceReference) error {
0000000000000000000000000000000000000000;;		add := &compute.TargetPoolsAddInstanceRequest{Instances: instanceRefs}
0000000000000000000000000000000000000000;;		mc := newTargetPoolMetricContext("add_instances", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetPools.AddInstance(gce.projectID, region, name, add).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveInstancesToTargetPool removes instances by link to the TargetPool
0000000000000000000000000000000000000000;;	func (gce *GCECloud) RemoveInstancesFromTargetPool(name, region string, instanceRefs []*compute.InstanceReference) error {
0000000000000000000000000000000000000000;;		remove := &compute.TargetPoolsRemoveInstanceRequest{Instances: instanceRefs}
0000000000000000000000000000000000000000;;		mc := newTargetPoolMetricContext("remove_instances", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetPools.RemoveInstance(gce.projectID, region, name, remove).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
