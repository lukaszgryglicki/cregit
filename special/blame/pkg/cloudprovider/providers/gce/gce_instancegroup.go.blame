0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInstanceGroupMetricContext(request string, zone string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"instancegroup_" + request, unusedMetricLabel, zone},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInstanceGroup creates an instance group with the given
0000000000000000000000000000000000000000;;	// instances. It is the callers responsibility to add named ports.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateInstanceGroup(name string, zone string) (*compute.InstanceGroup, error) {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("create", zone)
0000000000000000000000000000000000000000;;		op, err := gce.service.InstanceGroups.Insert(
0000000000000000000000000000000000000000;;			gce.projectID, zone, &compute.InstanceGroup{Name: name}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			mc.Observe(err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = gce.waitForZoneOp(op, zone, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.GetInstanceGroup(name, zone)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteInstanceGroup deletes an instance group.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteInstanceGroup(name string, zone string) error {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("delete", zone)
0000000000000000000000000000000000000000;;		op, err := gce.service.InstanceGroups.Delete(
0000000000000000000000000000000000000000;;			gce.projectID, zone, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForZoneOp(op, zone, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListInstanceGroups lists all InstanceGroups in the project and
0000000000000000000000000000000000000000;;	// zone.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListInstanceGroups(zone string) (*compute.InstanceGroupList, error) {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("list", zone)
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.InstanceGroups.List(gce.projectID, zone).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListInstancesInInstanceGroup lists all the instances in a given
0000000000000000000000000000000000000000;;	// instance group and state.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListInstancesInInstanceGroup(name string, zone string, state string) (*compute.InstanceGroupsListInstances, error) {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("list_instances", zone)
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.InstanceGroups.ListInstances(
0000000000000000000000000000000000000000;;			gce.projectID, zone, name,
0000000000000000000000000000000000000000;;			&compute.InstanceGroupsListInstancesRequest{InstanceState: state}).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddInstancesToInstanceGroup adds the given instances to the given
0000000000000000000000000000000000000000;;	// instance group.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) AddInstancesToInstanceGroup(name string, zone string, instanceRefs []*compute.InstanceReference) error {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("add_instances", zone)
0000000000000000000000000000000000000000;;		if len(instanceRefs) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		op, err := gce.service.InstanceGroups.AddInstances(
0000000000000000000000000000000000000000;;			gce.projectID, zone, name,
0000000000000000000000000000000000000000;;			&compute.InstanceGroupsAddInstancesRequest{
0000000000000000000000000000000000000000;;				Instances: instanceRefs,
0000000000000000000000000000000000000000;;			}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForZoneOp(op, zone, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveInstancesFromInstanceGroup removes the given instances from
0000000000000000000000000000000000000000;;	// the instance group.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) RemoveInstancesFromInstanceGroup(name string, zone string, instanceRefs []*compute.InstanceReference) error {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("remove_instances", zone)
0000000000000000000000000000000000000000;;		if len(instanceRefs) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		op, err := gce.service.InstanceGroups.RemoveInstances(
0000000000000000000000000000000000000000;;			gce.projectID, zone, name,
0000000000000000000000000000000000000000;;			&compute.InstanceGroupsRemoveInstancesRequest{
0000000000000000000000000000000000000000;;				Instances: instanceRefs,
0000000000000000000000000000000000000000;;			}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForZoneOp(op, zone, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNamedPortsOfInstanceGroup sets the list of named ports on a given instance group
0000000000000000000000000000000000000000;;	func (gce *GCECloud) SetNamedPortsOfInstanceGroup(igName, zone string, namedPorts []*compute.NamedPort) error {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("set_namedports", zone)
0000000000000000000000000000000000000000;;		op, err := gce.service.InstanceGroups.SetNamedPorts(
0000000000000000000000000000000000000000;;			gce.projectID, zone, igName,
0000000000000000000000000000000000000000;;			&compute.InstanceGroupsSetNamedPortsRequest{NamedPorts: namedPorts}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForZoneOp(op, zone, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInstanceGroup returns an instance group by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetInstanceGroup(name string, zone string) (*compute.InstanceGroup, error) {
0000000000000000000000000000000000000000;;		mc := newInstanceGroupMetricContext("get", zone)
0000000000000000000000000000000000000000;;		v, err := gce.service.InstanceGroups.Get(gce.projectID, zone, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
