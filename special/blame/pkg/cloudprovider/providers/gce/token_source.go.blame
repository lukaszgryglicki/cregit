0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d0bdeb08516c87d6b39fcc8e9851f60d02b8e374;pkg/cloudprovider/gce/token_source.go[pkg/cloudprovider/gce/token_source.go][pkg/cloudprovider/providers/gce/token_source.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;		"google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Max QPS to allow through to the token URL.
0000000000000000000000000000000000000000;;		tokenURLQPS = .05 // back off to once every 20 seconds when failing
0000000000000000000000000000000000000000;;		// Maximum burst of requests to token URL before limiting.
0000000000000000000000000000000000000000;;		tokenURLBurst = 3
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		getTokenCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Name: "get_token_count",
0000000000000000000000000000000000000000;;				Help: "Counter of total Token() requests to the alternate token source",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		getTokenFailCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Name: "get_token_fail_count",
0000000000000000000000000000000000000000;;				Help: "Counter of failed Token() requests to the alternate token source",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(getTokenCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(getTokenFailCounter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AltTokenSource struct {
0000000000000000000000000000000000000000;;		oauthClient *http.Client
0000000000000000000000000000000000000000;;		tokenURL    string
0000000000000000000000000000000000000000;;		tokenBody   string
0000000000000000000000000000000000000000;;		throttle    flowcontrol.RateLimiter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AltTokenSource) Token() (*oauth2.Token, error) {
0000000000000000000000000000000000000000;;		a.throttle.Accept()
0000000000000000000000000000000000000000;;		getTokenCounter.Inc()
0000000000000000000000000000000000000000;;		t, err := a.token()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			getTokenFailCounter.Inc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AltTokenSource) token() (*oauth2.Token, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST", a.tokenURL, strings.NewReader(a.tokenBody))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := a.oauthClient.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var tok struct {
0000000000000000000000000000000000000000;;			AccessToken string    `json:"accessToken"`
0000000000000000000000000000000000000000;;			ExpireTime  time.Time `json:"expireTime"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(&tok); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &oauth2.Token{
0000000000000000000000000000000000000000;;			AccessToken: tok.AccessToken,
0000000000000000000000000000000000000000;;			Expiry:      tok.ExpireTime,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAltTokenSource(tokenURL, tokenBody string) oauth2.TokenSource {
0000000000000000000000000000000000000000;;		client := oauth2.NewClient(oauth2.NoContext, google.ComputeTokenSource(""))
0000000000000000000000000000000000000000;;		a := &AltTokenSource{
0000000000000000000000000000000000000000;;			oauthClient: client,
0000000000000000000000000000000000000000;;			tokenURL:    tokenURL,
0000000000000000000000000000000000000000;;			tokenBody:   tokenBody,
0000000000000000000000000000000000000000;;			throttle:    flowcontrol.NewTokenBucketRateLimiter(tokenURLQPS, tokenURLBurst),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return oauth2.ReuseTokenSource(nil, a)
0000000000000000000000000000000000000000;;	}
