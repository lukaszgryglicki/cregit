0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newForwardingRuleMetricContext(request, region string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"forwardingrule_" + request, region, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateGlobalForwardingRule creates and returns a
0000000000000000000000000000000000000000;;	// GlobalForwardingRule that points to the given TargetHttp(s)Proxy.
0000000000000000000000000000000000000000;;	// targetProxyLink is the SelfLink of a TargetHttp(s)Proxy.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateGlobalForwardingRule(targetProxyLink, ip, name, portRange string) (*compute.ForwardingRule, error) {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("create", "")
0000000000000000000000000000000000000000;;		rule := &compute.ForwardingRule{
0000000000000000000000000000000000000000;;			Name:       name,
0000000000000000000000000000000000000000;;			IPAddress:  ip,
0000000000000000000000000000000000000000;;			Target:     targetProxyLink,
0000000000000000000000000000000000000000;;			PortRange:  portRange,
0000000000000000000000000000000000000000;;			IPProtocol: "TCP",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		op, err := gce.service.GlobalForwardingRules.Insert(gce.projectID, rule).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = gce.waitForGlobalOp(op, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.GetGlobalForwardingRule(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProxyForGlobalForwardingRule links the given TargetHttp(s)Proxy with the given GlobalForwardingRule.
0000000000000000000000000000000000000000;;	// targetProxyLink is the SelfLink of a TargetHttp(s)Proxy.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) SetProxyForGlobalForwardingRule(forwardingRuleName, targetProxyLink string) error {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("set_proxy", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.GlobalForwardingRules.SetTarget(
0000000000000000000000000000000000000000;;			gce.projectID, forwardingRuleName, &compute.TargetReference{Target: targetProxyLink}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteGlobalForwardingRule deletes the GlobalForwardingRule by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteGlobalForwardingRule(name string) error {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("delete", "")
0000000000000000000000000000000000000000;;		op, err := gce.service.GlobalForwardingRules.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGlobalForwardingRule returns the GlobalForwardingRule by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetGlobalForwardingRule(name string) (*compute.ForwardingRule, error) {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("get", "")
0000000000000000000000000000000000000000;;		v, err := gce.service.GlobalForwardingRules.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGlobalForwardingRules lists all GlobalForwardingRules in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListGlobalForwardingRules() (*compute.ForwardingRuleList, error) {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("list", "")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.GlobalForwardingRules.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRegionForwardingRule returns the RegionalForwardingRule by name & region.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetRegionForwardingRule(name, region string) (*compute.ForwardingRule, error) {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("get", region)
0000000000000000000000000000000000000000;;		v, err := gce.service.ForwardingRules.Get(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListRegionForwardingRules lists all RegionalForwardingRules in the project & region.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListRegionForwardingRules(region string) (*compute.ForwardingRuleList, error) {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("list", region)
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.ForwardingRules.List(gce.projectID, region).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRegionForwardingRule creates and returns a
0000000000000000000000000000000000000000;;	// RegionalForwardingRule that points to the given BackendService
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateRegionForwardingRule(rule *compute.ForwardingRule, region string) error {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("create", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.ForwardingRules.Insert(gce.projectID, region, rule).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRegionForwardingRule deletes the RegionalForwardingRule by name & region.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteRegionForwardingRule(name, region string) error {
0000000000000000000000000000000000000000;;		mc := newForwardingRuleMetricContext("delete", region)
0000000000000000000000000000000000000000;;		op, err := gce.service.ForwardingRules.Delete(gce.projectID, region, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForRegionOp(op, region, mc)
0000000000000000000000000000000000000000;;	}
