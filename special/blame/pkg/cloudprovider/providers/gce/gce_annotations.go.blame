0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
aed27bebfe8ff8030751cd2cdcaf9eccd43373d4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ServiceAnnotationLoadBalancerType is annotated on a service with type LoadBalancer
0000000000000000000000000000000000000000;;		// dictates what specific kind of GCP LB should be assembled.
0000000000000000000000000000000000000000;;		// Currently, only "internal" is supported.
0000000000000000000000000000000000000000;;		ServiceAnnotationLoadBalancerType = "cloud.google.com/load-balancer-type"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LBTypeInternal LoadBalancerType = "internal"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceAnnotationInternalBackendShare is annotated on a service with "true" when users
0000000000000000000000000000000000000000;;		// want to share GCP Backend Services for a set of internal load balancers.
0000000000000000000000000000000000000000;;		// ALPHA feature - this may be removed in a future release.
0000000000000000000000000000000000000000;;		ServiceAnnotationILBBackendShare = "cloud.google.com/load-balancer-backend-share"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetLoadBalancerAnnotationType returns the type of GCP load balancer which should be assembled.
0000000000000000000000000000000000000000;;	func GetLoadBalancerAnnotationType(service *v1.Service) (LoadBalancerType, bool) {
0000000000000000000000000000000000000000;;		v := LoadBalancerType("")
0000000000000000000000000000000000000000;;		if service.Spec.Type != v1.ServiceTypeLoadBalancer {
0000000000000000000000000000000000000000;;			return v, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, ok := service.Annotations[ServiceAnnotationLoadBalancerType]
0000000000000000000000000000000000000000;;		v = LoadBalancerType(l)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return v, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v {
0000000000000000000000000000000000000000;;		case LBTypeInternal:
0000000000000000000000000000000000000000;;			return v, true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return v, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetLoadBalancerAnnotationBackendShare returns whether this service's backend service should be
0000000000000000000000000000000000000000;;	// shared with other load balancers. Health checks and the healthcheck firewall will be shared regardless.
0000000000000000000000000000000000000000;;	func GetLoadBalancerAnnotationBackendShare(service *v1.Service) bool {
0000000000000000000000000000000000000000;;		l, exists := service.Annotations[ServiceAnnotationILBBackendShare]
0000000000000000000000000000000000000000;;		if exists && l == "true" {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
