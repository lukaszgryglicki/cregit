0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTargetProxyMetricContext(request string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"targetproxy_" + request, unusedMetricLabel, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTargetHttpProxy returns the UrlMap by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetTargetHttpProxy(name string) (*compute.TargetHttpProxy, error) {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("get")
0000000000000000000000000000000000000000;;		v, err := gce.service.TargetHttpProxies.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTargetHttpProxy creates and returns a TargetHttpProxy with the given UrlMap.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateTargetHttpProxy(urlMap *compute.UrlMap, name string) (*compute.TargetHttpProxy, error) {
0000000000000000000000000000000000000000;;		proxy := &compute.TargetHttpProxy{
0000000000000000000000000000000000000000;;			Name:   name,
0000000000000000000000000000000000000000;;			UrlMap: urlMap.SelfLink,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("create")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpProxies.Insert(gce.projectID, proxy).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = gce.waitForGlobalOp(op, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.GetTargetHttpProxy(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrlMapForTargetHttpProxy sets the given UrlMap for the given TargetHttpProxy.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) SetUrlMapForTargetHttpProxy(proxy *compute.TargetHttpProxy, urlMap *compute.UrlMap) error {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("set_url_map")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpProxies.SetUrlMap(
0000000000000000000000000000000000000000;;			gce.projectID, proxy.Name, &compute.UrlMapReference{UrlMap: urlMap.SelfLink}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTargetHttpProxy deletes the TargetHttpProxy by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteTargetHttpProxy(name string) error {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("delete")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpProxies.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if isHTTPErrorCode(err, http.StatusNotFound) {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTargetHttpProxies lists all TargetHttpProxies in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListTargetHttpProxies() (*compute.TargetHttpProxyList, error) {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("list")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.TargetHttpProxies.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TargetHttpsProxy management
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTargetHttpsProxy returns the UrlMap by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetTargetHttpsProxy(name string) (*compute.TargetHttpsProxy, error) {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("get")
0000000000000000000000000000000000000000;;		v, err := gce.service.TargetHttpsProxies.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTargetHttpsProxy creates and returns a TargetHttpsProxy with the given UrlMap and SslCertificate.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateTargetHttpsProxy(urlMap *compute.UrlMap, sslCert *compute.SslCertificate, name string) (*compute.TargetHttpsProxy, error) {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("create")
0000000000000000000000000000000000000000;;		proxy := &compute.TargetHttpsProxy{
0000000000000000000000000000000000000000;;			Name:            name,
0000000000000000000000000000000000000000;;			UrlMap:          urlMap.SelfLink,
0000000000000000000000000000000000000000;;			SslCertificates: []string{sslCert.SelfLink},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpsProxies.Insert(gce.projectID, proxy).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = gce.waitForGlobalOp(op, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.GetTargetHttpsProxy(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrlMapForTargetHttpsProxy sets the given UrlMap for the given TargetHttpsProxy.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) SetUrlMapForTargetHttpsProxy(proxy *compute.TargetHttpsProxy, urlMap *compute.UrlMap) error {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("set_url_map")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpsProxies.SetUrlMap(
0000000000000000000000000000000000000000;;			gce.projectID, proxy.Name, &compute.UrlMapReference{UrlMap: urlMap.SelfLink}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSslCertificateForTargetHttpsProxy sets the given SslCertificate for the given TargetHttpsProxy.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) SetSslCertificateForTargetHttpsProxy(proxy *compute.TargetHttpsProxy, sslCert *compute.SslCertificate) error {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("set_ssl_cert")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpsProxies.SetSslCertificates(
0000000000000000000000000000000000000000;;			gce.projectID, proxy.Name, &compute.TargetHttpsProxiesSetSslCertificatesRequest{SslCertificates: []string{sslCert.SelfLink}}).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTargetHttpsProxy deletes the TargetHttpsProxy by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteTargetHttpsProxy(name string) error {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("delete")
0000000000000000000000000000000000000000;;		op, err := gce.service.TargetHttpsProxies.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if isHTTPErrorCode(err, http.StatusNotFound) {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTargetHttpsProxies lists all TargetHttpsProxies in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListTargetHttpsProxies() (*compute.TargetHttpsProxyList, error) {
0000000000000000000000000000000000000000;;		mc := newTargetProxyMetricContext("list")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.TargetHttpsProxies.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
