0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"cloud.google.com/go/compute/metadata"
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;		"google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type gceInstance struct {
0000000000000000000000000000000000000000;;		Zone  string
0000000000000000000000000000000000000000;;		Name  string
0000000000000000000000000000000000000000;;		ID    uint64
0000000000000000000000000000000000000000;;		Disks []*compute.AttachedDisk
0000000000000000000000000000000000000000;;		Type  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var providerIdRE = regexp.MustCompile(`^` + ProviderName + `://([^/]+)/([^/]+)/([^/]+)$`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getProjectAndZone() (string, string, error) {
0000000000000000000000000000000000000000;;		result, err := metadata.Get("instance/zone")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parts := strings.Split(result, "/")
0000000000000000000000000000000000000000;;		if len(parts) != 4 {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("unexpected response: %s", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone := parts[3]
0000000000000000000000000000000000000000;;		projectID, err := metadata.ProjectID()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return projectID, zone, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Take a GCE instance 'hostname' and break it down to something that can be fed
0000000000000000000000000000000000000000;;	// to the GCE API client library.  Basically this means reducing 'kubernetes-
0000000000000000000000000000000000000000;;	// node-2.c.my-proj.internal' to 'kubernetes-node-2' if necessary.
0000000000000000000000000000000000000000;;	func canonicalizeInstanceName(name string) string {
0000000000000000000000000000000000000000;;		ix := strings.Index(name, ".")
0000000000000000000000000000000000000000;;		if ix != -1 {
0000000000000000000000000000000000000000;;			name = name[:ix]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the last component of a URL, i.e. anything after the last slash
0000000000000000000000000000000000000000;;	// If there is no slash, returns the whole string
0000000000000000000000000000000000000000;;	func lastComponent(s string) string {
0000000000000000000000000000000000000000;;		lastSlash := strings.LastIndex(s, "/")
0000000000000000000000000000000000000000;;		if lastSlash != -1 {
0000000000000000000000000000000000000000;;			s = s[lastSlash+1:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapNodeNameToInstanceName maps a k8s NodeName to a GCE Instance Name
0000000000000000000000000000000000000000;;	// This is a simple string cast.
0000000000000000000000000000000000000000;;	func mapNodeNameToInstanceName(nodeName types.NodeName) string {
0000000000000000000000000000000000000000;;		return string(nodeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapInstanceToNodeName maps a GCE Instance to a k8s NodeName
0000000000000000000000000000000000000000;;	func mapInstanceToNodeName(instance *compute.Instance) types.NodeName {
0000000000000000000000000000000000000000;;		return types.NodeName(instance.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGCERegion returns region of the gce zone. Zone names
0000000000000000000000000000000000000000;;	// are of the form: ${region-name}-${ix}.
0000000000000000000000000000000000000000;;	// For example, "us-central1-b" has a region of "us-central1".
0000000000000000000000000000000000000000;;	// So we look for the last '-' and trim to just before that.
0000000000000000000000000000000000000000;;	func GetGCERegion(zone string) (string, error) {
0000000000000000000000000000000000000000;;		ix := strings.LastIndex(zone, "-")
0000000000000000000000000000000000000000;;		if ix == -1 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unexpected zone: %s", zone)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zone[:ix], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isHTTPErrorCode(err error, code int) bool {
0000000000000000000000000000000000000000;;		apiErr, ok := err.(*googleapi.Error)
0000000000000000000000000000000000000000;;		return ok && apiErr.Code == code
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isInUsedByError(err error) bool {
0000000000000000000000000000000000000000;;		apiErr, ok := err.(*googleapi.Error)
0000000000000000000000000000000000000000;;		if !ok || apiErr.Code != http.StatusBadRequest {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Contains(apiErr.Message, "being used by")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// splitProviderID splits a provider's id into core components.
0000000000000000000000000000000000000000;;	// A providerID is build out of '${ProviderName}://${project-id}/${zone}/${instance-name}'
0000000000000000000000000000000000000000;;	// See cloudprovider.GetInstanceProviderID.
0000000000000000000000000000000000000000;;	func splitProviderID(providerID string) (project, zone, instance string, err error) {
0000000000000000000000000000000000000000;;		matches := providerIdRE.FindStringSubmatch(providerID)
0000000000000000000000000000000000000000;;		if len(matches) != 4 {
0000000000000000000000000000000000000000;;			return "", "", "", errors.New("error splitting providerID")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return matches[1], matches[2], matches[3], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func equalStringSets(x, y []string) bool {
0000000000000000000000000000000000000000;;		if len(x) != len(y) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		xString := sets.NewString(x...)
0000000000000000000000000000000000000000;;		yString := sets.NewString(y...)
0000000000000000000000000000000000000000;;		return xString.Equal(yString)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isNotFound(err error) bool {
0000000000000000000000000000000000000000;;		return isHTTPErrorCode(err, http.StatusNotFound)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ignoreNotFound(err error) error {
0000000000000000000000000000000000000000;;		if err == nil || isNotFound(err) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isNotFoundOrInUse(err error) bool {
0000000000000000000000000000000000000000;;		return isNotFound(err) || isInUsedByError(err)
0000000000000000000000000000000000000000;;	}
