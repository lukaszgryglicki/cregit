0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a3e3fac5acb000ea4977a0e92d5b6e96ddd1f63;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newCertMetricContext(request string) *metricContext {
0000000000000000000000000000000000000000;;		return &metricContext{
0000000000000000000000000000000000000000;;			start:      time.Now(),
0000000000000000000000000000000000000000;;			attributes: []string{"cert_" + request, unusedMetricLabel, unusedMetricLabel},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSslCertificate returns the SslCertificate by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) GetSslCertificate(name string) (*compute.SslCertificate, error) {
0000000000000000000000000000000000000000;;		mc := newCertMetricContext("get")
0000000000000000000000000000000000000000;;		v, err := gce.service.SslCertificates.Get(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSslCertificate creates and returns a SslCertificate.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) CreateSslCertificate(sslCerts *compute.SslCertificate) (*compute.SslCertificate, error) {
0000000000000000000000000000000000000000;;		mc := newCertMetricContext("create")
0000000000000000000000000000000000000000;;		op, err := gce.service.SslCertificates.Insert(gce.projectID, sslCerts).Do()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = gce.waitForGlobalOp(op, mc); err != nil {
0000000000000000000000000000000000000000;;			return nil, mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.GetSslCertificate(sslCerts.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSslCertificate deletes the SslCertificate by name.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) DeleteSslCertificate(name string) error {
0000000000000000000000000000000000000000;;		mc := newCertMetricContext("delete")
0000000000000000000000000000000000000000;;		op, err := gce.service.SslCertificates.Delete(gce.projectID, name).Do()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if isHTTPErrorCode(err, http.StatusNotFound) {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return mc.Observe(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gce.waitForGlobalOp(op, mc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSslCertificates lists all SslCertificates in the project.
0000000000000000000000000000000000000000;;	func (gce *GCECloud) ListSslCertificates() (*compute.SslCertificateList, error) {
0000000000000000000000000000000000000000;;		mc := newCertMetricContext("list")
0000000000000000000000000000000000000000;;		// TODO: use PageToken to list all not just the first 500
0000000000000000000000000000000000000000;;		v, err := gce.service.SslCertificates.List(gce.projectID).Do()
0000000000000000000000000000000000000000;;		return v, mc.Observe(err)
0000000000000000000000000000000000000000;;	}
