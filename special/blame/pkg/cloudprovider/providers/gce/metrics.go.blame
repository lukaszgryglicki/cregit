0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8320aec919446f83ef9ee85b658e070903fb3a9c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type apiCallMetrics struct {
0000000000000000000000000000000000000000;;		latency *prometheus.HistogramVec
0000000000000000000000000000000000000000;;		errors  *prometheus.CounterVec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		apiMetrics = registerAPIMetrics(
0000000000000000000000000000000000000000;;			"request", // API function that is begin invoked.
0000000000000000000000000000000000000000;;			"region",  // region (optional).
0000000000000000000000000000000000000000;;			"zone",    // zone (optional).
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type metricContext struct {
0000000000000000000000000000000000000000;;		start      time.Time
0000000000000000000000000000000000000000;;		attributes []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value for an unused label in the metric dimension.
0000000000000000000000000000000000000000;;	const unusedMetricLabel = "<n/a>"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Observe the result of a API call.
0000000000000000000000000000000000000000;;	func (mc *metricContext) Observe(err error) error {
0000000000000000000000000000000000000000;;		apiMetrics.latency.WithLabelValues(mc.attributes...).Observe(
0000000000000000000000000000000000000000;;			time.Since(mc.start).Seconds())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			apiMetrics.errors.WithLabelValues(mc.attributes...).Inc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// registerApiMetrics adds metrics definitions for a category of API calls.
0000000000000000000000000000000000000000;;	func registerAPIMetrics(attributes ...string) *apiCallMetrics {
0000000000000000000000000000000000000000;;		metrics := &apiCallMetrics{
0000000000000000000000000000000000000000;;			latency: prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;				prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;					Name: "cloudprovider_gce_api_request_duration_seconds",
0000000000000000000000000000000000000000;;					Help: "Latency of a GCE API call",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attributes,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			errors: prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;				prometheus.CounterOpts{
0000000000000000000000000000000000000000;;					Name: "cloudprovider_gce_api_request_errors",
0000000000000000000000000000000000000000;;					Help: "Number of errors for an API call",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				attributes,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prometheus.MustRegister(metrics.latency)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(metrics.errors)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return metrics
0000000000000000000000000000000000000000;;	}
