0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a31461814091fe34a19b41b9b8d6cbcc639a5d4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gcp_credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const email = "foo@bar.com"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// From oauth2/jwt_test.go
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		dummyPrivateKey = `-----BEGIN RSA PRIVATE KEY-----
0000000000000000000000000000000000000000;;	MIIEpAIBAAKCAQEAx4fm7dngEmOULNmAs1IGZ9Apfzh+BkaQ1dzkmbUgpcoghucE
0000000000000000000000000000000000000000;;	DZRnAGd2aPyB6skGMXUytWQvNYav0WTR00wFtX1ohWTfv68HGXJ8QXCpyoSKSSFY
0000000000000000000000000000000000000000;;	fuP9X36wBSkSX9J5DVgiuzD5VBdzUISSmapjKm+DcbRALjz6OUIPEWi1Tjl6p5RK
0000000000000000000000000000000000000000;;	1w41qdbmt7E5/kGhKLDuT7+M83g4VWhgIvaAXtnhklDAggilPPa8ZJ1IFe31lNlr
0000000000000000000000000000000000000000;;	k4DRk38nc6sEutdf3RL7QoH7FBusI7uXV03DC6dwN1kP4GE7bjJhcRb/7jYt7CQ9
0000000000000000000000000000000000000000;;	/E9Exz3c0yAp0yrTg0Fwh+qxfH9dKwN52S7SBwIDAQABAoIBAQCaCs26K07WY5Jt
0000000000000000000000000000000000000000;;	3a2Cw3y2gPrIgTCqX6hJs7O5ByEhXZ8nBwsWANBUe4vrGaajQHdLj5OKfsIDrOvn
0000000000000000000000000000000000000000;;	2NI1MqflqeAbu/kR32q3tq8/Rl+PPiwUsW3E6Pcf1orGMSNCXxeducF2iySySzh3
0000000000000000000000000000000000000000;;	nSIhCG5uwJDWI7a4+9KiieFgK1pt/Iv30q1SQS8IEntTfXYwANQrfKUVMmVF9aIK
0000000000000000000000000000000000000000;;	6/WZE2yd5+q3wVVIJ6jsmTzoDCX6QQkkJICIYwCkglmVy5AeTckOVwcXL0jqw5Kf
0000000000000000000000000000000000000000;;	5/soZJQwLEyBoQq7Kbpa26QHq+CJONetPP8Ssy8MJJXBT+u/bSseMb3Zsr5cr43e
0000000000000000000000000000000000000000;;	DJOhwsThAoGBAPY6rPKl2NT/K7XfRCGm1sbWjUQyDShscwuWJ5+kD0yudnT/ZEJ1
0000000000000000000000000000000000000000;;	M3+KS/iOOAoHDdEDi9crRvMl0UfNa8MAcDKHflzxg2jg/QI+fTBjPP5GOX0lkZ9g
0000000000000000000000000000000000000000;;	z6VePoVoQw2gpPFVNPPTxKfk27tEzbaffvOLGBEih0Kb7HTINkW8rIlzAoGBAM9y
0000000000000000000000000000000000000000;;	1yr+jvfS1cGFtNU+Gotoihw2eMKtIqR03Yn3n0PK1nVCDKqwdUqCypz4+ml6cxRK
0000000000000000000000000000000000000000;;	J8+Pfdh7D+ZJd4LEG6Y4QRDLuv5OA700tUoSHxMSNn3q9As4+T3MUyYxWKvTeu3U
0000000000000000000000000000000000000000;;	f2NWP9ePU0lV8ttk7YlpVRaPQmc1qwooBA/z/8AdAoGAW9x0HWqmRICWTBnpjyxx
0000000000000000000000000000000000000000;;	QGlW9rQ9mHEtUotIaRSJ6K/F3cxSGUEkX1a3FRnp6kPLcckC6NlqdNgNBd6rb2rA
0000000000000000000000000000000000000000;;	cPl/uSkZP42Als+9YMoFPU/xrrDPbUhu72EDrj3Bllnyb168jKLa4VBOccUvggxr
0000000000000000000000000000000000000000;;	Dm08I1hgYgdN5huzs7y6GeUCgYEAj+AZJSOJ6o1aXS6rfV3mMRve9bQ9yt8jcKXw
0000000000000000000000000000000000000000;;	5HhOCEmMtaSKfnOF1Ziih34Sxsb7O2428DiX0mV/YHtBnPsAJidL0SdLWIapBzeg
0000000000000000000000000000000000000000;;	KHArByIRkwE6IvJvwpGMdaex1PIGhx5i/3VZL9qiq/ElT05PhIb+UXgoWMabCp84
0000000000000000000000000000000000000000;;	OgxDK20CgYAeaFo8BdQ7FmVX2+EEejF+8xSge6WVLtkaon8bqcn6P0O8lLypoOhd
0000000000000000000000000000000000000000;;	mJAYH8WU+UAy9pecUnDZj14LAGNVmYcse8HFX71MoshnvCTFEPVo4rZxIAGwMpeJ
0000000000000000000000000000000000000000;;	5jgQ3slYLpqrGlcbLgUXBUgzEO684Wk/UV9DFPlHALVqCfXQ9dpJPg==
0000000000000000000000000000000000000000;;	-----END RSA PRIVATE KEY-----`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonKey = fmt.Sprintf(`{"private_key":"%[1]s", "client_email":"%[2]s", "type": "service_account"}`,
0000000000000000000000000000000000000000;;			strings.Replace(dummyPrivateKey, "\n", "\\n", -1), email)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJwtProvider(t *testing.T) {
0000000000000000000000000000000000000000;;		token := "asdhflkjsdfkjhsdf"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Modeled after oauth2/jwt_test.go
0000000000000000000000000000000000000000;;		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.Write([]byte(fmt.Sprintf(`{
0000000000000000000000000000000000000000;;				"access_token": "%[1]s",
0000000000000000000000000000000000000000;;				"scope": "user",
0000000000000000000000000000000000000000;;				"token_type": "bearer",
0000000000000000000000000000000000000000;;				"expires_in": 3600
0000000000000000000000000000000000000000;;			}`, token)))
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer ts.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file, err := ioutil.TempFile(os.TempDir(), "temp")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error creating temp file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		filename := file.Name()
0000000000000000000000000000000000000000;;		defer os.Remove(filename)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = file.WriteString(jsonKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error writing temp file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provider := &jwtProvider{
0000000000000000000000000000000000000000;;			path:     &filename,
0000000000000000000000000000000000000000;;			tokenUrl: ts.URL,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !provider.Enabled() {
0000000000000000000000000000000000000000;;			t.Fatalf("Provider is unexpectedly disabled")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyring := &credentialprovider.BasicDockerKeyring{}
0000000000000000000000000000000000000000;;		keyring.Add(provider.Provide())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify that we get the expected username/password combo for
0000000000000000000000000000000000000000;;		// a gcr.io image name.
0000000000000000000000000000000000000000;;		registryUrl := "gcr.io/foo/bar"
0000000000000000000000000000000000000000;;		creds, ok := keyring.Lookup(registryUrl)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("Didn't find expected URL: %s", registryUrl)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(creds) > 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Got more hits than expected: %s", creds)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		val := creds[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if "_token" != val.Username {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected username value, want: _token, got: %s", val.Username)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if token != val.Password {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected password value, want: %s, got: %s", token, val.Password)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if email != val.Email {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected email value, want: %s, got: %s", email, val.Email)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
