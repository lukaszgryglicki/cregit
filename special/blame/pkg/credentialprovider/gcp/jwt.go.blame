0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a31461814091fe34a19b41b9b8d6cbcc639a5d4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gcp_credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/jwt"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		storageReadOnlyScope = "https://www.googleapis.com/auth/devstorage.read_only"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		flagJwtFile = pflag.String("google-json-key", "",
0000000000000000000000000000000000000000;;			"The Google Cloud Platform Service Account JSON Key to use for authentication.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A DockerConfigProvider that reads its configuration from Google
0000000000000000000000000000000000000000;;	// Compute Engine metadata.
0000000000000000000000000000000000000000;;	type jwtProvider struct {
0000000000000000000000000000000000000000;;		path     *string
0000000000000000000000000000000000000000;;		config   *jwt.Config
0000000000000000000000000000000000000000;;		tokenUrl string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// init registers the various means by which credentials may
0000000000000000000000000000000000000000;;	// be resolved on GCP.
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		credentialprovider.RegisterCredentialProvider("google-jwt-key",
0000000000000000000000000000000000000000;;			&credentialprovider.CachingDockerConfigProvider{
0000000000000000000000000000000000000000;;				Provider: &jwtProvider{
0000000000000000000000000000000000000000;;					path: flagJwtFile,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Lifetime: 30 * time.Minute,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enabled implements DockerConfigProvider for the JSON Key based implementation.
0000000000000000000000000000000000000000;;	func (j *jwtProvider) Enabled() bool {
0000000000000000000000000000000000000000;;		if *j.path == "" {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(*j.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("while reading file %s got %v", *j.path, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := google.JWTConfigFromJSON(data, storageReadOnlyScope)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("while parsing %s data got %v", *j.path, err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		j.config = config
0000000000000000000000000000000000000000;;		if j.tokenUrl != "" {
0000000000000000000000000000000000000000;;			j.config.TokenURL = j.tokenUrl
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LazyProvide implements DockerConfigProvider. Should never be called.
0000000000000000000000000000000000000000;;	func (j *jwtProvider) LazyProvide() *credentialprovider.DockerConfigEntry {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Provide implements DockerConfigProvider
0000000000000000000000000000000000000000;;	func (j *jwtProvider) Provide() credentialprovider.DockerConfig {
0000000000000000000000000000000000000000;;		cfg := credentialprovider.DockerConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ts := j.config.TokenSource(oauth2.NoContext)
0000000000000000000000000000000000000000;;		token, err := ts.Token()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("while exchanging json key %s for access token %v", *j.path, err)
0000000000000000000000000000000000000000;;			return cfg
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !token.Valid() {
0000000000000000000000000000000000000000;;			glog.Errorf("Got back invalid token: %v", token)
0000000000000000000000000000000000000000;;			return cfg
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		entry := credentialprovider.DockerConfigEntry{
0000000000000000000000000000000000000000;;			Username: "_token",
0000000000000000000000000000000000000000;;			Password: token.AccessToken,
0000000000000000000000000000000000000000;;			Email:    j.config.Email,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add our entry for each of the supported container registry URLs
0000000000000000000000000000000000000000;;		for _, k := range containerRegistryUrls {
0000000000000000000000000000000000000000;;			cfg[k] = entry
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
