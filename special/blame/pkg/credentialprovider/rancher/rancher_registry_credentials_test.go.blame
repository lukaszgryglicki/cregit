0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a5dca41e5a9292cd5dbd3e5ab7f261beb672dff8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rancher_credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rancher/go-rancher/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const username = "foo"
0000000000000000000000000000000000000000;;	const password = "qwerty"
0000000000000000000000000000000000000000;;	const email = "foo@bar.baz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var serverAddresses = []string{"quay.io", "192.168.5.0"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testCredentialsGetter struct {
0000000000000000000000000000000000000000;;		client *client.RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testCredentialsGetter) getCredentials() []registryCredential {
0000000000000000000000000000000000000000;;		var registryCreds []registryCredential
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, serverAddress := range serverAddresses {
0000000000000000000000000000000000000000;;			cred := &client.RegistryCredential{
0000000000000000000000000000000000000000;;				PublicValue: username,
0000000000000000000000000000000000000000;;				SecretValue: password,
0000000000000000000000000000000000000000;;				Email:       email,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			registryCred := registryCredential{
0000000000000000000000000000000000000000;;				credential: cred,
0000000000000000000000000000000000000000;;				serverIP:   serverAddress,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			registryCreds = append(registryCreds, registryCred)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return registryCreds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRancherCredentialsProvide(t *testing.T) {
0000000000000000000000000000000000000000;;		image := "foo/bar"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		url := "http://localhost:8080"
0000000000000000000000000000000000000000;;		accessKey := "B481F55E0C48C546E094"
0000000000000000000000000000000000000000;;		secretKey := "dND2fBcytWWvCRJ8LvqnYcjyNfEkaikvfVxk2C5r"
0000000000000000000000000000000000000000;;		conf := rConfig{
0000000000000000000000000000000000000000;;			Global: configGlobal{
0000000000000000000000000000000000000000;;				CattleURL:       url,
0000000000000000000000000000000000000000;;				CattleAccessKey: accessKey,
0000000000000000000000000000000000000000;;				CattleSecretKey: secretKey,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rancherClient, _ := client.NewRancherClient(&client.ClientOpts{
0000000000000000000000000000000000000000;;			Url:       conf.Global.CattleURL,
0000000000000000000000000000000000000000;;			AccessKey: conf.Global.CattleAccessKey,
0000000000000000000000000000000000000000;;			SecretKey: conf.Global.CattleSecretKey,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testGetter := &testCredentialsGetter{
0000000000000000000000000000000000000000;;			client: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provider := &rancherProvider{
0000000000000000000000000000000000000000;;			credGetter: testGetter,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyring := &credentialprovider.BasicDockerKeyring{}
0000000000000000000000000000000000000000;;		keyring.Add(provider.Provide())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, registry := range serverAddresses {
0000000000000000000000000000000000000000;;			fullImagePath := path.Join(registry, image)
0000000000000000000000000000000000000000;;			creds, ok := keyring.Lookup(fullImagePath)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("Didn't find expected image: %s", fullImagePath)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(creds) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected 1 result, received %v", len(creds))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			val := creds[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if username != val.Username {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected username value, want: %s, got: %s", username, val.Username)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if password != val.Password {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected password value, want: %s, got: %s", password, val.Password)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if email != val.Email {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected email value, want: %s, got: %s", email, val.Email)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// try to fetch non-existing registry
0000000000000000000000000000000000000000;;		fullImagePath := path.Join("1.1.1.1", image)
0000000000000000000000000000000000000000;;		_, ok := keyring.Lookup(fullImagePath)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Errorf("Found non-existing image: %s", fullImagePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
