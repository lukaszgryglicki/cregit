0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a5dca41e5a9292cd5dbd3e5ab7f261beb672dff8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rancher_credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/rancher/go-rancher/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rancher provider
0000000000000000000000000000000000000000;;	type rancherProvider struct {
0000000000000000000000000000000000000000;;		credGetter credentialsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// credentials getter from Rancher private registry
0000000000000000000000000000000000000000;;	type rancherCredentialsGetter struct {
0000000000000000000000000000000000000000;;		client *client.RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rConfig struct {
0000000000000000000000000000000000000000;;		Global configGlobal
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An interface for testing purposes.
0000000000000000000000000000000000000000;;	type credentialsGetter interface {
0000000000000000000000000000000000000000;;		getCredentials() []registryCredential
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configGlobal struct {
0000000000000000000000000000000000000000;;		CattleURL       string `gcfg:"cattle-url"`
0000000000000000000000000000000000000000;;		CattleAccessKey string `gcfg:"cattle-access-key"`
0000000000000000000000000000000000000000;;		CattleSecretKey string `gcfg:"cattle-secret-key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type registryCredential struct {
0000000000000000000000000000000000000000;;		credential *client.RegistryCredential
0000000000000000000000000000000000000000;;		serverIP   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var rancherGetter = &rancherCredentialsGetter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		credentialprovider.RegisterCredentialProvider("rancher-registry-creds",
0000000000000000000000000000000000000000;;			&credentialprovider.CachingDockerConfigProvider{
0000000000000000000000000000000000000000;;				Provider: &rancherProvider{rancherGetter},
0000000000000000000000000000000000000000;;				Lifetime: 30 * time.Second,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *rancherProvider) Enabled() bool {
0000000000000000000000000000000000000000;;		client, err := getRancherClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rancherGetter.client = client
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LazyProvide implements DockerConfigProvider. Should never be called.
0000000000000000000000000000000000000000;;	func (p *rancherProvider) LazyProvide() *credentialprovider.DockerConfigEntry {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Provide implements DockerConfigProvider.Provide, refreshing Rancher tokens on demand
0000000000000000000000000000000000000000;;	func (p *rancherProvider) Provide() credentialprovider.DockerConfig {
0000000000000000000000000000000000000000;;		cfg := credentialprovider.DockerConfig{}
0000000000000000000000000000000000000000;;		for _, cred := range p.credGetter.getCredentials() {
0000000000000000000000000000000000000000;;			entry := credentialprovider.DockerConfigEntry{
0000000000000000000000000000000000000000;;				Username: cred.credential.PublicValue,
0000000000000000000000000000000000000000;;				Password: cred.credential.SecretValue,
0000000000000000000000000000000000000000;;				Email:    cred.credential.Email,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cfg[cred.serverIP] = entry
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *rancherCredentialsGetter) getCredentials() []registryCredential {
0000000000000000000000000000000000000000;;		var registryCreds []registryCredential
0000000000000000000000000000000000000000;;		credColl, err := g.client.RegistryCredential.List(client.NewListOpts())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to pull registry credentials from rancher %v", err)
0000000000000000000000000000000000000000;;			return registryCreds
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, cred := range credColl.Data {
0000000000000000000000000000000000000000;;			registry := &client.Registry{}
0000000000000000000000000000000000000000;;			if err = g.client.GetLink(cred.Resource, "registry", registry); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to pull registry from rancher %v", err)
0000000000000000000000000000000000000000;;				return registryCreds
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			registryCred := registryCredential{
0000000000000000000000000000000000000000;;				credential: &cred,
0000000000000000000000000000000000000000;;				serverIP:   registry.ServerAddress,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			registryCreds = append(registryCreds, registryCred)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return registryCreds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getRancherClient() (*client.RancherClient, error) {
0000000000000000000000000000000000000000;;		url := os.Getenv("CATTLE_URL")
0000000000000000000000000000000000000000;;		accessKey := os.Getenv("CATTLE_ACCESS_KEY")
0000000000000000000000000000000000000000;;		secretKey := os.Getenv("CATTLE_SECRET_KEY")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if url == "" || accessKey == "" || secretKey == "" {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		conf := rConfig{
0000000000000000000000000000000000000000;;			Global: configGlobal{
0000000000000000000000000000000000000000;;				CattleURL:       url,
0000000000000000000000000000000000000000;;				CattleAccessKey: accessKey,
0000000000000000000000000000000000000000;;				CattleSecretKey: secretKey,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.NewRancherClient(&client.ClientOpts{
0000000000000000000000000000000000000000;;			Url:       conf.Global.CattleURL,
0000000000000000000000000000000000000000;;			AccessKey: conf.Global.CattleAccessKey,
0000000000000000000000000000000000000000;;			SecretKey: conf.Global.CattleSecretKey,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
