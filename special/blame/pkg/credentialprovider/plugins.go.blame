0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e2e9a55416433a661ac09b776f3c6877d1eaef2b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package credentialprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// All registered credential providers.
0000000000000000000000000000000000000000;;	var providersMutex sync.Mutex
0000000000000000000000000000000000000000;;	var providers = make(map[string]DockerConfigProvider)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterCredentialProvider is called by provider implementations on
0000000000000000000000000000000000000000;;	// initialization to register themselves, like so:
0000000000000000000000000000000000000000;;	//   func init() {
0000000000000000000000000000000000000000;;	//    	RegisterCredentialProvider("name", &myProvider{...})
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	func RegisterCredentialProvider(name string, provider DockerConfigProvider) {
0000000000000000000000000000000000000000;;		providersMutex.Lock()
0000000000000000000000000000000000000000;;		defer providersMutex.Unlock()
0000000000000000000000000000000000000000;;		_, found := providers[name]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			glog.Fatalf("Credential provider %q was registered twice", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Registered credential provider %q", name)
0000000000000000000000000000000000000000;;		providers[name] = provider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDockerKeyring creates a DockerKeyring to use for resolving credentials,
0000000000000000000000000000000000000000;;	// which lazily draws from the set of registered credential providers.
0000000000000000000000000000000000000000;;	func NewDockerKeyring() DockerKeyring {
0000000000000000000000000000000000000000;;		keyring := &lazyDockerKeyring{
0000000000000000000000000000000000000000;;			Providers: make([]DockerConfigProvider, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(mattmoor): iterating over the map is non-deterministic.  We should
0000000000000000000000000000000000000000;;		// introduce the notion of priorities for conflict resolution.
0000000000000000000000000000000000000000;;		for name, provider := range providers {
0000000000000000000000000000000000000000;;			if provider.Enabled() {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Registering credential provider: %v", name)
0000000000000000000000000000000000000000;;				keyring.Providers = append(keyring.Providers, provider)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return keyring
0000000000000000000000000000000000000000;;	}
