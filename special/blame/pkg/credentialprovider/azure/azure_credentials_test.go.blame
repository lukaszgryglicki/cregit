0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bd2426f12096d4f49bbb9174b64c68e841023f01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/azure-sdk-for-go/arm/containerregistry"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/to"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeClient struct {
0000000000000000000000000000000000000000;;		results containerregistry.RegistryListResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeClient) List() (containerregistry.RegistryListResult, error) {
0000000000000000000000000000000000000000;;		return f.results, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test(t *testing.T) {
0000000000000000000000000000000000000000;;		configStr := `
0000000000000000000000000000000000000000;;	    {
0000000000000000000000000000000000000000;;	        "aadClientId": "foo",
0000000000000000000000000000000000000000;;	        "aadClientSecret": "bar"
0000000000000000000000000000000000000000;;	    }`
0000000000000000000000000000000000000000;;		result := containerregistry.RegistryListResult{
0000000000000000000000000000000000000000;;			Value: &[]containerregistry.Registry{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: to.StringPtr("foo"),
0000000000000000000000000000000000000000;;					RegistryProperties: &containerregistry.RegistryProperties{
0000000000000000000000000000000000000000;;						LoginServer: to.StringPtr("foo-microsoft.azurecr.io"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: to.StringPtr("bar"),
0000000000000000000000000000000000000000;;					RegistryProperties: &containerregistry.RegistryProperties{
0000000000000000000000000000000000000000;;						LoginServer: to.StringPtr("bar-microsoft.azurecr.io"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: to.StringPtr("baz"),
0000000000000000000000000000000000000000;;					RegistryProperties: &containerregistry.RegistryProperties{
0000000000000000000000000000000000000000;;						LoginServer: to.StringPtr("baz-microsoft.azurecr.io"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeClient := &fakeClient{
0000000000000000000000000000000000000000;;			results: result,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provider := &acrProvider{
0000000000000000000000000000000000000000;;			registryClient: fakeClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		provider.loadConfig([]byte(configStr))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		creds := provider.Provide()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(creds) != len(*result.Value) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected list: %v, expected length %d", creds, len(*result.Value))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, cred := range creds {
0000000000000000000000000000000000000000;;			if cred.Username != "foo" {
0000000000000000000000000000000000000000;;				t.Errorf("expected 'foo' for username, saw: %v", cred.Username)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cred.Password != "bar" {
0000000000000000000000000000000000000000;;				t.Errorf("expected 'bar' for password, saw: %v", cred.Username)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range *result.Value {
0000000000000000000000000000000000000000;;			registryName := getLoginServer(val)
0000000000000000000000000000000000000000;;			if _, found := creds[registryName]; !found {
0000000000000000000000000000000000000000;;				t.Errorf("Missing expected registry: %s", registryName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
