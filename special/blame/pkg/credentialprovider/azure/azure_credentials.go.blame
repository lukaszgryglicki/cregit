0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bd2426f12096d4f49bbb9174b64c68e841023f01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		yaml "gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/azure-sdk-for-go/arm/containerregistry"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/adal"
0000000000000000000000000000000000000000;;		azureapi "github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/azure"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var flagConfigFile = pflag.String("azure-container-registry-config", "",
0000000000000000000000000000000000000000;;		"Path to the file container Azure container registry configuration information.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const dummyRegistryEmail = "name@contoso.com"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// init registers the various means by which credentials may
0000000000000000000000000000000000000000;;	// be resolved on Azure.
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		credentialprovider.RegisterCredentialProvider("azure",
0000000000000000000000000000000000000000;;			&credentialprovider.CachingDockerConfigProvider{
0000000000000000000000000000000000000000;;				Provider: NewACRProvider(flagConfigFile),
0000000000000000000000000000000000000000;;				Lifetime: 1 * time.Minute,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegistriesClient interface {
0000000000000000000000000000000000000000;;		List() (containerregistry.RegistryListResult, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewACRProvider(configFile *string) credentialprovider.DockerConfigProvider {
0000000000000000000000000000000000000000;;		return &acrProvider{
0000000000000000000000000000000000000000;;			file: configFile,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type acrProvider struct {
0000000000000000000000000000000000000000;;		file           *string
0000000000000000000000000000000000000000;;		config         azure.Config
0000000000000000000000000000000000000000;;		environment    azureapi.Environment
0000000000000000000000000000000000000000;;		registryClient RegistriesClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *acrProvider) loadConfig(contents []byte) error {
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(contents, &a.config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if a.config.Cloud == "" {
0000000000000000000000000000000000000000;;			a.environment = azureapi.PublicCloud
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			a.environment, err = azureapi.EnvironmentFromName(a.config.Cloud)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *acrProvider) Enabled() bool {
0000000000000000000000000000000000000000;;		if a.file == nil || len(*a.file) == 0 {
0000000000000000000000000000000000000000;;			glog.V(5).Infof("Azure config unspecified, disabling")
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		contents, err := ioutil.ReadFile(*a.file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to load azure credential file: %v", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := a.loadConfig(contents); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to parse azure credential file: %v", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oauthConfig, err := adal.NewOAuthConfig(a.environment.ActiveDirectoryEndpoint, a.config.TenantID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get oauth config: %v", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		servicePrincipalToken, err := adal.NewServicePrincipalToken(
0000000000000000000000000000000000000000;;			*oauthConfig,
0000000000000000000000000000000000000000;;			a.config.AADClientID,
0000000000000000000000000000000000000000;;			a.config.AADClientSecret,
0000000000000000000000000000000000000000;;			a.environment.ServiceManagementEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to create service principal token: %v", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		registryClient := containerregistry.NewRegistriesClient(a.config.SubscriptionID)
0000000000000000000000000000000000000000;;		registryClient.BaseURI = a.environment.ResourceManagerEndpoint
0000000000000000000000000000000000000000;;		registryClient.Authorizer = autorest.NewBearerAuthorizer(servicePrincipalToken)
0000000000000000000000000000000000000000;;		a.registryClient = registryClient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *acrProvider) Provide() credentialprovider.DockerConfig {
0000000000000000000000000000000000000000;;		cfg := credentialprovider.DockerConfig{}
0000000000000000000000000000000000000000;;		entry := credentialprovider.DockerConfigEntry{
0000000000000000000000000000000000000000;;			Username: a.config.AADClientID,
0000000000000000000000000000000000000000;;			Password: a.config.AADClientSecret,
0000000000000000000000000000000000000000;;			Email:    dummyRegistryEmail,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := a.registryClient.List()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to list registries: %v", err)
0000000000000000000000000000000000000000;;			return cfg
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for ix := range *res.Value {
0000000000000000000000000000000000000000;;			loginServer := getLoginServer((*res.Value)[ix])
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Adding Azure Container Registry docker credential for %s", loginServer)
0000000000000000000000000000000000000000;;			cfg[loginServer] = entry
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getLoginServer(registry containerregistry.Registry) string {
0000000000000000000000000000000000000000;;		return *(*registry.RegistryProperties).LoginServer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *acrProvider) LazyProvide() *credentialprovider.DockerConfigEntry {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
