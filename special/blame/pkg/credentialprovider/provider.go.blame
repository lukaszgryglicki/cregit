0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e2e9a55416433a661ac09b776f3c6877d1eaef2b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package credentialprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DockerConfigProvider is the interface that registered extensions implement
0000000000000000000000000000000000000000;;	// to materialize 'dockercfg' credentials.
0000000000000000000000000000000000000000;;	type DockerConfigProvider interface {
0000000000000000000000000000000000000000;;		// Enabled returns true if the config provider is enabled.
0000000000000000000000000000000000000000;;		// Implementations can be blocking - e.g. metadata server unavailable.
0000000000000000000000000000000000000000;;		Enabled() bool
0000000000000000000000000000000000000000;;		// Provide returns docker configuration.
0000000000000000000000000000000000000000;;		// Implementations can be blocking - e.g. metadata server unavailable.
0000000000000000000000000000000000000000;;		Provide() DockerConfig
0000000000000000000000000000000000000000;;		// LazyProvide() gets called after URL matches have been performed, so the
0000000000000000000000000000000000000000;;		// location used as the key in DockerConfig would be redundant.
0000000000000000000000000000000000000000;;		LazyProvide() *DockerConfigEntry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LazyProvide(creds LazyAuthConfiguration) dockertypes.AuthConfig {
0000000000000000000000000000000000000000;;		if creds.Provider != nil {
0000000000000000000000000000000000000000;;			entry := *creds.Provider.LazyProvide()
0000000000000000000000000000000000000000;;			return DockerConfigEntryToLazyAuthConfiguration(entry).AuthConfig
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return creds.AuthConfig
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A DockerConfigProvider that simply reads the .dockercfg file
0000000000000000000000000000000000000000;;	type defaultDockerConfigProvider struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// init registers our default provider, which simply reads the .dockercfg file.
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		RegisterCredentialProvider(".dockercfg",
0000000000000000000000000000000000000000;;			&CachingDockerConfigProvider{
0000000000000000000000000000000000000000;;				Provider: &defaultDockerConfigProvider{},
0000000000000000000000000000000000000000;;				Lifetime: 5 * time.Minute,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CachingDockerConfigProvider implements DockerConfigProvider by composing
0000000000000000000000000000000000000000;;	// with another DockerConfigProvider and caching the DockerConfig it provides
0000000000000000000000000000000000000000;;	// for a pre-specified lifetime.
0000000000000000000000000000000000000000;;	type CachingDockerConfigProvider struct {
0000000000000000000000000000000000000000;;		Provider DockerConfigProvider
0000000000000000000000000000000000000000;;		Lifetime time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cache fields
0000000000000000000000000000000000000000;;		cacheDockerConfig DockerConfig
0000000000000000000000000000000000000000;;		expiration        time.Time
0000000000000000000000000000000000000000;;		mu                sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enabled implements dockerConfigProvider
0000000000000000000000000000000000000000;;	func (d *defaultDockerConfigProvider) Enabled() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Provide implements dockerConfigProvider
0000000000000000000000000000000000000000;;	func (d *defaultDockerConfigProvider) Provide() DockerConfig {
0000000000000000000000000000000000000000;;		// Read the standard Docker credentials from .dockercfg
0000000000000000000000000000000000000000;;		if cfg, err := ReadDockerConfigFile(); err == nil {
0000000000000000000000000000000000000000;;			return cfg
0000000000000000000000000000000000000000;;		} else if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Unable to parse Docker config file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return DockerConfig{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LazyProvide implements dockerConfigProvider. Should never be called.
0000000000000000000000000000000000000000;;	func (d *defaultDockerConfigProvider) LazyProvide() *DockerConfigEntry {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enabled implements dockerConfigProvider
0000000000000000000000000000000000000000;;	func (d *CachingDockerConfigProvider) Enabled() bool {
0000000000000000000000000000000000000000;;		return d.Provider.Enabled()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LazyProvide implements dockerConfigProvider. Should never be called.
0000000000000000000000000000000000000000;;	func (d *CachingDockerConfigProvider) LazyProvide() *DockerConfigEntry {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Provide implements dockerConfigProvider
0000000000000000000000000000000000000000;;	func (d *CachingDockerConfigProvider) Provide() DockerConfig {
0000000000000000000000000000000000000000;;		d.mu.Lock()
0000000000000000000000000000000000000000;;		defer d.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the cache hasn't expired, return our cache
0000000000000000000000000000000000000000;;		if time.Now().Before(d.expiration) {
0000000000000000000000000000000000000000;;			return d.cacheDockerConfig
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Refreshing cache for provider: %v", reflect.TypeOf(d.Provider).String())
0000000000000000000000000000000000000000;;		d.cacheDockerConfig = d.Provider.Provide()
0000000000000000000000000000000000000000;;		d.expiration = time.Now().Add(d.Lifetime)
0000000000000000000000000000000000000000;;		return d.cacheDockerConfig
0000000000000000000000000000000000000000;;	}
