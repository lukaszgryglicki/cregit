0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e2e9a55416433a661ac09b776f3c6877d1eaef2b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package credentialprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCachingProvider(t *testing.T) {
0000000000000000000000000000000000000000;;		provider := &testProvider{
0000000000000000000000000000000000000000;;			Count: 0,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cache := &CachingDockerConfigProvider{
0000000000000000000000000000000000000000;;			Provider: provider,
0000000000000000000000000000000000000000;;			Lifetime: 1 * time.Second,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if provider.Count != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of Provide calls: %v", provider.Count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		if provider.Count != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of Provide calls: %v", provider.Count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		time.Sleep(cache.Lifetime)
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		if provider.Count != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of Provide calls: %v", provider.Count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		time.Sleep(cache.Lifetime)
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		cache.Provide()
0000000000000000000000000000000000000000;;		if provider.Count != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of Provide calls: %v", provider.Count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
