0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
867d12e2129e83804ebf2dac6e9736f1264d69f3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package history
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/strategicpatch"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_ListControllerRevisions(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			parent    metav1.Object
0000000000000000000000000000000000000000;;			selector  labels.Selector
0000000000000000000000000000000000000000;;			revisions []*apps.ControllerRevision
0000000000000000000000000000000000000000;;			want      map[string]bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			for i := range test.revisions {
0000000000000000000000000000000000000000;;				informer.Informer().GetIndexer().Add(test.revisions[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			revisions, err := history.ListControllerRevisions(test.parent, test.selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got := make(map[string]bool)
0000000000000000000000000000000000000000;;			for i := range revisions {
0000000000000000000000000000000000000000;;				got[revisions[i].Name] = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.want, got) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: want %v got %v", test.name, test.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		ss1Orphan, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 3)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Orphan.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Orphan.OwnerReferences = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects none",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: nil,
0000000000000000000000000000000000000000;;				want:      map[string]bool{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects all",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "doesn't select another Objects history",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2, ss2Rev1},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects orphans",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2, ss1Orphan},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true, ss1Orphan.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_ListControllerRevisions(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			parent    metav1.Object
0000000000000000000000000000000000000000;;			selector  labels.Selector
0000000000000000000000000000000000000000;;			revisions []*apps.ControllerRevision
0000000000000000000000000000000000000000;;			want      map[string]bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			for i := range test.revisions {
0000000000000000000000000000000000000000;;				informer.Informer().GetIndexer().Add(test.revisions[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			revisions, err := history.ListControllerRevisions(test.parent, test.selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got := make(map[string]bool)
0000000000000000000000000000000000000000;;			for i := range revisions {
0000000000000000000000000000000000000000;;				got[revisions[i].Name] = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.want, got) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: want %v got %v", test.name, test.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		ss1Orphan, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 3)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Orphan.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Orphan.OwnerReferences = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects none",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: nil,
0000000000000000000000000000000000000000;;				want:      map[string]bool{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects all",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "doesn't select another Objects history",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2, ss2Rev1},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "selects orphans",
0000000000000000000000000000000000000000;;				parent:    &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				selector:  sel1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2, ss1Orphan},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true, ss1Rev2.Name: true, ss1Orphan.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_CreateControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			parent   metav1.Object
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rename bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			created, err := history.CreateControllerRevision(test.parent, test.revision)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.rename && created.Name == test.revision.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s: wanted rename got %s %s", test.name, created.Name, test.revision.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.rename && created.Name != test.revision.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s: wanted %s got %s", test.name, test.revision.Name, created.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "creates new",
0000000000000000000000000000000000000000;;				parent:   &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rename: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "create doesn't conflict when parents differ",
0000000000000000000000000000000000000000;;				parent:   &ss2.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rename: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "create renames on conflict",
0000000000000000000000000000000000000000;;				parent:   &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				rename: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_CreateControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			parent   metav1.Object
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rename bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			created, err := history.CreateControllerRevision(test.parent, test.revision)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.rename && created.Name == test.revision.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s: wanted rename got %s %s", test.name, created.Name, test.revision.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.rename && created.Name != test.revision.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s: wanted %s got %s", test.name, test.revision.Name, created.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "creates new",
0000000000000000000000000000000000000000;;				parent:   &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rename: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "create doesn't conflict when parents differ",
0000000000000000000000000000000000000000;;				parent:   &ss2.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rename: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "create renames on conflict",
0000000000000000000000000000000000000000;;				parent:   &ss1.ObjectMeta,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				rename: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_UpdateControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		conflictAttempts := 0
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			revision    *apps.ControllerRevision
0000000000000000000000000000000000000000;;			newRevision int64
0000000000000000000000000000000000000000;;			existing    []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			reactor core.ReactionFunc
0000000000000000000000000000000000000000;;			err     bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		conflictSuccess := func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				conflictAttempts++
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			switch action.(type) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case core.UpdateActionImpl:
0000000000000000000000000000000000000000;;				update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;				if conflictAttempts < 2 {
0000000000000000000000000000000000000000;;					return true, update.GetObject(), errors.NewConflict(update.GetResource().GroupResource(), "", fmt.Errorf("conflict"))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false, nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		internalError := func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			switch action.(type) {
0000000000000000000000000000000000000000;;			case core.UpdateActionImpl:
0000000000000000000000000000000000000000;;				return true, nil, errors.NewInternalError(fmt.Errorf("internal error"))
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false, nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.reactor != nil {
0000000000000000000000000000000000000000;;				client.PrependReactor("*", "*", test.reactor)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updated, err := history.UpdateControllerRevision(test.revision, test.newRevision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && updated.Revision != test.newRevision {
0000000000000000000000000000000000000000;;				t.Errorf("%s: got %d want %d", test.name, updated.Revision, test.newRevision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "update succeeds",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision + 1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				reactor: nil,
0000000000000000000000000000000000000000;;				err:     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "update succeeds no noop",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				reactor: nil,
0000000000000000000000000000000000000000;;				err:     false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "update fails on error",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision + 10,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				reactor: internalError,
0000000000000000000000000000000000000000;;				err:     true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "update on succeeds on conflict",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision + 1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				reactor: conflictSuccess,
0000000000000000000000000000000000000000;;				err:     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			conflictAttempts = 0
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_UpdateControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			revision    *apps.ControllerRevision
0000000000000000000000000000000000000000;;			newRevision int64
0000000000000000000000000000000000000000;;			existing    []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updated, err := history.UpdateControllerRevision(test.revision, test.newRevision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && updated.Revision != test.newRevision {
0000000000000000000000000000000000000000;;				t.Errorf("%s: got %d want %d", test.name, updated.Revision, test.newRevision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "update succeeds",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision + 1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "update succeeds no noop",
0000000000000000000000000000000000000000;;				revision:    ss1Rev1,
0000000000000000000000000000000000000000;;				newRevision: ss1Rev1.Revision,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_DeleteControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := history.DeleteControllerRevision(test.revision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		ss2Rev2, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev2.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "delete empty fails",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;				err:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "delete existing succeeds",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:     "delete non-existing fails",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_DeleteControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := history.DeleteControllerRevision(test.revision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		ss2Rev2, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev2.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "delete empty fails",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;				err:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "delete existing succeeds",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:     "delete non-existing fails",
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_AdoptControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			parent   metav1.Object
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			client.AddReactor("*", "*", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;				switch action := action.(type) {
0000000000000000000000000000000000000000;;				case core.PatchActionImpl:
0000000000000000000000000000000000000000;;					var found *apps.ControllerRevision
0000000000000000000000000000000000000000;;					for i := range test.existing {
0000000000000000000000000000000000000000;;						if test.revision.Name == test.existing[i].revision.Name &&
0000000000000000000000000000000000000000;;							test.revision.Namespace == test.existing[i].revision.Namespace {
0000000000000000000000000000000000000000;;							found = test.existing[i].revision
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if found == nil {
0000000000000000000000000000000000000000;;						return true, nil, errors.NewNotFound(apps.Resource("controllerrevisions"), test.revision.Name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b, err := strategicpatch.StrategicMergePatch(
0000000000000000000000000000000000000000;;						[]byte(runtime.EncodeOrDie(testapi.Apps.Codec(), test.revision)),
0000000000000000000000000000000000000000;;						action.GetPatch(), test.revision)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					obj, err := runtime.Decode(testapi.Apps.Codec(), b)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					patched, err := testapi.Apps.Converter().ConvertToVersion(obj, apps.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return true, patched, err
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return false, nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			adopted, err := history.AdoptControllerRevision(test.parent, parentKind, test.revision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && controller.GetControllerOf(adopted).UID != test.parent.GetUID() {
0000000000000000000000000000000000000000;;				t.Errorf("%s: adoption failed", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2.OwnerReferences = []metav1.OwnerReference{}
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "adopting an orphan succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev2,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "adopting an owned revision fails",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "adopting a non-existent revision fails",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev2,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;				err:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_AdoptControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			parent     metav1.Object
0000000000000000000000000000000000000000;;			parentType *metav1.TypeMeta
0000000000000000000000000000000000000000;;			revision   *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing   []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			adopted, err := history.AdoptControllerRevision(test.parent, parentKind, test.revision)
0000000000000000000000000000000000000000;;			if !test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && controller.GetControllerOf(adopted).UID != test.parent.GetUID() {
0000000000000000000000000000000000000000;;				t.Errorf("%s: adoption failed", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2.OwnerReferences = []metav1.OwnerReference{}
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "adopting an orphan succeeds",
0000000000000000000000000000000000000000;;				parent:     ss1,
0000000000000000000000000000000000000000;;				parentType: &ss1.TypeMeta,
0000000000000000000000000000000000000000;;				revision:   ss1Rev2,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "adopting an owned revision fails",
0000000000000000000000000000000000000000;;				parent:     ss1,
0000000000000000000000000000000000000000;;				parentType: &ss1.TypeMeta,
0000000000000000000000000000000000000000;;				revision:   ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "adopting a non-existent revision fails",
0000000000000000000000000000000000000000;;				parent:     ss1,
0000000000000000000000000000000000000000;;				parentType: &ss1.TypeMeta,
0000000000000000000000000000000000000000;;				revision:   ss1Rev2,
0000000000000000000000000000000000000000;;				existing:   nil,
0000000000000000000000000000000000000000;;				err:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRealHistory_ReleaseControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			parent   metav1.Object
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			client.AddReactor("*", "*", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;				switch action := action.(type) {
0000000000000000000000000000000000000000;;				case core.PatchActionImpl:
0000000000000000000000000000000000000000;;					var found *apps.ControllerRevision
0000000000000000000000000000000000000000;;					for i := range test.existing {
0000000000000000000000000000000000000000;;						if test.revision.Name == test.existing[i].revision.Name &&
0000000000000000000000000000000000000000;;							test.revision.Namespace == test.existing[i].revision.Namespace {
0000000000000000000000000000000000000000;;							found = test.existing[i].revision
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if found == nil {
0000000000000000000000000000000000000000;;						return true, nil, errors.NewNotFound(apps.Resource("controllerrevisions"), test.revision.Name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if foundParent := controller.GetControllerOf(test.revision); foundParent == nil ||
0000000000000000000000000000000000000000;;						foundParent.UID != test.parent.GetUID() {
0000000000000000000000000000000000000000;;						return true, nil, errors.NewInvalid(
0000000000000000000000000000000000000000;;							test.revision.GroupVersionKind().GroupKind(), test.revision.Name, nil)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b, err := strategicpatch.StrategicMergePatch(
0000000000000000000000000000000000000000;;						[]byte(runtime.EncodeOrDie(testapi.Apps.Codec(), test.revision)),
0000000000000000000000000000000000000000;;						action.GetPatch(), test.revision)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					obj, err := runtime.Decode(testapi.Apps.Codec(), b)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					patched, err := testapi.Apps.Converter().ConvertToVersion(obj, apps.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return true, patched, err
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return false, nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			history := NewHistory(client, informer.Lister())
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			adopted, err := history.ReleaseControllerRevision(test.parent, test.revision)
0000000000000000000000000000000000000000;;			if !test.err {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if adopted == nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if owner := controller.GetControllerOf(adopted); owner != nil && owner.UID == test.parent.GetUID() {
0000000000000000000000000000000000000000;;					t.Errorf("%s: release failed", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2.OwnerReferences = []metav1.OwnerReference{}
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing an owned revision succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing an orphan succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev2,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing a revision owned by another controller succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing a non-existent revision succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;				err:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHistory_ReleaseControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			parent   metav1.Object
0000000000000000000000000000000000000000;;			revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			existing []struct {
0000000000000000000000000000000000000000;;				parent   metav1.Object
0000000000000000000000000000000000000000;;				revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			informer := informerFactory.Apps().V1beta1().ControllerRevisions()
0000000000000000000000000000000000000000;;			informerFactory.WaitForCacheSync(stop)
0000000000000000000000000000000000000000;;			history := NewFakeHistory(informer)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				_, err := history.CreateControllerRevision(test.existing[i].parent, test.existing[i].revision)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			adopted, err := history.ReleaseControllerRevision(test.parent, test.revision)
0000000000000000000000000000000000000000;;			if !test.err {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if adopted == nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if owner := controller.GetControllerOf(adopted); owner != nil && owner.UID == test.parent.GetUID() {
0000000000000000000000000000000000000000;;					t.Errorf("%s: release failed", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2.OwnerReferences = []metav1.OwnerReference{}
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing an owned revision succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing an orphan succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev2,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss1,
0000000000000000000000000000000000000000;;						revision: ss1Rev2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing a revision owned by another controller succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss2Rev1,
0000000000000000000000000000000000000000;;				existing: []struct {
0000000000000000000000000000000000000000;;					parent   metav1.Object
0000000000000000000000000000000000000000;;					revision *apps.ControllerRevision
0000000000000000000000000000000000000000;;				}{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						parent:   ss2,
0000000000000000000000000000000000000000;;						revision: ss2Rev1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "releasing a non-existent revision succeeds",
0000000000000000000000000000000000000000;;				parent:   ss1,
0000000000000000000000000000000000000000;;				revision: ss1Rev1,
0000000000000000000000000000000000000000;;				existing: nil,
0000000000000000000000000000000000000000;;				err:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindEqualRevisions(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			revision  *apps.ControllerRevision
0000000000000000000000000000000000000000;;			revisions []*apps.ControllerRevision
0000000000000000000000000000000000000000;;			want      map[string]bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			found := FindEqualRevisions(test.revisions, test.revision)
0000000000000000000000000000000000000000;;			if len(found) != len(test.want) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: want %d revisions found %d", test.name, len(test.want), len(found))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range found {
0000000000000000000000000000000000000000;;				if !test.want[found[i].Name] {
0000000000000000000000000000000000000000;;					t.Errorf("%s: wanted %s not found", test.name, found[i].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		ss2 := newStatefulSet(3, "ss2", types.UID("ss2"), map[string]string{"goo": "car"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sel2, err := metav1.LabelSelectorAsSelector(ss2.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2.OwnerReferences = []metav1.OwnerReference{}
0000000000000000000000000000000000000000;;		ss2Rev1, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev1.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		ss2Rev2, err := NewControllerRevision(ss2, parentKind, sel2, rawTemplate(&ss2.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss2Rev2.Namespace = ss2.Namespace
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "finds equivalent",
0000000000000000000000000000000000000000;;				revision:  ss1Rev1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss2Rev1, ss2Rev2},
0000000000000000000000000000000000000000;;				want:      map[string]bool{ss1Rev1.Name: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "finds nothing when empty",
0000000000000000000000000000000000000000;;				revision:  ss1Rev1,
0000000000000000000000000000000000000000;;				revisions: nil,
0000000000000000000000000000000000000000;;				want:      map[string]bool{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "finds nothing with no matches",
0000000000000000000000000000000000000000;;				revision:  ss1Rev1,
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss2Rev2, ss2Rev1},
0000000000000000000000000000000000000000;;				want:      map[string]bool{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSortControllerRevisions(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			revisions []*apps.ControllerRevision
0000000000000000000000000000000000000000;;			want      []string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			SortControllerRevisions(test.revisions)
0000000000000000000000000000000000000000;;			for i := range test.revisions {
0000000000000000000000000000000000000000;;				if test.revisions[i].Name != test.want[i] {
0000000000000000000000000000000000000000;;					t.Errorf("%s: want %s at %d got %s", test.name, test.want[i], i, test.revisions[i].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1 := newStatefulSet(3, "ss1", types.UID("ss1"), map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;		sel1, err := metav1.LabelSelectorAsSelector(ss1.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ss1Rev1, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev1.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev2, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev2.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;		ss1Rev3, err := NewControllerRevision(ss1, parentKind, sel1, rawTemplate(&ss1.Spec.Template), 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss1Rev3.Namespace = ss1.Namespace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "out of order",
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev2, ss1Rev1, ss1Rev3},
0000000000000000000000000000000000000000;;				want:      []string{ss1Rev1.Name, ss1Rev2.Name, ss1Rev3.Name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "sorted",
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev1, ss1Rev2, ss1Rev3},
0000000000000000000000000000000000000000;;				want:      []string{ss1Rev1.Name, ss1Rev2.Name, ss1Rev3.Name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "reversed",
0000000000000000000000000000000000000000;;				revisions: []*apps.ControllerRevision{ss1Rev3, ss1Rev2, ss1Rev1},
0000000000000000000000000000000000000000;;				want:      []string{ss1Rev1.Name, ss1Rev2.Name, ss1Rev3.Name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "empty",
0000000000000000000000000000000000000000;;				revisions: nil,
0000000000000000000000000000000000000000;;				want:      nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStatefulSet(replicas int, name string, uid types.UID, labels map[string]string) *apps.StatefulSet {
0000000000000000000000000000000000000000;;		return &apps.StatefulSet{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "StatefulSet",
0000000000000000000000000000000000000000;;				APIVersion: "apps/v1beta1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: v1.NamespaceDefault,
0000000000000000000000000000000000000000;;				UID:       uid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: labels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Replicas: func() *int32 { i := int32(replicas); return &i }(),
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: labels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "nginx",
0000000000000000000000000000000000000000;;								Image: "nginx",
0000000000000000000000000000000000000000;;								VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;									{Name: "datadir", MountPath: "/tmp/"},
0000000000000000000000000000000000000000;;									{Name: "home", MountPath: "/home"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Volumes: []v1.Volume{{
0000000000000000000000000000000000000000;;							Name: "home",
0000000000000000000000000000000000000000;;							VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;								HostPath: &v1.HostPathVolumeSource{
0000000000000000000000000000000000000000;;									Path: fmt.Sprintf("/tmp/%v", "home"),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VolumeClaimTemplates: []v1.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "datadir"},
0000000000000000000000000000000000000000;;						Spec: v1.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;							Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;								Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;									v1.ResourceStorage: *resource.NewQuantity(1, resource.BinarySI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ServiceName: "governingsvc",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var parentKind = apps.SchemeGroupVersion.WithKind("StatefulSet")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func rawTemplate(template *v1.PodTemplateSpec) runtime.RawExtension {
0000000000000000000000000000000000000000;;		buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		enc := json.NewEncoder(buf)
0000000000000000000000000000000000000000;;		if err := enc.Encode(template); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return runtime.RawExtension{Raw: buf.Bytes()}
0000000000000000000000000000000000000000;;	}
