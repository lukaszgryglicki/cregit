0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
af83ac14930bc348fe70e5c66c3d31f0b8ea1ce5;pkg/serviceaccount/tokens_controller_test.go[pkg/serviceaccount/tokens_controller_test.go][pkg/controller/serviceaccount/tokens_controller_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package serviceaccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilrand "k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testGenerator struct {
0000000000000000000000000000000000000000;;		GeneratedServiceAccounts []v1.ServiceAccount
0000000000000000000000000000000000000000;;		GeneratedSecrets         []v1.Secret
0000000000000000000000000000000000000000;;		Token                    string
0000000000000000000000000000000000000000;;		Err                      error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testGenerator) GenerateToken(serviceAccount v1.ServiceAccount, secret v1.Secret) (string, error) {
0000000000000000000000000000000000000000;;		t.GeneratedSecrets = append(t.GeneratedSecrets, secret)
0000000000000000000000000000000000000000;;		t.GeneratedServiceAccounts = append(t.GeneratedServiceAccounts, serviceAccount)
0000000000000000000000000000000000000000;;		return t.Token, t.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// emptySecretReferences is used by a service account without any secrets
0000000000000000000000000000000000000000;;	func emptySecretReferences() []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return []v1.ObjectReference{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// missingSecretReferences is used by a service account that references secrets which do no exist
0000000000000000000000000000000000000000;;	func missingSecretReferences() []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return []v1.ObjectReference{{Name: "missing-secret-1"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// regularSecretReferences is used by a service account that references secrets which are not ServiceAccountTokens
0000000000000000000000000000000000000000;;	func regularSecretReferences() []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return []v1.ObjectReference{{Name: "regular-secret-1"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tokenSecretReferences is used by a service account that references a ServiceAccountToken secret
0000000000000000000000000000000000000000;;	func tokenSecretReferences() []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return []v1.ObjectReference{{Name: "token-secret-1"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// addTokenSecretReference adds a reference to the ServiceAccountToken that will be created
0000000000000000000000000000000000000000;;	func addTokenSecretReference(refs []v1.ObjectReference) []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return addNamedTokenSecretReference(refs, "default-token-p7w9c")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// addNamedTokenSecretReference adds a reference to the named ServiceAccountToken
0000000000000000000000000000000000000000;;	func addNamedTokenSecretReference(refs []v1.ObjectReference, name string) []v1.ObjectReference {
0000000000000000000000000000000000000000;;		return append(refs, v1.ObjectReference{Name: name})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccount returns a service account with the given secret refs
0000000000000000000000000000000000000000;;	func serviceAccount(secretRefs []v1.ObjectReference) *v1.ServiceAccount {
0000000000000000000000000000000000000000;;		return &v1.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "default",
0000000000000000000000000000000000000000;;				UID:             "12345",
0000000000000000000000000000000000000000;;				Namespace:       "default",
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Secrets: secretRefs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updatedServiceAccount returns a service account with the resource version modified
0000000000000000000000000000000000000000;;	func updatedServiceAccount(secretRefs []v1.ObjectReference) *v1.ServiceAccount {
0000000000000000000000000000000000000000;;		sa := serviceAccount(secretRefs)
0000000000000000000000000000000000000000;;		sa.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		return sa
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// opaqueSecret returns a persisted non-ServiceAccountToken secret named "regular-secret-1"
0000000000000000000000000000000000000000;;	func opaqueSecret() *v1.Secret {
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "regular-secret-1",
0000000000000000000000000000000000000000;;				Namespace:       "default",
0000000000000000000000000000000000000000;;				UID:             "23456",
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: "Opaque",
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"mykey": []byte("mydata"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createdTokenSecret returns the ServiceAccountToken secret posted when creating a new token secret.
0000000000000000000000000000000000000000;;	// Named "default-token-p7w9c", since that is the first generated name after rand.Seed(1)
0000000000000000000000000000000000000000;;	func createdTokenSecret(overrideName ...string) *v1.Secret {
0000000000000000000000000000000000000000;;		return namedCreatedTokenSecret("default-token-p7w9c")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// namedTokenSecret returns the ServiceAccountToken secret posted when creating a new token secret with the given name.
0000000000000000000000000000000000000000;;	func namedCreatedTokenSecret(name string) *v1.Secret {
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					v1.ServiceAccountNameKey: "default",
0000000000000000000000000000000000000000;;					v1.ServiceAccountUIDKey:  "12345",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: v1.SecretTypeServiceAccountToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"token":     []byte("ABC"),
0000000000000000000000000000000000000000;;				"ca.crt":    []byte("CA Data"),
0000000000000000000000000000000000000000;;				"namespace": []byte("default"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecret returns an existing ServiceAccountToken secret named "token-secret-1"
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecret() *v1.Secret {
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "token-secret-1",
0000000000000000000000000000000000000000;;				Namespace:       "default",
0000000000000000000000000000000000000000;;				UID:             "23456",
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					v1.ServiceAccountNameKey: "default",
0000000000000000000000000000000000000000;;					v1.ServiceAccountUIDKey:  "12345",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: v1.SecretTypeServiceAccountToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"token":     []byte("ABC"),
0000000000000000000000000000000000000000;;				"ca.crt":    []byte("CA Data"),
0000000000000000000000000000000000000000;;				"namespace": []byte("default"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecretWithoutTokenData returns an existing ServiceAccountToken secret that lacks token data
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecretWithoutTokenData() *v1.Secret {
0000000000000000000000000000000000000000;;		secret := serviceAccountTokenSecret()
0000000000000000000000000000000000000000;;		delete(secret.Data, v1.ServiceAccountTokenKey)
0000000000000000000000000000000000000000;;		return secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecretWithoutCAData returns an existing ServiceAccountToken secret that lacks ca data
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecretWithoutCAData() *v1.Secret {
0000000000000000000000000000000000000000;;		secret := serviceAccountTokenSecret()
0000000000000000000000000000000000000000;;		delete(secret.Data, v1.ServiceAccountRootCAKey)
0000000000000000000000000000000000000000;;		return secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecretWithCAData returns an existing ServiceAccountToken secret with the specified ca data
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecretWithCAData(data []byte) *v1.Secret {
0000000000000000000000000000000000000000;;		secret := serviceAccountTokenSecret()
0000000000000000000000000000000000000000;;		secret.Data[v1.ServiceAccountRootCAKey] = data
0000000000000000000000000000000000000000;;		return secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecretWithoutNamespaceData returns an existing ServiceAccountToken secret that lacks namespace data
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecretWithoutNamespaceData() *v1.Secret {
0000000000000000000000000000000000000000;;		secret := serviceAccountTokenSecret()
0000000000000000000000000000000000000000;;		delete(secret.Data, v1.ServiceAccountNamespaceKey)
0000000000000000000000000000000000000000;;		return secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serviceAccountTokenSecretWithNamespaceData returns an existing ServiceAccountToken secret with the specified namespace data
0000000000000000000000000000000000000000;;	func serviceAccountTokenSecretWithNamespaceData(data []byte) *v1.Secret {
0000000000000000000000000000000000000000;;		secret := serviceAccountTokenSecret()
0000000000000000000000000000000000000000;;		secret.Data[v1.ServiceAccountNamespaceKey] = data
0000000000000000000000000000000000000000;;		return secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type reaction struct {
0000000000000000000000000000000000000000;;		verb     string
0000000000000000000000000000000000000000;;		resource string
0000000000000000000000000000000000000000;;		reactor  func(t *testing.T) core.ReactionFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenCreation(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			ClientObjects []runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			IsAsync    bool
0000000000000000000000000000000000000000;;			MaxRetries int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Reactors []reaction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExistingServiceAccount *v1.ServiceAccount
0000000000000000000000000000000000000000;;			ExistingSecrets        []*v1.Secret
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AddedServiceAccount   *v1.ServiceAccount
0000000000000000000000000000000000000000;;			UpdatedServiceAccount *v1.ServiceAccount
0000000000000000000000000000000000000000;;			DeletedServiceAccount *v1.ServiceAccount
0000000000000000000000000000000000000000;;			AddedSecret           *v1.Secret
0000000000000000000000000000000000000000;;			AddedSecretLocal      *v1.Secret
0000000000000000000000000000000000000000;;			UpdatedSecret         *v1.Secret
0000000000000000000000000000000000000000;;			DeletedSecret         *v1.Secret
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectedActions []core.Action
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"new serviceaccount with no secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(emptySecretReferences())},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(emptySecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with no secrets encountering create error": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(emptySecretReferences())},
0000000000000000000000000000000000000000;;				MaxRetries:    10,
0000000000000000000000000000000000000000;;				IsAsync:       true,
0000000000000000000000000000000000000000;;				Reactors: []reaction{{
0000000000000000000000000000000000000000;;					verb:     "create",
0000000000000000000000000000000000000000;;					resource: "secrets",
0000000000000000000000000000000000000000;;					reactor: func(t *testing.T) core.ReactionFunc {
0000000000000000000000000000000000000000;;						i := 0
0000000000000000000000000000000000000000;;						return func(core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;							i++
0000000000000000000000000000000000000000;;							if i < 3 {
0000000000000000000000000000000000000000;;								return true, nil, apierrors.NewForbidden(api.Resource("secrets"), "foo", errors.New("No can do"))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							return false, nil, nil
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					// Attempt 1
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Attempt 2
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, namedCreatedTokenSecret("default-token-x50vb")),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Attempt 3
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, namedCreatedTokenSecret("default-token-scq98")),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addNamedTokenSecretReference(emptySecretReferences(), "default-token-scq98"))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with no secrets encountering unending create error": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(emptySecretReferences()), createdTokenSecret()},
0000000000000000000000000000000000000000;;				MaxRetries:    2,
0000000000000000000000000000000000000000;;				IsAsync:       true,
0000000000000000000000000000000000000000;;				Reactors: []reaction{{
0000000000000000000000000000000000000000;;					verb:     "create",
0000000000000000000000000000000000000000;;					resource: "secrets",
0000000000000000000000000000000000000000;;					reactor: func(t *testing.T) core.ReactionFunc {
0000000000000000000000000000000000000000;;						return func(core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;							return true, nil, apierrors.NewForbidden(api.Resource("secrets"), "foo", errors.New("No can do"))
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					// Attempt
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					// Retry 1
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, namedCreatedTokenSecret("default-token-x50vb")),
0000000000000000000000000000000000000000;;					// Retry 2
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, namedCreatedTokenSecret("default-token-scq98")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with missing secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(missingSecretReferences())},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(missingSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(missingSecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with missing secrets and a local secret in the cache": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(missingSecretReferences())},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;				AddedSecretLocal:    serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions:     []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with non-token secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(regularSecretReferences()), opaqueSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(regularSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(regularSecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with token secrets": {
0000000000000000000000000000000000000000;;				ClientObjects:   []runtime.Object{serviceAccount(tokenSecretReferences()), serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;				ExistingSecrets: []*v1.Secret{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions:     []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new serviceaccount with no secrets with resource conflict": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{updatedServiceAccount(emptySecretReferences()), createdTokenSecret()},
0000000000000000000000000000000000000000;;				IsAsync:       true,
0000000000000000000000000000000000000000;;				MaxRetries:    1,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated serviceaccount with no secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(emptySecretReferences())},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(emptySecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated serviceaccount with missing secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(missingSecretReferences())},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedServiceAccount: serviceAccount(missingSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(missingSecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated serviceaccount with non-token secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccount(regularSecretReferences()), opaqueSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedServiceAccount: serviceAccount(regularSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewCreateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, createdTokenSecret()),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(addTokenSecretReference(regularSecretReferences()))),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated serviceaccount with token secrets": {
0000000000000000000000000000000000000000;;				ExistingSecrets: []*v1.Secret{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions:       []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated serviceaccount with no secrets with resource conflict": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{updatedServiceAccount(emptySecretReferences())},
0000000000000000000000000000000000000000;;				IsAsync:       true,
0000000000000000000000000000000000000000;;				MaxRetries:    1,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"deleted serviceaccount with no secrets": {
0000000000000000000000000000000000000000;;				DeletedServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions:       []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted serviceaccount with missing secrets": {
0000000000000000000000000000000000000000;;				DeletedServiceAccount: serviceAccount(missingSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions:       []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted serviceaccount with non-token secrets": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{opaqueSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				DeletedServiceAccount: serviceAccount(regularSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions:       []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted serviceaccount with token secrets": {
0000000000000000000000000000000000000000;;				ClientObjects:   []runtime.Object{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;				ExistingSecrets: []*v1.Secret{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				DeletedServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewDeleteAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"added secret without serviceaccount": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret: serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewDeleteAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added secret with serviceaccount": {
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret:     serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added token secret without token data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutTokenData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret: serviceAccountTokenSecretWithoutTokenData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added token secret without ca data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutCAData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret: serviceAccountTokenSecretWithoutCAData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added token secret with mismatched ca data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithCAData([]byte("mismatched"))},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret: serviceAccountTokenSecretWithCAData([]byte("mismatched")),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added token secret without namespace data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutNamespaceData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret: serviceAccountTokenSecretWithoutNamespaceData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added token secret with custom namespace data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithNamespaceData([]byte("custom"))},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				AddedSecret:     serviceAccountTokenSecretWithNamespaceData([]byte("custom")),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;				// no update is performed... the custom namespace is preserved
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"updated secret without serviceaccount": {
0000000000000000000000000000000000000000;;				ClientObjects: []runtime.Object{serviceAccountTokenSecret()},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret: serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewDeleteAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated secret with serviceaccount": {
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret:   serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated token secret without token data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutTokenData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret: serviceAccountTokenSecretWithoutTokenData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated token secret without ca data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutCAData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret: serviceAccountTokenSecretWithoutCAData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated token secret with mismatched ca data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithCAData([]byte("mismatched"))},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret: serviceAccountTokenSecretWithCAData([]byte("mismatched")),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated token secret without namespace data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithoutNamespaceData()},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret: serviceAccountTokenSecretWithoutNamespaceData(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, "token-secret-1"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "secrets"}, metav1.NamespaceDefault, serviceAccountTokenSecret()),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated token secret with custom namespace data": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccountTokenSecretWithNamespaceData([]byte("custom"))},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				UpdatedSecret:   serviceAccountTokenSecretWithNamespaceData([]byte("custom")),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;				// no update is performed... the custom namespace is preserved
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"deleted secret without serviceaccount": {
0000000000000000000000000000000000000000;;				DeletedSecret:   serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted secret with serviceaccount with reference": {
0000000000000000000000000000000000000000;;				ClientObjects:          []runtime.Object{serviceAccount(tokenSecretReferences())},
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(tokenSecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				DeletedSecret: serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;					core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, serviceAccount(emptySecretReferences())),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted secret with serviceaccount without reference": {
0000000000000000000000000000000000000000;;				ExistingServiceAccount: serviceAccount(emptySecretReferences()),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				DeletedSecret: serviceAccountTokenSecret(),
0000000000000000000000000000000000000000;;				ExpectedActions: []core.Action{
0000000000000000000000000000000000000000;;					core.NewGetAction(schema.GroupVersionResource{Version: "v1", Resource: "serviceaccounts"}, metav1.NamespaceDefault, "default"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			glog.Infof(k)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Re-seed to reset name generation
0000000000000000000000000000000000000000;;			utilrand.Seed(1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			generator := &testGenerator{Token: "ABC"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(tc.ClientObjects...)
0000000000000000000000000000000000000000;;			for _, reactor := range tc.Reactors {
0000000000000000000000000000000000000000;;				client.Fake.PrependReactor(reactor.verb, reactor.resource, reactor.reactor(t))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			informers := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			secretInformer := informers.Core().V1().Secrets().Informer()
0000000000000000000000000000000000000000;;			secrets := secretInformer.GetStore()
0000000000000000000000000000000000000000;;			serviceAccounts := informers.Core().V1().ServiceAccounts().Informer().GetStore()
0000000000000000000000000000000000000000;;			controller := NewTokensController(informers.Core().V1().ServiceAccounts(), informers.Core().V1().Secrets(), client, TokensControllerOptions{TokenGenerator: generator, RootCA: []byte("CA Data"), MaxRetries: tc.MaxRetries})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.ExistingServiceAccount != nil {
0000000000000000000000000000000000000000;;				serviceAccounts.Add(tc.ExistingServiceAccount)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, s := range tc.ExistingSecrets {
0000000000000000000000000000000000000000;;				secrets.Add(s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.AddedServiceAccount != nil {
0000000000000000000000000000000000000000;;				serviceAccounts.Add(tc.AddedServiceAccount)
0000000000000000000000000000000000000000;;				controller.queueServiceAccountSync(tc.AddedServiceAccount)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.UpdatedServiceAccount != nil {
0000000000000000000000000000000000000000;;				serviceAccounts.Add(tc.UpdatedServiceAccount)
0000000000000000000000000000000000000000;;				controller.queueServiceAccountUpdateSync(nil, tc.UpdatedServiceAccount)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.DeletedServiceAccount != nil {
0000000000000000000000000000000000000000;;				serviceAccounts.Delete(tc.DeletedServiceAccount)
0000000000000000000000000000000000000000;;				controller.queueServiceAccountSync(tc.DeletedServiceAccount)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.AddedSecret != nil {
0000000000000000000000000000000000000000;;				secrets.Add(tc.AddedSecret)
0000000000000000000000000000000000000000;;				controller.queueSecretSync(tc.AddedSecret)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.AddedSecretLocal != nil {
0000000000000000000000000000000000000000;;				controller.updatedSecrets.Mutation(tc.AddedSecretLocal)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.UpdatedSecret != nil {
0000000000000000000000000000000000000000;;				secrets.Add(tc.UpdatedSecret)
0000000000000000000000000000000000000000;;				controller.queueSecretUpdateSync(nil, tc.UpdatedSecret)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.DeletedSecret != nil {
0000000000000000000000000000000000000000;;				secrets.Delete(tc.DeletedSecret)
0000000000000000000000000000000000000000;;				controller.queueSecretSync(tc.DeletedSecret)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// This is the longest we'll wait for async tests
0000000000000000000000000000000000000000;;			timeout := time.Now().Add(30 * time.Second)
0000000000000000000000000000000000000000;;			waitedForAdditionalActions := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				if controller.syncServiceAccountQueue.Len() > 0 {
0000000000000000000000000000000000000000;;					controller.syncServiceAccount()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if controller.syncSecretQueue.Len() > 0 {
0000000000000000000000000000000000000000;;					controller.syncSecret()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// The queues still have things to work on
0000000000000000000000000000000000000000;;				if controller.syncServiceAccountQueue.Len() > 0 || controller.syncSecretQueue.Len() > 0 {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// If we expect this test to work asynchronously...
0000000000000000000000000000000000000000;;				if tc.IsAsync {
0000000000000000000000000000000000000000;;					// if we're still missing expected actions within our test timeout
0000000000000000000000000000000000000000;;					if len(client.Actions()) < len(tc.ExpectedActions) && time.Now().Before(timeout) {
0000000000000000000000000000000000000000;;						// wait for the expected actions (without hotlooping)
0000000000000000000000000000000000000000;;						time.Sleep(time.Millisecond)
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// if we exactly match our expected actions, wait a bit to make sure no other additional actions show up
0000000000000000000000000000000000000000;;					if len(client.Actions()) == len(tc.ExpectedActions) && !waitedForAdditionalActions {
0000000000000000000000000000000000000000;;						time.Sleep(time.Second)
0000000000000000000000000000000000000000;;						waitedForAdditionalActions = true
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if controller.syncServiceAccountQueue.Len() > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected items in service account queue: %d", k, controller.syncServiceAccountQueue.Len())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if controller.syncSecretQueue.Len() > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected items in secret queue: %d", k, controller.syncSecretQueue.Len())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actions := client.Actions()
0000000000000000000000000000000000000000;;			for i, action := range actions {
0000000000000000000000000000000000000000;;				if len(tc.ExpectedActions) < i+1 {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %d unexpected actions: %+v", k, len(actions)-len(tc.ExpectedActions), actions[i:])
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedAction := tc.ExpectedActions[i]
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(expectedAction, action) {
0000000000000000000000000000000000000000;;					t.Errorf("%s:\nExpected:\n%s\ngot:\n%s", k, spew.Sdump(expectedAction), spew.Sdump(action))
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(tc.ExpectedActions) > len(actions) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %d additional expected actions", k, len(tc.ExpectedActions)-len(actions))
0000000000000000000000000000000000000000;;				for _, a := range tc.ExpectedActions[len(actions):] {
0000000000000000000000000000000000000000;;					t.Logf("    %+v", a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
