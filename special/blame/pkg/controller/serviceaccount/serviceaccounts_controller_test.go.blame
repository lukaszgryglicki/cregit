0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
97e08bd74423d2ba0c336f2ab76a76051ddea8a8;pkg/serviceaccount/serviceaccounts_controller_test.go[pkg/serviceaccount/serviceaccounts_controller_test.go][pkg/controller/serviceaccount/serviceaccounts_controller_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package serviceaccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serverResponse struct {
0000000000000000000000000000000000000000;;		statusCode int
0000000000000000000000000000000000000000;;		obj        interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceAccountCreation(t *testing.T) {
0000000000000000000000000000000000000000;;		ns := metav1.NamespaceDefault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultName := "default"
0000000000000000000000000000000000000000;;		managedName := "managed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		activeNS := &v1.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: ns},
0000000000000000000000000000000000000000;;			Status: v1.NamespaceStatus{
0000000000000000000000000000000000000000;;				Phase: v1.NamespaceActive,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		terminatingNS := &v1.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: ns},
0000000000000000000000000000000000000000;;			Status: v1.NamespaceStatus{
0000000000000000000000000000000000000000;;				Phase: v1.NamespaceTerminating,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultServiceAccount := &v1.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            defaultName,
0000000000000000000000000000000000000000;;				Namespace:       ns,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		managedServiceAccount := &v1.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            managedName,
0000000000000000000000000000000000000000;;				Namespace:       ns,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unmanagedServiceAccount := &v1.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "other-unmanaged",
0000000000000000000000000000000000000000;;				Namespace:       ns,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			ExistingNamespace       *v1.Namespace
0000000000000000000000000000000000000000;;			ExistingServiceAccounts []*v1.ServiceAccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AddedNamespace        *v1.Namespace
0000000000000000000000000000000000000000;;			UpdatedNamespace      *v1.Namespace
0000000000000000000000000000000000000000;;			DeletedServiceAccount *v1.ServiceAccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectCreatedServiceAccounts []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"new active namespace missing serviceaccounts": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{},
0000000000000000000000000000000000000000;;				AddedNamespace:               activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: sets.NewString(defaultName, managedName).List(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new active namespace missing serviceaccount": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{managedServiceAccount},
0000000000000000000000000000000000000000;;				AddedNamespace:               activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{defaultName},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"new active namespace with serviceaccounts": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{defaultServiceAccount, managedServiceAccount},
0000000000000000000000000000000000000000;;				AddedNamespace:               activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"new terminating namespace": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{},
0000000000000000000000000000000000000000;;				AddedNamespace:               terminatingNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"updated active namespace missing serviceaccounts": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{},
0000000000000000000000000000000000000000;;				UpdatedNamespace:             activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: sets.NewString(defaultName, managedName).List(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated active namespace missing serviceaccount": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{defaultServiceAccount},
0000000000000000000000000000000000000000;;				UpdatedNamespace:             activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{managedName},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated active namespace with serviceaccounts": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{defaultServiceAccount, managedServiceAccount},
0000000000000000000000000000000000000000;;				UpdatedNamespace:             activeNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"updated terminating namespace": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{},
0000000000000000000000000000000000000000;;				UpdatedNamespace:             terminatingNS,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"deleted serviceaccount without namespace": {
0000000000000000000000000000000000000000;;				DeletedServiceAccount:        defaultServiceAccount,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted serviceaccount with active namespace": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{managedServiceAccount},
0000000000000000000000000000000000000000;;				ExistingNamespace:            activeNS,
0000000000000000000000000000000000000000;;				DeletedServiceAccount:        defaultServiceAccount,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{defaultName},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted serviceaccount with terminating namespace": {
0000000000000000000000000000000000000000;;				ExistingNamespace:            terminatingNS,
0000000000000000000000000000000000000000;;				DeletedServiceAccount:        defaultServiceAccount,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted unmanaged serviceaccount with active namespace": {
0000000000000000000000000000000000000000;;				ExistingServiceAccounts:      []*v1.ServiceAccount{defaultServiceAccount, managedServiceAccount},
0000000000000000000000000000000000000000;;				ExistingNamespace:            activeNS,
0000000000000000000000000000000000000000;;				DeletedServiceAccount:        unmanagedServiceAccount,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"deleted unmanaged serviceaccount with terminating namespace": {
0000000000000000000000000000000000000000;;				ExistingNamespace:            terminatingNS,
0000000000000000000000000000000000000000;;				DeletedServiceAccount:        unmanagedServiceAccount,
0000000000000000000000000000000000000000;;				ExpectCreatedServiceAccounts: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(defaultServiceAccount, managedServiceAccount)
0000000000000000000000000000000000000000;;			informers := informers.NewSharedInformerFactory(fake.NewSimpleClientset(), controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			options := DefaultServiceAccountsControllerOptions()
0000000000000000000000000000000000000000;;			options.ServiceAccounts = []v1.ServiceAccount{
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: defaultName}},
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: managedName}},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			saInformer := informers.Core().V1().ServiceAccounts()
0000000000000000000000000000000000000000;;			nsInformer := informers.Core().V1().Namespaces()
0000000000000000000000000000000000000000;;			controller := NewServiceAccountsController(
0000000000000000000000000000000000000000;;				saInformer,
0000000000000000000000000000000000000000;;				nsInformer,
0000000000000000000000000000000000000000;;				client,
0000000000000000000000000000000000000000;;				options,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			controller.saListerSynced = alwaysReady
0000000000000000000000000000000000000000;;			controller.nsListerSynced = alwaysReady
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			saStore := saInformer.Informer().GetStore()
0000000000000000000000000000000000000000;;			nsStore := nsInformer.Informer().GetStore()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			syncCalls := make(chan struct{})
0000000000000000000000000000000000000000;;			controller.syncHandler = func(key string) error {
0000000000000000000000000000000000000000;;				err := controller.syncNamespace(key)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Logf("%s: %v", k, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				syncCalls <- struct{}{}
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stopCh)
0000000000000000000000000000000000000000;;			go controller.Run(1, stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.ExistingNamespace != nil {
0000000000000000000000000000000000000000;;				nsStore.Add(tc.ExistingNamespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, s := range tc.ExistingServiceAccounts {
0000000000000000000000000000000000000000;;				saStore.Add(s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.AddedNamespace != nil {
0000000000000000000000000000000000000000;;				nsStore.Add(tc.AddedNamespace)
0000000000000000000000000000000000000000;;				controller.namespaceAdded(tc.AddedNamespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.UpdatedNamespace != nil {
0000000000000000000000000000000000000000;;				nsStore.Add(tc.UpdatedNamespace)
0000000000000000000000000000000000000000;;				controller.namespaceUpdated(nil, tc.UpdatedNamespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.DeletedServiceAccount != nil {
0000000000000000000000000000000000000000;;				controller.serviceAccountDeleted(tc.DeletedServiceAccount)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// wait to be called
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-syncCalls:
0000000000000000000000000000000000000000;;			case <-time.After(10 * time.Second):
0000000000000000000000000000000000000000;;				t.Errorf("%s: took too long", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actions := client.Actions()
0000000000000000000000000000000000000000;;			if len(tc.ExpectCreatedServiceAccounts) != len(actions) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected to create accounts %#v. Actual actions were: %#v", k, tc.ExpectCreatedServiceAccounts, actions)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i, expectedName := range tc.ExpectCreatedServiceAccounts {
0000000000000000000000000000000000000000;;				action := actions[i]
0000000000000000000000000000000000000000;;				if !action.Matches("create", "serviceaccounts") {
0000000000000000000000000000000000000000;;					t.Errorf("%s: Unexpected action %s", k, action)
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				createdAccount := action.(core.CreateAction).GetObject().(*v1.ServiceAccount)
0000000000000000000000000000000000000000;;				if createdAccount.Name != expectedName {
0000000000000000000000000000000000000000;;					t.Errorf("%s: Expected %s to be created, got %s", k, expectedName, createdAccount.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var alwaysReady = func() bool { return true }
