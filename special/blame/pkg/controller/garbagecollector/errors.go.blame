0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e3f516a61327b8c4787500cf75b4d6c4165f9f16;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package garbagecollector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const nonCoreMessage = `If %s is a non-core resource (e.g. thirdparty resource, custom resource from aggregated apiserver), please note that the garbage collector doesn't support non-core resources yet. Once they are supported, object with ownerReferences referring non-existing non-core objects will be deleted by the garbage collector.`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type restMappingError struct {
0000000000000000000000000000000000000000;;		kind    string
0000000000000000000000000000000000000000;;		version string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *restMappingError) Error() string {
0000000000000000000000000000000000000000;;		versionKind := fmt.Sprintf("%s/%s", r.version, r.kind)
0000000000000000000000000000000000000000;;		return fmt.Sprintf("unable to get REST mapping for %s.", versionKind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message prints more details
0000000000000000000000000000000000000000;;	func (r *restMappingError) Message() string {
0000000000000000000000000000000000000000;;		versionKind := fmt.Sprintf("%s/%s", r.version, r.kind)
0000000000000000000000000000000000000000;;		errMsg := fmt.Sprintf("unable to get REST mapping for %s. ", versionKind)
0000000000000000000000000000000000000000;;		errMsg += fmt.Sprintf(nonCoreMessage, versionKind)
0000000000000000000000000000000000000000;;		errMsg += fmt.Sprintf(" If %s is an invalid resource, then you should manually remove ownerReferences that refer %s objects.", versionKind, versionKind)
0000000000000000000000000000000000000000;;		return errMsg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRESTMappingError(kind, version string) *restMappingError {
0000000000000000000000000000000000000000;;		return &restMappingError{kind: kind, version: version}
0000000000000000000000000000000000000000;;	}
