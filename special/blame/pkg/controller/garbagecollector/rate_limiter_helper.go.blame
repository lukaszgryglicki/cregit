0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3ee29e7bbf640f5fd1b7ef3c24f74260ed188b01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package garbagecollector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisteredRateLimiter records the registered RateLimters to avoid
0000000000000000000000000000000000000000;;	// duplication.
0000000000000000000000000000000000000000;;	type RegisteredRateLimiter struct {
0000000000000000000000000000000000000000;;		rateLimiters map[schema.GroupVersion]*sync.Once
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRegisteredRateLimiter returns a new RegisteredRateLimiater.
0000000000000000000000000000000000000000;;	// TODO: NewRegisteredRateLimiter is not dynamic. We need to find a better way
0000000000000000000000000000000000000000;;	// when GC dynamically change the resources it monitors.
0000000000000000000000000000000000000000;;	func NewRegisteredRateLimiter(resources map[schema.GroupVersionResource]struct{}) *RegisteredRateLimiter {
0000000000000000000000000000000000000000;;		rateLimiters := make(map[schema.GroupVersion]*sync.Once)
0000000000000000000000000000000000000000;;		for resource := range resources {
0000000000000000000000000000000000000000;;			gv := resource.GroupVersion()
0000000000000000000000000000000000000000;;			if _, found := rateLimiters[gv]; !found {
0000000000000000000000000000000000000000;;				rateLimiters[gv] = &sync.Once{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &RegisteredRateLimiter{rateLimiters: rateLimiters}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegisteredRateLimiter) registerIfNotPresent(gv schema.GroupVersion, client *dynamic.Client, prefix string) {
0000000000000000000000000000000000000000;;		once, found := r.rateLimiters[gv]
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		once.Do(func() {
0000000000000000000000000000000000000000;;			if rateLimiter := client.GetRateLimiter(); rateLimiter != nil {
0000000000000000000000000000000000000000;;				group := strings.Replace(gv.Group, ".", ":", -1)
0000000000000000000000000000000000000000;;				metrics.RegisterMetricAndTrackRateLimiterUsage(fmt.Sprintf("%s_%s_%s", prefix, group, gv.Version), rateLimiter)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
