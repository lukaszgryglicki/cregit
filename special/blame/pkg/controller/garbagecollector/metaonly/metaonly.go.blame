0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2c95200d09b3068001b1a78ca85362065cd84706;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metaonly
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type metaOnlyJSONScheme struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This function can be extended to mapping different gvk to different MetadataOnlyObject,
0000000000000000000000000000000000000000;;	// which embedded with different version of ObjectMeta. Currently the system
0000000000000000000000000000000000000000;;	// only supports metav1.ObjectMeta.
0000000000000000000000000000000000000000;;	func gvkToMetadataOnlyObject(gvk schema.GroupVersionKind) runtime.Object {
0000000000000000000000000000000000000000;;		if strings.HasSuffix(gvk.Kind, "List") {
0000000000000000000000000000000000000000;;			return &MetadataOnlyObjectList{}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return &MetadataOnlyObject{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMetadataCodecFactory() serializer.CodecFactory {
0000000000000000000000000000000000000000;;		// populating another scheme from api.Scheme, registering every kind with
0000000000000000000000000000000000000000;;		// MetadataOnlyObject (or MetadataOnlyObjectList).
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;		allTypes := api.Scheme.AllKnownTypes()
0000000000000000000000000000000000000000;;		for kind := range allTypes {
0000000000000000000000000000000000000000;;			if kind.Version == runtime.APIVersionInternal {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if kind == metav1.Unversioned.WithKind("Status") {
0000000000000000000000000000000000000000;;				// this is added below as unversioned
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			metaOnlyObject := gvkToMetadataOnlyObject(kind)
0000000000000000000000000000000000000000;;			scheme.AddKnownTypeWithName(kind, metaOnlyObject)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(metav1.Unversioned, &metav1.Status{})
0000000000000000000000000000000000000000;;		return serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String converts a MetadataOnlyObject to a human-readable string.
0000000000000000000000000000000000000000;;	func (metaOnly MetadataOnlyObject) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s/%s, name: %s, DeletionTimestamp:%v", metaOnly.TypeMeta.APIVersion, metaOnly.TypeMeta.Kind, metaOnly.ObjectMeta.Name, metaOnly.ObjectMeta.DeletionTimestamp)
0000000000000000000000000000000000000000;;	}
