0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5891c83798df5be1fc7de61466152323977bc00e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package garbagecollector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/garbagecollector/metaonly"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteOwnerRefPatch(dependentUID types.UID, ownerUIDs ...types.UID) []byte {
0000000000000000000000000000000000000000;;		var pieces []string
0000000000000000000000000000000000000000;;		for _, ownerUID := range ownerUIDs {
0000000000000000000000000000000000000000;;			pieces = append(pieces, fmt.Sprintf(`{"$patch":"delete","uid":"%s"}`, ownerUID))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		patch := fmt.Sprintf(`{"metadata":{"ownerReferences":[%s],"uid":"%s"}}`, strings.Join(pieces, ","), dependentUID)
0000000000000000000000000000000000000000;;		return []byte(patch)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generate a patch that unsets the BlockOwnerDeletion field of all
0000000000000000000000000000000000000000;;	// ownerReferences of node.
0000000000000000000000000000000000000000;;	func (n *node) patchToUnblockOwnerReferences() ([]byte, error) {
0000000000000000000000000000000000000000;;		var dummy metaonly.MetadataOnlyObject
0000000000000000000000000000000000000000;;		var blockingRefs []metav1.OwnerReference
0000000000000000000000000000000000000000;;		falseVar := false
0000000000000000000000000000000000000000;;		for _, owner := range n.owners {
0000000000000000000000000000000000000000;;			if owner.BlockOwnerDeletion != nil && *owner.BlockOwnerDeletion {
0000000000000000000000000000000000000000;;				ref := owner
0000000000000000000000000000000000000000;;				ref.BlockOwnerDeletion = &falseVar
0000000000000000000000000000000000000000;;				blockingRefs = append(blockingRefs, ref)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dummy.ObjectMeta.SetOwnerReferences(blockingRefs)
0000000000000000000000000000000000000000;;		dummy.ObjectMeta.UID = n.identity.UID
0000000000000000000000000000000000000000;;		return json.Marshal(dummy)
0000000000000000000000000000000000000000;;	}
