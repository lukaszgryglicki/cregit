0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5101f8876b8ad2836c659335ee21c75312f79ae7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecute(t *testing.T) {
0000000000000000000000000000000000000000;;		testVal := int32(0)
0000000000000000000000000000000000000000;;		wg := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wg.Add(5)
0000000000000000000000000000000000000000;;		queue := CreateWorkerQueue(func(args *WorkArgs) error {
0000000000000000000000000000000000000000;;			atomic.AddInt32(&testVal, 1)
0000000000000000000000000000000000000000;;			wg.Done()
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, now)
0000000000000000000000000000000000000000;;		// Adding the same thing second time should be no-op
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, now)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, now)
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;		lastVal := atomic.LoadInt32(&testVal)
0000000000000000000000000000000000000000;;		if lastVal != 5 {
0000000000000000000000000000000000000000;;			t.Errorf("Espected testVal = 5, got %v", lastVal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecuteDelayed(t *testing.T) {
0000000000000000000000000000000000000000;;		testVal := int32(0)
0000000000000000000000000000000000000000;;		wg := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wg.Add(5)
0000000000000000000000000000000000000000;;		queue := CreateWorkerQueue(func(args *WorkArgs) error {
0000000000000000000000000000000000000000;;			atomic.AddInt32(&testVal, 1)
0000000000000000000000000000000000000000;;			wg.Done()
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		then := now.Add(time.Second)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;		lastVal := atomic.LoadInt32(&testVal)
0000000000000000000000000000000000000000;;		if lastVal != 5 {
0000000000000000000000000000000000000000;;			t.Errorf("Espected testVal = 5, got %v", lastVal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCancel(t *testing.T) {
0000000000000000000000000000000000000000;;		testVal := int32(0)
0000000000000000000000000000000000000000;;		wg := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wg.Add(3)
0000000000000000000000000000000000000000;;		queue := CreateWorkerQueue(func(args *WorkArgs) error {
0000000000000000000000000000000000000000;;			atomic.AddInt32(&testVal, 1)
0000000000000000000000000000000000000000;;			wg.Done()
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		then := now.Add(time.Second)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		queue.CancelWork(NewWorkArgs("2", "2").KeyFromWorkArgs())
0000000000000000000000000000000000000000;;		queue.CancelWork(NewWorkArgs("4", "4").KeyFromWorkArgs())
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;		lastVal := atomic.LoadInt32(&testVal)
0000000000000000000000000000000000000000;;		if lastVal != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Espected testVal = 3, got %v", lastVal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCancelAndReadd(t *testing.T) {
0000000000000000000000000000000000000000;;		testVal := int32(0)
0000000000000000000000000000000000000000;;		wg := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wg.Add(4)
0000000000000000000000000000000000000000;;		queue := CreateWorkerQueue(func(args *WorkArgs) error {
0000000000000000000000000000000000000000;;			atomic.AddInt32(&testVal, 1)
0000000000000000000000000000000000000000;;			wg.Done()
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		then := now.Add(time.Second)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("1", "1"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("3", "3"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("4", "4"), now, then)
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("5", "5"), now, then)
0000000000000000000000000000000000000000;;		queue.CancelWork(NewWorkArgs("2", "2").KeyFromWorkArgs())
0000000000000000000000000000000000000000;;		queue.CancelWork(NewWorkArgs("4", "4").KeyFromWorkArgs())
0000000000000000000000000000000000000000;;		queue.AddWork(NewWorkArgs("2", "2"), now, then)
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;		lastVal := atomic.LoadInt32(&testVal)
0000000000000000000000000000000000000000;;		if lastVal != 4 {
0000000000000000000000000000000000000000;;			t.Errorf("Espected testVal = 4, got %v", lastVal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
