0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c6026d8f8c4df0705c6c404da6920a0095f58bd0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		NodeControllerSubsystem = "node_collector"
0000000000000000000000000000000000000000;;		ZoneHealthStatisticKey  = "zone_health"
0000000000000000000000000000000000000000;;		ZoneSizeKey             = "zone_size"
0000000000000000000000000000000000000000;;		ZoneNoUnhealthyNodesKey = "unhealthy_nodes_in_zone"
0000000000000000000000000000000000000000;;		EvictionsNumberKey      = "evictions_number"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ZoneHealth = prometheus.NewGaugeVec(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Subsystem: NodeControllerSubsystem,
0000000000000000000000000000000000000000;;				Name:      ZoneHealthStatisticKey,
0000000000000000000000000000000000000000;;				Help:      "Gauge measuring percentage of healthy nodes per zone.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"zone"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		ZoneSize = prometheus.NewGaugeVec(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Subsystem: NodeControllerSubsystem,
0000000000000000000000000000000000000000;;				Name:      ZoneSizeKey,
0000000000000000000000000000000000000000;;				Help:      "Gauge measuring number of registered Nodes per zones.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"zone"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		UnhealthyNodes = prometheus.NewGaugeVec(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Subsystem: NodeControllerSubsystem,
0000000000000000000000000000000000000000;;				Name:      ZoneNoUnhealthyNodesKey,
0000000000000000000000000000000000000000;;				Help:      "Gauge measuring number of not Ready Nodes per zones.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"zone"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		EvictionsNumber = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: NodeControllerSubsystem,
0000000000000000000000000000000000000000;;				Name:      EvictionsNumberKey,
0000000000000000000000000000000000000000;;				Help:      "Number of Node evictions that happened since current instance of NodeController started.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"zone"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registerMetrics sync.Once
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Register() {
0000000000000000000000000000000000000000;;		registerMetrics.Do(func() {
0000000000000000000000000000000000000000;;			prometheus.MustRegister(ZoneHealth)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(ZoneSize)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(UnhealthyNodes)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(EvictionsNumber)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
