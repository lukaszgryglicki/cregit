0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bc90fb45d082d512190fe226dbcf7246b987313c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/big"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type cidrSet struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		clusterCIDR     *net.IPNet
0000000000000000000000000000000000000000;;		clusterIP       net.IP
0000000000000000000000000000000000000000;;		clusterMaskSize int
0000000000000000000000000000000000000000;;		maxCIDRs        int
0000000000000000000000000000000000000000;;		nextCandidate   int
0000000000000000000000000000000000000000;;		used            big.Int
0000000000000000000000000000000000000000;;		subNetMaskSize  int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newCIDRSet(clusterCIDR *net.IPNet, subNetMaskSize int) *cidrSet {
0000000000000000000000000000000000000000;;		clusterMask := clusterCIDR.Mask
0000000000000000000000000000000000000000;;		clusterMaskSize, _ := clusterMask.Size()
0000000000000000000000000000000000000000;;		maxCIDRs := 1 << uint32(subNetMaskSize-clusterMaskSize)
0000000000000000000000000000000000000000;;		return &cidrSet{
0000000000000000000000000000000000000000;;			clusterCIDR:     clusterCIDR,
0000000000000000000000000000000000000000;;			clusterIP:       clusterCIDR.IP.To4(),
0000000000000000000000000000000000000000;;			clusterMaskSize: clusterMaskSize,
0000000000000000000000000000000000000000;;			maxCIDRs:        maxCIDRs,
0000000000000000000000000000000000000000;;			subNetMaskSize:  subNetMaskSize,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cidrSet) allocateNext() (*net.IPNet, error) {
0000000000000000000000000000000000000000;;		s.Lock()
0000000000000000000000000000000000000000;;		defer s.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nextUnused := -1
0000000000000000000000000000000000000000;;		for i := 0; i < s.maxCIDRs; i++ {
0000000000000000000000000000000000000000;;			candidate := (i + s.nextCandidate) % s.maxCIDRs
0000000000000000000000000000000000000000;;			if s.used.Bit(candidate) == 0 {
0000000000000000000000000000000000000000;;				nextUnused = candidate
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if nextUnused == -1 {
0000000000000000000000000000000000000000;;			return nil, errCIDRRangeNoCIDRsRemaining
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.nextCandidate = (nextUnused + 1) % s.maxCIDRs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.used.SetBit(&s.used, nextUnused, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		j := uint32(nextUnused) << uint32(32-s.subNetMaskSize)
0000000000000000000000000000000000000000;;		ipInt := (binary.BigEndian.Uint32(s.clusterIP)) | j
0000000000000000000000000000000000000000;;		ip := make([]byte, 4)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint32(ip, ipInt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &net.IPNet{
0000000000000000000000000000000000000000;;			IP:   ip,
0000000000000000000000000000000000000000;;			Mask: net.CIDRMask(s.subNetMaskSize, 32),
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cidrSet) getBeginingAndEndIndices(cidr *net.IPNet) (begin, end int, err error) {
0000000000000000000000000000000000000000;;		begin, end = 0, s.maxCIDRs-1
0000000000000000000000000000000000000000;;		cidrMask := cidr.Mask
0000000000000000000000000000000000000000;;		maskSize, _ := cidrMask.Size()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !s.clusterCIDR.Contains(cidr.IP.Mask(s.clusterCIDR.Mask)) && !cidr.Contains(s.clusterCIDR.IP.Mask(cidr.Mask)) {
0000000000000000000000000000000000000000;;			return -1, -1, fmt.Errorf("cidr %v is out the range of cluster cidr %v", cidr, s.clusterCIDR)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.clusterMaskSize < maskSize {
0000000000000000000000000000000000000000;;			subNetMask := net.CIDRMask(s.subNetMaskSize, 32)
0000000000000000000000000000000000000000;;			begin, err = s.getIndexForCIDR(&net.IPNet{
0000000000000000000000000000000000000000;;				IP:   cidr.IP.To4().Mask(subNetMask),
0000000000000000000000000000000000000000;;				Mask: subNetMask,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return -1, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ip := make([]byte, 4)
0000000000000000000000000000000000000000;;			ipInt := binary.BigEndian.Uint32(cidr.IP) | (^binary.BigEndian.Uint32(cidr.Mask))
0000000000000000000000000000000000000000;;			binary.BigEndian.PutUint32(ip, ipInt)
0000000000000000000000000000000000000000;;			end, err = s.getIndexForCIDR(&net.IPNet{
0000000000000000000000000000000000000000;;				IP:   net.IP(ip).To4().Mask(subNetMask),
0000000000000000000000000000000000000000;;				Mask: subNetMask,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return -1, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return begin, end, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cidrSet) release(cidr *net.IPNet) error {
0000000000000000000000000000000000000000;;		begin, end, err := s.getBeginingAndEndIndices(cidr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Lock()
0000000000000000000000000000000000000000;;		defer s.Unlock()
0000000000000000000000000000000000000000;;		for i := begin; i <= end; i++ {
0000000000000000000000000000000000000000;;			s.used.SetBit(&s.used, i, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cidrSet) occupy(cidr *net.IPNet) (err error) {
0000000000000000000000000000000000000000;;		begin, end, err := s.getBeginingAndEndIndices(cidr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Lock()
0000000000000000000000000000000000000000;;		defer s.Unlock()
0000000000000000000000000000000000000000;;		for i := begin; i <= end; i++ {
0000000000000000000000000000000000000000;;			s.used.SetBit(&s.used, i, 1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cidrSet) getIndexForCIDR(cidr *net.IPNet) (int, error) {
0000000000000000000000000000000000000000;;		cidrIndex := (binary.BigEndian.Uint32(s.clusterIP) ^ binary.BigEndian.Uint32(cidr.IP.To4())) >> uint32(32-s.subNetMaskSize)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cidrIndex >= uint32(s.maxCIDRs) {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("CIDR: %v is out of the range of CIDR allocator", cidr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return int(cidrIndex), nil
0000000000000000000000000000000000000000;;	}
