0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5012d87381dd4ebf6adbe83a9fd0102913b28503;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errCIDRRangeNoCIDRsRemaining = errors.New(
0000000000000000000000000000000000000000;;		"CIDR allocation failed; there are no remaining CIDRs left to allocate in the accepted range")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type nodeAndCIDR struct {
0000000000000000000000000000000000000000;;		cidr     *net.IPNet
0000000000000000000000000000000000000000;;		nodeName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CIDRAllocatorType is the type of the allocator to use.
0000000000000000000000000000000000000000;;	type CIDRAllocatorType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		RangeAllocatorType CIDRAllocatorType = "RangeAllocator"
0000000000000000000000000000000000000000;;		CloudAllocatorType CIDRAllocatorType = "CloudAllocator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CIDRAllocator is an interface implemented by things that know how to
0000000000000000000000000000000000000000;;	// allocate/occupy/recycle CIDR for nodes.
0000000000000000000000000000000000000000;;	type CIDRAllocator interface {
0000000000000000000000000000000000000000;;		// AllocateOrOccupyCIDR looks at the given node, assigns it a valid
0000000000000000000000000000000000000000;;		// CIDR if it doesn't currently have one or mark the CIDR as used if
0000000000000000000000000000000000000000;;		// the node already have one.
0000000000000000000000000000000000000000;;		AllocateOrOccupyCIDR(node *v1.Node) error
0000000000000000000000000000000000000000;;		// ReleaseCIDR releases the CIDR of the removed node
0000000000000000000000000000000000000000;;		ReleaseCIDR(node *v1.Node) error
0000000000000000000000000000000000000000;;	}
