0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9109846b6b4280b9be5a8abbd7433b17fce70d25;pkg/controller/scheduledjob/utils.go[pkg/controller/scheduledjob/utils.go][pkg/controller/cronjob/utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cronjob
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/robfig/cron"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/v1/ref"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Utilities for dealing with Jobs and CronJobs and time.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func inActiveList(sj batchv2alpha1.CronJob, uid types.UID) bool {
0000000000000000000000000000000000000000;;		for _, j := range sj.Status.Active {
0000000000000000000000000000000000000000;;			if j.UID == uid {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteFromActiveList(sj *batchv2alpha1.CronJob, uid types.UID) {
0000000000000000000000000000000000000000;;		if sj == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newActive := []v1.ObjectReference{}
0000000000000000000000000000000000000000;;		for _, j := range sj.Status.Active {
0000000000000000000000000000000000000000;;			if j.UID != uid {
0000000000000000000000000000000000000000;;				newActive = append(newActive, j)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sj.Status.Active = newActive
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getParentUIDFromJob extracts UID of job's parent and whether it was found
0000000000000000000000000000000000000000;;	func getParentUIDFromJob(j batchv1.Job) (types.UID, bool) {
0000000000000000000000000000000000000000;;		controllerRef := controller.GetControllerOf(&j)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if controllerRef == nil {
0000000000000000000000000000000000000000;;			return types.UID(""), false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if controllerRef.Kind != "CronJob" {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Job with non-CronJob parent, name %s namespace %s", j.Name, j.Namespace)
0000000000000000000000000000000000000000;;			return types.UID(""), false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return controllerRef.UID, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// groupJobsByParent groups jobs into a map keyed by the job parent UID (e.g. scheduledJob).
0000000000000000000000000000000000000000;;	// It has no receiver, to facilitate testing.
0000000000000000000000000000000000000000;;	func groupJobsByParent(js []batchv1.Job) map[types.UID][]batchv1.Job {
0000000000000000000000000000000000000000;;		jobsBySj := make(map[types.UID][]batchv1.Job)
0000000000000000000000000000000000000000;;		for _, job := range js {
0000000000000000000000000000000000000000;;			parentUID, found := getParentUIDFromJob(job)
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Unable to get parent uid from job %s in namespace %s", job.Name, job.Namespace)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jobsBySj[parentUID] = append(jobsBySj[parentUID], job)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return jobsBySj
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getNextStartTimeAfter gets the latest scheduled start time that is less than "now", or an error.
0000000000000000000000000000000000000000;;	func getNextStartTimeAfter(schedule string, now time.Time) (time.Time, error) {
0000000000000000000000000000000000000000;;		// Using robfig/cron for cron scheduled parsing and next runtime
0000000000000000000000000000000000000000;;		// computation. Not using the entire library because:
0000000000000000000000000000000000000000;;		// - I want to detect when we missed a runtime due to being down.
0000000000000000000000000000000000000000;;		//   - How do I set the time such that I can detect the last known runtime?
0000000000000000000000000000000000000000;;		// - I guess the functions could launch a go-routine to start the job and
0000000000000000000000000000000000000000;;		// then return.
0000000000000000000000000000000000000000;;		// How to handle concurrency control.
0000000000000000000000000000000000000000;;		// How to detect changes to schedules or deleted schedules and then
0000000000000000000000000000000000000000;;		// update the jobs?
0000000000000000000000000000000000000000;;		sched, err := cron.Parse(schedule)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return time.Unix(0, 0), fmt.Errorf("Unparseable schedule: %s : %s", schedule, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sched.Next(now), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getRecentUnmetScheduleTimes gets a slice of times (from oldest to latest) that have passed when a Job should have started but did not.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If there are too many (>100) unstarted times, just give up and return an empty slice.
0000000000000000000000000000000000000000;;	// If there were missed times prior to the last known start time, then those are not returned.
0000000000000000000000000000000000000000;;	func getRecentUnmetScheduleTimes(sj batchv2alpha1.CronJob, now time.Time) ([]time.Time, error) {
0000000000000000000000000000000000000000;;		starts := []time.Time{}
0000000000000000000000000000000000000000;;		sched, err := cron.ParseStandard(sj.Spec.Schedule)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return starts, fmt.Errorf("Unparseable schedule: %s : %s", sj.Spec.Schedule, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var earliestTime time.Time
0000000000000000000000000000000000000000;;		if sj.Status.LastScheduleTime != nil {
0000000000000000000000000000000000000000;;			earliestTime = sj.Status.LastScheduleTime.Time
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// If none found, then this is either a recently created scheduledJob,
0000000000000000000000000000000000000000;;			// or the active/completed info was somehow lost (contract for status
0000000000000000000000000000000000000000;;			// in kubernetes says it may need to be recreated), or that we have
0000000000000000000000000000000000000000;;			// started a job, but have not noticed it yet (distributed systems can
0000000000000000000000000000000000000000;;			// have arbitrary delays).  In any case, use the creation time of the
0000000000000000000000000000000000000000;;			// CronJob as last known start time.
0000000000000000000000000000000000000000;;			earliestTime = sj.ObjectMeta.CreationTimestamp.Time
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sj.Spec.StartingDeadlineSeconds != nil {
0000000000000000000000000000000000000000;;			// Controller is not going to schedule anything below this point
0000000000000000000000000000000000000000;;			schedulingDeadline := now.Add(-time.Second * time.Duration(*sj.Spec.StartingDeadlineSeconds))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if schedulingDeadline.After(earliestTime) {
0000000000000000000000000000000000000000;;				earliestTime = schedulingDeadline
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if earliestTime.After(now) {
0000000000000000000000000000000000000000;;			return []time.Time{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for t := sched.Next(earliestTime); !t.After(now); t = sched.Next(t) {
0000000000000000000000000000000000000000;;			starts = append(starts, t)
0000000000000000000000000000000000000000;;			// An object might miss several starts.  For example, if
0000000000000000000000000000000000000000;;			// controller gets wedged on friday at 5:01pm when everyone has
0000000000000000000000000000000000000000;;			// gone home, and someone comes in on tuesday AM and discovers
0000000000000000000000000000000000000000;;			// the problem and restarts the controller, then all the hourly
0000000000000000000000000000000000000000;;			// jobs, more than 80 of them for one hourly scheduledJob, should
0000000000000000000000000000000000000000;;			// all start running with no further intervention (if the scheduledJob
0000000000000000000000000000000000000000;;			// allows concurrency and late starts).
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// However, if there is a bug somewhere, or incorrect clock
0000000000000000000000000000000000000000;;			// on controller's server or apiservers (for setting creationTimestamp)
0000000000000000000000000000000000000000;;			// then there could be so many missed start times (it could be off
0000000000000000000000000000000000000000;;			// by decades or more), that it would eat up all the CPU and memory
0000000000000000000000000000000000000000;;			// of this controller. In that case, we want to not try to list
0000000000000000000000000000000000000000;;			// all the misseded start times.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// I've somewhat arbitrarily picked 100, as more than 80, but
0000000000000000000000000000000000000000;;			// but less than "lots".
0000000000000000000000000000000000000000;;			if len(starts) > 100 {
0000000000000000000000000000000000000000;;				// We can't get the most recent times so just return an empty slice
0000000000000000000000000000000000000000;;				return []time.Time{}, fmt.Errorf("Too many missed start time (> 100). Set or decrease .spec.startingDeadlineSeconds or check clock skew.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return starts, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newControllerRef(sj *batchv2alpha1.CronJob) *metav1.OwnerReference {
0000000000000000000000000000000000000000;;		blockOwnerDeletion := true
0000000000000000000000000000000000000000;;		isController := true
0000000000000000000000000000000000000000;;		return &metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         controllerKind.GroupVersion().String(),
0000000000000000000000000000000000000000;;			Kind:               controllerKind.Kind,
0000000000000000000000000000000000000000;;			Name:               sj.Name,
0000000000000000000000000000000000000000;;			UID:                sj.UID,
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: &blockOwnerDeletion,
0000000000000000000000000000000000000000;;			Controller:         &isController,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XXX unit test this
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getJobFromTemplate makes a Job from a CronJob
0000000000000000000000000000000000000000;;	func getJobFromTemplate(sj *batchv2alpha1.CronJob, scheduledTime time.Time) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		// TODO: consider adding the following labels:
0000000000000000000000000000000000000000;;		// nominal-start-time=$RFC_3339_DATE_OF_INTENDED_START -- for user convenience
0000000000000000000000000000000000000000;;		// scheduled-job-name=$SJ_NAME -- for user convenience
0000000000000000000000000000000000000000;;		labels := copyLabels(&sj.Spec.JobTemplate)
0000000000000000000000000000000000000000;;		annotations := copyAnnotations(&sj.Spec.JobTemplate)
0000000000000000000000000000000000000000;;		createdByRefJson, err := makeCreatedByRefJson(sj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		annotations[v1.CreatedByAnnotation] = string(createdByRefJson)
0000000000000000000000000000000000000000;;		// We want job names for a given nominal start time to have a deterministic name to avoid the same job being created twice
0000000000000000000000000000000000000000;;		name := fmt.Sprintf("%s-%d", sj.Name, getTimeHash(scheduledTime))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		job := &batchv1.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels:          labels,
0000000000000000000000000000000000000000;;				Annotations:     annotations,
0000000000000000000000000000000000000000;;				Name:            name,
0000000000000000000000000000000000000000;;				OwnerReferences: []metav1.OwnerReference{*newControllerRef(sj)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := api.Scheme.Convert(&sj.Spec.JobTemplate.Spec, &job.Spec, nil); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to convert job template: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return job, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return Unix Epoch Time
0000000000000000000000000000000000000000;;	func getTimeHash(scheduledTime time.Time) int64 {
0000000000000000000000000000000000000000;;		return scheduledTime.Unix()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// makeCreatedByRefJson makes a json string with an object reference for use in "created-by" annotation value
0000000000000000000000000000000000000000;;	func makeCreatedByRefJson(object runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		createdByRef, err := ref.GetReference(api.Scheme, object)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unable to get controller reference: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: this code was not safe previously - as soon as new code came along that switched to v2, old clients
0000000000000000000000000000000000000000;;		//   would be broken upon reading it. This is explicitly hardcoded to v1 to guarantee predictable deployment.
0000000000000000000000000000000000000000;;		//   We need to consistently handle this case of annotation versioning.
0000000000000000000000000000000000000000;;		codec := api.Codecs.LegacyCodec(schema.GroupVersion{Group: v1.GroupName, Version: "v1"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createdByRefJson, err := runtime.Encode(codec, &v1.SerializedReference{
0000000000000000000000000000000000000000;;			Reference: *createdByRef,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unable to serialize controller reference: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(createdByRefJson), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getFinishedStatus(j *batchv1.Job) (bool, batchv1.JobConditionType) {
0000000000000000000000000000000000000000;;		for _, c := range j.Status.Conditions {
0000000000000000000000000000000000000000;;			if (c.Type == batchv1.JobComplete || c.Type == batchv1.JobFailed) && c.Status == v1.ConditionTrue {
0000000000000000000000000000000000000000;;				return true, c.Type
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsJobFinished(j *batchv1.Job) bool {
0000000000000000000000000000000000000000;;		isFinished, _ := getFinishedStatus(j)
0000000000000000000000000000000000000000;;		return isFinished
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byJobStartTime sorts a list of jobs by start timestamp, using their names as a tie breaker.
0000000000000000000000000000000000000000;;	type byJobStartTime []batchv1.Job
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o byJobStartTime) Len() int      { return len(o) }
0000000000000000000000000000000000000000;;	func (o byJobStartTime) Swap(i, j int) { o[i], o[j] = o[j], o[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o byJobStartTime) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if o[j].Status.StartTime == nil {
0000000000000000000000000000000000000000;;			return o[i].Status.StartTime != nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if (*o[i].Status.StartTime).Equal(*o[j].Status.StartTime) {
0000000000000000000000000000000000000000;;			return o[i].Name < o[j].Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return (*o[i].Status.StartTime).Before(*o[j].Status.StartTime)
0000000000000000000000000000000000000000;;	}
