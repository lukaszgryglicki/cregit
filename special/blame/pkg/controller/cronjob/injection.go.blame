0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9109846b6b4280b9be5a8abbd7433b17fce70d25;pkg/controller/scheduledjob/injection.go[pkg/controller/scheduledjob/injection.go][pkg/controller/cronjob/injection.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cronjob
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sjControlInterface is an interface that knows how to update CronJob status
0000000000000000000000000000000000000000;;	// created as an interface to allow testing.
0000000000000000000000000000000000000000;;	type sjControlInterface interface {
0000000000000000000000000000000000000000;;		UpdateStatus(sj *batchv2alpha1.CronJob) (*batchv2alpha1.CronJob, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// realSJControl is the default implementation of sjControlInterface.
0000000000000000000000000000000000000000;;	type realSJControl struct {
0000000000000000000000000000000000000000;;		KubeClient clientset.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ sjControlInterface = &realSJControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *realSJControl) UpdateStatus(sj *batchv2alpha1.CronJob) (*batchv2alpha1.CronJob, error) {
0000000000000000000000000000000000000000;;		return c.KubeClient.BatchV2alpha1().CronJobs(sj.Namespace).UpdateStatus(sj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fakeSJControl is the default implementation of sjControlInterface.
0000000000000000000000000000000000000000;;	type fakeSJControl struct {
0000000000000000000000000000000000000000;;		Updates []batchv2alpha1.CronJob
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ sjControlInterface = &fakeSJControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeSJControl) UpdateStatus(sj *batchv2alpha1.CronJob) (*batchv2alpha1.CronJob, error) {
0000000000000000000000000000000000000000;;		c.Updates = append(c.Updates, *sj)
0000000000000000000000000000000000000000;;		return sj, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ------------------------------------------------------------------ //
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// jobControlInterface is an interface that knows how to add or delete jobs
0000000000000000000000000000000000000000;;	// created as an interface to allow testing.
0000000000000000000000000000000000000000;;	type jobControlInterface interface {
0000000000000000000000000000000000000000;;		// GetJob retrieves a Job.
0000000000000000000000000000000000000000;;		GetJob(namespace, name string) (*batchv1.Job, error)
0000000000000000000000000000000000000000;;		// CreateJob creates new Jobs according to the spec.
0000000000000000000000000000000000000000;;		CreateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error)
0000000000000000000000000000000000000000;;		// UpdateJob updates a Job.
0000000000000000000000000000000000000000;;		UpdateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error)
0000000000000000000000000000000000000000;;		// PatchJob patches a Job.
0000000000000000000000000000000000000000;;		PatchJob(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*batchv1.Job, error)
0000000000000000000000000000000000000000;;		// DeleteJob deletes the Job identified by name.
0000000000000000000000000000000000000000;;		// TODO: delete by UID?
0000000000000000000000000000000000000000;;		DeleteJob(namespace string, name string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// realJobControl is the default implementation of jobControlInterface.
0000000000000000000000000000000000000000;;	type realJobControl struct {
0000000000000000000000000000000000000000;;		KubeClient clientset.Interface
0000000000000000000000000000000000000000;;		Recorder   record.EventRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ jobControlInterface = &realJobControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyLabels(template *batchv2alpha1.JobTemplateSpec) labels.Set {
0000000000000000000000000000000000000000;;		l := make(labels.Set)
0000000000000000000000000000000000000000;;		for k, v := range template.Labels {
0000000000000000000000000000000000000000;;			l[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyAnnotations(template *batchv2alpha1.JobTemplateSpec) labels.Set {
0000000000000000000000000000000000000000;;		a := make(labels.Set)
0000000000000000000000000000000000000000;;		for k, v := range template.Annotations {
0000000000000000000000000000000000000000;;			a[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realJobControl) GetJob(namespace, name string) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		return r.KubeClient.BatchV1().Jobs(namespace).Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realJobControl) UpdateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		return r.KubeClient.BatchV1().Jobs(namespace).Update(job)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realJobControl) PatchJob(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		return r.KubeClient.BatchV1().Jobs(namespace).Patch(name, pt, data, subresources...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realJobControl) CreateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		return r.KubeClient.BatchV1().Jobs(namespace).Create(job)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realJobControl) DeleteJob(namespace string, name string) error {
0000000000000000000000000000000000000000;;		return r.KubeClient.BatchV1().Jobs(namespace).Delete(name, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeJobControl struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		Job           *batchv1.Job
0000000000000000000000000000000000000000;;		Jobs          []batchv1.Job
0000000000000000000000000000000000000000;;		DeleteJobName []string
0000000000000000000000000000000000000000;;		Err           error
0000000000000000000000000000000000000000;;		UpdateJobName []string
0000000000000000000000000000000000000000;;		PatchJobName  []string
0000000000000000000000000000000000000000;;		Patches       [][]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ jobControlInterface = &fakeJobControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) CreateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return nil, f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		job.SelfLink = fmt.Sprintf("/api/batch/v1/namespaces/%s/jobs/%s", namespace, job.Name)
0000000000000000000000000000000000000000;;		f.Jobs = append(f.Jobs, *job)
0000000000000000000000000000000000000000;;		job.UID = "test-uid"
0000000000000000000000000000000000000000;;		return job, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) GetJob(namespace, name string) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return nil, f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.Job, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) UpdateJob(namespace string, job *batchv1.Job) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return nil, f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.UpdateJobName = append(f.UpdateJobName, job.Name)
0000000000000000000000000000000000000000;;		return job, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) PatchJob(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*batchv1.Job, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return nil, f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.PatchJobName = append(f.PatchJobName, name)
0000000000000000000000000000000000000000;;		f.Patches = append(f.Patches, data)
0000000000000000000000000000000000000000;;		// We don't have anything to return. Just return something non-nil.
0000000000000000000000000000000000000000;;		return &batchv1.Job{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) DeleteJob(namespace string, name string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.DeleteJobName = append(f.DeleteJobName, name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeJobControl) Clear() {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		f.DeleteJobName = []string{}
0000000000000000000000000000000000000000;;		f.Jobs = []batchv1.Job{}
0000000000000000000000000000000000000000;;		f.Err = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ------------------------------------------------------------------ //
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podControlInterface is an interface that knows how to list or delete pods
0000000000000000000000000000000000000000;;	// created as an interface to allow testing.
0000000000000000000000000000000000000000;;	type podControlInterface interface {
0000000000000000000000000000000000000000;;		// ListPods list pods
0000000000000000000000000000000000000000;;		ListPods(namespace string, opts metav1.ListOptions) (*v1.PodList, error)
0000000000000000000000000000000000000000;;		// DeleteJob deletes the pod identified by name.
0000000000000000000000000000000000000000;;		// TODO: delete by UID?
0000000000000000000000000000000000000000;;		DeletePod(namespace string, name string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// realPodControl is the default implementation of podControlInterface.
0000000000000000000000000000000000000000;;	type realPodControl struct {
0000000000000000000000000000000000000000;;		KubeClient clientset.Interface
0000000000000000000000000000000000000000;;		Recorder   record.EventRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ podControlInterface = &realPodControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realPodControl) ListPods(namespace string, opts metav1.ListOptions) (*v1.PodList, error) {
0000000000000000000000000000000000000000;;		return r.KubeClient.Core().Pods(namespace).List(opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r realPodControl) DeletePod(namespace string, name string) error {
0000000000000000000000000000000000000000;;		return r.KubeClient.Core().Pods(namespace).Delete(name, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakePodControl struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		Pods          []v1.Pod
0000000000000000000000000000000000000000;;		DeletePodName []string
0000000000000000000000000000000000000000;;		Err           error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ podControlInterface = &fakePodControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakePodControl) ListPods(namespace string, opts metav1.ListOptions) (*v1.PodList, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return &v1.PodList{Items: f.Pods}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakePodControl) DeletePod(namespace string, name string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			return f.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.DeletePodName = append(f.DeletePodName, name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
