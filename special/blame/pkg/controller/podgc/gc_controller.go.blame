0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f17fe74fe51aa69a52f340e309d7cc9a582b50dd;pkg/controller/gc/gc_controller.go[pkg/controller/gc/gc_controller.go][pkg/controller/podgc/gc_controller.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podgc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		coreinformers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions/core/v1"
0000000000000000000000000000000000000000;;		corelisters "k8s.io/kubernetes/pkg/client/listers/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/metrics"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		gcCheckPeriod = 20 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PodGCController struct {
0000000000000000000000000000000000000000;;		kubeClient clientset.Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podLister       corelisters.PodLister
0000000000000000000000000000000000000000;;		podListerSynced cache.InformerSynced
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deletePod              func(namespace, name string) error
0000000000000000000000000000000000000000;;		terminatedPodThreshold int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPodGC(kubeClient clientset.Interface, podInformer coreinformers.PodInformer, terminatedPodThreshold int) *PodGCController {
0000000000000000000000000000000000000000;;		if kubeClient != nil && kubeClient.Core().RESTClient().GetRateLimiter() != nil {
0000000000000000000000000000000000000000;;			metrics.RegisterMetricAndTrackRateLimiterUsage("gc_controller", kubeClient.Core().RESTClient().GetRateLimiter())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gcc := &PodGCController{
0000000000000000000000000000000000000000;;			kubeClient:             kubeClient,
0000000000000000000000000000000000000000;;			terminatedPodThreshold: terminatedPodThreshold,
0000000000000000000000000000000000000000;;			deletePod: func(namespace, name string) error {
0000000000000000000000000000000000000000;;				glog.Infof("PodGC is force deleting Pod: %v:%v", namespace, name)
0000000000000000000000000000000000000000;;				return kubeClient.Core().Pods(namespace).Delete(name, metav1.NewDeleteOptions(0))
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gcc.podLister = podInformer.Lister()
0000000000000000000000000000000000000000;;		gcc.podListerSynced = podInformer.Informer().HasSynced
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gcc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (gcc *PodGCController) Run(stop <-chan struct{}) {
0000000000000000000000000000000000000000;;		defer utilruntime.HandleCrash()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Infof("Starting GC controller")
0000000000000000000000000000000000000000;;		defer glog.Infof("Shutting down GC controller")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !controller.WaitForCacheSync("GC", stop, gcc.podListerSynced) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go wait.Until(gcc.gc, gcCheckPeriod, stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-stop
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (gcc *PodGCController) gc() {
0000000000000000000000000000000000000000;;		pods, err := gcc.podLister.List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Error while listing all Pods: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if gcc.terminatedPodThreshold > 0 {
0000000000000000000000000000000000000000;;			gcc.gcTerminated(pods)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gcc.gcOrphaned(pods)
0000000000000000000000000000000000000000;;		gcc.gcUnscheduledTerminating(pods)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isPodTerminated(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		if phase := pod.Status.Phase; phase != v1.PodPending && phase != v1.PodRunning && phase != v1.PodUnknown {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (gcc *PodGCController) gcTerminated(pods []*v1.Pod) {
0000000000000000000000000000000000000000;;		terminatedPods := []*v1.Pod{}
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			if isPodTerminated(pod) {
0000000000000000000000000000000000000000;;				terminatedPods = append(terminatedPods, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		terminatedPodCount := len(terminatedPods)
0000000000000000000000000000000000000000;;		sort.Sort(byCreationTimestamp(terminatedPods))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deleteCount := terminatedPodCount - gcc.terminatedPodThreshold
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if deleteCount > terminatedPodCount {
0000000000000000000000000000000000000000;;			deleteCount = terminatedPodCount
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if deleteCount > 0 {
0000000000000000000000000000000000000000;;			glog.Infof("garbage collecting %v pods", deleteCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var wait sync.WaitGroup
0000000000000000000000000000000000000000;;		for i := 0; i < deleteCount; i++ {
0000000000000000000000000000000000000000;;			wait.Add(1)
0000000000000000000000000000000000000000;;			go func(namespace string, name string) {
0000000000000000000000000000000000000000;;				defer wait.Done()
0000000000000000000000000000000000000000;;				if err := gcc.deletePod(namespace, name); err != nil {
0000000000000000000000000000000000000000;;					// ignore not founds
0000000000000000000000000000000000000000;;					defer utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}(terminatedPods[i].Namespace, terminatedPods[i].Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wait.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// gcOrphaned deletes pods that are bound to nodes that don't exist.
0000000000000000000000000000000000000000;;	func (gcc *PodGCController) gcOrphaned(pods []*v1.Pod) {
0000000000000000000000000000000000000000;;		glog.V(4).Infof("GC'ing orphaned")
0000000000000000000000000000000000000000;;		// We want to get list of Nodes from the etcd, to make sure that it's as fresh as possible.
0000000000000000000000000000000000000000;;		nodes, err := gcc.kubeClient.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeNames := sets.NewString()
0000000000000000000000000000000000000000;;		for i := range nodes.Items {
0000000000000000000000000000000000000000;;			nodeNames.Insert(nodes.Items[i].Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			if pod.Spec.NodeName == "" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if nodeNames.Has(pod.Spec.NodeName) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Found orphaned Pod %v assigned to the Node %v. Deleting.", pod.Name, pod.Spec.NodeName)
0000000000000000000000000000000000000000;;			if err := gcc.deletePod(pod.Namespace, pod.Name); err != nil {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				glog.V(0).Infof("Forced deletion of orphaned Pod %s succeeded", pod.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// gcUnscheduledTerminating deletes pods that are terminating and haven't been scheduled to a particular node.
0000000000000000000000000000000000000000;;	func (gcc *PodGCController) gcUnscheduledTerminating(pods []*v1.Pod) {
0000000000000000000000000000000000000000;;		glog.V(4).Infof("GC'ing unscheduled pods which are terminating.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			if pod.DeletionTimestamp == nil || len(pod.Spec.NodeName) > 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Found unscheduled terminating Pod %v not assigned to any Node. Deleting.", pod.Name)
0000000000000000000000000000000000000000;;			if err := gcc.deletePod(pod.Namespace, pod.Name); err != nil {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				glog.V(0).Infof("Forced deletion of unscheduled terminating Pod %s succeeded", pod.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byCreationTimestamp sorts a list by creation timestamp, using their names as a tie breaker.
0000000000000000000000000000000000000000;;	type byCreationTimestamp []*v1.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o byCreationTimestamp) Len() int      { return len(o) }
0000000000000000000000000000000000000000;;	func (o byCreationTimestamp) Swap(i, j int) { o[i], o[j] = o[j], o[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o byCreationTimestamp) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if o[i].CreationTimestamp.Equal(o[j].CreationTimestamp) {
0000000000000000000000000000000000000000;;			return o[i].Name < o[j].Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return o[i].CreationTimestamp.Before(o[j].CreationTimestamp)
0000000000000000000000000000000000000000;;	}
