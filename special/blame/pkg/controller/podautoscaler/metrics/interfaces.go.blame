0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
278042ae17c145dad928747360bc660b2fb72470;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		autoscaling "k8s.io/api/autoscaling/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodMetricsInfo contains pod metric values as a map from pod names to
0000000000000000000000000000000000000000;;	// metric values (the metric values are expected to be the metric as a milli-value)
0000000000000000000000000000000000000000;;	type PodMetricsInfo map[string]int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricsClient knows how to query a remote interface to retrieve container-level
0000000000000000000000000000000000000000;;	// resource metrics as well as pod-level arbitrary metrics
0000000000000000000000000000000000000000;;	type MetricsClient interface {
0000000000000000000000000000000000000000;;		// GetResourceMetric gets the given resource metric (and an associated oldest timestamp)
0000000000000000000000000000000000000000;;		// for all pods matching the specified selector in the given namespace
0000000000000000000000000000000000000000;;		GetResourceMetric(resource v1.ResourceName, namespace string, selector labels.Selector) (PodMetricsInfo, time.Time, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetRawMetric gets the given metric (and an associated oldest timestamp)
0000000000000000000000000000000000000000;;		// for all pods matching the specified selector in the given namespace
0000000000000000000000000000000000000000;;		GetRawMetric(metricName string, namespace string, selector labels.Selector) (PodMetricsInfo, time.Time, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetObjectMetric gets the given metric (and an associated timestamp) for the given
0000000000000000000000000000000000000000;;		// object in the given namespace
0000000000000000000000000000000000000000;;		GetObjectMetric(metricName string, namespace string, objectRef *autoscaling.CrossVersionObjectReference) (int64, time.Time, error)
0000000000000000000000000000000000000000;;	}
