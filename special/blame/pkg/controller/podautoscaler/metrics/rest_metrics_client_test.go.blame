0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4d4099050cc14059e99bb7b28138b974e4d5246a;pkg/controller/autoscaler/metrics/metrics_client_test.go[pkg/controller/autoscaler/metrics/metrics_client_test.go][pkg/controller/podautoscaler/metrics/rest_metrics_client_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		autoscalingapi "k8s.io/api/autoscaling/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		metricsfake "k8s.io/metrics/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		cmfake "k8s.io/metrics/pkg/client/custom_metrics/fake"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmapi "k8s.io/metrics/pkg/apis/custom_metrics/v1alpha1"
0000000000000000000000000000000000000000;;		metricsapi "k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type restClientTestCase struct {
0000000000000000000000000000000000000000;;		desiredMetricValues PodMetricsInfo
0000000000000000000000000000000000000000;;		desiredError        error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// "timestamps" here are actually the offset in minutes from a base timestamp
0000000000000000000000000000000000000000;;		targetTimestamp      int
0000000000000000000000000000000000000000;;		reportedMetricPoints []metricPoint
0000000000000000000000000000000000000000;;		reportedPodMetrics   [][]int64
0000000000000000000000000000000000000000;;		singleObject         *autoscalingapi.CrossVersionObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespace    string
0000000000000000000000000000000000000000;;		selector     labels.Selector
0000000000000000000000000000000000000000;;		resourceName v1.ResourceName
0000000000000000000000000000000000000000;;		metricName   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *restClientTestCase) prepareTestClient(t *testing.T) (*metricsfake.Clientset, *cmfake.FakeCustomMetricsClient) {
0000000000000000000000000000000000000000;;		namespace := "test-namespace"
0000000000000000000000000000000000000000;;		tc.namespace = namespace
0000000000000000000000000000000000000000;;		podNamePrefix := "test-pod"
0000000000000000000000000000000000000000;;		podLabels := map[string]string{"name": podNamePrefix}
0000000000000000000000000000000000000000;;		tc.selector = labels.SelectorFromSet(podLabels)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// it's a resource test if we have a resource name
0000000000000000000000000000000000000000;;		isResource := len(tc.resourceName) > 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeMetricsClient := &metricsfake.Clientset{}
0000000000000000000000000000000000000000;;		fakeCMClient := &cmfake.FakeCustomMetricsClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isResource {
0000000000000000000000000000000000000000;;			fakeMetricsClient.AddReactor("list", "pods", func(action core.Action) (handled bool, ret runtime.Object, err error) {
0000000000000000000000000000000000000000;;				metrics := &metricsapi.PodMetricsList{}
0000000000000000000000000000000000000000;;				for i, containers := range tc.reportedPodMetrics {
0000000000000000000000000000000000000000;;					metric := metricsapi.PodMetrics{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name:      fmt.Sprintf("%s-%d", podNamePrefix, i),
0000000000000000000000000000000000000000;;							Namespace: namespace,
0000000000000000000000000000000000000000;;							Labels:    podLabels,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Timestamp:  metav1.Time{Time: fixedTimestamp.Add(time.Duration(tc.targetTimestamp) * time.Minute)},
0000000000000000000000000000000000000000;;						Containers: []metricsapi.ContainerMetrics{},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for j, cpu := range containers {
0000000000000000000000000000000000000000;;						cm := metricsapi.ContainerMetrics{
0000000000000000000000000000000000000000;;							Name: fmt.Sprintf("%s-%d-container-%d", podNamePrefix, i, j),
0000000000000000000000000000000000000000;;							Usage: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceCPU: *resource.NewMilliQuantity(
0000000000000000000000000000000000000000;;									cpu,
0000000000000000000000000000000000000000;;									resource.DecimalSI),
0000000000000000000000000000000000000000;;								v1.ResourceMemory: *resource.NewQuantity(
0000000000000000000000000000000000000000;;									int64(1024*1024),
0000000000000000000000000000000000000000;;									resource.BinarySI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						metric.Containers = append(metric.Containers, cm)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					metrics.Items = append(metrics.Items, metric)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, metrics, nil
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fakeCMClient.AddReactor("get", "*", func(action core.Action) (handled bool, ret runtime.Object, err error) {
0000000000000000000000000000000000000000;;				getForAction := action.(cmfake.GetForAction)
0000000000000000000000000000000000000000;;				assert.Equal(t, tc.metricName, getForAction.GetMetricName(), "the metric requested should have matched the one specified")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if getForAction.GetName() == "*" {
0000000000000000000000000000000000000000;;					// multiple objects
0000000000000000000000000000000000000000;;					metrics := cmapi.MetricValueList{}
0000000000000000000000000000000000000000;;					assert.Equal(t, "pods", getForAction.GetResource().Resource, "type of object that we requested multiple metrics for should have been pods")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					for i, metricPoint := range tc.reportedMetricPoints {
0000000000000000000000000000000000000000;;						timestamp := fixedTimestamp.Add(time.Duration(metricPoint.timestamp) * time.Minute)
0000000000000000000000000000000000000000;;						metric := cmapi.MetricValue{
0000000000000000000000000000000000000000;;							DescribedObject: v1.ObjectReference{
0000000000000000000000000000000000000000;;								Kind:       "Pod",
0000000000000000000000000000000000000000;;								APIVersion: "v1",
0000000000000000000000000000000000000000;;								Name:       fmt.Sprintf("%s-%d", podNamePrefix, i),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Value:      *resource.NewMilliQuantity(int64(metricPoint.level), resource.DecimalSI),
0000000000000000000000000000000000000000;;							Timestamp:  metav1.Time{Time: timestamp},
0000000000000000000000000000000000000000;;							MetricName: tc.metricName,
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						metrics.Items = append(metrics.Items, metric)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					return true, &metrics, nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					name := getForAction.GetName()
0000000000000000000000000000000000000000;;					mapper := api.Registry.RESTMapper()
0000000000000000000000000000000000000000;;					assert.NotNil(t, tc.singleObject, "should have only requested a single-object metric when we asked for metrics for a single object")
0000000000000000000000000000000000000000;;					gk := schema.FromAPIVersionAndKind(tc.singleObject.APIVersion, tc.singleObject.Kind).GroupKind()
0000000000000000000000000000000000000000;;					mapping, err := mapper.RESTMapping(gk)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return true, nil, fmt.Errorf("unable to get mapping for %s: %v", gk.String(), err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					groupResource := schema.GroupResource{Group: mapping.GroupVersionKind.Group, Resource: mapping.Resource}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					assert.Equal(t, groupResource.String(), getForAction.GetResource().Resource, "should have requested metrics for the resource matching the GroupKind passed in")
0000000000000000000000000000000000000000;;					assert.Equal(t, tc.singleObject.Name, name, "should have requested metrics for the object matching the name passed in")
0000000000000000000000000000000000000000;;					metricPoint := tc.reportedMetricPoints[0]
0000000000000000000000000000000000000000;;					timestamp := fixedTimestamp.Add(time.Duration(metricPoint.timestamp) * time.Minute)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					metrics := &cmapi.MetricValueList{
0000000000000000000000000000000000000000;;						Items: []cmapi.MetricValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								DescribedObject: v1.ObjectReference{
0000000000000000000000000000000000000000;;									Kind:       tc.singleObject.Kind,
0000000000000000000000000000000000000000;;									APIVersion: tc.singleObject.APIVersion,
0000000000000000000000000000000000000000;;									Name:       tc.singleObject.Name,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Timestamp:  metav1.Time{Time: timestamp},
0000000000000000000000000000000000000000;;								MetricName: tc.metricName,
0000000000000000000000000000000000000000;;								Value:      *resource.NewMilliQuantity(int64(metricPoint.level), resource.DecimalSI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					return true, metrics, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fakeMetricsClient, fakeCMClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *restClientTestCase) verifyResults(t *testing.T, metrics PodMetricsInfo, timestamp time.Time, err error) {
0000000000000000000000000000000000000000;;		if tc.desiredError != nil {
0000000000000000000000000000000000000000;;			assert.Error(t, err, "there should be an error retrieving the metrics")
0000000000000000000000000000000000000000;;			assert.Contains(t, fmt.Sprintf("%v", err), fmt.Sprintf("%v", tc.desiredError), "the error message should be eas expected")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.NoError(t, err, "there should be no error retrieving the metrics")
0000000000000000000000000000000000000000;;		assert.NotNil(t, metrics, "there should be metrics returned")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, tc.desiredMetricValues, metrics, "the metrics values should be as expected")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		targetTimestamp := fixedTimestamp.Add(time.Duration(tc.targetTimestamp) * time.Minute)
0000000000000000000000000000000000000000;;		assert.True(t, targetTimestamp.Equal(timestamp), fmt.Sprintf("the timestamp should be as expected (%s) but was %s", targetTimestamp, timestamp))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *restClientTestCase) runTest(t *testing.T) {
0000000000000000000000000000000000000000;;		testMetricsClient, testCMClient := tc.prepareTestClient(t)
0000000000000000000000000000000000000000;;		metricsClient := NewRESTMetricsClient(testMetricsClient.MetricsV1alpha1(), testCMClient)
0000000000000000000000000000000000000000;;		isResource := len(tc.resourceName) > 0
0000000000000000000000000000000000000000;;		if isResource {
0000000000000000000000000000000000000000;;			info, timestamp, err := metricsClient.GetResourceMetric(kv1.ResourceName(tc.resourceName), tc.namespace, tc.selector)
0000000000000000000000000000000000000000;;			tc.verifyResults(t, info, timestamp, err)
0000000000000000000000000000000000000000;;		} else if tc.singleObject == nil {
0000000000000000000000000000000000000000;;			info, timestamp, err := metricsClient.GetRawMetric(tc.metricName, tc.namespace, tc.selector)
0000000000000000000000000000000000000000;;			tc.verifyResults(t, info, timestamp, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			val, timestamp, err := metricsClient.GetObjectMetric(tc.metricName, tc.namespace, tc.singleObject)
0000000000000000000000000000000000000000;;			info := PodMetricsInfo{tc.singleObject.Name: val}
0000000000000000000000000000000000000000;;			tc.verifyResults(t, info, timestamp, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientCPU(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			desiredMetricValues: PodMetricsInfo{
0000000000000000000000000000000000000000;;				"test-pod-0": 5000, "test-pod-1": 5000, "test-pod-2": 5000,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			resourceName:       v1.ResourceCPU,
0000000000000000000000000000000000000000;;			targetTimestamp:    1,
0000000000000000000000000000000000000000;;			reportedPodMetrics: [][]int64{{5000}, {5000}, {5000}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientQPS(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			desiredMetricValues: PodMetricsInfo{
0000000000000000000000000000000000000000;;				"test-pod-0": 10000, "test-pod-1": 20000, "test-pod-2": 10000,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			metricName:           "qps",
0000000000000000000000000000000000000000;;			targetTimestamp:      1,
0000000000000000000000000000000000000000;;			reportedMetricPoints: []metricPoint{{10000, 1}, {20000, 1}, {10000, 1}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientSingleObject(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			desiredMetricValues:  PodMetricsInfo{"some-dep": 10},
0000000000000000000000000000000000000000;;			metricName:           "queue-length",
0000000000000000000000000000000000000000;;			targetTimestamp:      1,
0000000000000000000000000000000000000000;;			reportedMetricPoints: []metricPoint{{10, 1}},
0000000000000000000000000000000000000000;;			singleObject: &autoscalingapi.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;				APIVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;				Kind:       "Deployment",
0000000000000000000000000000000000000000;;				Name:       "some-dep",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientQpsSumEqualZero(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			desiredMetricValues: PodMetricsInfo{
0000000000000000000000000000000000000000;;				"test-pod-0": 0, "test-pod-1": 0, "test-pod-2": 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			metricName:           "qps",
0000000000000000000000000000000000000000;;			targetTimestamp:      0,
0000000000000000000000000000000000000000;;			reportedMetricPoints: []metricPoint{{0, 0}, {0, 0}, {0, 0}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientCPUEmptyMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			resourceName:         v1.ResourceCPU,
0000000000000000000000000000000000000000;;			desiredError:         fmt.Errorf("no metrics returned from heapster"),
0000000000000000000000000000000000000000;;			reportedMetricPoints: []metricPoint{},
0000000000000000000000000000000000000000;;			reportedPodMetrics:   [][]int64{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTClientCPUEmptyMetricsForOnePod(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := restClientTestCase{
0000000000000000000000000000000000000000;;			resourceName: v1.ResourceCPU,
0000000000000000000000000000000000000000;;			desiredMetricValues: PodMetricsInfo{
0000000000000000000000000000000000000000;;				"test-pod-0": 100, "test-pod-1": 700,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			reportedPodMetrics: [][]int64{{100}, {300, 400}, {}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tc.runTest(t)
0000000000000000000000000000000000000000;;	}
