0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
caf9ec417ad21d4439e935f285edbeaa7db71a56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResourceUtilizationRatio takes in a set of metrics, a set of matching requests,
0000000000000000000000000000000000000000;;	// and a target utilization percentage, and calculates the the ratio of
0000000000000000000000000000000000000000;;	// desired to actual utilization (returning that, the actual utilization, and the raw average value)
0000000000000000000000000000000000000000;;	func GetResourceUtilizationRatio(metrics PodMetricsInfo, requests map[string]int64, targetUtilization int32) (utilizationRatio float64, currentUtilization int32, rawAverageValue int64, err error) {
0000000000000000000000000000000000000000;;		metricsTotal := int64(0)
0000000000000000000000000000000000000000;;		requestsTotal := int64(0)
0000000000000000000000000000000000000000;;		numEntries := 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for podName, metricValue := range metrics {
0000000000000000000000000000000000000000;;			request, hasRequest := requests[podName]
0000000000000000000000000000000000000000;;			if !hasRequest {
0000000000000000000000000000000000000000;;				// we check for missing requests elsewhere, so assuming missing requests == extraneous metrics
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			metricsTotal += metricValue
0000000000000000000000000000000000000000;;			requestsTotal += request
0000000000000000000000000000000000000000;;			numEntries++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// if the set of requests is completely disjoint from the set of metrics,
0000000000000000000000000000000000000000;;		// then we could have an issue where the requests total is zero
0000000000000000000000000000000000000000;;		if requestsTotal == 0 {
0000000000000000000000000000000000000000;;			return 0, 0, 0, fmt.Errorf("no metrics returned matched known pods")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		currentUtilization = int32((metricsTotal * 100) / requestsTotal)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return float64(currentUtilization) / float64(targetUtilization), currentUtilization, metricsTotal / int64(numEntries), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetricUtilizationRatio takes in a set of metrics and a target utilization value,
0000000000000000000000000000000000000000;;	// and calcuates the ratio of desired to actual utilization
0000000000000000000000000000000000000000;;	// (returning that and the actual utilization)
0000000000000000000000000000000000000000;;	func GetMetricUtilizationRatio(metrics PodMetricsInfo, targetUtilization int64) (utilizationRatio float64, currentUtilization int64) {
0000000000000000000000000000000000000000;;		metricsTotal := int64(0)
0000000000000000000000000000000000000000;;		for _, metricValue := range metrics {
0000000000000000000000000000000000000000;;			metricsTotal += metricValue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		currentUtilization = metricsTotal / int64(len(metrics))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return float64(currentUtilization) / float64(targetUtilization), currentUtilization
0000000000000000000000000000000000000000;;	}
