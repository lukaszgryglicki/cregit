0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8c7446538ae934eff5afdf9dc14ae8f36db63523;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podautoscaler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FixedItemIntervalRateLimiter limits items to a fixed-rate interval
0000000000000000000000000000000000000000;;	type FixedItemIntervalRateLimiter struct {
0000000000000000000000000000000000000000;;		interval time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ workqueue.RateLimiter = &FixedItemIntervalRateLimiter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFixedItemIntervalRateLimiter(interval time.Duration) workqueue.RateLimiter {
0000000000000000000000000000000000000000;;		return &FixedItemIntervalRateLimiter{
0000000000000000000000000000000000000000;;			interval: interval,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FixedItemIntervalRateLimiter) When(item interface{}) time.Duration {
0000000000000000000000000000000000000000;;		return r.interval
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FixedItemIntervalRateLimiter) NumRequeues(item interface{}) int {
0000000000000000000000000000000000000000;;		return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *FixedItemIntervalRateLimiter) Forget(item interface{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultHPARateLimitter creates a rate limitter which limits overall (as per the
0000000000000000000000000000000000000000;;	// default controller rate limiter), as well as per the resync interval
0000000000000000000000000000000000000000;;	func NewDefaultHPARateLimiter(interval time.Duration) workqueue.RateLimiter {
0000000000000000000000000000000000000000;;		return NewFixedItemIntervalRateLimiter(interval)
0000000000000000000000000000000000000000;;	}
