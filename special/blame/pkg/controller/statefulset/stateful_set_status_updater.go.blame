0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
867d12e2129e83804ebf2dac6e9736f1264d69f3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		appslisters "k8s.io/kubernetes/pkg/client/listers/apps/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/retry"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetStatusUpdaterInterface is an interface used to update the StatefulSetStatus associated with a StatefulSet.
0000000000000000000000000000000000000000;;	// For any use other than testing, clients should create an instance using NewRealStatefulSetStatusUpdater.
0000000000000000000000000000000000000000;;	type StatefulSetStatusUpdaterInterface interface {
0000000000000000000000000000000000000000;;		// UpdateStatefulSetStatus sets the set's Status to status. Implementations are required to retry on conflicts,
0000000000000000000000000000000000000000;;		// but fail on other errors. If the returned error is nil set's Status has been successfully set to status.
0000000000000000000000000000000000000000;;		UpdateStatefulSetStatus(set *apps.StatefulSet, status *apps.StatefulSetStatus) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRealStatefulSetStatusUpdater returns a StatefulSetStatusUpdaterInterface that updates the Status of a StatefulSet,
0000000000000000000000000000000000000000;;	// using the supplied client and setLister.
0000000000000000000000000000000000000000;;	func NewRealStatefulSetStatusUpdater(
0000000000000000000000000000000000000000;;		client clientset.Interface,
0000000000000000000000000000000000000000;;		setLister appslisters.StatefulSetLister) StatefulSetStatusUpdaterInterface {
0000000000000000000000000000000000000000;;		return &realStatefulSetStatusUpdater{client, setLister}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type realStatefulSetStatusUpdater struct {
0000000000000000000000000000000000000000;;		client    clientset.Interface
0000000000000000000000000000000000000000;;		setLister appslisters.StatefulSetLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ssu *realStatefulSetStatusUpdater) UpdateStatefulSetStatus(
0000000000000000000000000000000000000000;;		set *apps.StatefulSet,
0000000000000000000000000000000000000000;;		status *apps.StatefulSetStatus) error {
0000000000000000000000000000000000000000;;		// don't wait due to limited number of clients, but backoff after the default number of steps
0000000000000000000000000000000000000000;;		return retry.RetryOnConflict(retry.DefaultRetry, func() error {
0000000000000000000000000000000000000000;;			set.Status = *status
0000000000000000000000000000000000000000;;			_, updateErr := ssu.client.AppsV1beta1().StatefulSets(set.Namespace).UpdateStatus(set)
0000000000000000000000000000000000000000;;			if updateErr == nil {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if updated, err := ssu.setLister.StatefulSets(set.Namespace).Get(set.Name); err == nil {
0000000000000000000000000000000000000000;;				// make a copy so we don't mutate the shared cache
0000000000000000000000000000000000000000;;				if copy, err := scheme.Scheme.DeepCopy(updated); err == nil {
0000000000000000000000000000000000000000;;					set = copy.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					utilruntime.HandleError(fmt.Errorf("error copying updated StatefulSet: %v", err))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(fmt.Errorf("error getting updated StatefulSet %s/%s from lister: %v", set.Namespace, set.Name, err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return updateErr
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StatefulSetStatusUpdaterInterface = &realStatefulSetStatusUpdater{}
