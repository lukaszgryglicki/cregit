0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c1b60d772eced72df62dcc96ad41f0e8b2f41f7b;pkg/controller/petset/pet_set_test.go[pkg/controller/petset/pet_set_test.go][pkg/controller/statefulset/stateful_set_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/history"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func alwaysReady() bool { return true }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerCreates(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletes(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 0
0000000000000000000000000000000000000000;;		if err := scaleDownStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn down StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerRespectsTermination(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.addTerminatingPod(set, 3)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.addTerminatingPod(set, 4)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ssc.syncStatefulSet(set, pods)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(pods) != 5 {
0000000000000000000000000000000000000000;;			t.Error("StatefulSet does not respect termination")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		spc.DeleteStatefulPod(set, pods[3])
0000000000000000000000000000000000000000;;		spc.DeleteStatefulPod(set, pods[4])
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 0
0000000000000000000000000000000000000000;;		if err := scaleDownStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn down StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerBlocksScaling(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetController(set, ssc, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Falied to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;		fakeResourceVersion(set)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Update(set)
0000000000000000000000000000000000000000;;		pods, err := spc.setPodTerminated(set, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error("Failed to set pod terminated at ordinal 0")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(pods) != 3 {
0000000000000000000000000000000000000000;;			t.Error("StatefulSet does not block scaling")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		spc.DeleteStatefulPod(set, pods[0])
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(pods) != 3 {
0000000000000000000000000000000000000000;;			t.Error("StatefulSet does not resume when terminated Pod is removed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletionTimestamp(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set.DeletionTimestamp = new(metav1.Time)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Force a sync. It should not try to create any Pods.
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := len(pods), 0; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("len(pods) = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletionTimestampRace(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		// The bare client says it IS deleted.
0000000000000000000000000000000000000000;;		set.DeletionTimestamp = new(metav1.Time)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The lister (cache) says it's NOT deleted.
0000000000000000000000000000000000000000;;		set2 := *set
0000000000000000000000000000000000000000;;		set2.DeletionTimestamp = nil
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(&set2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The recheck occurs in the presence of a matching orphan.
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.OwnerReferences = nil
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Force a sync. It should not try to create any Pods.
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := len(pods), 1; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("len(pods) = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerAddPod(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set2, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ssc.addPod(pod1)
0000000000000000000000000000000000000000;;		key, done := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set1); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ssc.queue.Done(key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ssc.addPod(pod2)
0000000000000000000000000000000000000000;;		key, done = ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set2); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ssc.queue.Done(key)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerAddPodOrphan(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		set3 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set3.Name = "foo3"
0000000000000000000000000000000000000000;;		set3.Spec.Selector.MatchLabels = map[string]string{"foo3": "bar"}
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make pod an orphan. Expect matching sets to be queued.
0000000000000000000000000000000000000000;;		pod.OwnerReferences = nil
0000000000000000000000000000000000000000;;		ssc.addPod(pod)
0000000000000000000000000000000000000000;;		if got, want := ssc.queue.Len(), 2; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("queue.Len() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerAddPodNoSet(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, _ := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		ssc.addPod(pod)
0000000000000000000000000000000000000000;;		ssc.queue.ShutDown()
0000000000000000000000000000000000000000;;		key, _ := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key != nil {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSet enqueued key for Pod with no Set %s", key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePod(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set2, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prev := *pod1
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod1)
0000000000000000000000000000000000000000;;		ssc.updatePod(&prev, pod1)
0000000000000000000000000000000000000000;;		key, done := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set1); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prev = *pod2
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod2)
0000000000000000000000000000000000000000;;		ssc.updatePod(&prev, pod2)
0000000000000000000000000000000000000000;;		key, done = ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set2); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePodWithNoSet(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, _ := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		prev := *pod
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		ssc.updatePod(&prev, pod)
0000000000000000000000000000000000000000;;		ssc.queue.ShutDown()
0000000000000000000000000000000000000000;;		key, _ := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key != nil {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSet enqueued key for Pod with no Set %s", key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePodWithSameVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		ssc.updatePod(pod, pod)
0000000000000000000000000000000000000000;;		ssc.queue.ShutDown()
0000000000000000000000000000000000000000;;		key, _ := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key != nil {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSet enqueued key for Pod with no Set %s", key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePodOrphanWithNewLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		pod.OwnerReferences = nil
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;		clone := *pod
0000000000000000000000000000000000000000;;		clone.Labels = map[string]string{"foo2": "bar2"}
0000000000000000000000000000000000000000;;		fakeResourceVersion(&clone)
0000000000000000000000000000000000000000;;		ssc.updatePod(&clone, pod)
0000000000000000000000000000000000000000;;		if got, want := ssc.queue.Len(), 2; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("queue.Len() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePodChangeControllerRef(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set2, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;		clone := *pod
0000000000000000000000000000000000000000;;		clone.OwnerReferences = pod2.OwnerReferences
0000000000000000000000000000000000000000;;		fakeResourceVersion(&clone)
0000000000000000000000000000000000000000;;		ssc.updatePod(&clone, pod)
0000000000000000000000000000000000000000;;		if got, want := ssc.queue.Len(), 2; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("queue.Len() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerUpdatePodRelease(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;		clone := *pod
0000000000000000000000000000000000000000;;		clone.OwnerReferences = nil
0000000000000000000000000000000000000000;;		fakeResourceVersion(&clone)
0000000000000000000000000000000000000000;;		ssc.updatePod(pod, &clone)
0000000000000000000000000000000000000000;;		if got, want := ssc.queue.Len(), 2; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("queue.Len() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletePod(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set2, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ssc.deletePod(pod1)
0000000000000000000000000000000000000000;;		key, done := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set1); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ssc.deletePod(pod2)
0000000000000000000000000000000000000000;;		key, done = ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set2); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletePodOrphan(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod1.OwnerReferences = nil
0000000000000000000000000000000000000000;;		ssc.deletePod(pod1)
0000000000000000000000000000000000000000;;		if got, want := ssc.queue.Len(), 0; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("queue.Len() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerDeletePodTombstone(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		tombstoneKey, _ := controller.KeyFunc(pod)
0000000000000000000000000000000000000000;;		tombstone := cache.DeletedFinalStateUnknown{Key: tombstoneKey, Obj: pod}
0000000000000000000000000000000000000000;;		ssc.deletePod(tombstone)
0000000000000000000000000000000000000000;;		key, done := ssc.queue.Get()
0000000000000000000000000000000000000000;;		if key == nil || done {
0000000000000000000000000000000000000000;;			t.Error("failed to enqueue StatefulSet")
0000000000000000000000000000000000000000;;		} else if key, ok := key.(string); !ok {
0000000000000000000000000000000000000000;;			t.Error("key is not a string")
0000000000000000000000000000000000000000;;		} else if expectedKey, _ := controller.KeyFunc(set); expectedKey != key {
0000000000000000000000000000000000000000;;			t.Errorf("expected StatefulSet key %s found %s", expectedKey, key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControllerGetStatefulSetsForPod(t *testing.T) {
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController()
0000000000000000000000000000000000000000;;		set1 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set1, 0)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set1)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set2)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod)
0000000000000000000000000000000000000000;;		sets := ssc.getStatefulSetsForPod(pod)
0000000000000000000000000000000000000000;;		if got, want := len(sets), 2; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("len(sets) = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodsForStatefulSetAdopt(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(5)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		// pod2 is an orphan with matching labels and name.
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set, 2)
0000000000000000000000000000000000000000;;		pod2.OwnerReferences = nil
0000000000000000000000000000000000000000;;		// pod3 has wrong labels.
0000000000000000000000000000000000000000;;		pod3 := newStatefulSetPod(set, 3)
0000000000000000000000000000000000000000;;		pod3.OwnerReferences = nil
0000000000000000000000000000000000000000;;		pod3.Labels = nil
0000000000000000000000000000000000000000;;		// pod4 has wrong name.
0000000000000000000000000000000000000000;;		pod4 := newStatefulSetPod(set, 4)
0000000000000000000000000000000000000000;;		pod4.OwnerReferences = nil
0000000000000000000000000000000000000000;;		pod4.Name = "x" + pod4.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod1)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod2)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod3)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod4)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := ssc.getPodsForStatefulSet(set, selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("getPodsForStatefulSet() error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var got []string
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			got = append(got, pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// pod2 should be claimed, pod3 and pod4 ignored
0000000000000000000000000000000000000000;;		want := []string{pod1.Name, pod2.Name}
0000000000000000000000000000000000000000;;		sort.Strings(got)
0000000000000000000000000000000000000000;;		sort.Strings(want)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("getPodsForStatefulSet() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodsForStatefulSetRelease(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		ssc, spc := newFakeStatefulSetController(set)
0000000000000000000000000000000000000000;;		pod1 := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		// pod2 is owned but has wrong name.
0000000000000000000000000000000000000000;;		pod2 := newStatefulSetPod(set, 2)
0000000000000000000000000000000000000000;;		pod2.Name = "x" + pod2.Name
0000000000000000000000000000000000000000;;		// pod3 is owned but has wrong labels.
0000000000000000000000000000000000000000;;		pod3 := newStatefulSetPod(set, 3)
0000000000000000000000000000000000000000;;		pod3.Labels = nil
0000000000000000000000000000000000000000;;		// pod4 is an orphan that doesn't match.
0000000000000000000000000000000000000000;;		pod4 := newStatefulSetPod(set, 4)
0000000000000000000000000000000000000000;;		pod4.OwnerReferences = nil
0000000000000000000000000000000000000000;;		pod4.Labels = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod1)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod2)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Add(pod3)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := ssc.getPodsForStatefulSet(set, selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("getPodsForStatefulSet() error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var got []string
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			got = append(got, pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expect only pod1 (pod2 and pod3 should be released, pod4 ignored).
0000000000000000000000000000000000000000;;		want := []string{pod1.Name}
0000000000000000000000000000000000000000;;		sort.Strings(got)
0000000000000000000000000000000000000000;;		sort.Strings(want)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("getPodsForStatefulSet() = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeStatefulSetController(initialObjects ...runtime.Object) (*StatefulSetController, *fakeStatefulPodControl) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(initialObjects...)
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;		fpc := newFakeStatefulPodControl(informerFactory.Core().V1().Pods(), informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;		ssu := newFakeStatefulSetStatusUpdater(informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;		ssc := NewStatefulSetController(
0000000000000000000000000000000000000000;;			informerFactory.Core().V1().Pods(),
0000000000000000000000000000000000000000;;			informerFactory.Apps().V1beta1().StatefulSets(),
0000000000000000000000000000000000000000;;			informerFactory.Core().V1().PersistentVolumeClaims(),
0000000000000000000000000000000000000000;;			informerFactory.Apps().V1beta1().ControllerRevisions(),
0000000000000000000000000000000000000000;;			client,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		ssh := history.NewFakeHistory(informerFactory.Apps().V1beta1().ControllerRevisions())
0000000000000000000000000000000000000000;;		ssc.podListerSynced = alwaysReady
0000000000000000000000000000000000000000;;		ssc.setListerSynced = alwaysReady
0000000000000000000000000000000000000000;;		ssc.control = NewDefaultStatefulSetControl(fpc, ssu, ssh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ssc, fpc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeWorker(ssc *StatefulSetController) {
0000000000000000000000000000000000000000;;		if obj, done := ssc.queue.Get(); !done {
0000000000000000000000000000000000000000;;			ssc.sync(obj.(string))
0000000000000000000000000000000000000000;;			ssc.queue.Done(obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPodAtOrdinal(pods []*v1.Pod, ordinal int) *v1.Pod {
0000000000000000000000000000000000000000;;		if 0 > ordinal || ordinal >= len(pods) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		return pods[ordinal]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleUpStatefulSetController(set *apps.StatefulSet, ssc *StatefulSetController, spc *fakeStatefulPodControl) error {
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for set.Status.ReadyReplicas < *set.Spec.Replicas {
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			ord := len(pods) - 1
0000000000000000000000000000000000000000;;			pod := getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			if pods, err = spc.setPodPending(set, ord); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			ssc.addPod(pod)
0000000000000000000000000000000000000000;;			fakeWorker(ssc)
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			prev := *pod
0000000000000000000000000000000000000000;;			if pods, err = spc.setPodRunning(set, ord); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			ssc.updatePod(&prev, pod)
0000000000000000000000000000000000000000;;			fakeWorker(ssc)
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			prev = *pod
0000000000000000000000000000000000000000;;			if pods, err = spc.setPodReady(set, ord); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			ssc.updatePod(&prev, pod)
0000000000000000000000000000000000000000;;			fakeWorker(ssc)
0000000000000000000000000000000000000000;;			if err := assertMonotonicInvariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return assertMonotonicInvariants(set, spc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleDownStatefulSetController(set *apps.StatefulSet, ssc *StatefulSetController, spc *fakeStatefulPodControl) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ord := len(pods) - 1
0000000000000000000000000000000000000000;;		pod := getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;		prev := *pod
0000000000000000000000000000000000000000;;		fakeResourceVersion(set)
0000000000000000000000000000000000000000;;		spc.setsIndexer.Add(set)
0000000000000000000000000000000000000000;;		ssc.enqueueStatefulSet(set)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		pods, err = spc.addTerminatingPod(set, ord)
0000000000000000000000000000000000000000;;		pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;		ssc.updatePod(&prev, pod)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		spc.DeleteStatefulPod(set, pod)
0000000000000000000000000000000000000000;;		ssc.deletePod(pod)
0000000000000000000000000000000000000000;;		fakeWorker(ssc)
0000000000000000000000000000000000000000;;		for set.Status.Replicas > *set.Spec.Replicas {
0000000000000000000000000000000000000000;;			pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			ord := len(pods)
0000000000000000000000000000000000000000;;			pods, err = spc.addTerminatingPod(set, ord)
0000000000000000000000000000000000000000;;			pod = getPodAtOrdinal(pods, ord)
0000000000000000000000000000000000000000;;			ssc.updatePod(&prev, pod)
0000000000000000000000000000000000000000;;			fakeWorker(ssc)
0000000000000000000000000000000000000000;;			spc.DeleteStatefulPod(set, pod)
0000000000000000000000000000000000000000;;			ssc.deletePod(pod)
0000000000000000000000000000000000000000;;			fakeWorker(ssc)
0000000000000000000000000000000000000000;;			if obj, _, err := spc.setsIndexer.Get(set); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				set = obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return assertMonotonicInvariants(set, spc)
0000000000000000000000000000000000000000;;	}
