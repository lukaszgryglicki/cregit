0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ec03e4154550115dc382e0974606508bfc1ec003;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		corelisters "k8s.io/kubernetes/pkg/client/listers/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlCreatesPods(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("get", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewNotFound(action.GetResource().GroupResource(), action.GetResource().Resource)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.CreateStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulPodControl failed to create Pod error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 events for successful create found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			if !strings.Contains(events[i], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected normal events found %s", events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlCreatePodExists(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcs := getPersistentVolumeClaims(set, pod)
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		for k := range pvcs {
0000000000000000000000000000000000000000;;			pvc := pvcs[k]
0000000000000000000000000000000000000000;;			pvcIndexer.Add(&pvc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, pod, apierrors.NewAlreadyExists(action.GetResource().GroupResource(), pod.Name)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.CreateStatefulPod(set, pod); !apierrors.IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create Pod error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 0 events when Pod and PVC exist found %d", eventCount)
0000000000000000000000000000000000000000;;			for i := range events {
0000000000000000000000000000000000000000;;				t.Log(events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlCreatePodPvcCreateFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.CreateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed to produce error on PVC creation failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 events for PVC create failure found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			if !strings.Contains(events[i], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected normal events found %s", events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeIndexer struct {
0000000000000000000000000000000000000000;;		cache.Indexer
0000000000000000000000000000000000000000;;		getError error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeIndexer) GetByKey(key string) (interface{}, bool, error) {
0000000000000000000000000000000000000000;;		return nil, false, f.getError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlCreatePodPvcGetFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := &fakeIndexer{getError: errors.New("API server down")}
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.CreateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed to produce error on PVC creation failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 events for PVC create failure found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			if !strings.Contains(events[i], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected normal events found %s", events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlCreatePodFailed(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			create := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			return true, create.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.CreateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed to produce error on Pod creation failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 events for failed Pod create found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected normal event found %s", events[0])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[1], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected warning event found %s", events[1])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlNoOpUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, nil, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("*", "*", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			t.Error("no-op update should not make any client invocation")
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("If we are here we have a problem"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error returned on no-op update error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 0 events for no-op update found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdatesIdentity(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := fake.NewSimpleClientset(set, pod)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, nil, recorder)
0000000000000000000000000000000000000000;;		var updated *v1.Pod
0000000000000000000000000000000000000000;;		fakeClient.PrependReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			updated = update.GetObject().(*v1.Pod)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		pod.Name = "goo-0"
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Successful update returned an error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 event for successful Pod update found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected normal event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !identityMatches(set, updated) {
0000000000000000000000000000000000000000;;			t.Error("Name update failed identity does not match")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdateIdentityFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		gooPod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		gooPod.Name = "goo-0"
0000000000000000000000000000000000000000;;		indexer.Add(gooPod)
0000000000000000000000000000000000000000;;		podLister := corelisters.NewPodLister(indexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, podLister, nil, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			pod.Name = "goo-0"
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		pod.Name = "goo-0"
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed update does not generate an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 event for failed Pod update found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected warning event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Failed update mutated Pod identity")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdatesPodStorage(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		pvcs := getPersistentVolumeClaims(set, pod)
0000000000000000000000000000000000000000;;		volumes := make([]v1.Volume, len(pod.Spec.Volumes))
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			if _, contains := pvcs[pod.Spec.Volumes[i].Name]; !contains {
0000000000000000000000000000000000000000;;				volumes = append(volumes, pod.Spec.Volumes[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Volumes = volumes
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		var updated *v1.Pod
0000000000000000000000000000000000000000;;		fakeClient.PrependReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			updated = update.GetObject().(*v1.Pod)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Successful update returned an error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 event for successful Pod storage update found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			if !strings.Contains(events[i], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected normal event found %s", events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !storageMatches(set, updated) {
0000000000000000000000000000000000000000;;			t.Error("Name update failed identity does not match")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdatePodStorageFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		pvcIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		pvcLister := corelisters.NewPersistentVolumeClaimLister(pvcIndexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, pvcLister, recorder)
0000000000000000000000000000000000000000;;		pvcs := getPersistentVolumeClaims(set, pod)
0000000000000000000000000000000000000000;;		volumes := make([]v1.Volume, len(pod.Spec.Volumes))
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			if _, contains := pvcs[pod.Spec.Volumes[i].Name]; !contains {
0000000000000000000000000000000000000000;;				volumes = append(volumes, pod.Spec.Volumes[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Volumes = volumes
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("create", "persistentvolumeclaims", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed Pod storage update did not return an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 event for failed Pod storage update found %d", eventCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			if !strings.Contains(events[i], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected normal event found %s", events[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdatePodConflictSuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		gooPod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		gooPod.Name = "goo-0"
0000000000000000000000000000000000000000;;		indexer.Add(gooPod)
0000000000000000000000000000000000000000;;		podLister := corelisters.NewPodLister(indexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, podLister, nil, recorder)
0000000000000000000000000000000000000000;;		conflict := false
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			if !conflict {
0000000000000000000000000000000000000000;;				conflict = true
0000000000000000000000000000000000000000;;				return true, update.GetObject(), apierrors.NewConflict(action.GetResource().GroupResource(), pod.Name, errors.New("conflict"))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		pod.Name = "goo-0"
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Successful update returned an error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 event for successful Pod update found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected normal event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Name update failed identity does not match")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlUpdatePodConflictFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		updatedPod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		updatedPod.Spec.Hostname = "wrong"
0000000000000000000000000000000000000000;;		indexer.Add(updatedPod)
0000000000000000000000000000000000000000;;		podLister := corelisters.NewPodLister(indexer)
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, podLister, nil, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), apierrors.NewConflict(action.GetResource().GroupResource(), pod.Name, errors.New("conflict"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		pod.Name = "goo-0"
0000000000000000000000000000000000000000;;		if err := control.UpdateStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed update did not return an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 event for failed Pod update found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected normal event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlDeletesStatefulPod(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, nil, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("delete", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.DeleteStatefulPod(set, pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error returned on successful delete: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 events for successful delete found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeNormal) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected normal event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulPodControlDeleteFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		recorder := record.NewFakeRecorder(10)
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		control := NewRealStatefulPodControl(fakeClient, nil, nil, nil, recorder)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("delete", "pods", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := control.DeleteStatefulPod(set, pod); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed to return error on failed delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := collectEvents(recorder.Events)
0000000000000000000000000000000000000000;;		if eventCount := len(events); eventCount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 events for failed delete found %d", eventCount)
0000000000000000000000000000000000000000;;		} else if !strings.Contains(events[0], v1.EventTypeWarning) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected warning event found %s", events[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func collectEvents(source <-chan string) []string {
0000000000000000000000000000000000000000;;		done := false
0000000000000000000000000000000000000000;;		events := make([]string, 0)
0000000000000000000000000000000000000000;;		for !done {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case event := <-source:
0000000000000000000000000000000000000000;;				events = append(events, event)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				done = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return events
0000000000000000000000000000000000000000;;	}
