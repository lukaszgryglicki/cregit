0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ec03e4154550115dc382e0974606508bfc1ec003;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		podutil "k8s.io/kubernetes/pkg/api/v1/pod"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/history"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetParentNameAndOrdinal(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if parent, ordinal := getParentNameAndOrdinal(pod); parent != set.Name {
0000000000000000000000000000000000000000;;			t.Errorf("Extracted the wrong parent name expected %s found %s", set.Name, parent)
0000000000000000000000000000000000000000;;		} else if ordinal != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Extracted the wrong ordinal expected %d found %d", 1, ordinal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Name = "1-bar"
0000000000000000000000000000000000000000;;		if parent, ordinal := getParentNameAndOrdinal(pod); parent != "" {
0000000000000000000000000000000000000000;;			t.Error("Expected empty string for non-member Pod parent")
0000000000000000000000000000000000000000;;		} else if ordinal != -1 {
0000000000000000000000000000000000000000;;			t.Error("Expected -1 for non member Pod ordinal")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsMemberOf(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2 := newStatefulSet(3)
0000000000000000000000000000000000000000;;		set2.Name = "foo2"
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if !isMemberOf(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("isMemberOf retruned false negative")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isMemberOf(set2, pod) {
0000000000000000000000000000000000000000;;			t.Error("isMemberOf returned false positive")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIdentityMatches(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Newly created Pod has a bad identity")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Name = "foo"
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with the wrong name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Namespace = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with the wrong namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Spec.Hostname = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with no hostname")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Spec.Subdomain = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with no subdomain")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStorageMatches(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Newly created Pod has a invalid stroage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Volumes = nil
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes has valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[i].PersistentVolumeClaim = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes claim valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			if pod.Spec.Volumes[i].PersistentVolumeClaim != nil {
0000000000000000000000000000000000000000;;				pod.Spec.Volumes[i].PersistentVolumeClaim.ClaimName = "foo"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes claim valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Name = "bar"
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid ordinal has valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateIdentity(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Newly created Pod has a bad identity")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Namespace = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with the wrong namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateIdentity(set, pod)
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateIdentity failed to update the Pods namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Spec.Hostname = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with no hostname")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateIdentity(set, pod)
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateIdentity failed to update the Pod's hostname")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		pod.Spec.Subdomain = ""
0000000000000000000000000000000000000000;;		if identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("identity matches for a Pod with no subdomain")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateIdentity(set, pod)
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateIdentity failed to update the Pod's subdomain")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateStorage(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Newly created Pod has a invalid stroage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Volumes = nil
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes has valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateStorage(set, pod)
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateStorage failed to recreate volumes")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[i].PersistentVolumeClaim = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes claim valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateStorage(set, pod)
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateStorage failed to recreate volume claims")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod = newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Volumes {
0000000000000000000000000000000000000000;;			if pod.Spec.Volumes[i].PersistentVolumeClaim != nil {
0000000000000000000000000000000000000000;;				pod.Spec.Volumes[i].PersistentVolumeClaim.ClaimName = "foo"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod with invalid Volumes claim valid storage")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateStorage(set, pod)
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			t.Error("updateStorage failed to recreate volume claim names")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsRunningAndReady(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 1)
0000000000000000000000000000000000000000;;		if isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("isRunningAndReady does not respect Pod phase")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Status.Phase = v1.PodRunning
0000000000000000000000000000000000000000;;		if isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("isRunningAndReady does not respect Pod condition")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		condition := v1.PodCondition{Type: v1.PodReady, Status: v1.ConditionTrue}
0000000000000000000000000000000000000000;;		podutil.UpdatePodCondition(&pod.Status, &condition)
0000000000000000000000000000000000000000;;		if !isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("Pod should be running and ready")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Annotations[apps.StatefulSetInitAnnotation] = "true"
0000000000000000000000000000000000000000;;		if !isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("isRunningAndReady does not respected init annotation set to true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Annotations[apps.StatefulSetInitAnnotation] = "false"
0000000000000000000000000000000000000000;;		if isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("isRunningAndReady does not respected init annotation set to false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Annotations[apps.StatefulSetInitAnnotation] = "blah"
0000000000000000000000000000000000000000;;		if !isRunningAndReady(pod) {
0000000000000000000000000000000000000000;;			t.Error("isRunningAndReady does not erroneous init annotation")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAscendingOrdinal(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(10)
0000000000000000000000000000000000000000;;		pods := make([]*v1.Pod, 10)
0000000000000000000000000000000000000000;;		perm := rand.Perm(10)
0000000000000000000000000000000000000000;;		for i, v := range perm {
0000000000000000000000000000000000000000;;			pods[i] = newStatefulSetPod(set, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		if !sort.IsSorted(ascendingOrdinal(pods)) {
0000000000000000000000000000000000000000;;			t.Error("ascendingOrdinal fails to sort Pods")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOverlappingStatefulSets(t *testing.T) {
0000000000000000000000000000000000000000;;		sets := make([]*apps.StatefulSet, 10)
0000000000000000000000000000000000000000;;		perm := rand.Perm(10)
0000000000000000000000000000000000000000;;		for i, v := range perm {
0000000000000000000000000000000000000000;;			sets[i] = newStatefulSet(10)
0000000000000000000000000000000000000000;;			sets[i].CreationTimestamp = metav1.NewTime(sets[i].CreationTimestamp.Add(time.Duration(v) * time.Second))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(overlappingStatefulSets(sets))
0000000000000000000000000000000000000000;;		if !sort.IsSorted(overlappingStatefulSets(sets)) {
0000000000000000000000000000000000000000;;			t.Error("ascendingOrdinal fails to sort Pods")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, v := range perm {
0000000000000000000000000000000000000000;;			sets[i] = newStatefulSet(10)
0000000000000000000000000000000000000000;;			sets[i].Name = strconv.FormatInt(int64(v), 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(overlappingStatefulSets(sets))
0000000000000000000000000000000000000000;;		if !sort.IsSorted(overlappingStatefulSets(sets)) {
0000000000000000000000000000000000000000;;			t.Error("ascendingOrdinal fails to sort Pods")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewPodControllerRef(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(1)
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, 0)
0000000000000000000000000000000000000000;;		controllerRef := controller.GetControllerOf(pod)
0000000000000000000000000000000000000000;;		if controllerRef == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("No ControllerRef found on new pod")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := controllerRef.APIVersion, apps.SchemeGroupVersion.String(); got != want {
0000000000000000000000000000000000000000;;			t.Errorf("controllerRef.APIVersion = %q, want %q", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := controllerRef.Kind, "StatefulSet"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("controllerRef.Kind = %q, want %q", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := controllerRef.Name, set.Name; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("controllerRef.Name = %q, want %q", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := controllerRef.UID, set.UID; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("controllerRef.UID = %q, want %q", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := *controllerRef.Controller, true; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("controllerRef.Controller = %v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateApplyRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(1)
0000000000000000000000000000000000000000;;		revision, err := newRevision(set, 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		set.Spec.Template.Spec.Containers[0].Name = "foo"
0000000000000000000000000000000000000000;;		restoredSet, err := applyRevision(set, revision)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		restoredRevision, err := newRevision(restoredSet, 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !history.EqualRevision(revision, restoredRevision) {
0000000000000000000000000000000000000000;;			t.Errorf("wanted %v got %v", string(revision.Data.Raw), string(restoredRevision.Data.Raw))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPVC(name string) v1.PersistentVolumeClaim {
0000000000000000000000000000000000000000;;		return v1.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;				Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;						v1.ResourceStorage: *resource.NewQuantity(1, resource.BinarySI),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStatefulSetWithVolumes(replicas int, name string, petMounts []v1.VolumeMount, podMounts []v1.VolumeMount) *apps.StatefulSet {
0000000000000000000000000000000000000000;;		mounts := append(petMounts, podMounts...)
0000000000000000000000000000000000000000;;		claims := []v1.PersistentVolumeClaim{}
0000000000000000000000000000000000000000;;		for _, m := range petMounts {
0000000000000000000000000000000000000000;;			claims = append(claims, newPVC(m.Name))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vols := []v1.Volume{}
0000000000000000000000000000000000000000;;		for _, m := range podMounts {
0000000000000000000000000000000000000000;;			vols = append(vols, v1.Volume{
0000000000000000000000000000000000000000;;				Name: m.Name,
0000000000000000000000000000000000000000;;				VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;					HostPath: &v1.HostPathVolumeSource{
0000000000000000000000000000000000000000;;						Path: fmt.Sprintf("/tmp/%v", m.Name),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		template := v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:         "nginx",
0000000000000000000000000000000000000000;;						Image:        "nginx",
0000000000000000000000000000000000000000;;						VolumeMounts: mounts,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: vols,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		template.Labels = map[string]string{"foo": "bar"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &apps.StatefulSet{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "StatefulSet",
0000000000000000000000000000000000000000;;				APIVersion: "apps/v1beta1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: v1.NamespaceDefault,
0000000000000000000000000000000000000000;;				UID:       types.UID("test"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Replicas:             func() *int32 { i := int32(replicas); return &i }(),
0000000000000000000000000000000000000000;;				Template:             template,
0000000000000000000000000000000000000000;;				VolumeClaimTemplates: claims,
0000000000000000000000000000000000000000;;				ServiceName:          "governingsvc",
0000000000000000000000000000000000000000;;				UpdateStrategy:       apps.StatefulSetUpdateStrategy{Type: apps.RollingUpdateStatefulSetStrategyType},
0000000000000000000000000000000000000000;;				RevisionHistoryLimit: func() *int32 {
0000000000000000000000000000000000000000;;					limit := int32(2)
0000000000000000000000000000000000000000;;					return &limit
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStatefulSet(replicas int) *apps.StatefulSet {
0000000000000000000000000000000000000000;;		petMounts := []v1.VolumeMount{
0000000000000000000000000000000000000000;;			{Name: "datadir", MountPath: "/tmp/zookeeper"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podMounts := []v1.VolumeMount{
0000000000000000000000000000000000000000;;			{Name: "home", MountPath: "/home"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStatefulSetWithVolumes(replicas, "foo", petMounts, podMounts)
0000000000000000000000000000000000000000;;	}
