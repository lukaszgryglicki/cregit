0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ec03e4154550115dc382e0974606508bfc1ec003;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		podutil "k8s.io/kubernetes/pkg/api/v1/pod"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		appsinformers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions/apps/v1beta1"
0000000000000000000000000000000000000000;;		coreinformers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions/core/v1"
0000000000000000000000000000000000000000;;		appslisters "k8s.io/kubernetes/pkg/client/listers/apps/v1beta1"
0000000000000000000000000000000000000000;;		corelisters "k8s.io/kubernetes/pkg/client/listers/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/history"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/client/clientset_generated/clientset/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type invariantFunc func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setupController(client clientset.Interface) (*fakeStatefulPodControl, *fakeStatefulSetStatusUpdater, StatefulSetControlInterface, chan struct{}) {
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;		spc := newFakeStatefulPodControl(informerFactory.Core().V1().Pods(), informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;		ssu := newFakeStatefulSetStatusUpdater(informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;		ssc := NewDefaultStatefulSetControl(spc, ssu, history.NewFakeHistory(informerFactory.Apps().V1beta1().ControllerRevisions()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stop := make(chan struct{})
0000000000000000000000000000000000000000;;		informerFactory.Start(stop)
0000000000000000000000000000000000000000;;		cache.WaitForCacheSync(
0000000000000000000000000000000000000000;;			stop,
0000000000000000000000000000000000000000;;			informerFactory.Apps().V1beta1().StatefulSets().Informer().HasSynced,
0000000000000000000000000000000000000000;;			informerFactory.Core().V1().Pods().Informer().HasSynced,
0000000000000000000000000000000000000000;;			informerFactory.Apps().V1beta1().ControllerRevisions().Informer().HasSynced,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return spc, ssu, ssc, stop
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func burst(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;		set.Spec.PodManagementPolicy = apps.ParallelPodManagement
0000000000000000000000000000000000000000;;		return set
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControl(t *testing.T) {
0000000000000000000000000000000000000000;;		simpleSetFn := func() *apps.StatefulSet { return newStatefulSet(3) }
0000000000000000000000000000000000000000;;		largeSetFn := func() *apps.StatefulSet { return newStatefulSet(5) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			fn  func(*testing.T, *apps.StatefulSet, invariantFunc)
0000000000000000000000000000000000000000;;			obj func() *apps.StatefulSet
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{CreatesPods, simpleSetFn},
0000000000000000000000000000000000000000;;			{ScalesUp, simpleSetFn},
0000000000000000000000000000000000000000;;			{ScalesDown, simpleSetFn},
0000000000000000000000000000000000000000;;			{ReplacesPods, largeSetFn},
0000000000000000000000000000000000000000;;			{RecreatesFailedPod, simpleSetFn},
0000000000000000000000000000000000000000;;			{SetsInitAnnotation, simpleSetFn},
0000000000000000000000000000000000000000;;			{CreatePodFailure, simpleSetFn},
0000000000000000000000000000000000000000;;			{UpdatePodFailure, simpleSetFn},
0000000000000000000000000000000000000000;;			{UpdateSetStatusFailure, simpleSetFn},
0000000000000000000000000000000000000000;;			{PodRecreateDeleteFailure, simpleSetFn},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			fnName := runtime.FuncForPC(reflect.ValueOf(testCase.fn).Pointer()).Name()
0000000000000000000000000000000000000000;;			if i := strings.LastIndex(fnName, "."); i != -1 {
0000000000000000000000000000000000000000;;				fnName = fnName[i+1:]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Run(
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/Monotonic", fnName),
0000000000000000000000000000000000000000;;				func(t *testing.T) {
0000000000000000000000000000000000000000;;					testCase.fn(t, testCase.obj(), assertMonotonicInvariants)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			t.Run(
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/Burst", fnName),
0000000000000000000000000000000000000000;;				func(t *testing.T) {
0000000000000000000000000000000000000000;;					set := burst(testCase.obj())
0000000000000000000000000000000000000000;;					testCase.fn(t, set, assertBurstInvariants)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreatesPods(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale statefulset to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ScalesUp(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 4
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to scale StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 4 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale statefulset to 4 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ScalesDown(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 0
0000000000000000000000000000000000000000;;		if err := scaleDownStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to scale StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale statefulset to 0 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReplacesPods(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 5 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale statefulset to 5 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		spc.podsIndexer.Delete(pods[0])
0000000000000000000000000000000000000000;;		spc.podsIndexer.Delete(pods[2])
0000000000000000000000000000000000000000;;		spc.podsIndexer.Delete(pods[4])
0000000000000000000000000000000000000000;;		for i := 0; i < 5; i += 2 {
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to update StatefulSet : %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if pods, err = spc.setPodRunning(set, i); err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to update StatefulSet : %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if pods, err = spc.setPodReady(set, i); err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to update StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := int32(5), set.Status.Replicas; e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to scale to %d, got %d", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RecreatesFailedPod(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods[0].Status.Phase = v1.PodFailed
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pods[0])
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isCreated(pods[0]) {
0000000000000000000000000000000000000000;;			t.Error("StatefulSet did not recreate failed Pod")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetsInitAnnotation(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pods, err = spc.setPodRunning(set, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pods, err = spc.setPodReady(set, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pods, err = spc.setPodInitStatus(set, 0, false); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		replicas := int(set.Status.Replicas)
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if replicas != int(set.Status.Replicas) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl does not block on %s=false", apps.StatefulSetInitAnnotation)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pods, err = spc.setPodInitStatus(set, 0, true); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if int(set.Status.Replicas) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl does not unblock on %s=true", apps.StatefulSetInitAnnotation)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreatePodFailure(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;		spc.SetCreateStatefulPodError(apierrors.NewInternalError(errors.New("API server failed")), 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); !apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl did not return InternalError found %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale StatefulSet to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func UpdatePodFailure(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;		spc.SetUpdateStatefulPodError(apierrors.NewInternalError(errors.New("API server failed")), 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// have to have 1 successful loop first
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale StatefulSet to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// now mutate a pod's identity
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error listing pods: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(pods) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected 3 pods, got %d", len(pods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		pods[0].Name = "goo-0"
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pods[0])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// now it should fail
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); !apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl did not return InternalError found %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func UpdateSetStatusFailure(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, ssu, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;		ssu.SetUpdateStatefulSetStatusError(apierrors.NewInternalError(errors.New("API server failed")), 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); !apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl did not return InternalError found %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale StatefulSet to 3 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PodRecreateDeleteFailure(t *testing.T, set *apps.StatefulSet, invariants invariantFunc) {
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods[0].Status.Phase = v1.PodFailed
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pods[0])
0000000000000000000000000000000000000000;;		spc.SetDeleteStatefulPodError(apierrors.NewInternalError(errors.New("API server failed")), 0)
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); !apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSet failed to %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error updating StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isCreated(pods[0]) {
0000000000000000000000000000000000000000;;			t.Error("StatefulSet did not recreate failed Pod")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlScaleDownDeleteError(t *testing.T) {
0000000000000000000000000000000000000000;;		invariants := assertMonotonicInvariants
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;		spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;		defer close(stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := scaleUpStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn up StatefulSet : %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*set.Spec.Replicas = 0
0000000000000000000000000000000000000000;;		spc.SetDeleteStatefulPodError(apierrors.NewInternalError(errors.New("API server failed")), 2)
0000000000000000000000000000000000000000;;		if err := scaleDownStatefulSetControl(set, ssc, spc, invariants); !apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("StatefulSetControl failed to throw error on delete %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := scaleDownStatefulSetControl(set, ssc, spc, invariants); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to turn down StatefulSet %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting updated StatefulSet: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("Failed to scale statefulset to 0 replicas")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControl_getSetRevisions(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			existing        []*apps.ControllerRevision
0000000000000000000000000000000000000000;;			set             *apps.StatefulSet
0000000000000000000000000000000000000000;;			expectedCount   int
0000000000000000000000000000000000000000;;			expectedCurrent *apps.ControllerRevision
0000000000000000000000000000000000000000;;			expectedUpdate  *apps.ControllerRevision
0000000000000000000000000000000000000000;;			err             bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			spc := newFakeStatefulPodControl(informerFactory.Core().V1().Pods(), informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;			ssu := newFakeStatefulSetStatusUpdater(informerFactory.Apps().V1beta1().StatefulSets())
0000000000000000000000000000000000000000;;			ssc := defaultStatefulSetControl{spc, ssu, history.NewFakeHistory(informerFactory.Apps().V1beta1().ControllerRevisions())}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stop := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			informerFactory.Start(stop)
0000000000000000000000000000000000000000;;			cache.WaitForCacheSync(
0000000000000000000000000000000000000000;;				stop,
0000000000000000000000000000000000000000;;				informerFactory.Apps().V1beta1().StatefulSets().Informer().HasSynced,
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().Pods().Informer().HasSynced,
0000000000000000000000000000000000000000;;				informerFactory.Apps().V1beta1().ControllerRevisions().Informer().HasSynced,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			for i := range test.existing {
0000000000000000000000000000000000000000;;				ssc.controllerHistory.CreateControllerRevision(test.set, test.existing[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			revisions, err := ssc.ListRevisions(test.set)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			current, update, err := ssc.getStatefulSetRevisions(test.set, revisions)
0000000000000000000000000000000000000000;;			revisions, err = ssc.ListRevisions(test.set)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(revisions) != test.expectedCount {
0000000000000000000000000000000000000000;;				t.Errorf("%s: want %d revisions got %d", test.name, test.expectedCount, len(revisions))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && !history.EqualRevision(current, test.expectedCurrent) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: for current want %v got %v", test.name, test.expectedCurrent, current)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && !history.EqualRevision(update, test.expectedUpdate) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: for current want %v got %v", test.name, test.expectedUpdate, update)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && test.expectedCurrent != nil && current != nil && test.expectedCurrent.Revision != current.Revision {
0000000000000000000000000000000000000000;;				t.Errorf("%s: for current revision want %d got %d", test.name, test.expectedCurrent.Revision, current.Revision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.err && test.expectedUpdate != nil && update != nil && test.expectedUpdate.Revision != update.Revision {
0000000000000000000000000000000000000000;;				t.Errorf("%s: for current revision want %d got %d", test.name, test.expectedUpdate.Revision, update.Revision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updateRevision := func(cr *apps.ControllerRevision, revision int64) *apps.ControllerRevision {
0000000000000000000000000000000000000000;;			obj, err := scheme.Scheme.DeepCopy(cr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			clone := obj.(*apps.ControllerRevision)
0000000000000000000000000000000000000000;;			clone.Revision = revision
0000000000000000000000000000000000000000;;			return clone
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		rev0 := newRevisionOrDie(set, 1)
0000000000000000000000000000000000000000;;		set1 := copySet(set)
0000000000000000000000000000000000000000;;		set1.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;		set1.Status.CurrentRevision = rev0.Name
0000000000000000000000000000000000000000;;		rev1 := newRevisionOrDie(set1, 2)
0000000000000000000000000000000000000000;;		set2 := copySet(set1)
0000000000000000000000000000000000000000;;		set2.Spec.Template.Labels["new"] = "label"
0000000000000000000000000000000000000000;;		set2.Status.CurrentRevision = rev0.Name
0000000000000000000000000000000000000000;;		rev2 := newRevisionOrDie(set2, 3)
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "creates initial revision",
0000000000000000000000000000000000000000;;				existing:        nil,
0000000000000000000000000000000000000000;;				set:             set,
0000000000000000000000000000000000000000;;				expectedCount:   1,
0000000000000000000000000000000000000000;;				expectedCurrent: rev0,
0000000000000000000000000000000000000000;;				expectedUpdate:  rev0,
0000000000000000000000000000000000000000;;				err:             false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "creates revision on update",
0000000000000000000000000000000000000000;;				existing:        []*apps.ControllerRevision{rev0},
0000000000000000000000000000000000000000;;				set:             set1,
0000000000000000000000000000000000000000;;				expectedCount:   2,
0000000000000000000000000000000000000000;;				expectedCurrent: rev0,
0000000000000000000000000000000000000000;;				expectedUpdate:  rev1,
0000000000000000000000000000000000000000;;				err:             false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "must not recreate a new revision of same set",
0000000000000000000000000000000000000000;;				existing:        []*apps.ControllerRevision{rev0, rev1},
0000000000000000000000000000000000000000;;				set:             set1,
0000000000000000000000000000000000000000;;				expectedCount:   2,
0000000000000000000000000000000000000000;;				expectedCurrent: rev0,
0000000000000000000000000000000000000000;;				expectedUpdate:  rev1,
0000000000000000000000000000000000000000;;				err:             false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "must rollback to a previous revision",
0000000000000000000000000000000000000000;;				existing:        []*apps.ControllerRevision{rev0, rev1, rev2},
0000000000000000000000000000000000000000;;				set:             set1,
0000000000000000000000000000000000000000;;				expectedCount:   3,
0000000000000000000000000000000000000000;;				expectedCurrent: rev0,
0000000000000000000000000000000000000000;;				expectedUpdate:  updateRevision(rev1, 4),
0000000000000000000000000000000000000000;;				err:             false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlRollingUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			invariants func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;			initial    func() *apps.StatefulSet
0000000000000000000000000000000000000000;;			update     func(set *apps.StatefulSet) *apps.StatefulSet
0000000000000000000000000000000000000000;;			validate   func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			set := test.initial()
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;			spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err := spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set = test.update(set)
0000000000000000000000000000000000000000;;			if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validate(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(5)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(5))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlOnDeleteUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			invariants      func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;			initial         func() *apps.StatefulSet
0000000000000000000000000000000000000000;;			update          func(set *apps.StatefulSet) *apps.StatefulSet
0000000000000000000000000000000000000000;;			validateUpdate  func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;			validateRestart func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		originalImage := newStatefulSet(3).Spec.Template.Spec.Containers[0].Image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			set := test.initial()
0000000000000000000000000000000000000000;;			set.Spec.UpdateStrategy = apps.StatefulSetUpdateStrategy{Type: apps.OnDeleteStatefulSetStrategyType}
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;			spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err := spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set = test.update(set)
0000000000000000000000000000000000000000;;			if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validateUpdate(set, pods); err != nil {
0000000000000000000000000000000000000000;;				for i := range pods {
0000000000000000000000000000000000000000;;					t.Log(pods[i].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			replicas := *set.Spec.Replicas
0000000000000000000000000000000000000000;;			*set.Spec.Replicas = 0
0000000000000000000000000000000000000000;;			if err := scaleDownStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*set.Spec.Replicas = replicas
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validateRestart(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 3 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 3 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(5)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 3 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 3 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(5))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRestart: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlRollingUpdateWithPartition(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			partition  int32
0000000000000000000000000000000000000000;;			invariants func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;			initial    func() *apps.StatefulSet
0000000000000000000000000000000000000000;;			update     func(set *apps.StatefulSet) *apps.StatefulSet
0000000000000000000000000000000000000000;;			validate   func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			set := test.initial()
0000000000000000000000000000000000000000;;			set.Spec.UpdateStrategy = apps.StatefulSetUpdateStrategy{
0000000000000000000000000000000000000000;;				Type: apps.RollingUpdateStatefulSetStrategyType,
0000000000000000000000000000000000000000;;				RollingUpdate: func() *apps.RollingUpdateStatefulSetStrategy {
0000000000000000000000000000000000000000;;					return &apps.RollingUpdateStatefulSetStrategy{Partition: &test.partition}
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;			spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err := spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set = test.update(set)
0000000000000000000000000000000000000000;;			if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validate(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		originalImage := newStatefulSet(3).Spec.Template.Spec.Containers[0].Image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				partition:  2,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 2 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 2 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale up",
0000000000000000000000000000000000000000;;				partition:  2,
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 2 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 2 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update",
0000000000000000000000000000000000000000;;				partition:  2,
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 2 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 2 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				partition:  2,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if i < 2 && pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if i >= 2 && pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlLimitsHistory(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			invariants func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;			initial    func() *apps.StatefulSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			set := test.initial()
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;			spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err := spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;				set.Spec.Template.Spec.Containers[0].Image = fmt.Sprintf("foo-%d", i)
0000000000000000000000000000000000000000;;				if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				err = ssc.UpdateStatefulSet(set, pods)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				revisions, err := ssc.ListRevisions(set)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(revisions) > int(*set.Spec.RevisionHistoryLimit)+2 {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %d greater than limit %d", test.name, len(revisions), *set.Spec.RevisionHistoryLimit)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic update",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst update",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetControlRollback(t *testing.T) {
0000000000000000000000000000000000000000;;		type testcase struct {
0000000000000000000000000000000000000000;;			name             string
0000000000000000000000000000000000000000;;			invariants       func(set *apps.StatefulSet, spc *fakeStatefulPodControl) error
0000000000000000000000000000000000000000;;			initial          func() *apps.StatefulSet
0000000000000000000000000000000000000000;;			update           func(set *apps.StatefulSet) *apps.StatefulSet
0000000000000000000000000000000000000000;;			validateUpdate   func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;			validateRollback func(set *apps.StatefulSet, pods []*v1.Pod) error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		originalImage := newStatefulSet(3).Spec.Template.Spec.Containers[0].Image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testFn := func(test *testcase, t *testing.T) {
0000000000000000000000000000000000000000;;			set := test.initial()
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(set)
0000000000000000000000000000000000000000;;			spc, _, ssc, stop := setupController(client)
0000000000000000000000000000000000000000;;			defer close(stop)
0000000000000000000000000000000000000000;;			if err := scaleUpStatefulSetControl(set, ssc, spc, test.invariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err := spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set = test.update(set)
0000000000000000000000000000000000000000;;			if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validateUpdate(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			revisions, err := ssc.ListRevisions(set)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			history.SortControllerRevisions(revisions)
0000000000000000000000000000000000000000;;			set, err = applyRevision(set, revisions[0])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := updateStatefulSetControl(set, ssc, spc, assertUpdateInvariants); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := test.validateRollback(set, pods); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %s", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []testcase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(3)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "monotonic image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertMonotonicInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return newStatefulSet(5)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale up",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(3))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 5
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "burst image update and scale down",
0000000000000000000000000000000000000000;;				invariants: assertBurstInvariants,
0000000000000000000000000000000000000000;;				initial: func() *apps.StatefulSet {
0000000000000000000000000000000000000000;;					return burst(newStatefulSet(5))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: func(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;					*set.Spec.Replicas = 3
0000000000000000000000000000000000000000;;					set.Spec.Template.Spec.Containers[0].Image = "foo"
0000000000000000000000000000000000000000;;					return set
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateUpdate: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != "foo" {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image foo found %s", pods[i].Name, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				validateRollback: func(set *apps.StatefulSet, pods []*v1.Pod) error {
0000000000000000000000000000000000000000;;					sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;					for i := range pods {
0000000000000000000000000000000000000000;;						if pods[i].Spec.Containers[0].Image != originalImage {
0000000000000000000000000000000000000000;;							return fmt.Errorf("want pod %s image %s found %s", pods[i].Name, originalImage, pods[i].Spec.Containers[0].Image)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			testFn(&tests[i], t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type requestTracker struct {
0000000000000000000000000000000000000000;;		requests int
0000000000000000000000000000000000000000;;		err      error
0000000000000000000000000000000000000000;;		after    int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rt *requestTracker) errorReady() bool {
0000000000000000000000000000000000000000;;		return rt.err != nil && rt.requests >= rt.after
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rt *requestTracker) inc() {
0000000000000000000000000000000000000000;;		rt.requests++
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rt *requestTracker) reset() {
0000000000000000000000000000000000000000;;		rt.err = nil
0000000000000000000000000000000000000000;;		rt.after = 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeStatefulPodControl struct {
0000000000000000000000000000000000000000;;		podsLister       corelisters.PodLister
0000000000000000000000000000000000000000;;		claimsLister     corelisters.PersistentVolumeClaimLister
0000000000000000000000000000000000000000;;		setsLister       appslisters.StatefulSetLister
0000000000000000000000000000000000000000;;		podsIndexer      cache.Indexer
0000000000000000000000000000000000000000;;		claimsIndexer    cache.Indexer
0000000000000000000000000000000000000000;;		setsIndexer      cache.Indexer
0000000000000000000000000000000000000000;;		createPodTracker requestTracker
0000000000000000000000000000000000000000;;		updatePodTracker requestTracker
0000000000000000000000000000000000000000;;		deletePodTracker requestTracker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeStatefulPodControl(podInformer coreinformers.PodInformer, setInformer appsinformers.StatefulSetInformer) *fakeStatefulPodControl {
0000000000000000000000000000000000000000;;		claimsIndexer := cache.NewIndexer(controller.KeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		return &fakeStatefulPodControl{
0000000000000000000000000000000000000000;;			podInformer.Lister(),
0000000000000000000000000000000000000000;;			corelisters.NewPersistentVolumeClaimLister(claimsIndexer),
0000000000000000000000000000000000000000;;			setInformer.Lister(),
0000000000000000000000000000000000000000;;			podInformer.Informer().GetIndexer(),
0000000000000000000000000000000000000000;;			claimsIndexer,
0000000000000000000000000000000000000000;;			setInformer.Informer().GetIndexer(),
0000000000000000000000000000000000000000;;			requestTracker{0, nil, 0},
0000000000000000000000000000000000000000;;			requestTracker{0, nil, 0},
0000000000000000000000000000000000000000;;			requestTracker{0, nil, 0}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) SetCreateStatefulPodError(err error, after int) {
0000000000000000000000000000000000000000;;		spc.createPodTracker.err = err
0000000000000000000000000000000000000000;;		spc.createPodTracker.after = after
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) SetUpdateStatefulPodError(err error, after int) {
0000000000000000000000000000000000000000;;		spc.updatePodTracker.err = err
0000000000000000000000000000000000000000;;		spc.updatePodTracker.after = after
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) SetDeleteStatefulPodError(err error, after int) {
0000000000000000000000000000000000000000;;		spc.deletePodTracker.err = err
0000000000000000000000000000000000000000;;		spc.deletePodTracker.after = after
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyPod(pod *v1.Pod) *v1.Pod {
0000000000000000000000000000000000000000;;		obj, err := api.Scheme.Copy(pod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.Pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copySet(set *apps.StatefulSet) *apps.StatefulSet {
0000000000000000000000000000000000000000;;		obj, err := scheme.Scheme.Copy(set)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) setPodPending(set *apps.StatefulSet, ordinal int) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if 0 > ordinal || ordinal >= len(pods) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ordinal %d out of range [0,%d)", ordinal, len(pods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		pod := copyPod(pods[ordinal])
0000000000000000000000000000000000000000;;		pod.Status.Phase = v1.PodPending
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) setPodRunning(set *apps.StatefulSet, ordinal int) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if 0 > ordinal || ordinal >= len(pods) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ordinal %d out of range [0,%d)", ordinal, len(pods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		pod := copyPod(pods[ordinal])
0000000000000000000000000000000000000000;;		pod.Status.Phase = v1.PodRunning
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) setPodReady(set *apps.StatefulSet, ordinal int) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if 0 > ordinal || ordinal >= len(pods) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ordinal %d out of range [0,%d)", ordinal, len(pods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		pod := copyPod(pods[ordinal])
0000000000000000000000000000000000000000;;		condition := v1.PodCondition{Type: v1.PodReady, Status: v1.ConditionTrue}
0000000000000000000000000000000000000000;;		podutil.UpdatePodCondition(&pod.Status, &condition)
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) setPodInitStatus(set *apps.StatefulSet, ordinal int, init bool) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if 0 > ordinal || ordinal >= len(pods) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ordinal %d out of range [0,%d)", ordinal, len(pods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		pod := copyPod(pods[ordinal])
0000000000000000000000000000000000000000;;		if init {
0000000000000000000000000000000000000000;;			pod.Annotations[apps.StatefulSetInitAnnotation] = "true"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			pod.Annotations[apps.StatefulSetInitAnnotation] = "false"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) addTerminatingPod(set *apps.StatefulSet, ordinal int) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, ordinal)
0000000000000000000000000000000000000000;;		pod.Status.Phase = v1.PodRunning
0000000000000000000000000000000000000000;;		deleted := metav1.NewTime(time.Now())
0000000000000000000000000000000000000000;;		pod.DeletionTimestamp = &deleted
0000000000000000000000000000000000000000;;		condition := v1.PodCondition{Type: v1.PodReady, Status: v1.ConditionTrue}
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		podutil.UpdatePodCondition(&pod.Status, &condition)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) setPodTerminated(set *apps.StatefulSet, ordinal int) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		pod := newStatefulSetPod(set, ordinal)
0000000000000000000000000000000000000000;;		deleted := metav1.NewTime(time.Now())
0000000000000000000000000000000000000000;;		pod.DeletionTimestamp = &deleted
0000000000000000000000000000000000000000;;		fakeResourceVersion(pod)
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) CreateStatefulPod(set *apps.StatefulSet, pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		defer spc.createPodTracker.inc()
0000000000000000000000000000000000000000;;		if spc.createPodTracker.errorReady() {
0000000000000000000000000000000000000000;;			defer spc.createPodTracker.reset()
0000000000000000000000000000000000000000;;			return spc.createPodTracker.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, claim := range getPersistentVolumeClaims(set, pod) {
0000000000000000000000000000000000000000;;			spc.claimsIndexer.Update(&claim)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) UpdateStatefulPod(set *apps.StatefulSet, pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		defer spc.updatePodTracker.inc()
0000000000000000000000000000000000000000;;		if spc.updatePodTracker.errorReady() {
0000000000000000000000000000000000000000;;			defer spc.updatePodTracker.reset()
0000000000000000000000000000000000000000;;			return spc.updatePodTracker.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !identityMatches(set, pod) {
0000000000000000000000000000000000000000;;			updateIdentity(set, pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !storageMatches(set, pod) {
0000000000000000000000000000000000000000;;			updateStorage(set, pod)
0000000000000000000000000000000000000000;;			for _, claim := range getPersistentVolumeClaims(set, pod) {
0000000000000000000000000000000000000000;;				spc.claimsIndexer.Update(&claim)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		spc.podsIndexer.Update(pod)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spc *fakeStatefulPodControl) DeleteStatefulPod(set *apps.StatefulSet, pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		defer spc.deletePodTracker.inc()
0000000000000000000000000000000000000000;;		if spc.deletePodTracker.errorReady() {
0000000000000000000000000000000000000000;;			defer spc.deletePodTracker.reset()
0000000000000000000000000000000000000000;;			return spc.deletePodTracker.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if key, err := controller.KeyFunc(pod); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if obj, found, err := spc.podsIndexer.GetByKey(key); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if found {
0000000000000000000000000000000000000000;;			spc.podsIndexer.Delete(obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StatefulPodControlInterface = &fakeStatefulPodControl{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeStatefulSetStatusUpdater struct {
0000000000000000000000000000000000000000;;		setsLister          appslisters.StatefulSetLister
0000000000000000000000000000000000000000;;		setsIndexer         cache.Indexer
0000000000000000000000000000000000000000;;		updateStatusTracker requestTracker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeStatefulSetStatusUpdater(setInformer appsinformers.StatefulSetInformer) *fakeStatefulSetStatusUpdater {
0000000000000000000000000000000000000000;;		return &fakeStatefulSetStatusUpdater{
0000000000000000000000000000000000000000;;			setInformer.Lister(),
0000000000000000000000000000000000000000;;			setInformer.Informer().GetIndexer(),
0000000000000000000000000000000000000000;;			requestTracker{0, nil, 0},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ssu *fakeStatefulSetStatusUpdater) UpdateStatefulSetStatus(set *apps.StatefulSet, status *apps.StatefulSetStatus) error {
0000000000000000000000000000000000000000;;		defer ssu.updateStatusTracker.inc()
0000000000000000000000000000000000000000;;		if ssu.updateStatusTracker.errorReady() {
0000000000000000000000000000000000000000;;			defer ssu.updateStatusTracker.reset()
0000000000000000000000000000000000000000;;			return ssu.updateStatusTracker.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		set.Status = *status
0000000000000000000000000000000000000000;;		ssu.setsIndexer.Update(set)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ssu *fakeStatefulSetStatusUpdater) SetUpdateStatefulSetStatusError(err error, after int) {
0000000000000000000000000000000000000000;;		ssu.updateStatusTracker.err = err
0000000000000000000000000000000000000000;;		ssu.updateStatusTracker.after = after
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StatefulSetStatusUpdaterInterface = &fakeStatefulSetStatusUpdater{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertMonotonicInvariants(set *apps.StatefulSet, spc *fakeStatefulPodControl) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		for ord := 0; ord < len(pods); ord++ {
0000000000000000000000000000000000000000;;			if ord > 0 && isRunningAndReady(pods[ord]) && !isRunningAndReady(pods[ord-1]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("Successor %s is Running and Ready while %s is not", pods[ord].Name, pods[ord-1].Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if getOrdinal(pods[ord]) != ord {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pods %s deployed in the wrong order %d", pods[ord].Name, ord)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !storageMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pods %s does not match the storage specification of StatefulSet %s ", pods[ord].Name, set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, claim := range getPersistentVolumeClaims(set, pods[ord]) {
0000000000000000000000000000000000000000;;				claim, err := spc.claimsLister.PersistentVolumeClaims(set.Namespace).Get(claim.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if claim == nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("claim %s for Pod %s was not created", claim.Name, pods[ord].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !identityMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pods %s does not match the identity specification of StatefulSet %s ", pods[ord].Name, set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertBurstInvariants(set *apps.StatefulSet, spc *fakeStatefulPodControl) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		for ord := 0; ord < len(pods); ord++ {
0000000000000000000000000000000000000000;;			if !storageMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pods %s does not match the storage specification of StatefulSet %s ", pods[ord].Name, set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, claim := range getPersistentVolumeClaims(set, pods[ord]) {
0000000000000000000000000000000000000000;;				claim, err := spc.claimsLister.PersistentVolumeClaims(set.Namespace).Get(claim.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if claim == nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("claim %s for Pod %s was not created", claim.Name, pods[ord].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !identityMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pods %s does not match the identity specification of StatefulSet %s ",
0000000000000000000000000000000000000000;;					pods[ord].Name,
0000000000000000000000000000000000000000;;					set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertUpdateInvariants(set *apps.StatefulSet, spc *fakeStatefulPodControl) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		for ord := 0; ord < len(pods); ord++ {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !storageMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pod %s does not match the storage specification of StatefulSet %s ", pods[ord].Name, set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, claim := range getPersistentVolumeClaims(set, pods[ord]) {
0000000000000000000000000000000000000000;;				claim, err := spc.claimsLister.PersistentVolumeClaims(set.Namespace).Get(claim.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if claim == nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("claim %s for Pod %s was not created", claim.Name, pods[ord].Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !identityMatches(set, pods[ord]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("pod %s does not match the identity specification of StatefulSet %s ", pods[ord].Name, set.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Spec.UpdateStrategy.Type == apps.OnDeleteStatefulSetStrategyType {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Spec.UpdateStrategy.Type == apps.RollingUpdateStatefulSetStrategyType {
0000000000000000000000000000000000000000;;			for i := 0; i < int(set.Status.CurrentReplicas) && i < len(pods); i++ {
0000000000000000000000000000000000000000;;				if want, got := set.Status.CurrentRevision, getPodRevision(pods[i]); want != got {
0000000000000000000000000000000000000000;;					return fmt.Errorf("pod %s want current revision %s got %s", pods[i].Name, want, got)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i, j := len(pods)-1, 0; j < int(set.Status.UpdatedReplicas); i, j = i-1, j+1 {
0000000000000000000000000000000000000000;;				if want, got := set.Status.UpdateRevision, getPodRevision(pods[i]); want != got {
0000000000000000000000000000000000000000;;					return fmt.Errorf("pod %s want update revision %s got %s", pods[i].Name, want, got)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeResourceVersion(object interface{}) {
0000000000000000000000000000000000000000;;		obj, isObj := object.(metav1.Object)
0000000000000000000000000000000000000000;;		if !isObj {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if version := obj.GetResourceVersion(); version == "" {
0000000000000000000000000000000000000000;;			obj.SetResourceVersion("1")
0000000000000000000000000000000000000000;;		} else if intValue, err := strconv.ParseInt(version, 10, 32); err == nil {
0000000000000000000000000000000000000000;;			obj.SetResourceVersion(strconv.FormatInt(intValue+1, 10))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleUpStatefulSetControl(set *apps.StatefulSet,
0000000000000000000000000000000000000000;;		ssc StatefulSetControlInterface,
0000000000000000000000000000000000000000;;		spc *fakeStatefulPodControl,
0000000000000000000000000000000000000000;;		invariants invariantFunc) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for set.Status.ReadyReplicas < *set.Spec.Replicas {
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// ensure all pods are valid (have a phase)
0000000000000000000000000000000000000000;;			initialized := false
0000000000000000000000000000000000000000;;			for ord, pod := range pods {
0000000000000000000000000000000000000000;;				if pod.Status.Phase == "" {
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodPending(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if initialized {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// select one of the pods and move it forward in status
0000000000000000000000000000000000000000;;			if len(pods) > 0 {
0000000000000000000000000000000000000000;;				ord := int(rand.Int63n(int64(len(pods))))
0000000000000000000000000000000000000000;;				pod := pods[ord]
0000000000000000000000000000000000000000;;				switch pod.Status.Phase {
0000000000000000000000000000000000000000;;				case v1.PodPending:
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodRunning(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case v1.PodRunning:
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodReady(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// run the controller once and check invariants
0000000000000000000000000000000000000000;;			if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return invariants(set, spc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleDownStatefulSetControl(set *apps.StatefulSet, ssc StatefulSetControlInterface, spc *fakeStatefulPodControl, invariants invariantFunc) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for set.Status.Replicas > *set.Spec.Replicas {
0000000000000000000000000000000000000000;;			pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;			if ordinal := len(pods) - 1; ordinal >= 0 {
0000000000000000000000000000000000000000;;				if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if pods, err = spc.addTerminatingPod(set, ordinal); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(pods) > 0 {
0000000000000000000000000000000000000000;;					spc.podsIndexer.Delete(pods[len(pods)-1])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return invariants(set, spc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func updateComplete(set *apps.StatefulSet, pods []*v1.Pod) bool {
0000000000000000000000000000000000000000;;		sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;		if len(pods) != int(*set.Spec.Replicas) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.ReadyReplicas != *set.Spec.Replicas {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch set.Spec.UpdateStrategy.Type {
0000000000000000000000000000000000000000;;		case apps.OnDeleteStatefulSetStrategyType:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case apps.RollingUpdateStatefulSetStrategyType:
0000000000000000000000000000000000000000;;			if set.Spec.UpdateStrategy.RollingUpdate == nil || *set.Spec.UpdateStrategy.RollingUpdate.Partition <= 0 {
0000000000000000000000000000000000000000;;				if set.Status.CurrentReplicas < *set.Spec.Replicas {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for i := range pods {
0000000000000000000000000000000000000000;;					if getPodRevision(pods[i]) != set.Status.CurrentRevision {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				partition := int(*set.Spec.UpdateStrategy.RollingUpdate.Partition)
0000000000000000000000000000000000000000;;				if len(pods) < partition {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for i := partition; i < len(pods); i++ {
0000000000000000000000000000000000000000;;					if getPodRevision(pods[i]) != set.Status.UpdateRevision {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func updateStatefulSetControl(set *apps.StatefulSet,
0000000000000000000000000000000000000000;;		ssc StatefulSetControlInterface,
0000000000000000000000000000000000000000;;		spc *fakeStatefulPodControl,
0000000000000000000000000000000000000000;;		invariants invariantFunc) error {
0000000000000000000000000000000000000000;;		selector, err := metav1.LabelSelectorAsSelector(set.Spec.Selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err := spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for !updateComplete(set, pods) {
0000000000000000000000000000000000000000;;			pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sort.Sort(ascendingOrdinal(pods))
0000000000000000000000000000000000000000;;			initialized := false
0000000000000000000000000000000000000000;;			for ord, pod := range pods {
0000000000000000000000000000000000000000;;				if pod.Status.Phase == "" {
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodPending(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if initialized {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(pods) > 0 {
0000000000000000000000000000000000000000;;				ord := int(rand.Int63n(int64(len(pods))))
0000000000000000000000000000000000000000;;				pod := pods[ord]
0000000000000000000000000000000000000000;;				switch pod.Status.Phase {
0000000000000000000000000000000000000000;;				case v1.PodPending:
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodRunning(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case v1.PodRunning:
0000000000000000000000000000000000000000;;					if pods, err = spc.setPodReady(set, ord); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err = ssc.UpdateStatefulSet(set, pods); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			set, err = spc.setsLister.StatefulSets(set.Namespace).Get(set.Name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := invariants(set, spc); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pods, err = spc.podsLister.Pods(set.Namespace).List(selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return invariants(set, spc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRevisionOrDie(set *apps.StatefulSet, revision int64) *apps.ControllerRevision {
0000000000000000000000000000000000000000;;		rev, err := newRevision(set, revision)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rev
0000000000000000000000000000000000000000;;	}
