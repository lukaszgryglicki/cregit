0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
867d12e2129e83804ebf2dac6e9736f1264d69f3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package statefulset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		appslisters "k8s.io/kubernetes/pkg/client/listers/apps/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetUpdaterUpdatesSetStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		status := apps.StatefulSetStatus{ObservedGeneration: func() *int64 {
0000000000000000000000000000000000000000;;			i := int64(1)
0000000000000000000000000000000000000000;;			return &i
0000000000000000000000000000000000000000;;		}(), Replicas: 2}
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		updater := NewRealStatefulSetStatusUpdater(fakeClient, nil)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "statefulsets", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := updater.UpdateStatefulSetStatus(set, &status); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error returned on successful status update: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("UpdateStatefulSetStatus mutated the sets replicas %d", set.Status.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetStatusUpdaterUpdatesObservedGeneration(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		status := apps.StatefulSetStatus{ObservedGeneration: func() *int64 {
0000000000000000000000000000000000000000;;			i := int64(3)
0000000000000000000000000000000000000000;;			return &i
0000000000000000000000000000000000000000;;		}(), Replicas: 2}
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		updater := NewRealStatefulSetStatusUpdater(fakeClient, nil)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "statefulsets", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			sts := update.GetObject().(*apps.StatefulSet)
0000000000000000000000000000000000000000;;			if sts.Status.ObservedGeneration == nil || *sts.Status.ObservedGeneration != int64(3) {
0000000000000000000000000000000000000000;;				t.Errorf("expected observedGeneration to be synced with generation for statefulset %q", sts.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, sts, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := updater.UpdateStatefulSetStatus(set, &status); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error returned on successful status update: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetStatusUpdaterUpdateReplicasFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		status := apps.StatefulSetStatus{ObservedGeneration: func() *int64 {
0000000000000000000000000000000000000000;;			i := int64(3)
0000000000000000000000000000000000000000;;			return &i
0000000000000000000000000000000000000000;;		}(), Replicas: 2}
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		indexer.Add(set)
0000000000000000000000000000000000000000;;		setLister := appslisters.NewStatefulSetLister(indexer)
0000000000000000000000000000000000000000;;		updater := NewRealStatefulSetStatusUpdater(fakeClient, setLister)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "statefulsets", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, apierrors.NewInternalError(errors.New("API server down"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := updater.UpdateStatefulSetStatus(set, &status); err == nil {
0000000000000000000000000000000000000000;;			t.Error("Failed update did not return error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetStatusUpdaterUpdateReplicasConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		status := apps.StatefulSetStatus{ObservedGeneration: func() *int64 {
0000000000000000000000000000000000000000;;			i := int64(3)
0000000000000000000000000000000000000000;;			return &i
0000000000000000000000000000000000000000;;		}(), Replicas: 2}
0000000000000000000000000000000000000000;;		conflict := false
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		indexer.Add(set)
0000000000000000000000000000000000000000;;		setLister := appslisters.NewStatefulSetLister(indexer)
0000000000000000000000000000000000000000;;		updater := NewRealStatefulSetStatusUpdater(fakeClient, setLister)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "statefulsets", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			if !conflict {
0000000000000000000000000000000000000000;;				conflict = true
0000000000000000000000000000000000000000;;				return true, update.GetObject(), apierrors.NewConflict(action.GetResource().GroupResource(), set.Name, errors.New("Object already exists"))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return true, update.GetObject(), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := updater.UpdateStatefulSetStatus(set, &status); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("UpdateStatefulSetStatus returned an error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if set.Status.Replicas != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("UpdateStatefulSetStatus mutated the sets replicas %d", set.Status.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatefulSetStatusUpdaterUpdateReplicasConflictFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		set := newStatefulSet(3)
0000000000000000000000000000000000000000;;		status := apps.StatefulSetStatus{ObservedGeneration: func() *int64 {
0000000000000000000000000000000000000000;;			i := int64(3)
0000000000000000000000000000000000000000;;			return &i
0000000000000000000000000000000000000000;;		}(), Replicas: 2}
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		indexer.Add(set)
0000000000000000000000000000000000000000;;		setLister := appslisters.NewStatefulSetLister(indexer)
0000000000000000000000000000000000000000;;		updater := NewRealStatefulSetStatusUpdater(fakeClient, setLister)
0000000000000000000000000000000000000000;;		fakeClient.AddReactor("update", "statefulsets", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			update := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			return true, update.GetObject(), apierrors.NewConflict(action.GetResource().GroupResource(), set.Name, errors.New("Object already exists"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err := updater.UpdateStatefulSetStatus(set, &status); err == nil {
0000000000000000000000000000000000000000;;			t.Error("UpdateStatefulSetStatus failed to return an error on get failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
