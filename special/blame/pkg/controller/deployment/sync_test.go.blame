0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
fc9c25ec1edeff3780e90faa04791ac7766e789e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		testclient "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		deploymentutil "k8s.io/kubernetes/pkg/controller/deployment/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func intOrStrP(val int) *intstr.IntOrString {
0000000000000000000000000000000000000000;;		intOrStr := intstr.FromInt(val)
0000000000000000000000000000000000000000;;		return &intOrStr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScale(t *testing.T) {
0000000000000000000000000000000000000000;;		newTimestamp := metav1.Date(2016, 5, 20, 2, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;		oldTimestamp := metav1.Date(2016, 5, 20, 1, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;		olderTimestamp := metav1.Date(2016, 5, 20, 0, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var updatedTemplate = func(replicas int) *extensions.Deployment {
0000000000000000000000000000000000000000;;			d := newDeployment("foo", replicas, nil, nil, nil, map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;			d.Spec.Template.Labels["another"] = "label"
0000000000000000000000000000000000000000;;			return d
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			deployment    *extensions.Deployment
0000000000000000000000000000000000000000;;			oldDeployment *extensions.Deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			newRS  *extensions.ReplicaSet
0000000000000000000000000000000000000000;;			oldRSs []*extensions.ReplicaSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedNew  *extensions.ReplicaSet
0000000000000000000000000000000000000000;;			expectedOld  []*extensions.ReplicaSet
0000000000000000000000000000000000000000;;			wasntUpdated map[string]bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			desiredReplicasAnnotations map[string]int32
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "normal scaling event: 10 -> 12",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 12, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 10, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v1", 10, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v1", 12, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "normal scaling event: 10 -> 5",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 10, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v1", 10, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v1", 5, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 5 -> 10",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 10, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v2", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 3, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 4, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 6, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 5 -> 3",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 3, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v2", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 3, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 1, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 2, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 9 -> 4",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 4, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 9, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v2", 8, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 1, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 4, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 0, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 7 -> 10",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 10, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 7, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 3, nil, oldTimestamp), rs("foo-v1", 2, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v3", 3, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 4, nil, oldTimestamp), rs("foo-v1", 3, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 13 -> 8",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 8, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 13, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 8, nil, oldTimestamp), rs("foo-v1", 3, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v3", 1, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 5, nil, oldTimestamp), rs("foo-v1", 2, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scales up the new replica set.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "leftover distribution: 3 -> 4",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 4, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 3, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 1, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 1, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v3", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 1, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scales down the older replica set.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "leftover distribution: 3 -> 2",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 2, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 3, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 1, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 1, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v3", 1, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 1, nil, oldTimestamp), rs("foo-v1", 0, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scales up the latest replica set first.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling (no new rs): 4 -> 5",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 4, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  nil,
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 2, nil, oldTimestamp), rs("foo-v1", 2, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: nil,
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 3, nil, oldTimestamp), rs("foo-v1", 2, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scales down to zero
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 6 -> 0",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 0, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 6, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 3, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 2, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v3", 0, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 0, nil, oldTimestamp), rs("foo-v1", 0, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scales up from zero
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "proportional scaling: 0 -> 6",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 6, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 6, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 0, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 0, nil, oldTimestamp), rs("foo-v1", 0, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew:  rs("foo-v3", 6, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld:  []*extensions.ReplicaSet{rs("foo-v2", 0, nil, oldTimestamp), rs("foo-v1", 0, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;				wasntUpdated: map[string]bool{"foo-v2": true, "foo-v1": true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Scenario: deployment.spec.replicas == 3 ( foo-v1.spec.replicas == foo-v2.spec.replicas == foo-v3.spec.replicas == 1 )
0000000000000000000000000000000000000000;;			// Deployment is scaled to 5. foo-v3.spec.replicas and foo-v2.spec.replicas should increment by 1 but foo-v2 fails to
0000000000000000000000000000000000000000;;			// update.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "failed rs update",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 5, nil, nil, nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v3", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 1, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew:  rs("foo-v3", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld:  []*extensions.ReplicaSet{rs("foo-v2", 2, nil, oldTimestamp), rs("foo-v1", 1, nil, olderTimestamp)},
0000000000000000000000000000000000000000;;				wasntUpdated: map[string]bool{"foo-v3": true, "foo-v1": true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				desiredReplicasAnnotations: map[string]int32{"foo-v2": int32(3)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "deployment with surge pods",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 20, nil, intOrStrP(2), nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 10, nil, intOrStrP(2), nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v2", 6, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 6, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 11, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 11, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "change both surge and size",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 50, nil, intOrStrP(6), nil, nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 10, nil, intOrStrP(3), nil, nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  rs("foo-v2", 5, nil, newTimestamp),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 8, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 22, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 34, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "change both size and template",
0000000000000000000000000000000000000000;;				deployment:    updatedTemplate(14),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 10, nil, nil, nil, map[string]string{"foo": "bar"}),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS:  nil,
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v2", 7, nil, newTimestamp), rs("foo-v1", 3, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: nil,
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v2", 10, nil, newTimestamp), rs("foo-v1", 4, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "saturated but broken new replica set does not affect old pods",
0000000000000000000000000000000000000000;;				deployment:    newDeployment("foo", 2, nil, intOrStrP(1), intOrStrP(1), nil),
0000000000000000000000000000000000000000;;				oldDeployment: newDeployment("foo", 2, nil, intOrStrP(1), intOrStrP(1), nil),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				newRS: func() *extensions.ReplicaSet {
0000000000000000000000000000000000000000;;					rs := rs("foo-v2", 2, nil, newTimestamp)
0000000000000000000000000000000000000000;;					rs.Status.AvailableReplicas = 0
0000000000000000000000000000000000000000;;					return rs
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{rs("foo-v1", 1, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedNew: rs("foo-v2", 2, nil, newTimestamp),
0000000000000000000000000000000000000000;;				expectedOld: []*extensions.ReplicaSet{rs("foo-v1", 1, nil, oldTimestamp)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			_ = olderTimestamp
0000000000000000000000000000000000000000;;			t.Log(test.name)
0000000000000000000000000000000000000000;;			fake := fake.Clientset{}
0000000000000000000000000000000000000000;;			dc := &DeploymentController{
0000000000000000000000000000000000000000;;				client:        &fake,
0000000000000000000000000000000000000000;;				eventRecorder: &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.newRS != nil {
0000000000000000000000000000000000000000;;				desiredReplicas := *(test.oldDeployment.Spec.Replicas)
0000000000000000000000000000000000000000;;				if desired, ok := test.desiredReplicasAnnotations[test.newRS.Name]; ok {
0000000000000000000000000000000000000000;;					desiredReplicas = desired
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				deploymentutil.SetReplicasAnnotations(test.newRS, desiredReplicas, desiredReplicas+deploymentutil.MaxSurge(*test.oldDeployment))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range test.oldRSs {
0000000000000000000000000000000000000000;;				rs := test.oldRSs[i]
0000000000000000000000000000000000000000;;				if rs == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				desiredReplicas := *(test.oldDeployment.Spec.Replicas)
0000000000000000000000000000000000000000;;				if desired, ok := test.desiredReplicasAnnotations[rs.Name]; ok {
0000000000000000000000000000000000000000;;					desiredReplicas = desired
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				deploymentutil.SetReplicasAnnotations(rs, desiredReplicas, desiredReplicas+deploymentutil.MaxSurge(*test.oldDeployment))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := dc.scale(test.deployment, test.newRS, test.oldRSs); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Construct the nameToSize map that will hold all the sizes we got our of tests
0000000000000000000000000000000000000000;;			// Skip updating the map if the replica set wasn't updated since there will be
0000000000000000000000000000000000000000;;			// no update action for it.
0000000000000000000000000000000000000000;;			nameToSize := make(map[string]int32)
0000000000000000000000000000000000000000;;			if test.newRS != nil {
0000000000000000000000000000000000000000;;				nameToSize[test.newRS.Name] = *(test.newRS.Spec.Replicas)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range test.oldRSs {
0000000000000000000000000000000000000000;;				rs := test.oldRSs[i]
0000000000000000000000000000000000000000;;				nameToSize[rs.Name] = *(rs.Spec.Replicas)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Get all the UPDATE actions and update nameToSize with all the updated sizes.
0000000000000000000000000000000000000000;;			for _, action := range fake.Actions() {
0000000000000000000000000000000000000000;;				rs := action.(testclient.UpdateAction).GetObject().(*extensions.ReplicaSet)
0000000000000000000000000000000000000000;;				if !test.wasntUpdated[rs.Name] {
0000000000000000000000000000000000000000;;					nameToSize[rs.Name] = *(rs.Spec.Replicas)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.expectedNew != nil && test.newRS != nil && *(test.expectedNew.Spec.Replicas) != nameToSize[test.newRS.Name] {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected new replicas: %d, got: %d", test.name, *(test.expectedNew.Spec.Replicas), nameToSize[test.newRS.Name])
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(test.expectedOld) != len(test.oldRSs) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %d old replica sets, got %d", test.name, len(test.expectedOld), len(test.oldRSs))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for n := range test.oldRSs {
0000000000000000000000000000000000000000;;				rs := test.oldRSs[n]
0000000000000000000000000000000000000000;;				expected := test.expectedOld[n]
0000000000000000000000000000000000000000;;				if *(expected.Spec.Replicas) != nameToSize[rs.Name] {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected old (%s) replicas: %d, got: %d", test.name, rs.Name, *(expected.Spec.Replicas), nameToSize[rs.Name])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentController_cleanupDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		selector := map[string]string{"foo": "bar"}
0000000000000000000000000000000000000000;;		alreadyDeleted := newRSWithStatus("foo-1", 0, 0, selector)
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;		alreadyDeleted.DeletionTimestamp = &now
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldRSs               []*extensions.ReplicaSet
0000000000000000000000000000000000000000;;			revisionHistoryLimit int32
0000000000000000000000000000000000000000;;			expectedDeletions    int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-1", 0, 0, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-2", 0, 0, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-3", 0, 0, selector),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				revisionHistoryLimit: 1,
0000000000000000000000000000000000000000;;				expectedDeletions:    2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Only delete the replica set with Spec.Replicas = Status.Replicas = 0.
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-1", 0, 0, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-2", 0, 1, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-3", 1, 0, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-4", 1, 1, selector),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				revisionHistoryLimit: 0,
0000000000000000000000000000000000000000;;				expectedDeletions:    1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-1", 0, 0, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-2", 0, 0, selector),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				revisionHistoryLimit: 0,
0000000000000000000000000000000000000000;;				expectedDeletions:    2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-1", 1, 1, selector),
0000000000000000000000000000000000000000;;					newRSWithStatus("foo-2", 1, 1, selector),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				revisionHistoryLimit: 0,
0000000000000000000000000000000000000000;;				expectedDeletions:    0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRSs: []*extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					alreadyDeleted,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				revisionHistoryLimit: 0,
0000000000000000000000000000000000000000;;				expectedDeletions:    0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			test := tests[i]
0000000000000000000000000000000000000000;;			t.Logf("scenario %d", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fake := &fake.Clientset{}
0000000000000000000000000000000000000000;;			informers := informers.NewSharedInformerFactory(fake, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			controller := NewDeploymentController(informers.Extensions().V1beta1().Deployments(), informers.Extensions().V1beta1().ReplicaSets(), informers.Core().V1().Pods(), fake)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			controller.eventRecorder = &record.FakeRecorder{}
0000000000000000000000000000000000000000;;			controller.dListerSynced = alwaysReady
0000000000000000000000000000000000000000;;			controller.rsListerSynced = alwaysReady
0000000000000000000000000000000000000000;;			controller.podListerSynced = alwaysReady
0000000000000000000000000000000000000000;;			for _, rs := range test.oldRSs {
0000000000000000000000000000000000000000;;				informers.Extensions().V1beta1().ReplicaSets().Informer().GetIndexer().Add(rs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stopCh)
0000000000000000000000000000000000000000;;			informers.Start(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			d := newDeployment("foo", 1, &test.revisionHistoryLimit, nil, nil, map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;			controller.cleanupDeployment(test.oldRSs, d)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			gotDeletions := 0
0000000000000000000000000000000000000000;;			for _, action := range fake.Actions() {
0000000000000000000000000000000000000000;;				if "delete" == action.GetVerb() {
0000000000000000000000000000000000000000;;					gotDeletions++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gotDeletions != test.expectedDeletions {
0000000000000000000000000000000000000000;;				t.Errorf("expect %v old replica sets been deleted, but got %v", test.expectedDeletions, gotDeletions)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
