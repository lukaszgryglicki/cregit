0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a695c77a7ca33952b30fc4500b6a877c413ed1ac;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/deployment/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDeploymentStatus(replicas, updatedReplicas, availableReplicas int32) extensions.DeploymentStatus {
0000000000000000000000000000000000000000;;		return extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;			Replicas:          replicas,
0000000000000000000000000000000000000000;;			UpdatedReplicas:   updatedReplicas,
0000000000000000000000000000000000000000;;			AvailableReplicas: availableReplicas,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// assumes the retuned deployment is always observed - not needed to be tested here.
0000000000000000000000000000000000000000;;	func currentDeployment(pds *int32, replicas, statusReplicas, updatedReplicas, availableReplicas int32, conditions []extensions.DeploymentCondition) *extensions.Deployment {
0000000000000000000000000000000000000000;;		d := &extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "progress-test",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				ProgressDeadlineSeconds: pds,
0000000000000000000000000000000000000000;;				Replicas:                &replicas,
0000000000000000000000000000000000000000;;				Strategy: extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;					Type: extensions.RecreateDeploymentStrategyType,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: newDeploymentStatus(statusReplicas, updatedReplicas, availableReplicas),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d.Status.Conditions = conditions
0000000000000000000000000000000000000000;;		return d
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRequeueStuckDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		pds := int32(60)
0000000000000000000000000000000000000000;;		failed := []extensions.DeploymentCondition{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type:   extensions.DeploymentProgressing,
0000000000000000000000000000000000000000;;				Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason: util.TimedOutReason,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stuck := []extensions.DeploymentCondition{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type:           extensions.DeploymentProgressing,
0000000000000000000000000000000000000000;;				Status:         v1.ConditionTrue,
0000000000000000000000000000000000000000;;				LastUpdateTime: metav1.Date(2017, 2, 15, 18, 49, 00, 00, time.UTC),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			d        *extensions.Deployment
0000000000000000000000000000000000000000;;			status   extensions.DeploymentStatus
0000000000000000000000000000000000000000;;			nowFn    func() time.Time
0000000000000000000000000000000000000000;;			expected time.Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no progressDeadlineSeconds specified",
0000000000000000000000000000000000000000;;				d:        currentDeployment(nil, 4, 3, 3, 2, nil),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 2),
0000000000000000000000000000000000000000;;				expected: time.Duration(-1),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no progressing condition found",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 4, 3, 3, 2, nil),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 2),
0000000000000000000000000000000000000000;;				expected: time.Duration(-1),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "complete deployment does not need to be requeued",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 3, nil),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 3),
0000000000000000000000000000000000000000;;				expected: time.Duration(-1),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "already failed deployment does not need to be requeued",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 0, failed),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 0),
0000000000000000000000000000000000000000;;				expected: time.Duration(-1),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "stuck deployment - 30s",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 49, 30, 00, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: 30 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "stuck deployment - 1s",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 49, 59, 00, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: 1 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "failed deployment - less than a second => now",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 49, 59, 1, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: time.Duration(0),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "failed deployment - now",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 50, 00, 00, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: time.Duration(0),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "failed deployment - 1s after deadline",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 50, 01, 00, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: time.Duration(0),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "failed deployment - 60s after deadline",
0000000000000000000000000000000000000000;;				d:        currentDeployment(&pds, 3, 3, 3, 1, stuck),
0000000000000000000000000000000000000000;;				status:   newDeploymentStatus(3, 3, 1),
0000000000000000000000000000000000000000;;				nowFn:    func() time.Time { return metav1.Date(2017, 2, 15, 18, 51, 00, 00, time.UTC).Time },
0000000000000000000000000000000000000000;;				expected: time.Duration(0),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dc := &DeploymentController{
0000000000000000000000000000000000000000;;			queue: workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "doesnt-matter"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dc.enqueueDeployment = dc.enqueue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if test.nowFn != nil {
0000000000000000000000000000000000000000;;				nowFn = test.nowFn
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got := dc.requeueStuckDeployment(test.d, test.status)
0000000000000000000000000000000000000000;;			if got != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s: got duration: %v, expected duration: %v", test.name, got, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
