0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
fc9c25ec1edeff3780e90faa04791ac7766e789e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentController_reconcileNewReplicaSet(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			deploymentReplicas  int
0000000000000000000000000000000000000000;;			maxSurge            intstr.IntOrString
0000000000000000000000000000000000000000;;			oldReplicas         int
0000000000000000000000000000000000000000;;			newReplicas         int
0000000000000000000000000000000000000000;;			scaleExpected       bool
0000000000000000000000000000000000000000;;			expectedNewReplicas int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Should not scale up.
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxSurge:           intstr.FromInt(0),
0000000000000000000000000000000000000000;;				oldReplicas:        10,
0000000000000000000000000000000000000000;;				newReplicas:        0,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxSurge:            intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedNewReplicas: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxSurge:            intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         5,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedNewReplicas: 7,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxSurge:           intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:        10,
0000000000000000000000000000000000000000;;				newReplicas:        2,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Should scale down.
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxSurge:            intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         2,
0000000000000000000000000000000000000000;;				newReplicas:         11,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedNewReplicas: 10,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			test := tests[i]
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			newRS := rs("foo-v2", test.newReplicas, nil, noTimestamp)
0000000000000000000000000000000000000000;;			oldRS := rs("foo-v2", test.oldReplicas, nil, noTimestamp)
0000000000000000000000000000000000000000;;			allRSs := []*extensions.ReplicaSet{newRS, oldRS}
0000000000000000000000000000000000000000;;			maxUnavailable := intstr.FromInt(0)
0000000000000000000000000000000000000000;;			deployment := newDeployment("foo", test.deploymentReplicas, nil, &test.maxSurge, &maxUnavailable, map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;			fake := fake.Clientset{}
0000000000000000000000000000000000000000;;			controller := &DeploymentController{
0000000000000000000000000000000000000000;;				client:        &fake,
0000000000000000000000000000000000000000;;				eventRecorder: &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			scaled, err := controller.reconcileNewReplicaSet(allRSs, newRS, deployment)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.scaleExpected {
0000000000000000000000000000000000000000;;				if scaled || len(fake.Actions()) > 0 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected scaling: %v", fake.Actions())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.scaleExpected && !scaled {
0000000000000000000000000000000000000000;;				t.Errorf("expected scaling to occur")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(fake.Actions()) != 1 {
0000000000000000000000000000000000000000;;				t.Errorf("expected 1 action during scale, got: %v", fake.Actions())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updated := fake.Actions()[0].(core.UpdateAction).GetObject().(*extensions.ReplicaSet)
0000000000000000000000000000000000000000;;			if e, a := test.expectedNewReplicas, int(*(updated.Spec.Replicas)); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected update to %d replicas, got %d", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentController_reconcileOldReplicaSets(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			deploymentReplicas  int
0000000000000000000000000000000000000000;;			maxUnavailable      intstr.IntOrString
0000000000000000000000000000000000000000;;			oldReplicas         int
0000000000000000000000000000000000000000;;			newReplicas         int
0000000000000000000000000000000000000000;;			readyPodsFromOldRS  int
0000000000000000000000000000000000000000;;			readyPodsFromNewRS  int
0000000000000000000000000000000000000000;;			scaleExpected       bool
0000000000000000000000000000000000000000;;			expectedOldReplicas int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(0),
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				readyPodsFromOldRS:  10,
0000000000000000000000000000000000000000;;				readyPodsFromNewRS:  0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 9,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				readyPodsFromOldRS:  10,
0000000000000000000000000000000000000000;;				readyPodsFromNewRS:  0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // expect unhealthy replicas from old replica sets been cleaned up
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				readyPodsFromOldRS:  8,
0000000000000000000000000000000000000000;;				readyPodsFromNewRS:  0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // expect 1 unhealthy replica from old replica sets been cleaned up, and 1 ready pod been scaled down
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				newReplicas:         0,
0000000000000000000000000000000000000000;;				readyPodsFromOldRS:  9,
0000000000000000000000000000000000000000;;				readyPodsFromNewRS:  0,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // the unavailable pods from the newRS would not make us scale down old RSs in a further step
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxUnavailable:     intstr.FromInt(2),
0000000000000000000000000000000000000000;;				oldReplicas:        8,
0000000000000000000000000000000000000000;;				newReplicas:        2,
0000000000000000000000000000000000000000;;				readyPodsFromOldRS: 8,
0000000000000000000000000000000000000000;;				readyPodsFromNewRS: 0,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			test := tests[i]
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			newSelector := map[string]string{"foo": "new"}
0000000000000000000000000000000000000000;;			oldSelector := map[string]string{"foo": "old"}
0000000000000000000000000000000000000000;;			newRS := rs("foo-new", test.newReplicas, newSelector, noTimestamp)
0000000000000000000000000000000000000000;;			newRS.Status.AvailableReplicas = int32(test.readyPodsFromNewRS)
0000000000000000000000000000000000000000;;			oldRS := rs("foo-old", test.oldReplicas, oldSelector, noTimestamp)
0000000000000000000000000000000000000000;;			oldRS.Status.AvailableReplicas = int32(test.readyPodsFromOldRS)
0000000000000000000000000000000000000000;;			oldRSs := []*extensions.ReplicaSet{oldRS}
0000000000000000000000000000000000000000;;			allRSs := []*extensions.ReplicaSet{oldRS, newRS}
0000000000000000000000000000000000000000;;			maxSurge := intstr.FromInt(0)
0000000000000000000000000000000000000000;;			deployment := newDeployment("foo", test.deploymentReplicas, nil, &maxSurge, &test.maxUnavailable, newSelector)
0000000000000000000000000000000000000000;;			fakeClientset := fake.Clientset{}
0000000000000000000000000000000000000000;;			controller := &DeploymentController{
0000000000000000000000000000000000000000;;				client:        &fakeClientset,
0000000000000000000000000000000000000000;;				eventRecorder: &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			scaled, err := controller.reconcileOldReplicaSets(allRSs, oldRSs, newRS, deployment)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.scaleExpected && scaled {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected scaling: %v", fakeClientset.Actions())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.scaleExpected && !scaled {
0000000000000000000000000000000000000000;;				t.Errorf("expected scaling to occur")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			continue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentController_cleanupUnhealthyReplicas(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldReplicas          int
0000000000000000000000000000000000000000;;			readyPods            int
0000000000000000000000000000000000000000;;			unHealthyPods        int
0000000000000000000000000000000000000000;;			maxCleanupCount      int
0000000000000000000000000000000000000000;;			cleanupCountExpected int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldReplicas:          10,
0000000000000000000000000000000000000000;;				readyPods:            8,
0000000000000000000000000000000000000000;;				unHealthyPods:        2,
0000000000000000000000000000000000000000;;				maxCleanupCount:      1,
0000000000000000000000000000000000000000;;				cleanupCountExpected: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldReplicas:          10,
0000000000000000000000000000000000000000;;				readyPods:            8,
0000000000000000000000000000000000000000;;				unHealthyPods:        2,
0000000000000000000000000000000000000000;;				maxCleanupCount:      3,
0000000000000000000000000000000000000000;;				cleanupCountExpected: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldReplicas:          10,
0000000000000000000000000000000000000000;;				readyPods:            8,
0000000000000000000000000000000000000000;;				unHealthyPods:        2,
0000000000000000000000000000000000000000;;				maxCleanupCount:      0,
0000000000000000000000000000000000000000;;				cleanupCountExpected: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldReplicas:          10,
0000000000000000000000000000000000000000;;				readyPods:            10,
0000000000000000000000000000000000000000;;				unHealthyPods:        0,
0000000000000000000000000000000000000000;;				maxCleanupCount:      3,
0000000000000000000000000000000000000000;;				cleanupCountExpected: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			oldRS := rs("foo-v2", test.oldReplicas, nil, noTimestamp)
0000000000000000000000000000000000000000;;			oldRS.Status.AvailableReplicas = int32(test.readyPods)
0000000000000000000000000000000000000000;;			oldRSs := []*extensions.ReplicaSet{oldRS}
0000000000000000000000000000000000000000;;			maxSurge := intstr.FromInt(2)
0000000000000000000000000000000000000000;;			maxUnavailable := intstr.FromInt(2)
0000000000000000000000000000000000000000;;			deployment := newDeployment("foo", 10, nil, &maxSurge, &maxUnavailable, nil)
0000000000000000000000000000000000000000;;			fakeClientset := fake.Clientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			controller := &DeploymentController{
0000000000000000000000000000000000000000;;				client:        &fakeClientset,
0000000000000000000000000000000000000000;;				eventRecorder: &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, cleanupCount, err := controller.cleanupUnhealthyReplicas(oldRSs, deployment, int32(test.maxCleanupCount))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if int(cleanupCount) != test.cleanupCountExpected {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v unhealthy replicas been cleaned up, got %v", test.cleanupCountExpected, cleanupCount)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentController_scaleDownOldReplicaSetsForRollingUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			deploymentReplicas  int
0000000000000000000000000000000000000000;;			maxUnavailable      intstr.IntOrString
0000000000000000000000000000000000000000;;			readyPods           int
0000000000000000000000000000000000000000;;			oldReplicas         int
0000000000000000000000000000000000000000;;			scaleExpected       bool
0000000000000000000000000000000000000000;;			expectedOldReplicas int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(0),
0000000000000000000000000000000000000000;;				readyPods:           10,
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 9,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas:  10,
0000000000000000000000000000000000000000;;				maxUnavailable:      intstr.FromInt(2),
0000000000000000000000000000000000000000;;				readyPods:           10,
0000000000000000000000000000000000000000;;				oldReplicas:         10,
0000000000000000000000000000000000000000;;				scaleExpected:       true,
0000000000000000000000000000000000000000;;				expectedOldReplicas: 8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxUnavailable:     intstr.FromInt(2),
0000000000000000000000000000000000000000;;				readyPods:          8,
0000000000000000000000000000000000000000;;				oldReplicas:        10,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxUnavailable:     intstr.FromInt(2),
0000000000000000000000000000000000000000;;				readyPods:          10,
0000000000000000000000000000000000000000;;				oldReplicas:        0,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				deploymentReplicas: 10,
0000000000000000000000000000000000000000;;				maxUnavailable:     intstr.FromInt(2),
0000000000000000000000000000000000000000;;				readyPods:          1,
0000000000000000000000000000000000000000;;				oldReplicas:        10,
0000000000000000000000000000000000000000;;				scaleExpected:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			test := tests[i]
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			oldRS := rs("foo-v2", test.oldReplicas, nil, noTimestamp)
0000000000000000000000000000000000000000;;			oldRS.Status.AvailableReplicas = int32(test.readyPods)
0000000000000000000000000000000000000000;;			allRSs := []*extensions.ReplicaSet{oldRS}
0000000000000000000000000000000000000000;;			oldRSs := []*extensions.ReplicaSet{oldRS}
0000000000000000000000000000000000000000;;			maxSurge := intstr.FromInt(0)
0000000000000000000000000000000000000000;;			deployment := newDeployment("foo", test.deploymentReplicas, nil, &maxSurge, &test.maxUnavailable, map[string]string{"foo": "bar"})
0000000000000000000000000000000000000000;;			fakeClientset := fake.Clientset{}
0000000000000000000000000000000000000000;;			controller := &DeploymentController{
0000000000000000000000000000000000000000;;				client:        &fakeClientset,
0000000000000000000000000000000000000000;;				eventRecorder: &record.FakeRecorder{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			scaled, err := controller.scaleDownOldReplicaSetsForRollingUpdate(allRSs, oldRSs, deployment)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.scaleExpected {
0000000000000000000000000000000000000000;;				if scaled != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected scaling: %v", fakeClientset.Actions())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.scaleExpected && scaled == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected scaling to occur; actions: %v", fakeClientset.Actions())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// There are both list and update actions logged, so extract the update
0000000000000000000000000000000000000000;;			// action for verification.
0000000000000000000000000000000000000000;;			var updateAction core.UpdateAction
0000000000000000000000000000000000000000;;			for _, action := range fakeClientset.Actions() {
0000000000000000000000000000000000000000;;				switch a := action.(type) {
0000000000000000000000000000000000000000;;				case core.UpdateAction:
0000000000000000000000000000000000000000;;					if updateAction != nil {
0000000000000000000000000000000000000000;;						t.Errorf("expected only 1 update action; had %v and found %v", updateAction, a)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						updateAction = a
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if updateAction == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected an update action")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updated := updateAction.GetObject().(*extensions.ReplicaSet)
0000000000000000000000000000000000000000;;			if e, a := test.expectedOldReplicas, int(*(updated.Spec.Replicas)); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected update to %d replicas, got %d", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
