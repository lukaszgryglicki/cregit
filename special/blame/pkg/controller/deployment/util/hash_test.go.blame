0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c36ad43aa86857f7aacbb350e9b294add2aadaec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"hash/adler32"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		hashutil "k8s.io/kubernetes/pkg/util/hash"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var podSpec string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "metadata": {
0000000000000000000000000000000000000000;;	        "creationTimestamp": null,
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	            "app": "cats"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "spec": {
0000000000000000000000000000000000000000;;	        "containers": [
0000000000000000000000000000000000000000;;	            {
0000000000000000000000000000000000000000;;	                "name": "cats",
0000000000000000000000000000000000000000;;	                "image": "registry/test/cats:v0.@@VERSION@@.0",
0000000000000000000000000000000000000000;;	                "ports": [
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                        "name": "http",
0000000000000000000000000000000000000000;;	                        "containerPort": 9077,
0000000000000000000000000000000000000000;;	                        "protocol": "TCP"
0000000000000000000000000000000000000000;;	                    }
0000000000000000000000000000000000000000;;	                ],
0000000000000000000000000000000000000000;;	                "env": [
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                        "name": "DEPLOYMENT_ENVIRONMENT",
0000000000000000000000000000000000000000;;	                        "value": "cats-stubbed-functional"
0000000000000000000000000000000000000000;;	                    },
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                        "name": "APP_NAME",
0000000000000000000000000000000000000000;;	                        "value": "cats"
0000000000000000000000000000000000000000;;	                    }
0000000000000000000000000000000000000000;;	                ],
0000000000000000000000000000000000000000;;	                "resources": {
0000000000000000000000000000000000000000;;	                    "limits": {
0000000000000000000000000000000000000000;;	                        "cpu": "1",
0000000000000000000000000000000000000000;;	                        "memory": "1Gi"
0000000000000000000000000000000000000000;;	                    },
0000000000000000000000000000000000000000;;	                    "requests": {
0000000000000000000000000000000000000000;;	                        "cpu": "1",
0000000000000000000000000000000000000000;;	                        "memory": "1Gi"
0000000000000000000000000000000000000000;;	                    }
0000000000000000000000000000000000000000;;	                },
0000000000000000000000000000000000000000;;	                "livenessProbe": {
0000000000000000000000000000000000000000;;	                    "httpGet": {
0000000000000000000000000000000000000000;;	                        "path": "/private/status",
0000000000000000000000000000000000000000;;	                        "port": 9077,
0000000000000000000000000000000000000000;;	                        "scheme": "HTTP"
0000000000000000000000000000000000000000;;	                    },
0000000000000000000000000000000000000000;;	                    "initialDelaySeconds": 30,
0000000000000000000000000000000000000000;;	                    "timeoutSeconds": 1,
0000000000000000000000000000000000000000;;	                    "periodSeconds": 10,
0000000000000000000000000000000000000000;;	                    "successThreshold": 1,
0000000000000000000000000000000000000000;;	                    "failureThreshold": 3
0000000000000000000000000000000000000000;;	                },
0000000000000000000000000000000000000000;;	                "readinessProbe": {
0000000000000000000000000000000000000000;;	                    "httpGet": {
0000000000000000000000000000000000000000;;	                        "path": "/private/status",
0000000000000000000000000000000000000000;;	                        "port": 9077,
0000000000000000000000000000000000000000;;	                        "scheme": "HTTP"
0000000000000000000000000000000000000000;;	                    },
0000000000000000000000000000000000000000;;	                    "initialDelaySeconds": 1,
0000000000000000000000000000000000000000;;	                    "timeoutSeconds": 1,
0000000000000000000000000000000000000000;;	                    "periodSeconds": 10,
0000000000000000000000000000000000000000;;	                    "successThreshold": 1,
0000000000000000000000000000000000000000;;	                    "failureThreshold": 3
0000000000000000000000000000000000000000;;	                },
0000000000000000000000000000000000000000;;	                "terminationMessagePath": "/dev/termination-log",
0000000000000000000000000000000000000000;;	                "imagePullPolicy": "IfNotPresent"
0000000000000000000000000000000000000000;;	            }
0000000000000000000000000000000000000000;;	        ],
0000000000000000000000000000000000000000;;	        "restartPolicy": "Always",
0000000000000000000000000000000000000000;;	        "terminationGracePeriodSeconds": 30,
0000000000000000000000000000000000000000;;	        "dnsPolicy": "ClusterFirst",
0000000000000000000000000000000000000000;;	        "securityContext": {}
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodTemplateSpecHash(t *testing.T) {
0000000000000000000000000000000000000000;;		seenHashes := make(map[uint32]int)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 1000; i++ {
0000000000000000000000000000000000000000;;			specJson := strings.Replace(podSpec, "@@VERSION@@", strconv.Itoa(i), 1)
0000000000000000000000000000000000000000;;			spec := v1.PodTemplateSpec{}
0000000000000000000000000000000000000000;;			json.Unmarshal([]byte(specJson), &spec)
0000000000000000000000000000000000000000;;			hash := controller.ComputeHash(&spec, nil)
0000000000000000000000000000000000000000;;			if v, ok := seenHashes[hash]; ok {
0000000000000000000000000000000000000000;;				t.Errorf("Hash collision, old: %d new: %d", v, i)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			seenHashes[hash] = i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkAdler(b *testing.B) {
0000000000000000000000000000000000000000;;		spec := v1.PodTemplateSpec{}
0000000000000000000000000000000000000000;;		json.Unmarshal([]byte(podSpec), &spec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			getPodTemplateSpecOldHash(spec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPodTemplateSpecOldHash(template v1.PodTemplateSpec) uint32 {
0000000000000000000000000000000000000000;;		podTemplateSpecHasher := adler32.New()
0000000000000000000000000000000000000000;;		hashutil.DeepHashObject(podTemplateSpecHasher, template)
0000000000000000000000000000000000000000;;		return podTemplateSpecHasher.Sum32()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkFnv(b *testing.B) {
0000000000000000000000000000000000000000;;		spec := v1.PodTemplateSpec{}
0000000000000000000000000000000000000000;;		json.Unmarshal([]byte(podSpec), &spec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			controller.ComputeHash(&spec, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
