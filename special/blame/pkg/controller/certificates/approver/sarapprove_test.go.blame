0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9ba3ca7bc838a35ad746d412037e5fb81902e272;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package approver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/ecdsa"
0000000000000000000000000000000000000000;;		"crypto/elliptic"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"crypto/x509/pkix"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorization "k8s.io/api/authorization/v1beta1"
0000000000000000000000000000000000000000;;		capi "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		testclient "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		k8s_certificates_v1beta1 "k8s.io/kubernetes/pkg/apis/certificates/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHasKubeletUsages(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			usages   []capi.KeyUsage
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				usages:   nil,
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				usages:   []capi.KeyUsage{},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				usages: []capi.KeyUsage{
0000000000000000000000000000000000000000;;					capi.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;					capi.UsageDigitalSignature,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				usages: []capi.KeyUsage{
0000000000000000000000000000000000000000;;					capi.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;					capi.UsageDigitalSignature,
0000000000000000000000000000000000000000;;					capi.UsageServerAuth,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				usages: []capi.KeyUsage{
0000000000000000000000000000000000000000;;					capi.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;					capi.UsageDigitalSignature,
0000000000000000000000000000000000000000;;					capi.UsageClientAuth,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			if hasExactUsages(&capi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;				Spec: capi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;					Usages: c.usages,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, kubeletClientUsages) != c.expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected result of hasKubeletUsages(%v), expecting: %v", c.usages, c.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandle(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			message    string
0000000000000000000000000000000000000000;;			allowed    bool
0000000000000000000000000000000000000000;;			recognized bool
0000000000000000000000000000000000000000;;			verify     func(*testing.T, []testclient.Action)
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				recognized: false,
0000000000000000000000000000000000000000;;				allowed:    false,
0000000000000000000000000000000000000000;;				verify: func(t *testing.T, as []testclient.Action) {
0000000000000000000000000000000000000000;;					if len(as) != 0 {
0000000000000000000000000000000000000000;;						t.Errorf("expected no client calls but got: %#v", as)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				recognized: false,
0000000000000000000000000000000000000000;;				allowed:    true,
0000000000000000000000000000000000000000;;				verify: func(t *testing.T, as []testclient.Action) {
0000000000000000000000000000000000000000;;					if len(as) != 0 {
0000000000000000000000000000000000000000;;						t.Errorf("expected no client calls but got: %#v", as)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				recognized: true,
0000000000000000000000000000000000000000;;				allowed:    false,
0000000000000000000000000000000000000000;;				verify: func(t *testing.T, as []testclient.Action) {
0000000000000000000000000000000000000000;;					if len(as) != 1 {
0000000000000000000000000000000000000000;;						t.Errorf("expected 1 call but got: %#v", as)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					_ = as[0].(testclient.CreateActionImpl)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				recognized: true,
0000000000000000000000000000000000000000;;				allowed:    true,
0000000000000000000000000000000000000000;;				verify: func(t *testing.T, as []testclient.Action) {
0000000000000000000000000000000000000000;;					if len(as) != 2 {
0000000000000000000000000000000000000000;;						t.Errorf("expected two calls but got: %#v", as)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					_ = as[0].(testclient.CreateActionImpl)
0000000000000000000000000000000000000000;;					a := as[1].(testclient.UpdateActionImpl)
0000000000000000000000000000000000000000;;					if got, expected := a.Verb, "update"; got != expected {
0000000000000000000000000000000000000000;;						t.Errorf("got: %v, expected: %v", got, expected)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if got, expected := a.Resource, (schema.GroupVersionResource{Group: "certificates.k8s.io", Version: "v1beta1", Resource: "certificatesigningrequests"}); got != expected {
0000000000000000000000000000000000000000;;						t.Errorf("got: %v, expected: %v", got, expected)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if got, expected := a.Subresource, "approval"; got != expected {
0000000000000000000000000000000000000000;;						t.Errorf("got: %v, expected: %v", got, expected)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					csr := a.Object.(*capi.CertificateSigningRequest)
0000000000000000000000000000000000000000;;					if len(csr.Status.Conditions) != 1 {
0000000000000000000000000000000000000000;;						t.Errorf("expected CSR to have approved condition: %#v", csr)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					c := csr.Status.Conditions[0]
0000000000000000000000000000000000000000;;					if got, expected := c.Type, capi.CertificateApproved; got != expected {
0000000000000000000000000000000000000000;;						t.Errorf("got: %v, expected: %v", got, expected)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if got, expected := c.Reason, "AutoApproved"; got != expected {
0000000000000000000000000000000000000000;;						t.Errorf("got: %v, expected: %v", got, expected)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			t.Run(fmt.Sprintf("recognized:%v,allowed: %v", c.recognized, c.allowed), func(t *testing.T) {
0000000000000000000000000000000000000000;;				client := &fake.Clientset{}
0000000000000000000000000000000000000000;;				client.AddReactor("create", "subjectaccessreviews", func(action testclient.Action) (handled bool, ret runtime.Object, err error) {
0000000000000000000000000000000000000000;;					return true, &authorization.SubjectAccessReview{
0000000000000000000000000000000000000000;;						Status: authorization.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;							Allowed: c.allowed,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}, nil
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				approver := sarApprover{
0000000000000000000000000000000000000000;;					client: client,
0000000000000000000000000000000000000000;;					recognizers: []csrRecognizer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							successMessage: "tester",
0000000000000000000000000000000000000000;;							permission:     authorization.ResourceAttributes{Group: "foo", Resource: "bar", Subresource: "baz"},
0000000000000000000000000000000000000000;;							recognize: func(csr *capi.CertificateSigningRequest, x509cr *x509.CertificateRequest) bool {
0000000000000000000000000000000000000000;;								return c.recognized
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				csr := makeTestCsr()
0000000000000000000000000000000000000000;;				if err := approver.handle(csr); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				c.verify(t, client.Actions())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelfNodeServerCertRecognizer(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultCSR := csrBuilder{
0000000000000000000000000000000000000000;;			cn:        "system:node:foo",
0000000000000000000000000000000000000000;;			orgs:      []string{"system:nodes"},
0000000000000000000000000000000000000000;;			requestor: "system:node:foo",
0000000000000000000000000000000000000000;;			usages: []capi.KeyUsage{
0000000000000000000000000000000000000000;;				capi.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;				capi.UsageDigitalSignature,
0000000000000000000000000000000000000000;;				capi.UsageServerAuth,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			dns: []string{"node"},
0000000000000000000000000000000000000000;;			ips: []net.IP{net.ParseIP("192.168.0.1")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			description     string
0000000000000000000000000000000000000000;;			csrBuilder      csrBuilder
0000000000000000000000000000000000000000;;			expectedOutcome bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description:     "Success - all requirements met",
0000000000000000000000000000000000000000;;				csrBuilder:      defaultCSR,
0000000000000000000000000000000000000000;;				expectedOutcome: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "No organization",
0000000000000000000000000000000000000000;;				csrBuilder: func(b csrBuilder) csrBuilder {
0000000000000000000000000000000000000000;;					b.orgs = []string{}
0000000000000000000000000000000000000000;;					return b
0000000000000000000000000000000000000000;;				}(defaultCSR),
0000000000000000000000000000000000000000;;				expectedOutcome: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "Wrong organization",
0000000000000000000000000000000000000000;;				csrBuilder: func(b csrBuilder) csrBuilder {
0000000000000000000000000000000000000000;;					b.orgs = append(b.orgs, "new-org")
0000000000000000000000000000000000000000;;					return b
0000000000000000000000000000000000000000;;				}(defaultCSR),
0000000000000000000000000000000000000000;;				expectedOutcome: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "Wrong usages",
0000000000000000000000000000000000000000;;				csrBuilder: func(b csrBuilder) csrBuilder {
0000000000000000000000000000000000000000;;					b.usages = []capi.KeyUsage{}
0000000000000000000000000000000000000000;;					return b
0000000000000000000000000000000000000000;;				}(defaultCSR),
0000000000000000000000000000000000000000;;				expectedOutcome: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "Wrong common name",
0000000000000000000000000000000000000000;;				csrBuilder: func(b csrBuilder) csrBuilder {
0000000000000000000000000000000000000000;;					b.cn = "wrong-common-name"
0000000000000000000000000000000000000000;;					return b
0000000000000000000000000000000000000000;;				}(defaultCSR),
0000000000000000000000000000000000000000;;				expectedOutcome: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			t.Run(tc.description, func(t *testing.T) {
0000000000000000000000000000000000000000;;				csr := makeFancyTestCsr(tc.csrBuilder)
0000000000000000000000000000000000000000;;				x509cr, err := k8s_certificates_v1beta1.ParseCSR(csr)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if isSelfNodeServerCert(csr, x509cr) != tc.expectedOutcome {
0000000000000000000000000000000000000000;;					t.Errorf("expected recognized to be %v", tc.expectedOutcome)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRecognizers(t *testing.T) {
0000000000000000000000000000000000000000;;		goodCases := []func(b *csrBuilder){
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testRecognizer(t, goodCases, isNodeClientCert, true)
0000000000000000000000000000000000000000;;		testRecognizer(t, goodCases, isSelfNodeClientCert, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badCases := []func(b *csrBuilder){
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.cn = "mike"
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.orgs = nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.orgs = []string{"system:master"}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.usages = append(b.usages, capi.UsageServerAuth)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testRecognizer(t, badCases, isNodeClientCert, false)
0000000000000000000000000000000000000000;;		testRecognizer(t, badCases, isSelfNodeClientCert, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cn different then requestor
0000000000000000000000000000000000000000;;		differentCN := []func(b *csrBuilder){
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.requestor = "joe"
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(b *csrBuilder) {
0000000000000000000000000000000000000000;;				b.cn = "system:node:bar"
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testRecognizer(t, differentCN, isNodeClientCert, true)
0000000000000000000000000000000000000000;;		testRecognizer(t, differentCN, isSelfNodeClientCert, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testRecognizer(t *testing.T, cases []func(b *csrBuilder), recognizeFunc func(csr *capi.CertificateSigningRequest, x509cr *x509.CertificateRequest) bool, shouldRecognize bool) {
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			b := csrBuilder{
0000000000000000000000000000000000000000;;				cn:        "system:node:foo",
0000000000000000000000000000000000000000;;				orgs:      []string{"system:nodes"},
0000000000000000000000000000000000000000;;				requestor: "system:node:foo",
0000000000000000000000000000000000000000;;				usages: []capi.KeyUsage{
0000000000000000000000000000000000000000;;					capi.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;					capi.UsageDigitalSignature,
0000000000000000000000000000000000000000;;					capi.UsageClientAuth,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c(&b)
0000000000000000000000000000000000000000;;			t.Run(fmt.Sprintf("csr:%#v", b), func(t *testing.T) {
0000000000000000000000000000000000000000;;				csr := makeFancyTestCsr(b)
0000000000000000000000000000000000000000;;				x509cr, err := k8s_certificates_v1beta1.ParseCSR(csr)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if recognizeFunc(csr, x509cr) != shouldRecognize {
0000000000000000000000000000000000000000;;					t.Errorf("expected recognized to be %v", shouldRecognize)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// noncryptographic for faster testing
0000000000000000000000000000000000000000;;	// DO NOT COPY THIS CODE
0000000000000000000000000000000000000000;;	var insecureRand = rand.New(rand.NewSource(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeTestCsr() *capi.CertificateSigningRequest {
0000000000000000000000000000000000000000;;		return makeFancyTestCsr(csrBuilder{cn: "test-cert"})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type csrBuilder struct {
0000000000000000000000000000000000000000;;		cn        string
0000000000000000000000000000000000000000;;		orgs      []string
0000000000000000000000000000000000000000;;		requestor string
0000000000000000000000000000000000000000;;		usages    []capi.KeyUsage
0000000000000000000000000000000000000000;;		dns       []string
0000000000000000000000000000000000000000;;		emails    []string
0000000000000000000000000000000000000000;;		ips       []net.IP
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeFancyTestCsr(b csrBuilder) *capi.CertificateSigningRequest {
0000000000000000000000000000000000000000;;		pk, err := ecdsa.GenerateKey(elliptic.P224(), insecureRand)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csrb, err := x509.CreateCertificateRequest(insecureRand, &x509.CertificateRequest{
0000000000000000000000000000000000000000;;			Subject: pkix.Name{
0000000000000000000000000000000000000000;;				CommonName:   b.cn,
0000000000000000000000000000000000000000;;				Organization: b.orgs,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			DNSNames:       b.dns,
0000000000000000000000000000000000000000;;			EmailAddresses: b.emails,
0000000000000000000000000000000000000000;;			IPAddresses:    b.ips,
0000000000000000000000000000000000000000;;		}, pk)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &capi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;			Spec: capi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;				Username: b.requestor,
0000000000000000000000000000000000000000;;				Usages:   b.usages,
0000000000000000000000000000000000000000;;				Request:  pem.EncodeToMemory(&pem.Block{Type: "CERTIFICATE REQUEST", Bytes: csrb}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
