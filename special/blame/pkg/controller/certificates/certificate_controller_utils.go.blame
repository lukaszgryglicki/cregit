0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
27b5d428bec958a21cb64d1fc6df08c0de20a888;pkg/controller/certificates/controller_utils.go[pkg/controller/certificates/controller_utils.go][pkg/controller/certificates/certificate_controller_utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package certificates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import certificates "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCertificateRequestApproved returns true if a certificate request has the
0000000000000000000000000000000000000000;;	// "Approved" condition and no "Denied" conditions; false otherwise.
0000000000000000000000000000000000000000;;	func IsCertificateRequestApproved(csr *certificates.CertificateSigningRequest) bool {
0000000000000000000000000000000000000000;;		approved, denied := GetCertApprovalCondition(&csr.Status)
0000000000000000000000000000000000000000;;		return approved && !denied
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCertApprovalCondition(status *certificates.CertificateSigningRequestStatus) (approved bool, denied bool) {
0000000000000000000000000000000000000000;;		for _, c := range status.Conditions {
0000000000000000000000000000000000000000;;			if c.Type == certificates.CertificateApproved {
0000000000000000000000000000000000000000;;				approved = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c.Type == certificates.CertificateDenied {
0000000000000000000000000000000000000000;;				denied = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
