0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2bf67432874dcc3fd484677974df259f6035c8a7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package certificates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certificates "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO flesh this out to cover things like not being able to find the csr in the cache, not
0000000000000000000000000000000000000000;;	// auto-approving, etc.
0000000000000000000000000000000000000000;;	func TestCertificateController(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		csr := &certificates.CertificateSigningRequest{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "test-csr",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(csr)
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(fake.NewSimpleClientset(csr), controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler := func(csr *certificates.CertificateSigningRequest) error {
0000000000000000000000000000000000000000;;			csr.Status.Conditions = append(csr.Status.Conditions, certificates.CertificateSigningRequestCondition{
0000000000000000000000000000000000000000;;				Type:    certificates.CertificateApproved,
0000000000000000000000000000000000000000;;				Reason:  "test reason",
0000000000000000000000000000000000000000;;				Message: "test message",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			_, err := client.Certificates().CertificateSigningRequests().UpdateApproval(csr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		controller, err := NewCertificateController(
0000000000000000000000000000000000000000;;			client,
0000000000000000000000000000000000000000;;			informerFactory.Certificates().V1beta1().CertificateSigningRequests(),
0000000000000000000000000000000000000000;;			handler,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating controller: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controller.csrsSynced = func() bool { return true }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		informerFactory.Start(stopCh)
0000000000000000000000000000000000000000;;		informerFactory.WaitForCacheSync(stopCh)
0000000000000000000000000000000000000000;;		wait.PollUntil(10*time.Millisecond, func() (bool, error) {
0000000000000000000000000000000000000000;;			return controller.queue.Len() >= 1, nil
0000000000000000000000000000000000000000;;		}, stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		controller.processNextWorkItem()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := client.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 actions")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a := actions[0]; !a.Matches("update", "certificatesigningrequests") ||
0000000000000000000000000000000000000000;;			a.GetSubresource() != "approval" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %#v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
