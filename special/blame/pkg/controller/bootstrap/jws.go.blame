0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jose "github.com/square/go-jose"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// computeDetachedSig takes content and token details and computes a detached
0000000000000000000000000000000000000000;;	// JWS signature.  This is described in Appendix F of RFC 7515.  Basically, this
0000000000000000000000000000000000000000;;	// is a regular JWS with the content part of the signature elided.
0000000000000000000000000000000000000000;;	func computeDetachedSig(content, tokenID, tokenSecret string) (string, error) {
0000000000000000000000000000000000000000;;		jwk := &jose.JsonWebKey{
0000000000000000000000000000000000000000;;			Key:   []byte(tokenSecret),
0000000000000000000000000000000000000000;;			KeyID: tokenID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signer, err := jose.NewSigner(jose.HS256, jwk)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("can't make a HS256 signer from the given token: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jws, err := signer.Sign([]byte(content))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("can't HS256-sign the given token: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fullSig, err := jws.CompactSerialize()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("can't serialize the given token: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return stripContent(fullSig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stripContent will remove the content part of a compact JWS
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The `go-jose` library doesn't support generating signatures with "detatched"
0000000000000000000000000000000000000000;;	// content. To make up for this we take the full compact signature, break it
0000000000000000000000000000000000000000;;	// apart and put it back together without the content section.
0000000000000000000000000000000000000000;;	func stripContent(fullSig string) (string, error) {
0000000000000000000000000000000000000000;;		parts := strings.Split(fullSig, ".")
0000000000000000000000000000000000000000;;		if len(parts) != 3 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("compact JWS format must have three parts")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return parts[0] + ".." + parts[2], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachedTokenIsValid checks whether a given detached JWS-encoded token matches JWS output of the given content and token
0000000000000000000000000000000000000000;;	func DetachedTokenIsValid(detachedToken, content, tokenID, tokenSecret string) bool {
0000000000000000000000000000000000000000;;		newToken, err := computeDetachedSig(content, tokenID, tokenSecret)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return detachedToken == newToken
0000000000000000000000000000000000000000;;	}
