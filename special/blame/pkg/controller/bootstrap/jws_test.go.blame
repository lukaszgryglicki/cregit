0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		content = "Hello from the other side. I must have called a thousand times."
0000000000000000000000000000000000000000;;		secret  = "my voice is my passcode"
0000000000000000000000000000000000000000;;		id      = "joshua"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestComputeDetachedSig(t *testing.T) {
0000000000000000000000000000000000000000;;		sig, err := computeDetachedSig(content, id, secret)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error when computing signature: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sig != "eyJhbGciOiJIUzI1NiIsImtpZCI6Impvc2h1YSJ9..VShe2taLd-YTrmWuRkcL_8QTNDHYxQIEBsAYYiIj1_8" {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong signature. Got: %v", sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Try with null content
0000000000000000000000000000000000000000;;		sig, err = computeDetachedSig("", id, secret)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error when computing signature: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sig != "eyJhbGciOiJIUzI1NiIsImtpZCI6Impvc2h1YSJ9..7Ui1ALizW4jXphVUB7xUqC9vLYLL9RZeOFfVLoB7Tgk" {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong signature. Got: %v", sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Try with no secret
0000000000000000000000000000000000000000;;		sig, err = computeDetachedSig(content, id, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error when computing signature: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sig != "eyJhbGciOiJIUzI1NiIsImtpZCI6Impvc2h1YSJ9..UfkqvDGiIFxrMnFseDj9LYJOLNrvjW8aHhF71mvvAs8" {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong signature. Got: %v", sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDetachedTokenIsValid(t *testing.T) {
0000000000000000000000000000000000000000;;		// Valid detached JWS token and valid inputs should succeed
0000000000000000000000000000000000000000;;		sig := "eyJhbGciOiJIUzI1NiIsImtpZCI6Impvc2h1YSJ9..VShe2taLd-YTrmWuRkcL_8QTNDHYxQIEBsAYYiIj1_8"
0000000000000000000000000000000000000000;;		if !DetachedTokenIsValid(sig, content, id, secret) {
0000000000000000000000000000000000000000;;			t.Errorf("Content %q and token \"%s:%s\" should equal signature: %q", content, id, secret, sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Invalid detached JWS token and valid inputs should fail
0000000000000000000000000000000000000000;;		sig2 := sig + "foo"
0000000000000000000000000000000000000000;;		if DetachedTokenIsValid(sig2, content, id, secret) {
0000000000000000000000000000000000000000;;			t.Errorf("Content %q and token \"%s:%s\" should not equal signature: %q", content, id, secret, sig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
