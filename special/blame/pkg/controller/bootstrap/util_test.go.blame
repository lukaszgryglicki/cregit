0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		givenTokenID     = "abc123"
0000000000000000000000000000000000000000;;		givenTokenID2    = "def456"
0000000000000000000000000000000000000000;;		givenTokenSecret = "tokenSecret"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func timeString(delta time.Duration) string {
0000000000000000000000000000000000000000;;		return time.Now().Add(delta).Format(time.RFC3339)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSecretForSigning(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			description string
0000000000000000000000000000000000000000;;			tokenID     string
0000000000000000000000000000000000000000;;			tokenSecret string
0000000000000000000000000000000000000000;;			okToSign    string
0000000000000000000000000000000000000000;;			expiration  string
0000000000000000000000000000000000000000;;			valid       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with no exp",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "true", "", true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with valid exp",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "true", timeString(time.Hour), true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Expired signing token",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "true", timeString(-time.Hour), false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with bad exp",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "true", "garbage", false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token without signing bit",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "", "garbage", false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with bad signing bit",
0000000000000000000000000000000000000000;;				givenTokenID, givenTokenSecret, "", "", false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with no ID",
0000000000000000000000000000000000000000;;				"", givenTokenSecret, "true", "", false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Signing token with no secret",
0000000000000000000000000000000000000000;;				givenTokenID, "", "true", "", false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			secret := &v1.Secret{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace:       metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;					Name:            bootstrapapi.BootstrapTokenSecretPrefix + givenTokenID,
0000000000000000000000000000000000000000;;					ResourceVersion: "1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Type: bootstrapapi.SecretTypeBootstrapToken,
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					bootstrapapi.BootstrapTokenIDKey:           []byte(tc.tokenID),
0000000000000000000000000000000000000000;;					bootstrapapi.BootstrapTokenSecretKey:       []byte(tc.tokenSecret),
0000000000000000000000000000000000000000;;					bootstrapapi.BootstrapTokenUsageSigningKey: []byte(tc.okToSign),
0000000000000000000000000000000000000000;;					bootstrapapi.BootstrapTokenExpirationKey:   []byte(tc.expiration),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			tokenID, tokenSecret, ok := validateSecretForSigning(secret)
0000000000000000000000000000000000000000;;			if ok != tc.valid {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Unexpected validation failure. Expected %v, got %v", tc.description, tc.valid, ok)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				if tokenID != tc.tokenID {
0000000000000000000000000000000000000000;;					t.Errorf("%s: Unexpected Token ID. Expected %q, got %q", tc.description, givenTokenID, tokenID)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if tokenSecret != tc.tokenSecret {
0000000000000000000000000000000000000000;;					t.Errorf("%s: Unexpected Token Secret. Expected %q, got %q", tc.description, givenTokenSecret, tokenSecret)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		secret := &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;				Name:            bootstrapapi.BootstrapTokenSecretPrefix + givenTokenID,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: bootstrapapi.SecretTypeBootstrapToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenIDKey:           []byte(givenTokenID),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenSecretKey:       []byte(givenTokenSecret),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenUsageSigningKey: []byte("true"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenID, tokenSecret, ok := validateSecretForSigning(secret)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected validation failure.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tokenID != givenTokenID {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected Token ID. Expected %q, got %q", givenTokenID, tokenID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tokenSecret != givenTokenSecret {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected Token Secret. Expected %q, got %q", givenTokenSecret, tokenSecret)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadSecretName(t *testing.T) {
0000000000000000000000000000000000000000;;		secret := &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;				Name:            givenTokenID,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: bootstrapapi.SecretTypeBootstrapToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenIDKey:           []byte(givenTokenID),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenSecretKey:       []byte(givenTokenSecret),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenUsageSigningKey: []byte("true"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, ok := validateSecretForSigning(secret)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Errorf("Token validation should fail with bad name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMismatchSecretName(t *testing.T) {
0000000000000000000000000000000000000000;;		secret := &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;				Name:            bootstrapapi.BootstrapTokenSecretPrefix + givenTokenID2,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: bootstrapapi.SecretTypeBootstrapToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenIDKey:           []byte(givenTokenID),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenSecretKey:       []byte(givenTokenSecret),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenUsageSigningKey: []byte("true"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, ok := validateSecretForSigning(secret)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Errorf("Token validation should fail with mismatched name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseSecretName(t *testing.T) {
0000000000000000000000000000000000000000;;		tokenID, ok := parseSecretName("bootstrap-token-abc123")
0000000000000000000000000000000000000000;;		assert.True(t, ok, "parseSecretName should accept valid name")
0000000000000000000000000000000000000000;;		assert.Equal(t, "abc123", tokenID, "parseSecretName should return token ID")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject blank name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("abc123")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject with no prefix")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("bootstrap-token-")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject no token ID")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("bootstrap-token-abc")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject short token ID")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("bootstrap-token-abc123ghi")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject long token ID")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = parseSecretName("bootstrap-token-ABC123")
0000000000000000000000000000000000000000;;		assert.False(t, ok, "parseSecretName should reject invalid token ID")
0000000000000000000000000000000000000000;;	}
