0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
14af9b074c46233485a041c80b0d6c2f6b59fedf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenCleanerOptions contains options for the TokenCleaner
0000000000000000000000000000000000000000;;	type TokenCleanerOptions struct {
0000000000000000000000000000000000000000;;		// TokenSecretNamespace string is the namespace for token Secrets.
0000000000000000000000000000000000000000;;		TokenSecretNamespace string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SecretResync is the time.Duration at which to fully re-list secrets.
0000000000000000000000000000000000000000;;		// If zero, re-list will be delayed as long as possible
0000000000000000000000000000000000000000;;		SecretResync time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultTokenCleanerOptions returns a set of default options for creating a
0000000000000000000000000000000000000000;;	// TokenCleaner
0000000000000000000000000000000000000000;;	func DefaultTokenCleanerOptions() TokenCleanerOptions {
0000000000000000000000000000000000000000;;		return TokenCleanerOptions{
0000000000000000000000000000000000000000;;			TokenSecretNamespace: api.NamespaceSystem,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenCleaner is a controller that deletes expired tokens
0000000000000000000000000000000000000000;;	type TokenCleaner struct {
0000000000000000000000000000000000000000;;		tokenSecretNamespace string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client clientset.Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secrets           cache.Store
0000000000000000000000000000000000000000;;		secretsController cache.Controller
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTokenCleaner returns a new *NewTokenCleaner.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO: Switch to shared informers
0000000000000000000000000000000000000000;;	func NewTokenCleaner(cl clientset.Interface, options TokenCleanerOptions) *TokenCleaner {
0000000000000000000000000000000000000000;;		e := &TokenCleaner{
0000000000000000000000000000000000000000;;			client:               cl,
0000000000000000000000000000000000000000;;			tokenSecretNamespace: options.TokenSecretNamespace,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cl.Core().RESTClient().GetRateLimiter() != nil {
0000000000000000000000000000000000000000;;			metrics.RegisterMetricAndTrackRateLimiterUsage("token_cleaner", cl.Core().RESTClient().GetRateLimiter())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secretSelector := fields.SelectorFromSet(map[string]string{api.SecretTypeField: string(bootstrapapi.SecretTypeBootstrapToken)})
0000000000000000000000000000000000000000;;		e.secrets, e.secretsController = cache.NewInformer(
0000000000000000000000000000000000000000;;			&cache.ListWatch{
0000000000000000000000000000000000000000;;				ListFunc: func(lo metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;					lo.FieldSelector = secretSelector.String()
0000000000000000000000000000000000000000;;					return e.client.Core().Secrets(e.tokenSecretNamespace).List(lo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(lo metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;					lo.FieldSelector = secretSelector.String()
0000000000000000000000000000000000000000;;					return e.client.Core().Secrets(e.tokenSecretNamespace).Watch(lo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&v1.Secret{},
0000000000000000000000000000000000000000;;			options.SecretResync,
0000000000000000000000000000000000000000;;			cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;				AddFunc:    e.evalSecret,
0000000000000000000000000000000000000000;;				UpdateFunc: func(oldSecret, newSecret interface{}) { e.evalSecret(newSecret) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run runs controller loops and returns when they are done
0000000000000000000000000000000000000000;;	func (tc *TokenCleaner) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		go tc.secretsController.Run(stopCh)
0000000000000000000000000000000000000000;;		go wait.Until(tc.evalSecrets, 10*time.Second, stopCh)
0000000000000000000000000000000000000000;;		<-stopCh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *TokenCleaner) evalSecrets() {
0000000000000000000000000000000000000000;;		for _, obj := range tc.secrets.List() {
0000000000000000000000000000000000000000;;			tc.evalSecret(obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *TokenCleaner) evalSecret(o interface{}) {
0000000000000000000000000000000000000000;;		secret := o.(*v1.Secret)
0000000000000000000000000000000000000000;;		if isSecretExpired(secret) {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Deleting expired secret %s/%s", secret.Namespace, secret.Name)
0000000000000000000000000000000000000000;;			var options *metav1.DeleteOptions
0000000000000000000000000000000000000000;;			if len(secret.UID) > 0 {
0000000000000000000000000000000000000000;;				options = &metav1.DeleteOptions{Preconditions: &metav1.Preconditions{UID: &secret.UID}}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := tc.client.Core().Secrets(secret.Namespace).Delete(secret.Name, options)
0000000000000000000000000000000000000000;;			// NotFound isn't a real error (it's already been deleted)
0000000000000000000000000000000000000000;;			// Conflict isn't a real error (the UID precondition failed)
0000000000000000000000000000000000000000;;			if err != nil && !apierrors.IsConflict(err) && !apierrors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				glog.V(3).Infof("Error deleting Secret: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
