0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var namePattern = `^` + regexp.QuoteMeta(bootstrapapi.BootstrapTokenSecretPrefix) + `([a-z0-9]{6})$`
0000000000000000000000000000000000000000;;	var nameRegExp = regexp.MustCompile(namePattern)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getSecretString gets a string value from a secret.  If there is an error or
0000000000000000000000000000000000000000;;	// if the key doesn't exist, an empty string is returned.
0000000000000000000000000000000000000000;;	func getSecretString(secret *v1.Secret, key string) string {
0000000000000000000000000000000000000000;;		data, ok := secret.Data[key]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return string(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseSecretName parses the name of the secret to extract the secret ID.
0000000000000000000000000000000000000000;;	func parseSecretName(name string) (secretID string, ok bool) {
0000000000000000000000000000000000000000;;		r := nameRegExp.FindStringSubmatch(name)
0000000000000000000000000000000000000000;;		if r == nil {
0000000000000000000000000000000000000000;;			return "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r[1], true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateSecretForSigning(secret *v1.Secret) (tokenID, tokenSecret string, ok bool) {
0000000000000000000000000000000000000000;;		nameTokenID, ok := parseSecretName(secret.Name)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Invalid secret name: %s. Must be of form %s<secret-id>.", secret.Name, bootstrapapi.BootstrapTokenSecretPrefix)
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenID = getSecretString(secret, bootstrapapi.BootstrapTokenIDKey)
0000000000000000000000000000000000000000;;		if len(tokenID) == 0 {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("No %s key in %s/%s Secret", bootstrapapi.BootstrapTokenIDKey, secret.Namespace, secret.Name)
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if nameTokenID != tokenID {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Token ID (%s) doesn't match secret name: %s", tokenID, nameTokenID)
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenSecret = getSecretString(secret, bootstrapapi.BootstrapTokenSecretKey)
0000000000000000000000000000000000000000;;		if len(tokenSecret) == 0 {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("No %s key in %s/%s Secret", bootstrapapi.BootstrapTokenSecretKey, secret.Namespace, secret.Name)
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ensure this secret hasn't expired.  The TokenCleaner should remove this
0000000000000000000000000000000000000000;;		// but if that isn't working or it hasn't gotten there yet we should check
0000000000000000000000000000000000000000;;		// here.
0000000000000000000000000000000000000000;;		if isSecretExpired(secret) {
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure this secret can be used for signing
0000000000000000000000000000000000000000;;		okToSign := getSecretString(secret, bootstrapapi.BootstrapTokenUsageSigningKey)
0000000000000000000000000000000000000000;;		if okToSign != "true" {
0000000000000000000000000000000000000000;;			return "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tokenID, tokenSecret, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isSecretExpired returns true if the Secret is expired.
0000000000000000000000000000000000000000;;	func isSecretExpired(secret *v1.Secret) bool {
0000000000000000000000000000000000000000;;		expiration := getSecretString(secret, bootstrapapi.BootstrapTokenExpirationKey)
0000000000000000000000000000000000000000;;		if len(expiration) > 0 {
0000000000000000000000000000000000000000;;			expTime, err2 := time.Parse(time.RFC3339, expiration)
0000000000000000000000000000000000000000;;			if err2 != nil {
0000000000000000000000000000000000000000;;				glog.V(3).Infof("Unparseable expiration time (%s) in %s/%s Secret: %v. Treating as expired.",
0000000000000000000000000000000000000000;;					expiration, secret.Namespace, secret.Name, err2)
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if time.Now().After(expTime) {
0000000000000000000000000000000000000000;;				glog.V(3).Infof("Expired bootstrap token in %s/%s Secret: %v",
0000000000000000000000000000000000000000;;					secret.Namespace, secret.Name, expiration)
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
