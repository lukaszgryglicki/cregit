0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTokenSecret(tokenID, tokenSecret string) *v1.Secret {
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;				Name:            bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: bootstrapapi.SecretTypeBootstrapToken,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenIDKey:     []byte(tokenID),
0000000000000000000000000000000000000000;;				bootstrapapi.BootstrapTokenSecretKey: []byte(tokenSecret),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addSecretExpiration(s *v1.Secret, expiration string) {
0000000000000000000000000000000000000000;;		s.Data[bootstrapapi.BootstrapTokenExpirationKey] = []byte(expiration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addSecretSigningUsage(s *v1.Secret, value string) {
0000000000000000000000000000000000000000;;		s.Data[bootstrapapi.BootstrapTokenUsageSigningKey] = []byte(value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyActions(t *testing.T, expected, actual []core.Action) {
0000000000000000000000000000000000000000;;		for i, a := range actual {
0000000000000000000000000000000000000000;;			if len(expected) < i+1 {
0000000000000000000000000000000000000000;;				t.Errorf("%d unexpected actions: %s", len(actual)-len(expected), spew.Sdump(actual[i:]))
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			e := expected[i]
0000000000000000000000000000000000000000;;			if !helper.Semantic.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected\n\t%s\ngot\n\t%s", spew.Sdump(e), spew.Sdump(a))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(expected) > len(actual) {
0000000000000000000000000000000000000000;;			t.Errorf("%d additional expected actions", len(expected)-len(actual))
0000000000000000000000000000000000000000;;			for _, a := range expected[len(actual):] {
0000000000000000000000000000000000000000;;				t.Logf("    %s", spew.Sdump(a))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
