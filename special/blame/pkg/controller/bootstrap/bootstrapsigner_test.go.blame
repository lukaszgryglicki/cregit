0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2a84c6190bb3aa2af7100b9f3d97ab4d02e91ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		spew.Config.DisableMethods = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const testTokenID = "abc123"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBootstrapSigner() (*BootstrapSigner, *fake.Clientset) {
0000000000000000000000000000000000000000;;		options := DefaultBootstrapSignerOptions()
0000000000000000000000000000000000000000;;		cl := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		return NewBootstrapSigner(cl, options), cl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newConfigMap(tokenID, signature string) *v1.ConfigMap {
0000000000000000000000000000000000000000;;		ret := &v1.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespacePublic,
0000000000000000000000000000000000000000;;				Name:            bootstrapapi.ConfigMapClusterInfo,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				bootstrapapi.KubeConfigKey: "payload",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(tokenID) > 0 {
0000000000000000000000000000000000000000;;			ret.Data[bootstrapapi.JWSSignatureKeyPrefix+tokenID] = signature
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoConfigMap(t *testing.T) {
0000000000000000000000000000000000000000;;		signer, cl := newBootstrapSigner()
0000000000000000000000000000000000000000;;		signer.signConfigMap()
0000000000000000000000000000000000000000;;		verifyActions(t, []core.Action{}, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSimpleSign(t *testing.T) {
0000000000000000000000000000000000000000;;		signer, cl := newBootstrapSigner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cm := newConfigMap("", "")
0000000000000000000000000000000000000000;;		signer.configMaps.Add(cm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret(testTokenID, "tokenSecret")
0000000000000000000000000000000000000000;;		addSecretSigningUsage(secret, "true")
0000000000000000000000000000000000000000;;		signer.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signer.signConfigMap()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{
0000000000000000000000000000000000000000;;			core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "configmaps"},
0000000000000000000000000000000000000000;;				api.NamespacePublic,
0000000000000000000000000000000000000000;;				newConfigMap(testTokenID, "eyJhbGciOiJIUzI1NiIsImtpZCI6ImFiYzEyMyJ9..QSxpUG7Q542CirTI2ECPSZjvBOJURUW5a7XqFpNI958")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoSignNeeded(t *testing.T) {
0000000000000000000000000000000000000000;;		signer, cl := newBootstrapSigner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cm := newConfigMap(testTokenID, "eyJhbGciOiJIUzI1NiIsImtpZCI6ImFiYzEyMyJ9..QSxpUG7Q542CirTI2ECPSZjvBOJURUW5a7XqFpNI958")
0000000000000000000000000000000000000000;;		signer.configMaps.Add(cm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret(testTokenID, "tokenSecret")
0000000000000000000000000000000000000000;;		addSecretSigningUsage(secret, "true")
0000000000000000000000000000000000000000;;		signer.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signer.signConfigMap()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, []core.Action{}, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSignature(t *testing.T) {
0000000000000000000000000000000000000000;;		signer, cl := newBootstrapSigner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cm := newConfigMap(testTokenID, "old signature")
0000000000000000000000000000000000000000;;		signer.configMaps.Add(cm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret(testTokenID, "tokenSecret")
0000000000000000000000000000000000000000;;		addSecretSigningUsage(secret, "true")
0000000000000000000000000000000000000000;;		signer.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signer.signConfigMap()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{
0000000000000000000000000000000000000000;;			core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "configmaps"},
0000000000000000000000000000000000000000;;				api.NamespacePublic,
0000000000000000000000000000000000000000;;				newConfigMap(testTokenID, "eyJhbGciOiJIUzI1NiIsImtpZCI6ImFiYzEyMyJ9..QSxpUG7Q542CirTI2ECPSZjvBOJURUW5a7XqFpNI958")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRemoveSignature(t *testing.T) {
0000000000000000000000000000000000000000;;		signer, cl := newBootstrapSigner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cm := newConfigMap(testTokenID, "old signature")
0000000000000000000000000000000000000000;;		signer.configMaps.Add(cm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signer.signConfigMap()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{
0000000000000000000000000000000000000000;;			core.NewUpdateAction(schema.GroupVersionResource{Version: "v1", Resource: "configmaps"},
0000000000000000000000000000000000000000;;				api.NamespacePublic,
0000000000000000000000000000000000000000;;				newConfigMap("", "")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
