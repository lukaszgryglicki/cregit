0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
14af9b074c46233485a041c80b0d6c2f6b59fedf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		spew.Config.DisableMethods = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTokenCleaner() (*TokenCleaner, *fake.Clientset) {
0000000000000000000000000000000000000000;;		options := DefaultTokenCleanerOptions()
0000000000000000000000000000000000000000;;		cl := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		return NewTokenCleaner(cl, options), cl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCleanerNoExpiration(t *testing.T) {
0000000000000000000000000000000000000000;;		cleaner, cl := newTokenCleaner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret("tokenID", "tokenSecret")
0000000000000000000000000000000000000000;;		cleaner.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cleaner.evalSecret(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCleanerExpired(t *testing.T) {
0000000000000000000000000000000000000000;;		cleaner, cl := newTokenCleaner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret("tokenID", "tokenSecret")
0000000000000000000000000000000000000000;;		addSecretExpiration(secret, timeString(-time.Hour))
0000000000000000000000000000000000000000;;		cleaner.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cleaner.evalSecret(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{
0000000000000000000000000000000000000000;;			core.NewDeleteAction(
0000000000000000000000000000000000000000;;				schema.GroupVersionResource{Version: "v1", Resource: "secrets"},
0000000000000000000000000000000000000000;;				api.NamespaceSystem,
0000000000000000000000000000000000000000;;				secret.ObjectMeta.Name),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCleanerNotExpired(t *testing.T) {
0000000000000000000000000000000000000000;;		cleaner, cl := newTokenCleaner()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := newTokenSecret("tokenID", "tokenSecret")
0000000000000000000000000000000000000000;;		addSecretExpiration(secret, timeString(time.Hour))
0000000000000000000000000000000000000000;;		cleaner.secrets.Add(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cleaner.evalSecret(secret)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []core.Action{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyActions(t, expected, cl.Actions())
0000000000000000000000000000000000000000;;	}
