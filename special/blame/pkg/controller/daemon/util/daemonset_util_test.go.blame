0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dc0d1ce87b32085e21a9a3fc772c13b688361403;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(podName string, nodeName string, label map[string]string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{APIVersion: testapi.Extensions.GroupVersion().String()},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels:    label,
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: nodeName,
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Image: "foo/bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Name = podName
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsPodUpdated(t *testing.T) {
0000000000000000000000000000000000000000;;		templateGeneration := int64(12345)
0000000000000000000000000000000000000000;;		hash := "55555"
0000000000000000000000000000000000000000;;		labels := map[string]string{extensions.DaemonSetTemplateGenerationKey: fmt.Sprint(templateGeneration), extensions.DefaultDaemonSetUniqueLabelKey: hash}
0000000000000000000000000000000000000000;;		labelsNoHash := map[string]string{extensions.DaemonSetTemplateGenerationKey: fmt.Sprint(templateGeneration)}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			test               string
0000000000000000000000000000000000000000;;			templateGeneration int64
0000000000000000000000000000000000000000;;			pod                *v1.Pod
0000000000000000000000000000000000000000;;			hash               string
0000000000000000000000000000000000000000;;			isUpdated          bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration and hash both match",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labels),
0000000000000000000000000000000000000000;;				hash,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration matches, hash doesn't",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labels),
0000000000000000000000000000000000000000;;				hash + "123",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration matches, no hash label, has hash",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labelsNoHash),
0000000000000000000000000000000000000000;;				hash,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration matches, no hash label, no hash",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labelsNoHash),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration matches, has hash label, no hash",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labels),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration doesn't match, hash does",
0000000000000000000000000000000000000000;;				templateGeneration + 1,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labels),
0000000000000000000000000000000000000000;;				hash,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"templateGeneration and hash don't match",
0000000000000000000000000000000000000000;;				templateGeneration + 1,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", labels),
0000000000000000000000000000000000000000;;				hash + "123",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty labels, no hash",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", map[string]string{}),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty labels",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", map[string]string{}),
0000000000000000000000000000000000000000;;				hash,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"no labels",
0000000000000000000000000000000000000000;;				templateGeneration,
0000000000000000000000000000000000000000;;				newPod("pod1", "node1", nil),
0000000000000000000000000000000000000000;;				hash,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			updated := IsPodUpdated(test.templateGeneration, test.pod, test.hash)
0000000000000000000000000000000000000000;;			if updated != test.isUpdated {
0000000000000000000000000000000000000000;;				t.Errorf("%s: IsPodUpdated returned wrong value. Expected %t, got %t", test.test, test.isUpdated, updated)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreatePodTemplate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			templateGeneration int64
0000000000000000000000000000000000000000;;			hash               string
0000000000000000000000000000000000000000;;			expectUniqueLabel  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{int64(1), "", false},
0000000000000000000000000000000000000000;;			{int64(2), "3242341807", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			podTemplateSpec := v1.PodTemplateSpec{}
0000000000000000000000000000000000000000;;			newPodTemplate := CreatePodTemplate(podTemplateSpec, test.templateGeneration, test.hash)
0000000000000000000000000000000000000000;;			val, exists := newPodTemplate.ObjectMeta.Labels[extensions.DaemonSetTemplateGenerationKey]
0000000000000000000000000000000000000000;;			if !exists || val != fmt.Sprint(test.templateGeneration) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected podTemplateSpec to have generation label value: %d, got: %s", test.templateGeneration, val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			val, exists = newPodTemplate.ObjectMeta.Labels[extensions.DefaultDaemonSetUniqueLabelKey]
0000000000000000000000000000000000000000;;			if test.expectUniqueLabel && (!exists || val != test.hash) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected podTemplateSpec to have hash label value: %s, got: %s", test.hash, val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectUniqueLabel && exists {
0000000000000000000000000000000000000000;;				t.Errorf("Expected podTemplateSpec to have no hash label, got: %s", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
