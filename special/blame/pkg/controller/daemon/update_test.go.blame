0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dc0d1ce87b32085e21a9a3fc772c13b688361403;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package daemon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDaemonSetUpdatesPods(t *testing.T) {
0000000000000000000000000000000000000000;;		ds := newDaemonSet("foo")
0000000000000000000000000000000000000000;;		manager, podControl, _ := newTestController(ds)
0000000000000000000000000000000000000000;;		maxUnavailable := 2
0000000000000000000000000000000000000000;;		addNodes(manager.nodeStore, 0, 5, nil)
0000000000000000000000000000000000000000;;		manager.dsStore.Add(ds)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 5, 0, 0)
0000000000000000000000000000000000000000;;		markPodsReady(podControl.podStore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds.Spec.Template.Spec.Containers[0].Image = "foo2/bar2"
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.Type = extensions.RollingUpdateDaemonSetStrategyType
0000000000000000000000000000000000000000;;		intStr := intstr.FromInt(maxUnavailable)
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;		ds.Spec.TemplateGeneration++
0000000000000000000000000000000000000000;;		manager.dsStore.Update(ds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, maxUnavailable, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, maxUnavailable, 0, 0)
0000000000000000000000000000000000000000;;		markPodsReady(podControl.podStore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, maxUnavailable, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, maxUnavailable, 0, 0)
0000000000000000000000000000000000000000;;		markPodsReady(podControl.podStore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 1, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 1, 0, 0)
0000000000000000000000000000000000000000;;		markPodsReady(podControl.podStore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 0, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDaemonSetUpdatesWhenNewPosIsNotReady(t *testing.T) {
0000000000000000000000000000000000000000;;		ds := newDaemonSet("foo")
0000000000000000000000000000000000000000;;		manager, podControl, _ := newTestController(ds)
0000000000000000000000000000000000000000;;		maxUnavailable := 3
0000000000000000000000000000000000000000;;		addNodes(manager.nodeStore, 0, 5, nil)
0000000000000000000000000000000000000000;;		manager.dsStore.Add(ds)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 5, 0, 0)
0000000000000000000000000000000000000000;;		markPodsReady(podControl.podStore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds.Spec.Template.Spec.Containers[0].Image = "foo2/bar2"
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.Type = extensions.RollingUpdateDaemonSetStrategyType
0000000000000000000000000000000000000000;;		intStr := intstr.FromInt(maxUnavailable)
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;		ds.Spec.TemplateGeneration++
0000000000000000000000000000000000000000;;		manager.dsStore.Update(ds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// new pods are not ready numUnavailable == maxUnavailable
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, maxUnavailable, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, maxUnavailable, 0, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 0, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDaemonSetUpdatesAllOldPodsNotReady(t *testing.T) {
0000000000000000000000000000000000000000;;		ds := newDaemonSet("foo")
0000000000000000000000000000000000000000;;		manager, podControl, _ := newTestController(ds)
0000000000000000000000000000000000000000;;		maxUnavailable := 3
0000000000000000000000000000000000000000;;		addNodes(manager.nodeStore, 0, 5, nil)
0000000000000000000000000000000000000000;;		manager.dsStore.Add(ds)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 5, 0, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds.Spec.Template.Spec.Containers[0].Image = "foo2/bar2"
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.Type = extensions.RollingUpdateDaemonSetStrategyType
0000000000000000000000000000000000000000;;		intStr := intstr.FromInt(maxUnavailable)
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;		ds.Spec.TemplateGeneration++
0000000000000000000000000000000000000000;;		manager.dsStore.Update(ds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// all old pods are unavailable so should be removed
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 5, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 5, 0, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 0, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDaemonSetUpdatesNoTemplateChanged(t *testing.T) {
0000000000000000000000000000000000000000;;		ds := newDaemonSet("foo")
0000000000000000000000000000000000000000;;		manager, podControl, _ := newTestController(ds)
0000000000000000000000000000000000000000;;		maxUnavailable := 3
0000000000000000000000000000000000000000;;		addNodes(manager.nodeStore, 0, 5, nil)
0000000000000000000000000000000000000000;;		manager.dsStore.Add(ds)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 5, 0, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.Type = extensions.RollingUpdateDaemonSetStrategyType
0000000000000000000000000000000000000000;;		intStr := intstr.FromInt(maxUnavailable)
0000000000000000000000000000000000000000;;		ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;		manager.dsStore.Update(ds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// template is not changed no pod should be removed
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;		syncAndValidateDaemonSets(t, manager, ds, podControl, 0, 0, 0)
0000000000000000000000000000000000000000;;		clearExpectations(t, manager, ds, podControl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetUnavailableNumbers(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;			Manager        *daemonSetsController
0000000000000000000000000000000000000000;;			ds             *extensions.DaemonSet
0000000000000000000000000000000000000000;;			nodeToPods     map[string][]*v1.Pod
0000000000000000000000000000000000000000;;			maxUnavailable int
0000000000000000000000000000000000000000;;			numUnavailable int
0000000000000000000000000000000000000000;;			Err            error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "No nodes",
0000000000000000000000000000000000000000;;				Manager: func() *daemonSetsController {
0000000000000000000000000000000000000000;;					manager, _, _ := newTestController()
0000000000000000000000000000000000000000;;					return manager
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				ds: func() *extensions.DaemonSet {
0000000000000000000000000000000000000000;;					ds := newDaemonSet("x")
0000000000000000000000000000000000000000;;					intStr := intstr.FromInt(0)
0000000000000000000000000000000000000000;;					ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;					return ds
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				nodeToPods:     make(map[string][]*v1.Pod),
0000000000000000000000000000000000000000;;				maxUnavailable: 0,
0000000000000000000000000000000000000000;;				numUnavailable: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Two nodes with ready pods",
0000000000000000000000000000000000000000;;				Manager: func() *daemonSetsController {
0000000000000000000000000000000000000000;;					manager, _, _ := newTestController()
0000000000000000000000000000000000000000;;					addNodes(manager.nodeStore, 0, 2, nil)
0000000000000000000000000000000000000000;;					return manager
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				ds: func() *extensions.DaemonSet {
0000000000000000000000000000000000000000;;					ds := newDaemonSet("x")
0000000000000000000000000000000000000000;;					intStr := intstr.FromInt(1)
0000000000000000000000000000000000000000;;					ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;					return ds
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				nodeToPods: func() map[string][]*v1.Pod {
0000000000000000000000000000000000000000;;					mapping := make(map[string][]*v1.Pod)
0000000000000000000000000000000000000000;;					pod0 := newPod("pod-0", "node-0", simpleDaemonSetLabel, nil)
0000000000000000000000000000000000000000;;					pod1 := newPod("pod-1", "node-1", simpleDaemonSetLabel, nil)
0000000000000000000000000000000000000000;;					markPodReady(pod0)
0000000000000000000000000000000000000000;;					markPodReady(pod1)
0000000000000000000000000000000000000000;;					mapping["node-0"] = []*v1.Pod{pod0}
0000000000000000000000000000000000000000;;					mapping["node-1"] = []*v1.Pod{pod1}
0000000000000000000000000000000000000000;;					return mapping
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				maxUnavailable: 1,
0000000000000000000000000000000000000000;;				numUnavailable: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Two nodes, one node without pods",
0000000000000000000000000000000000000000;;				Manager: func() *daemonSetsController {
0000000000000000000000000000000000000000;;					manager, _, _ := newTestController()
0000000000000000000000000000000000000000;;					addNodes(manager.nodeStore, 0, 2, nil)
0000000000000000000000000000000000000000;;					return manager
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				ds: func() *extensions.DaemonSet {
0000000000000000000000000000000000000000;;					ds := newDaemonSet("x")
0000000000000000000000000000000000000000;;					intStr := intstr.FromInt(0)
0000000000000000000000000000000000000000;;					ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;					return ds
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				nodeToPods: func() map[string][]*v1.Pod {
0000000000000000000000000000000000000000;;					mapping := make(map[string][]*v1.Pod)
0000000000000000000000000000000000000000;;					pod0 := newPod("pod-0", "node-0", simpleDaemonSetLabel, nil)
0000000000000000000000000000000000000000;;					markPodReady(pod0)
0000000000000000000000000000000000000000;;					mapping["node-0"] = []*v1.Pod{pod0}
0000000000000000000000000000000000000000;;					return mapping
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				maxUnavailable: 0,
0000000000000000000000000000000000000000;;				numUnavailable: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "Two nodes with pods, MaxUnavailable in percents",
0000000000000000000000000000000000000000;;				Manager: func() *daemonSetsController {
0000000000000000000000000000000000000000;;					manager, _, _ := newTestController()
0000000000000000000000000000000000000000;;					addNodes(manager.nodeStore, 0, 2, nil)
0000000000000000000000000000000000000000;;					return manager
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				ds: func() *extensions.DaemonSet {
0000000000000000000000000000000000000000;;					ds := newDaemonSet("x")
0000000000000000000000000000000000000000;;					intStr := intstr.FromString("50%")
0000000000000000000000000000000000000000;;					ds.Spec.UpdateStrategy.RollingUpdate = &extensions.RollingUpdateDaemonSet{MaxUnavailable: &intStr}
0000000000000000000000000000000000000000;;					return ds
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				nodeToPods: func() map[string][]*v1.Pod {
0000000000000000000000000000000000000000;;					mapping := make(map[string][]*v1.Pod)
0000000000000000000000000000000000000000;;					pod0 := newPod("pod-0", "node-0", simpleDaemonSetLabel, nil)
0000000000000000000000000000000000000000;;					pod1 := newPod("pod-1", "node-1", simpleDaemonSetLabel, nil)
0000000000000000000000000000000000000000;;					markPodReady(pod0)
0000000000000000000000000000000000000000;;					markPodReady(pod1)
0000000000000000000000000000000000000000;;					mapping["node-0"] = []*v1.Pod{pod0}
0000000000000000000000000000000000000000;;					mapping["node-1"] = []*v1.Pod{pod1}
0000000000000000000000000000000000000000;;					return mapping
0000000000000000000000000000000000000000;;				}(),
0000000000000000000000000000000000000000;;				maxUnavailable: 1,
0000000000000000000000000000000000000000;;				numUnavailable: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			c.Manager.dsStore.Add(c.ds)
0000000000000000000000000000000000000000;;			maxUnavailable, numUnavailable, err := c.Manager.getUnavailableNumbers(c.ds, c.nodeToPods)
0000000000000000000000000000000000000000;;			if err != nil && c.Err != nil {
0000000000000000000000000000000000000000;;				if c.Err != err {
0000000000000000000000000000000000000000;;					t.Errorf("Test case: %s. Expected error: %v but got: %v", c.name, c.Err, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test case: %s. Unexpected error: %v", c.name, err)
0000000000000000000000000000000000000000;;			} else if maxUnavailable != c.maxUnavailable || numUnavailable != c.numUnavailable {
0000000000000000000000000000000000000000;;				t.Errorf("Test case: %s. Wrong values. maxUnavailable: %d, expected: %d, numUnavailable: %d. expected: %d", c.name, maxUnavailable, c.maxUnavailable, numUnavailable, c.numUnavailable)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
