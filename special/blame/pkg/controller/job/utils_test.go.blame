0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0cf1f175201fb196769b208d488a747c676243cc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package job
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batch "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsJobFinished(t *testing.T) {
0000000000000000000000000000000000000000;;		job := &batch.Job{
0000000000000000000000000000000000000000;;			Status: batch.JobStatus{
0000000000000000000000000000000000000000;;				Conditions: []batch.JobCondition{{
0000000000000000000000000000000000000000;;					Type:   batch.JobComplete,
0000000000000000000000000000000000000000;;					Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !IsJobFinished(job) {
0000000000000000000000000000000000000000;;			t.Error("Job was expected to be finished")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		job.Status.Conditions[0].Status = v1.ConditionFalse
0000000000000000000000000000000000000000;;		if IsJobFinished(job) {
0000000000000000000000000000000000000000;;			t.Error("Job was not expected to be finished")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		job.Status.Conditions[0].Status = v1.ConditionUnknown
0000000000000000000000000000000000000000;;		if IsJobFinished(job) {
0000000000000000000000000000000000000000;;			t.Error("Job was not expected to be finished")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
