0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8d0fbe798f8e3c2c417e096255f5f0304a0a28e2;pkg/controller/persistentvolume/persistentvolume_provision_test.go[pkg/controller/persistentvolume/persistentvolume_provision_test.go][pkg/controller/volume/persistentvolume/provision_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package persistentvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		storage "k8s.io/api/storage/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var class1Parameters = map[string]string{
0000000000000000000000000000000000000000;;		"param1": "value1",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	var class2Parameters = map[string]string{
0000000000000000000000000000000000000000;;		"param2": "value2",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	var storageClasses = []*storage.StorageClass{
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "gold",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Provisioner: mockPluginName,
0000000000000000000000000000000000000000;;			Parameters:  class1Parameters,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "silver",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: mockPluginName,
0000000000000000000000000000000000000000;;			Parameters:  class2Parameters,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "external",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "vendor.com/my-volume",
0000000000000000000000000000000000000000;;			Parameters:  class1Parameters,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "unknown-internal",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "kubernetes.io/unknown",
0000000000000000000000000000000000000000;;			Parameters:  class1Parameters,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// call to storageClass 1, returning an error
0000000000000000000000000000000000000000;;	var provision1Error = provisionCall{
0000000000000000000000000000000000000000;;		ret:                errors.New("Mock provisioner error"),
0000000000000000000000000000000000000000;;		expectedParameters: class1Parameters,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// call to storageClass 1, returning a valid PV
0000000000000000000000000000000000000000;;	var provision1Success = provisionCall{
0000000000000000000000000000000000000000;;		ret:                nil,
0000000000000000000000000000000000000000;;		expectedParameters: class1Parameters,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// call to storageClass 2, returning a valid PV
0000000000000000000000000000000000000000;;	var provision2Success = provisionCall{
0000000000000000000000000000000000000000;;		ret:                nil,
0000000000000000000000000000000000000000;;		expectedParameters: class2Parameters,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var provisionAlphaSuccess = provisionCall{
0000000000000000000000000000000000000000;;		ret: nil,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test single call to syncVolume, expecting provisioning to happen.
0000000000000000000000000000000000000000;;	// 1. Fill in the controller with initial data
0000000000000000000000000000000000000000;;	// 2. Call the syncVolume *once*.
0000000000000000000000000000000000000000;;	// 3. Compare resulting volumes with expected volumes.
0000000000000000000000000000000000000000;;	func TestProvisionSync(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []controllerTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision a volume (with a default class)
0000000000000000000000000000000000000000;;				"11-1 - successful provision with storage class 1",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newVolumeArray("pvc-uid11-1", "1Gi", "uid11-1", "claim11-1", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classGold, annBoundByController, annDynamicallyProvisioned),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-1", "uid11-1", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				// Binding will be completed in the next syncClaim
0000000000000000000000000000000000000000;;				newClaimArray("claim11-1", "uid11-1", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Normal ProvisioningSucceeded"}, noerrors, wrapTestWithProvisionCalls([]provisionCall{provision1Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - plugin not found
0000000000000000000000000000000000000000;;				"11-2 - plugin not found",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-2", "uid11-2", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-2", "uid11-2", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"}, noerrors,
0000000000000000000000000000000000000000;;				testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - newProvisioner returns error
0000000000000000000000000000000000000000;;				"11-3 - newProvisioner failure",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-3", "uid11-3", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-3", "uid11-3", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"}, noerrors,
0000000000000000000000000000000000000000;;				wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - Provision returns error
0000000000000000000000000000000000000000;;				"11-4 - provision failure",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-4", "uid11-4", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-4", "uid11-4", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"}, noerrors,
0000000000000000000000000000000000000000;;				wrapTestWithProvisionCalls([]provisionCall{provision1Error}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// No provisioning if there is a matching volume available
0000000000000000000000000000000000000000;;				"11-6 - provisioning when there is a volume available",
0000000000000000000000000000000000000000;;				newVolumeArray("volume11-6", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;				newVolumeArray("volume11-6", "1Gi", "uid11-6", "claim11-6", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classGold, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-6", "uid11-6", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-6", "uid11-6", "1Gi", "volume11-6", v1.ClaimBound, &classGold, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors,
0000000000000000000000000000000000000000;;				// No provisioning plugin confingure - makes the test fail when
0000000000000000000000000000000000000000;;				// the controller errorneously tries to provision something
0000000000000000000000000000000000000000;;				wrapTestWithProvisionCalls([]provisionCall{provision1Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision success? - claim is bound before provisioner creates
0000000000000000000000000000000000000000;;				// a volume.
0000000000000000000000000000000000000000;;				"11-7 - claim is bound before provisioning",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newVolumeArray("pvc-uid11-7", "1Gi", "uid11-7", "claim11-7", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classGold, annBoundByController, annDynamicallyProvisioned),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-7", "uid11-7", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				// The claim would be bound in next syncClaim
0000000000000000000000000000000000000000;;				newClaimArray("claim11-7", "uid11-7", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				noevents, noerrors,
0000000000000000000000000000000000000000;;				wrapTestWithInjectedOperation(wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim), func(ctrl *PersistentVolumeController, reactor *volumeReactor) {
0000000000000000000000000000000000000000;;					// Create a volume before provisionClaimOperation starts.
0000000000000000000000000000000000000000;;					// This similates a parallel controller provisioning the volume.
0000000000000000000000000000000000000000;;					reactor.lock.Lock()
0000000000000000000000000000000000000000;;					volume := newVolume("pvc-uid11-7", "1Gi", "uid11-7", "claim11-7", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classGold, annBoundByController, annDynamicallyProvisioned)
0000000000000000000000000000000000000000;;					reactor.volumes[volume.Name] = volume
0000000000000000000000000000000000000000;;					reactor.lock.Unlock()
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision success - cannot save provisioned PV once,
0000000000000000000000000000000000000000;;				// second retry succeeds
0000000000000000000000000000000000000000;;				"11-8 - cannot save provisioned volume",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newVolumeArray("pvc-uid11-8", "1Gi", "uid11-8", "claim11-8", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classGold, annBoundByController, annDynamicallyProvisioned),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-8", "uid11-8", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				// Binding will be completed in the next syncClaim
0000000000000000000000000000000000000000;;				newClaimArray("claim11-8", "uid11-8", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Normal ProvisioningSucceeded"},
0000000000000000000000000000000000000000;;				[]reactorError{
0000000000000000000000000000000000000000;;					// Inject error to the first
0000000000000000000000000000000000000000;;					// kubeclient.PersistentVolumes.Create() call. All other calls
0000000000000000000000000000000000000000;;					// will succeed.
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wrapTestWithProvisionCalls([]provisionCall{provision1Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision success? - cannot save provisioned PV five times,
0000000000000000000000000000000000000000;;				// volume is deleted and delete succeeds
0000000000000000000000000000000000000000;;				"11-9 - cannot save provisioned volume, delete succeeds",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-9", "uid11-9", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-9", "uid11-9", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"},
0000000000000000000000000000000000000000;;				[]reactorError{
0000000000000000000000000000000000000000;;					// Inject error to five kubeclient.PersistentVolumes.Create()
0000000000000000000000000000000000000000;;					// calls
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error1")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error2")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error3")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error4")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error5")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wrapTestWithPluginCalls(
0000000000000000000000000000000000000000;;					nil,                                // recycle calls
0000000000000000000000000000000000000000;;					[]error{nil},                       // delete calls
0000000000000000000000000000000000000000;;					[]provisionCall{provision1Success}, // provision calls
0000000000000000000000000000000000000000;;					testSyncClaim,
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - cannot save provisioned PV five times,
0000000000000000000000000000000000000000;;				// volume delete failed - no plugin found
0000000000000000000000000000000000000000;;				"11-10 - cannot save provisioned volume, no delete plugin found",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-10", "uid11-10", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-10", "uid11-10", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed", "Warning ProvisioningCleanupFailed"},
0000000000000000000000000000000000000000;;				[]reactorError{
0000000000000000000000000000000000000000;;					// Inject error to five kubeclient.PersistentVolumes.Create()
0000000000000000000000000000000000000000;;					// calls
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error1")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error2")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error3")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error4")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error5")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// No deleteCalls are configured, which results into no deleter plugin available for the volume
0000000000000000000000000000000000000000;;				wrapTestWithProvisionCalls([]provisionCall{provision1Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - cannot save provisioned PV five times,
0000000000000000000000000000000000000000;;				// volume delete failed - deleter returns error five times
0000000000000000000000000000000000000000;;				"11-11 - cannot save provisioned volume, deleter fails",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-11", "uid11-11", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-11", "uid11-11", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed", "Warning ProvisioningCleanupFailed"},
0000000000000000000000000000000000000000;;				[]reactorError{
0000000000000000000000000000000000000000;;					// Inject error to five kubeclient.PersistentVolumes.Create()
0000000000000000000000000000000000000000;;					// calls
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error1")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error2")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error3")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error4")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error5")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wrapTestWithPluginCalls(
0000000000000000000000000000000000000000;;					nil, // recycle calls
0000000000000000000000000000000000000000;;					[]error{ // delete calls
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error1"),
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error2"),
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error3"),
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error4"),
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error5"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					[]provisionCall{provision1Success}, // provision calls
0000000000000000000000000000000000000000;;					testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision failure - cannot save provisioned PV five times,
0000000000000000000000000000000000000000;;				// volume delete succeeds 2nd time
0000000000000000000000000000000000000000;;				"11-12 - cannot save provisioned volume, delete succeeds 2nd time",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-12", "uid11-12", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-12", "uid11-12", "1Gi", "", v1.ClaimPending, &classGold, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"},
0000000000000000000000000000000000000000;;				[]reactorError{
0000000000000000000000000000000000000000;;					// Inject error to five kubeclient.PersistentVolumes.Create()
0000000000000000000000000000000000000000;;					// calls
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error1")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error2")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error3")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error4")},
0000000000000000000000000000000000000000;;					{"create", "persistentvolumes", errors.New("Mock creation error5")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wrapTestWithPluginCalls(
0000000000000000000000000000000000000000;;					nil, // recycle calls
0000000000000000000000000000000000000000;;					[]error{ // delete calls
0000000000000000000000000000000000000000;;						errors.New("Mock deletion error1"),
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					}, //  provison calls
0000000000000000000000000000000000000000;;					[]provisionCall{provision1Success},
0000000000000000000000000000000000000000;;					testSyncClaim,
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision a volume (with non-default class)
0000000000000000000000000000000000000000;;				"11-13 - successful provision with storage class 2",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newVolumeArray("pvc-uid11-13", "1Gi", "uid11-13", "claim11-13", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classSilver, annBoundByController, annDynamicallyProvisioned),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-13", "uid11-13", "1Gi", "", v1.ClaimPending, &classSilver),
0000000000000000000000000000000000000000;;				// Binding will be completed in the next syncClaim
0000000000000000000000000000000000000000;;				newClaimArray("claim11-13", "uid11-13", "1Gi", "", v1.ClaimPending, &classSilver, annStorageProvisioner),
0000000000000000000000000000000000000000;;				[]string{"Normal ProvisioningSucceeded"}, noerrors, wrapTestWithProvisionCalls([]provisionCall{provision2Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision error - non existing class
0000000000000000000000000000000000000000;;				"11-14 - fail due to non-existing class",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-14", "uid11-14", "1Gi", "", v1.ClaimPending, &classNonExisting),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-14", "uid11-14", "1Gi", "", v1.ClaimPending, &classNonExisting),
0000000000000000000000000000000000000000;;				noevents, noerrors, wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// No provisioning with class=""
0000000000000000000000000000000000000000;;				"11-15 - no provisioning with class=''",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-15", "uid11-15", "1Gi", "", v1.ClaimPending, &classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-15", "uid11-15", "1Gi", "", v1.ClaimPending, &classEmpty),
0000000000000000000000000000000000000000;;				noevents, noerrors, wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// No provisioning with class=nil
0000000000000000000000000000000000000000;;				"11-16 - no provisioning with class=nil",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-15", "uid11-15", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-15", "uid11-15", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// No provisioning + normal event with external provisioner
0000000000000000000000000000000000000000;;				"11-17 - external provisioner",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-17", "uid11-17", "1Gi", "", v1.ClaimPending, &classExternal),
0000000000000000000000000000000000000000;;				claimWithAnnotation(annStorageProvisioner, "vendor.com/my-volume",
0000000000000000000000000000000000000000;;					newClaimArray("claim11-17", "uid11-17", "1Gi", "", v1.ClaimPending, &classExternal)),
0000000000000000000000000000000000000000;;				[]string{"Normal ExternalProvisioning"},
0000000000000000000000000000000000000000;;				noerrors, wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// No provisioning + warning event with unknown internal provisioner
0000000000000000000000000000000000000000;;				"11-18 - unknown internal provisioner",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim11-18", "uid11-18", "1Gi", "", v1.ClaimPending, &classUnknownInternal),
0000000000000000000000000000000000000000;;				newClaimArray("claim11-18", "uid11-18", "1Gi", "", v1.ClaimPending, &classUnknownInternal),
0000000000000000000000000000000000000000;;				[]string{"Warning ProvisioningFailed"},
0000000000000000000000000000000000000000;;				noerrors, wrapTestWithProvisionCalls([]provisionCall{}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runSyncTests(t, tests, storageClasses)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test multiple calls to syncClaim/syncVolume and periodic sync of all
0000000000000000000000000000000000000000;;	// volume/claims. The test follows this pattern:
0000000000000000000000000000000000000000;;	// 0. Load the controller with initial data.
0000000000000000000000000000000000000000;;	// 1. Call controllerTest.testCall() once as in TestSync()
0000000000000000000000000000000000000000;;	// 2. For all volumes/claims changed by previous syncVolume/syncClaim calls,
0000000000000000000000000000000000000000;;	//    call appropriate syncVolume/syncClaim (simulating "volume/claim changed"
0000000000000000000000000000000000000000;;	//    events). Go to 2. if these calls change anything.
0000000000000000000000000000000000000000;;	// 3. When all changes are processed and no new changes were made, call
0000000000000000000000000000000000000000;;	//    syncVolume/syncClaim on all volumes/claims (simulating "periodic sync").
0000000000000000000000000000000000000000;;	// 4. If some changes were done by step 3., go to 2. (simulation of
0000000000000000000000000000000000000000;;	//    "volume/claim updated" events, eventually performing step 3. again)
0000000000000000000000000000000000000000;;	// 5. When 3. does not do any changes, finish the tests and compare final set
0000000000000000000000000000000000000000;;	//    of volumes/claims with expected claims/volumes and report differences.
0000000000000000000000000000000000000000;;	// Some limit of calls in enforced to prevent endless loops.
0000000000000000000000000000000000000000;;	func TestProvisionMultiSync(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []controllerTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Provision a volume with binding
0000000000000000000000000000000000000000;;				"12-1 - successful provision",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newVolumeArray("pvc-uid12-1", "1Gi", "uid12-1", "claim12-1", v1.VolumeBound, v1.PersistentVolumeReclaimDelete, classGold, annBoundByController, annDynamicallyProvisioned),
0000000000000000000000000000000000000000;;				newClaimArray("claim12-1", "uid12-1", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim12-1", "uid12-1", "1Gi", "pvc-uid12-1", v1.ClaimBound, &classGold, annBoundByController, annBindCompleted, annStorageProvisioner),
0000000000000000000000000000000000000000;;				noevents, noerrors, wrapTestWithProvisionCalls([]provisionCall{provision1Success}, testSyncClaim),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runMultisyncTests(t, tests, storageClasses, storageClasses[0].Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// When provisioning is disabled, provisioning a claim should instantly return nil
0000000000000000000000000000000000000000;;	func TestDisablingDynamicProvisioner(t *testing.T) {
0000000000000000000000000000000000000000;;		ctrl, err := newTestController(nil, nil, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Construct PersistentVolume controller failed: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		retVal := ctrl.provisionClaim(nil)
0000000000000000000000000000000000000000;;		if retVal != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected nil return but got %v", retVal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
