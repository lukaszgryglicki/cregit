0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e53beaf519738babcd5fb9aa021610ae64a74894;pkg/controller/persistentvolume/persistentvolume_sync_test.go[pkg/controller/persistentvolume/persistentvolume_sync_test.go][pkg/controller/volume/persistentvolume/binder_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package persistentvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		storage "k8s.io/api/storage/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test single call to syncClaim and syncVolume methods.
0000000000000000000000000000000000000000;;	// 1. Fill in the controller with initial data
0000000000000000000000000000000000000000;;	// 2. Call the tested function (syncClaim/syncVolume) via
0000000000000000000000000000000000000000;;	//    controllerTest.testCall *once*.
0000000000000000000000000000000000000000;;	// 3. Compare resulting volumes and claims with expected volumes and claims.
0000000000000000000000000000000000000000;;	func TestSync(t *testing.T) {
0000000000000000000000000000000000000000;;		labels := map[string]string{
0000000000000000000000000000000000000000;;			"foo": "true",
0000000000000000000000000000000000000000;;			"bar": "false",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []controllerTest{
0000000000000000000000000000000000000000;;			// [Unit test set 1] User did not care which PV they get.
0000000000000000000000000000000000000000;;			// Test the matching with no claim.Spec.VolumeName and with various
0000000000000000000000000000000000000000;;			// volumes.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds to a matching unbound volume.
0000000000000000000000000000000000000000;;				"1-1 - successful bind",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-1", "1Gi", "uid1-1", "claim1-1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-1", "uid1-1", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-1", "uid1-1", "1Gi", "volume1-1", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim does not do anything when there is no matching volume.
0000000000000000000000000000000000000000;;				"1-2 - noop",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-2", "uid1-2", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-2", "uid1-2", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				[]string{"Normal FailedBinding"},
0000000000000000000000000000000000000000;;				noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim resets claim.Status to Pending when there is no
0000000000000000000000000000000000000000;;				// matching volume.
0000000000000000000000000000000000000000;;				"1-3 - reset to Pending",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-3", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-3", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-3", "uid1-3", "10Gi", "", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-3", "uid1-3", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				[]string{"Normal FailedBinding"},
0000000000000000000000000000000000000000;;				noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds claims to the smallest matching volume
0000000000000000000000000000000000000000;;				"1-4 - smallest volume",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-4_1", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-4_2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-4_1", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-4_2", "1Gi", "uid1-4", "claim1-4", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim1-4", "uid1-4", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-4", "uid1-4", "1Gi", "volume1-4_2", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds a claim only to volume that points to it (by
0000000000000000000000000000000000000000;;				// name), even though a smaller one is available.
0000000000000000000000000000000000000000;;				"1-5 - prebound volume by name - success",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-5_1", "10Gi", "", "claim1-5", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-5_2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-5_1", "10Gi", "uid1-5", "claim1-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-5_2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim1-5", "uid1-5", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				withExpectedCapacity("10Gi", newClaimArray("claim1-5", "uid1-5", "1Gi", "volume1-5_1", v1.ClaimBound, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds a claim only to volume that points to it (by
0000000000000000000000000000000000000000;;				// UID), even though a smaller one is available.
0000000000000000000000000000000000000000;;				"1-6 - prebound volume by UID - success",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-6_1", "10Gi", "uid1-6", "claim1-6", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-6_2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume1-6_1", "10Gi", "uid1-6", "claim1-6", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume1-6_2", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim1-6", "uid1-6", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				withExpectedCapacity("10Gi", newClaimArray("claim1-6", "uid1-6", "1Gi", "volume1-6_1", v1.ClaimBound, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim does not bind claim to a volume prebound to a claim with
0000000000000000000000000000000000000000;;				// same name and different UID
0000000000000000000000000000000000000000;;				"1-7 - prebound volume to different claim",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-7", "10Gi", "uid1-777", "claim1-7", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-7", "10Gi", "uid1-777", "claim1-7", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-7", "uid1-7", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-7", "uid1-7", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				[]string{"Normal FailedBinding"},
0000000000000000000000000000000000000000;;				noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim completes binding - simulates controller crash after
0000000000000000000000000000000000000000;;				// PV.ClaimRef is saved
0000000000000000000000000000000000000000;;				"1-8 - complete bind after crash - PV bound",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-8", "1Gi", "uid1-8", "claim1-8", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-8", "1Gi", "uid1-8", "claim1-8", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-8", "uid1-8", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-8", "uid1-8", "1Gi", "volume1-8", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim completes binding - simulates controller crash after
0000000000000000000000000000000000000000;;				// PV.Status is saved
0000000000000000000000000000000000000000;;				"1-9 - complete bind after crash - PV status saved",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-9", "1Gi", "uid1-9", "claim1-9", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-9", "1Gi", "uid1-9", "claim1-9", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-9", "uid1-9", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-9", "uid1-9", "1Gi", "volume1-9", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim completes binding - simulates controller crash after
0000000000000000000000000000000000000000;;				// PVC.VolumeName is saved
0000000000000000000000000000000000000000;;				"1-10 - complete bind after crash - PVC bound",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-10", "1Gi", "uid1-10", "claim1-10", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-10", "1Gi", "uid1-10", "claim1-10", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-10", "uid1-10", "1Gi", "volume1-10", v1.ClaimPending, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim1-10", "uid1-10", "1Gi", "volume1-10", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds a claim only when the label selector matches the volume
0000000000000000000000000000000000000000;;				"1-11 - bind when selector matches",
0000000000000000000000000000000000000000;;				withLabels(labels, newVolumeArray("volume1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty)),
0000000000000000000000000000000000000000;;				withLabels(labels, newVolumeArray("volume1-1", "1Gi", "uid1-1", "claim1-1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController)),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim1-1", "uid1-1", "1Gi", "", v1.ClaimPending, nil)),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim1-1", "uid1-1", "1Gi", "volume1-1", v1.ClaimBound, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim does not bind a claim when the label selector doesn't match
0000000000000000000000000000000000000000;;				"1-12 - do not bind when selector does not match",
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim1-1", "uid1-1", "1Gi", "", v1.ClaimPending, nil)),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim1-1", "uid1-1", "1Gi", "", v1.ClaimPending, nil)),
0000000000000000000000000000000000000000;;				[]string{"Normal FailedBinding"},
0000000000000000000000000000000000000000;;				noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// [Unit test set 2] User asked for a specific PV.
0000000000000000000000000000000000000000;;			// Test the binding when pv.ClaimRef is already set by controller or
0000000000000000000000000000000000000000;;			// by user.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that does not exist
0000000000000000000000000000000000000000;;				"2-1 - claim prebound to non-existing volume - noop",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim2-1", "uid2-1", "10Gi", "volume2-1", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-1", "uid2-1", "10Gi", "volume2-1", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that does not exist.
0000000000000000000000000000000000000000;;				// Check that the claim status is reset to Pending
0000000000000000000000000000000000000000;;				"2-2 - claim prebound to non-existing volume - reset status",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim2-2", "uid2-2", "10Gi", "volume2-2", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-2", "uid2-2", "10Gi", "volume2-2", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that exists and is
0000000000000000000000000000000000000000;;				// unbound. Check it gets bound and no annBoundByController is set.
0000000000000000000000000000000000000000;;				"2-3 - claim prebound to unbound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-3", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-3", "1Gi", "uid2-3", "claim2-3", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-3", "uid2-3", "1Gi", "volume2-3", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-3", "uid2-3", "1Gi", "volume2-3", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// claim with claim pre-bound to a PV that is pre-bound to the claim
0000000000000000000000000000000000000000;;				// by name. Check it gets bound and no annBoundByController is set.
0000000000000000000000000000000000000000;;				"2-4 - claim prebound to prebound volume by name",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-4", "1Gi", "", "claim2-4", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-4", "1Gi", "uid2-4", "claim2-4", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-4", "uid2-4", "1Gi", "volume2-4", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-4", "uid2-4", "1Gi", "volume2-4", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that is pre-bound to the
0000000000000000000000000000000000000000;;				// claim by UID. Check it gets bound and no annBoundByController is
0000000000000000000000000000000000000000;;				// set.
0000000000000000000000000000000000000000;;				"2-5 - claim prebound to prebound volume by UID",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-5", "1Gi", "uid2-5", "claim2-5", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-5", "1Gi", "uid2-5", "claim2-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-5", "uid2-5", "1Gi", "volume2-5", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-5", "uid2-5", "1Gi", "volume2-5", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that is bound to different
0000000000000000000000000000000000000000;;				// claim. Check it's reset to Pending.
0000000000000000000000000000000000000000;;				"2-6 - claim prebound to already bound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-6", "1Gi", "uid2-6_1", "claim2-6_1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-6", "1Gi", "uid2-6_1", "claim2-6_1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-6", "uid2-6", "1Gi", "volume2-6", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-6", "uid2-6", "1Gi", "volume2-6", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound by controller to a PV that is bound to
0000000000000000000000000000000000000000;;				// different claim. Check it throws an error.
0000000000000000000000000000000000000000;;				"2-7 - claim bound by controller to already bound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-7", "1Gi", "uid2-7_1", "claim2-7_1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-7", "1Gi", "uid2-7_1", "claim2-7_1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-7", "uid2-7", "1Gi", "volume2-7", v1.ClaimBound, nil, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-7", "uid2-7", "1Gi", "volume2-7", v1.ClaimBound, nil, annBoundByController),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaimError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that exists and is
0000000000000000000000000000000000000000;;				// unbound, but does not match the selector. Check it gets bound
0000000000000000000000000000000000000000;;				// and no annBoundByController is set.
0000000000000000000000000000000000000000;;				"2-8 - claim prebound to unbound volume that does not match the selector",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-8", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-8", "1Gi", "uid2-8", "claim2-8", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim2-8", "uid2-8", "1Gi", "volume2-8", v1.ClaimPending, nil)),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim2-8", "uid2-8", "1Gi", "volume2-8", v1.ClaimBound, nil, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that exists and is
0000000000000000000000000000000000000000;;				// unbound, but its size is smaller than requested.
0000000000000000000000000000000000000000;;				//Check that the claim status is reset to Pending
0000000000000000000000000000000000000000;;				"2-9 - claim prebound to unbound volume that size is smaller than requested",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-9", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-9", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-9", "uid2-9", "2Gi", "volume2-9", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-9", "uid2-9", "2Gi", "volume2-9", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				[]string{"Warning VolumeMismatch"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim pre-bound to a PV that exists and is
0000000000000000000000000000000000000000;;				// unbound, but its class does not match. Check that the claim status is reset to Pending
0000000000000000000000000000000000000000;;				"2-10 - claim prebound to unbound volume that class is different",
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-10", "1Gi", "1", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;				newVolumeArray("volume2-10", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-10", "uid2-10", "1Gi", "volume2-10", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim2-10", "uid2-10", "1Gi", "volume2-10", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				[]string{"Warning VolumeMismatch"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// [Unit test set 3] Syncing bound claim
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim  bound and its claim.Spec.VolumeName is
0000000000000000000000000000000000000000;;				// removed. Check it's marked as Lost.
0000000000000000000000000000000000000000;;				"3-1 - bound claim with missing VolumeName",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim3-1", "uid3-1", "10Gi", "", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-1", "uid3-1", "10Gi", "", v1.ClaimLost, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				[]string{"Warning ClaimLost"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to non-existing volume. Check it's
0000000000000000000000000000000000000000;;				// marked as Lost.
0000000000000000000000000000000000000000;;				"3-2 - bound claim with missing volume",
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				novolumes,
0000000000000000000000000000000000000000;;				newClaimArray("claim3-2", "uid3-2", "10Gi", "volume3-2", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-2", "uid3-2", "10Gi", "volume3-2", v1.ClaimLost, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				[]string{"Warning ClaimLost"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to unbound volume. Check it's bound.
0000000000000000000000000000000000000000;;				// Also check that Pending phase is set to Bound
0000000000000000000000000000000000000000;;				"3-3 - bound claim with unbound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-3", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-3", "10Gi", "uid3-3", "claim3-3", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-3", "uid3-3", "10Gi", "volume3-3", v1.ClaimPending, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-3", "uid3-3", "10Gi", "volume3-3", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to volume with missing (or different)
0000000000000000000000000000000000000000;;				// volume.Spec.ClaimRef.UID. Check that the claim is marked as lost.
0000000000000000000000000000000000000000;;				"3-4 - bound claim with prebound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-4", "10Gi", "claim3-4-x", "claim3-4", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-4", "10Gi", "claim3-4-x", "claim3-4", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-4", "uid3-4", "10Gi", "volume3-4", v1.ClaimPending, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-4", "uid3-4", "10Gi", "volume3-4", v1.ClaimLost, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				[]string{"Warning ClaimMisbound"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to bound volume. Check that the
0000000000000000000000000000000000000000;;				// controller does not do anything. Also check that Pending phase is
0000000000000000000000000000000000000000;;				// set to Bound
0000000000000000000000000000000000000000;;				"3-5 - bound claim with bound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-5", "10Gi", "uid3-5", "claim3-5", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-5", "10Gi", "uid3-5", "claim3-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-5", "uid3-5", "10Gi", "volume3-5", v1.ClaimPending, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-5", "uid3-5", "10Gi", "volume3-5", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to a volume that is bound to different
0000000000000000000000000000000000000000;;				// claim. Check that the claim is marked as lost.
0000000000000000000000000000000000000000;;				// TODO: test that an event is emitted
0000000000000000000000000000000000000000;;				"3-6 - bound claim with bound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-6", "10Gi", "uid3-6-x", "claim3-6-x", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-6", "10Gi", "uid3-6-x", "claim3-6-x", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-6", "uid3-6", "10Gi", "volume3-6", v1.ClaimPending, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim3-6", "uid3-6", "10Gi", "volume3-6", v1.ClaimLost, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				[]string{"Warning ClaimMisbound"}, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim with claim bound to unbound volume. Check it's bound
0000000000000000000000000000000000000000;;				// even if the claim's selector doesn't match the volume. Also
0000000000000000000000000000000000000000;;				// check that Pending phase is set to Bound
0000000000000000000000000000000000000000;;				"3-7 - bound claim with unbound volume where selector doesn't match",
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-3", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume3-3", "10Gi", "uid3-3", "claim3-3", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim3-3", "uid3-3", "10Gi", "volume3-3", v1.ClaimPending, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				withLabelSelector(labels, newClaimArray("claim3-3", "uid3-3", "10Gi", "volume3-3", v1.ClaimBound, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// [Unit test set 4] All syncVolume tests.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with pending volume. Check it's marked as Available.
0000000000000000000000000000000000000000;;				"4-1 - pending volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-1", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-1", "10Gi", "", "", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with prebound pending volume. Check it's marked as
0000000000000000000000000000000000000000;;				// Available.
0000000000000000000000000000000000000000;;				"4-2 - pending prebound volume",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-2", "10Gi", "", "claim4-2", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-2", "10Gi", "", "claim4-2", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound to missing claim.
0000000000000000000000000000000000000000;;				// Check the volume gets Released
0000000000000000000000000000000000000000;;				"4-3 - bound volume with missing claim",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-3", "10Gi", "uid4-3", "claim4-3", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-3", "10Gi", "uid4-3", "claim4-3", v1.VolumeReleased, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noclaims,
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound to claim with different UID.
0000000000000000000000000000000000000000;;				// Check the volume gets Released.
0000000000000000000000000000000000000000;;				"4-4 - volume bound to claim with different UID",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-4", "10Gi", "uid4-4", "claim4-4", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-4", "10Gi", "uid4-4", "claim4-4", v1.VolumeReleased, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-4", "uid4-4-x", "10Gi", "volume4-4", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-4", "uid4-4-x", "10Gi", "volume4-4", v1.ClaimBound, nil, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound by controller to unbound claim.
0000000000000000000000000000000000000000;;				// Check syncVolume does not do anything.
0000000000000000000000000000000000000000;;				"4-5 - volume bound by controller to unbound claim",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-5", "10Gi", "uid4-5", "claim4-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-5", "10Gi", "uid4-5", "claim4-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-5", "uid4-5", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-5", "uid4-5", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound by user to unbound claim.
0000000000000000000000000000000000000000;;				// Check syncVolume does not do anything.
0000000000000000000000000000000000000000;;				"4-5 - volume bound by user to bound claim",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-5", "10Gi", "uid4-5", "claim4-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-5", "10Gi", "uid4-5", "claim4-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-5", "uid4-5", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-5", "uid4-5", "10Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound to bound claim.
0000000000000000000000000000000000000000;;				// Check that the volume is marked as Bound.
0000000000000000000000000000000000000000;;				"4-6 - volume bound by to bound claim",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-6", "10Gi", "uid4-6", "claim4-6", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-6", "10Gi", "uid4-6", "claim4-6", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-6", "uid4-6", "10Gi", "volume4-6", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-6", "uid4-6", "10Gi", "volume4-6", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound by controller to claim bound to
0000000000000000000000000000000000000000;;				// another volume. Check that the volume is rolled back.
0000000000000000000000000000000000000000;;				"4-7 - volume bound by controller to claim bound somewhere else",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-7", "10Gi", "uid4-7", "claim4-7", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-7", "10Gi", "", "", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-7", "uid4-7", "10Gi", "volume4-7-x", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-7", "uid4-7", "10Gi", "volume4-7-x", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume with volume bound by user to claim bound to
0000000000000000000000000000000000000000;;				// another volume. Check that the volume is marked as Available
0000000000000000000000000000000000000000;;				// and its UID is reset.
0000000000000000000000000000000000000000;;				"4-8 - volume bound by user to claim bound somewhere else",
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-8", "10Gi", "uid4-8", "claim4-8", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume4-8", "10Gi", "", "claim4-8", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-8", "uid4-8", "10Gi", "volume4-8-x", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim4-8", "uid4-8", "10Gi", "volume4-8-x", v1.ClaimBound, nil),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncVolume,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// PVC with class
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume binds a claim to requested class even if there is a
0000000000000000000000000000000000000000;;				// smaller PV available
0000000000000000000000000000000000000000;;				"13-1 - binding to class",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume13-1-2", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-1-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;					newVolume("volume13-1-2", "10Gi", "uid13-1", "claim13-1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classGold, annBoundByController),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim13-1", "uid13-1", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				withExpectedCapacity("10Gi", newClaimArray("claim13-1", "uid13-1", "1Gi", "volume13-1-2", v1.ClaimBound, &classGold, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume binds a claim without a class even if there is a
0000000000000000000000000000000000000000;;				// smaller PV with a class available
0000000000000000000000000000000000000000;;				"13-2 - binding without a class",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-2-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;					newVolume("volume13-2-2", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-2-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;					newVolume("volume13-2-2", "10Gi", "uid13-2", "claim13-2", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim13-2", "uid13-2", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				withExpectedCapacity("10Gi", newClaimArray("claim13-2", "uid13-2", "1Gi", "volume13-2-2", v1.ClaimBound, nil, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume binds a claim with given class even if there is a
0000000000000000000000000000000000000000;;				// smaller PV with different class available
0000000000000000000000000000000000000000;;				"13-3 - binding to specific a class",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-3-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classSilver),
0000000000000000000000000000000000000000;;					newVolume("volume13-3-2", "10Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classGold),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume13-3-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classSilver),
0000000000000000000000000000000000000000;;					newVolume("volume13-3-2", "10Gi", "uid13-3", "claim13-3", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classGold, annBoundByController),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim13-3", "uid13-3", "1Gi", "", v1.ClaimPending, &classGold),
0000000000000000000000000000000000000000;;				withExpectedCapacity("10Gi", newClaimArray("claim13-3", "uid13-3", "1Gi", "volume13-3-2", v1.ClaimBound, &classGold, annBoundByController, annBindCompleted)),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume binds claim requesting class "" to claim to PV with
0000000000000000000000000000000000000000;;				// class=""
0000000000000000000000000000000000000000;;				"13-4 - empty class",
0000000000000000000000000000000000000000;;				newVolumeArray("volume13-4", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume13-4", "1Gi", "uid13-4", "claim13-4", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim13-4", "uid13-4", "1Gi", "", v1.ClaimPending, &classEmpty),
0000000000000000000000000000000000000000;;				newClaimArray("claim13-4", "uid13-4", "1Gi", "volume13-4", v1.ClaimBound, &classEmpty, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncVolume binds claim requesting class nil to claim to PV with
0000000000000000000000000000000000000000;;				// class = ""
0000000000000000000000000000000000000000;;				"13-5 - nil class",
0000000000000000000000000000000000000000;;				newVolumeArray("volume13-5", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume13-5", "1Gi", "uid13-5", "claim13-5", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim13-5", "uid13-5", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim13-5", "uid13-5", "1Gi", "volume13-5", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runSyncTests(t, tests, []*storage.StorageClass{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test multiple calls to syncClaim/syncVolume and periodic sync of all
0000000000000000000000000000000000000000;;	// volume/claims. The test follows this pattern:
0000000000000000000000000000000000000000;;	// 0. Load the controller with initial data.
0000000000000000000000000000000000000000;;	// 1. Call controllerTest.testCall() once as in TestSync()
0000000000000000000000000000000000000000;;	// 2. For all volumes/claims changed by previous syncVolume/syncClaim calls,
0000000000000000000000000000000000000000;;	//    call appropriate syncVolume/syncClaim (simulating "volume/claim changed"
0000000000000000000000000000000000000000;;	//    events). Go to 2. if these calls change anything.
0000000000000000000000000000000000000000;;	// 3. When all changes are processed and no new changes were made, call
0000000000000000000000000000000000000000;;	//    syncVolume/syncClaim on all volumes/claims (simulating "periodic sync").
0000000000000000000000000000000000000000;;	// 4. If some changes were done by step 3., go to 2. (simulation of
0000000000000000000000000000000000000000;;	//    "volume/claim updated" events, eventually performing step 3. again)
0000000000000000000000000000000000000000;;	// 5. When 3. does not do any changes, finish the tests and compare final set
0000000000000000000000000000000000000000;;	//    of volumes/claims with expected claims/volumes and report differences.
0000000000000000000000000000000000000000;;	// Some limit of calls in enforced to prevent endless loops.
0000000000000000000000000000000000000000;;	func TestMultiSync(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []controllerTest{
0000000000000000000000000000000000000000;;			// Test simple binding
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// syncClaim binds to a matching unbound volume.
0000000000000000000000000000000000000000;;				"10-1 - successful bind",
0000000000000000000000000000000000000000;;				newVolumeArray("volume10-1", "1Gi", "", "", v1.VolumePending, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				newVolumeArray("volume10-1", "1Gi", "uid10-1", "claim10-1", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				newClaimArray("claim10-1", "uid10-1", "1Gi", "", v1.ClaimPending, nil),
0000000000000000000000000000000000000000;;				newClaimArray("claim10-1", "uid10-1", "1Gi", "volume10-1", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Two controllers bound two PVs to single claim. Test one of them
0000000000000000000000000000000000000000;;				// wins and the second rolls back.
0000000000000000000000000000000000000000;;				"10-2 - bind PV race",
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume10-2-1", "1Gi", "uid10-2", "claim10-2", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;					newVolume("volume10-2-2", "1Gi", "uid10-2", "claim10-2", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.PersistentVolume{
0000000000000000000000000000000000000000;;					newVolume("volume10-2-1", "1Gi", "uid10-2", "claim10-2", v1.VolumeBound, v1.PersistentVolumeReclaimRetain, classEmpty, annBoundByController),
0000000000000000000000000000000000000000;;					newVolume("volume10-2-2", "1Gi", "", "", v1.VolumeAvailable, v1.PersistentVolumeReclaimRetain, classEmpty),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newClaimArray("claim10-2", "uid10-2", "1Gi", "volume10-2-1", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				newClaimArray("claim10-2", "uid10-2", "1Gi", "volume10-2-1", v1.ClaimBound, nil, annBoundByController, annBindCompleted),
0000000000000000000000000000000000000000;;				noevents, noerrors, testSyncClaim,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runMultisyncTests(t, tests, []*storage.StorageClass{}, "")
0000000000000000000000000000000000000000;;	}
