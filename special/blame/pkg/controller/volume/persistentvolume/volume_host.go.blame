0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
98ffedb2b63e98a0788620271eea42c09b6ba9d7;pkg/controller/persistentvolume/persistentvolume_host.go[pkg/controller/persistentvolume/persistentvolume_host.go][pkg/controller/volume/persistentvolume/volume_host.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package persistentvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/io"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		vol "k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeHost interface implementation for PersistentVolumeController.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ vol.VolumeHost = &PersistentVolumeController{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetPluginDir(pluginName string) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetPodVolumeDir(podUID types.UID, pluginName string, volumeName string) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetPodPluginDir(podUID types.UID, pluginName string) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetKubeClient() clientset.Interface {
0000000000000000000000000000000000000000;;		return ctrl.kubeClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) NewWrapperMounter(volName string, spec vol.Spec, pod *v1.Pod, opts vol.VolumeOptions) (vol.Mounter, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("PersistentVolumeController.NewWrapperMounter is not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) NewWrapperUnmounter(volName string, spec vol.Spec, podUID types.UID) (vol.Unmounter, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("PersistentVolumeController.NewWrapperMounter is not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetCloudProvider() cloudprovider.Interface {
0000000000000000000000000000000000000000;;		return ctrl.cloud
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetMounter() mount.Interface {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetWriter() io.Writer {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetHostName() string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetHostIP() (net.IP, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("PersistentVolumeController.GetHostIP() is not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetNodeAllocatable() (v1.ResourceList, error) {
0000000000000000000000000000000000000000;;		return v1.ResourceList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (adc *PersistentVolumeController) GetSecretFunc() func(namespace, name string) (*v1.Secret, error) {
0000000000000000000000000000000000000000;;		return func(_, _ string) (*v1.Secret, error) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("GetSecret unsupported in PersistentVolumeController")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (adc *PersistentVolumeController) GetConfigMapFunc() func(namespace, name string) (*v1.ConfigMap, error) {
0000000000000000000000000000000000000000;;		return func(_, _ string) (*v1.ConfigMap, error) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("GetConfigMap unsupported in PersistentVolumeController")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctrl *PersistentVolumeController) GetNodeLabels() (map[string]string, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("GetNodeLabels() unsupported in PersistentVolumeController")
0000000000000000000000000000000000000000;;	}
