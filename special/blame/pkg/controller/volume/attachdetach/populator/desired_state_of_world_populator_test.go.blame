0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
47a665bedf5fde31d087c07b8fc1dd64f145b5c4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package populator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		k8stypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/volume/attachdetach/cache"
0000000000000000000000000000000000000000;;		volumetesting "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util/volumehelper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindAndAddActivePods_FindAndRemoveDeletedPods(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeVolumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		fakeClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeInformerFactory := informers.NewSharedInformerFactory(fakeClient, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;		fakePodInformer := fakeInformerFactory.Core().V1().Pods()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakesDSW := cache.NewDesiredStateOfWorld(fakeVolumePluginMgr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "dswp-test-pod",
0000000000000000000000000000000000000000;;				UID:       "dswp-test-pod-uid",
0000000000000000000000000000000000000000;;				Namespace: "dswp-test",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "dswp-test-host",
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "dswp-test-volume-name",
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							GCEPersistentDisk: &v1.GCEPersistentDiskVolumeSource{
0000000000000000000000000000000000000000;;								PDName: "dswp-test-fake-device",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: v1.PodStatus{
0000000000000000000000000000000000000000;;				Phase: v1.PodPhase("Running"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePodInformer.Informer().GetStore().Add(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podName := volumehelper.GetUniquePodName(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generatedVolumeName := "fake-plugin/" + pod.Spec.Volumes[0].Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvcLister := fakeInformerFactory.Core().V1().PersistentVolumeClaims().Lister()
0000000000000000000000000000000000000000;;		pvLister := fakeInformerFactory.Core().V1().PersistentVolumes().Lister()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dswp := &desiredStateOfWorldPopulator{
0000000000000000000000000000000000000000;;			loopSleepDuration:     100 * time.Millisecond,
0000000000000000000000000000000000000000;;			listPodsRetryDuration: 3 * time.Second,
0000000000000000000000000000000000000000;;			desiredStateOfWorld:   fakesDSW,
0000000000000000000000000000000000000000;;			volumePluginMgr:       fakeVolumePluginMgr,
0000000000000000000000000000000000000000;;			podLister:             fakePodInformer.Lister(),
0000000000000000000000000000000000000000;;			pvcLister:             pvcLister,
0000000000000000000000000000000000000000;;			pvLister:              pvLister,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//add the given node to the list of nodes managed by dsw
0000000000000000000000000000000000000000;;		dswp.desiredStateOfWorld.AddNode(k8stypes.NodeName(pod.Spec.NodeName), false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dswp.findAndAddActivePods()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedVolumeName := v1.UniqueVolumeName(generatedVolumeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//check if the given volume referenced by the pod is added to dsw
0000000000000000000000000000000000000000;;		volumeExists := dswp.desiredStateOfWorld.VolumeExists(expectedVolumeName, k8stypes.NodeName(pod.Spec.NodeName))
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"VolumeExists(%q) failed. Expected: <true> Actual: <%v>",
0000000000000000000000000000000000000000;;				expectedVolumeName,
0000000000000000000000000000000000000000;;				volumeExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//delete the pod and volume manually
0000000000000000000000000000000000000000;;		dswp.desiredStateOfWorld.DeletePod(podName, expectedVolumeName, k8stypes.NodeName(pod.Spec.NodeName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//check if the given volume referenced by the pod still exists in dsw
0000000000000000000000000000000000000000;;		volumeExists = dswp.desiredStateOfWorld.VolumeExists(expectedVolumeName, k8stypes.NodeName(pod.Spec.NodeName))
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"VolumeExists(%q) failed. Expected: <false> Actual: <%v>",
0000000000000000000000000000000000000000;;				expectedVolumeName,
0000000000000000000000000000000000000000;;				volumeExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//add pod and volume again
0000000000000000000000000000000000000000;;		dswp.findAndAddActivePods()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//check if the given volume referenced by the pod is added to dsw for the second time
0000000000000000000000000000000000000000;;		volumeExists = dswp.desiredStateOfWorld.VolumeExists(expectedVolumeName, k8stypes.NodeName(pod.Spec.NodeName))
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"VolumeExists(%q) failed. Expected: <true> Actual: <%v>",
0000000000000000000000000000000000000000;;				expectedVolumeName,
0000000000000000000000000000000000000000;;				volumeExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePodInformer.Informer().GetStore().Delete(pod)
0000000000000000000000000000000000000000;;		dswp.findAndRemoveDeletedPods()
0000000000000000000000000000000000000000;;		//check if the given volume referenced by the pod still exists in dsw
0000000000000000000000000000000000000000;;		volumeExists = dswp.desiredStateOfWorld.VolumeExists(expectedVolumeName, k8stypes.NodeName(pod.Spec.NodeName))
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"VolumeExists(%q) failed. Expected: <false> Actual: <%v>",
0000000000000000000000000000000000000000;;				expectedVolumeName,
0000000000000000000000000000000000000000;;				volumeExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
