0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9a0cc299ef22f0ec7bb0c4adfa4212843ec620a7;pkg/controller/volume/cache/desired_state_of_world_test.go[pkg/controller/volume/cache/desired_state_of_world_test.go][pkg/controller/volume/attachdetach/cache/desired_state_of_world_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		k8stypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		controllervolumetesting "k8s.io/kubernetes/pkg/controller/volume/attachdetach/testing"
0000000000000000000000000000000000000000;;		volumetesting "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls AddNode() once.
0000000000000000000000000000000000000000;;	// Verifies node exists, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_AddNode_Positive_NewNode(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;		if !nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Added node %q does not exist, it should.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls AddNode() once.
0000000000000000000000000000000000000000;;	// Verifies node exists.
0000000000000000000000000000000000000000;;	// Calls AddNode() again with the same node.
0000000000000000000000000000000000000000;;	// Verifies node exists, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_AddNode_Positive_ExistingNode(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;		if !nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Added node %q does not exist, it should.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		nodeExists = dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;		if !nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Added node %q does not exist, it should.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with a single node no volume.
0000000000000000000000000000000000000000;;	// Calls AddPod() with the same node and new pod/volume.
0000000000000000000000000000000000000000;;	// Verifies node/volume exists, and 1 volumes to attach.
0000000000000000000000000000000000000000;;	func Test_AddPod_Positive_NewPodNodeExistsVolumeDoesntExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q should not exist, but it does.",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		generatedVolumeName, podErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("AddPod failed. Expected: <no error> Actual: <%v>", podErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with a single node no volume.
0000000000000000000000000000000000000000;;	// Calls AddPod() with the same node and new pod/volume.
0000000000000000000000000000000000000000;;	// Verifies node/volume exists.
0000000000000000000000000000000000000000;;	// Calls AddPod() with the same node and volume different pod.
0000000000000000000000000000000000000000;;	// Verifies the same node/volume exists, and 1 volumes to attach.
0000000000000000000000000000000000000000;;	func Test_AddPod_Positive_NewPodNodeExistsVolumeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		pod2Name := "pod2-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q should not exist, but it does.",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		generatedVolumeName, podErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				podErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		generatedVolumeName, podErr = dsw.AddPod(types.UniquePodName(pod2Name), controllervolumetesting.NewPod(pod2Name, pod2Name), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2Name,
0000000000000000000000000000000000000000;;				podErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podScheduled := dsw.GetPodToAdd()
0000000000000000000000000000000000000000;;		if len(podScheduled) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(podScheduled) Expected: <2> Actual: <%v>", len(podScheduled))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with a single node no volume.
0000000000000000000000000000000000000000;;	// Calls AddPod() with the same node and new pod/volume.
0000000000000000000000000000000000000000;;	// Verifies node/volume exists.
0000000000000000000000000000000000000000;;	// Calls AddPod() with the same node, volume, and pod.
0000000000000000000000000000000000000000;;	// Verifies the same node/volume exists, and 1 volumes to attach.
0000000000000000000000000000000000000000;;	func Test_AddPod_Positive_PodExistsNodeExistsVolumeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q should not exist, but it does.",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		generatedVolumeName, podErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		generatedVolumeName, podErr = dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls AddPod() with new pod/volume/node on empty data struct.
0000000000000000000000000000000000000000;;	// Verifies call fails because node does not exist.
0000000000000000000000000000000000000000;;	func Test_AddPod_Negative_NewPodNodeDoesntExistVolumeDoesntExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q should not exist, but it does.",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		_, podErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if podErr == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("AddPod did not fail. Expected: <\"failed to add pod...no node with that name exists in the list of managed nodes\"> Actual: <no error>")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q should not exist, but it does.",
0000000000000000000000000000000000000000;;				volumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with a single node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the node.
0000000000000000000000000000000000000000;;	// Verifies node no longer exists, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeleteNode_Positive_NodeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		err := dsw.DeleteNode(nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("DeleteNode failed. Expected: <no error> Actual: <%v>", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;		if nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Deleted node %q still exists, it should not.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete node on empty data struct.
0000000000000000000000000000000000000000;;	// Verifies no error is returned, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeleteNode_Positive_NodeDoesntExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		notAddedNodeName := k8stypes.NodeName("node-not-added-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		err := dsw.DeleteNode(notAddedNodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("DeleteNode failed. Expected: <no error> Actual: <%v>", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(notAddedNodeName)
0000000000000000000000000000000000000000;;		if nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Deleted node %q still exists, it should not.", notAddedNodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with new pod/volume/node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the node.
0000000000000000000000000000000000000000;;	// Verifies call fails because node still contains child volumes.
0000000000000000000000000000000000000000;;	func Test_DeleteNode_Negative_NodeExistsHasChildVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		generatedVolumeName, podAddErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		err := dsw.DeleteNode(nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("DeleteNode did not fail. Expected: <\"failed to delete node...the node still contains volumes in its list of volumes to attach\"> Actual: <no error>")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;		if !nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Node %q no longer exists, it should.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with new pod/volume/node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the pod/volume/node.
0000000000000000000000000000000000000000;;	// Verifies volume no longer exists, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeletePod_Positive_PodExistsNodeExistsVolumeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolumeName, podAddErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.DeletePod(types.UniquePodName(podName), generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Deleted pod %q from volume %q/node %q. Volume should also be deleted but it still exists.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with pod1/volume/node and pod2/volume/node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the pod1/volume/node.
0000000000000000000000000000000000000000;;	// Verifies volume still exists, and one volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeletePod_Positive_2PodsExistNodeExistsVolumesExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		pod2Name := "pod2-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolumeName1, pod1AddErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;		if pod1AddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				pod1AddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		generatedVolumeName2, pod2AddErr := dsw.AddPod(types.UniquePodName(pod2Name), controllervolumetesting.NewPod(pod2Name, pod2Name), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;		if pod2AddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2Name,
0000000000000000000000000000000000000000;;				pod2AddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if generatedVolumeName1 != generatedVolumeName2 {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Generated volume names for the same volume should be the same but they are not: %q and %q",
0000000000000000000000000000000000000000;;				generatedVolumeName1,
0000000000000000000000000000000000000000;;				generatedVolumeName2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolumeName1, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q does not exist under node %q, it should.",
0000000000000000000000000000000000000000;;				generatedVolumeName1,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.DeletePod(types.UniquePodName(pod1Name), generatedVolumeName1, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName1, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q under node %q should still exist, but it does not.",
0000000000000000000000000000000000000000;;				generatedVolumeName1,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName1, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with pod1/volume/node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the pod2/volume/node.
0000000000000000000000000000000000000000;;	// Verifies volume still exists, and one volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeletePod_Positive_PodDoesNotExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		pod2Name := "pod2-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolumeName, pod1AddErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;		if pod1AddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				pod1AddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.DeletePod(types.UniquePodName(pod2Name), generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q does not exist, it should.",
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with pod/volume/node1.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the pod/volume/node2.
0000000000000000000000000000000000000000;;	// Verifies volume still exists, and one volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeletePod_Positive_NodeDoesNotExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		node1Name := k8stypes.NodeName("node1-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(node1Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolumeName, podAddErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, node1Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolumeName, node1Name)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				node1Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node2Name := k8stypes.NodeName("node2-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.DeletePod(types.UniquePodName(podName), generatedVolumeName, node2Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, node1Name)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q does not exist, it should.",
0000000000000000000000000000000000000000;;				generatedVolumeName,
0000000000000000000000000000000000000000;;				node1Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolumeName, node2Name)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"node %q exists, it should not.",
0000000000000000000000000000000000000000;;				node2Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node1Name, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with pod/volume1/node.
0000000000000000000000000000000000000000;;	// Calls DeleteNode() to delete the pod/volume2/node.
0000000000000000000000000000000000000000;;	// Verifies volume still exists, and one volumes to attach.
0000000000000000000000000000000000000000;;	func Test_DeletePod_Positive_VolumeDoesNotExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volume1Name := v1.UniqueVolumeName("volume1-name")
0000000000000000000000000000000000000000;;		volume1Spec := controllervolumetesting.GetTestVolumeSpec(string(volume1Name), volume1Name)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume1Name, podAddErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volume1Spec, nodeName)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolume1Name, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Added pod %q to volume %q/node %q. Volume does not exist, it should.",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				generatedVolume1Name,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volume2Name := v1.UniqueVolumeName("volume2-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		dsw.DeletePod(types.UniquePodName(podName), volume2Name, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(generatedVolume1Name, nodeName)
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Volume %q/node %q does not exist, it should.",
0000000000000000000000000000000000000000;;				generatedVolume1Name,
0000000000000000000000000000000000000000;;				nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeExists = dsw.VolumeExists(volume2Name, nodeName)
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"volume %q exists, it should not.",
0000000000000000000000000000000000000000;;				volume2Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolume1Name, string(volume1Name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls NodeExists() on random node.
0000000000000000000000000000000000000000;;	// Verifies node does not exist, and no volumes to attach.
0000000000000000000000000000000000000000;;	func Test_NodeExists_Positive_NodeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		notAddedNodeName := k8stypes.NodeName("node-not-added-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		notAddedNodeExists := dsw.NodeExists(notAddedNodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if notAddedNodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Node %q exists, it should not.", notAddedNodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with a single node.
0000000000000000000000000000000000000000;;	// Calls NodeExists() on that node.
0000000000000000000000000000000000000000;;	// Verifies node exists, and no volumes to attach.
0000000000000000000000000000000000000000;;	func Test_NodeExists_Positive_NodeDoesntExist(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		nodeExists := dsw.NodeExists(nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if !nodeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Node %q does not exist, it should.", nodeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with new pod/volume/node.
0000000000000000000000000000000000000000;;	// Calls VolumeExists() on that volume/node.
0000000000000000000000000000000000000000;;	// Verifies volume/node exists, and one volume to attach.
0000000000000000000000000000000000000000;;	func Test_VolumeExists_Positive_VolumeExistsNodeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;		volumeSpec := controllervolumetesting.GetTestVolumeSpec(string(volumeName), volumeName)
0000000000000000000000000000000000000000;;		generatedVolumeName, _ := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volumeSpec, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(generatedVolumeName, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if !volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Volume %q does not exist, it should.", generatedVolumeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolumeName, string(volumeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with new pod/volume1/node.
0000000000000000000000000000000000000000;;	// Calls VolumeExists() on that volume2/node.
0000000000000000000000000000000000000000;;	// Verifies volume2/node does not exist, and one volume to attach.
0000000000000000000000000000000000000000;;	func Test_VolumeExists_Positive_VolumeDoesntExistNodeExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(nodeName, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		podName := "pod-uid"
0000000000000000000000000000000000000000;;		volume1Name := v1.UniqueVolumeName("volume1-name")
0000000000000000000000000000000000000000;;		volume1Spec := controllervolumetesting.GetTestVolumeSpec(string(volume1Name), volume1Name)
0000000000000000000000000000000000000000;;		generatedVolume1Name, podAddErr := dsw.AddPod(types.UniquePodName(podName), controllervolumetesting.NewPod(podName, podName), volume1Spec, nodeName)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				podName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volume2Name := v1.UniqueVolumeName("volume2-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volume2Name, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Volume %q exists, it should not.", volume2Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <1> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, nodeName, generatedVolume1Name, string(volume1Name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls VolumeExists() on some volume/node.
0000000000000000000000000000000000000000;;	// Verifies volume/node do not exist, and zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_VolumeExists_Positive_VolumeDoesntExistNodeDoesntExists(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		nodeName := k8stypes.NodeName("node-name")
0000000000000000000000000000000000000000;;		volumeName := v1.UniqueVolumeName("volume-name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumeExists := dsw.VolumeExists(volumeName, nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if volumeExists {
0000000000000000000000000000000000000000;;			t.Fatalf("Volume %q exists, it should not.", volumeName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls GetVolumesToAttach()
0000000000000000000000000000000000000000;;	// Verifies zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_GetVolumesToAttach_Positive_NoNodes(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if len(volumesToAttach) > 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with two nodes.
0000000000000000000000000000000000000000;;	// Calls GetVolumesToAttach()
0000000000000000000000000000000000000000;;	// Verifies zero volumes to attach.
0000000000000000000000000000000000000000;;	func Test_GetVolumesToAttach_Positive_TwoNodes(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		node1Name := k8stypes.NodeName("node1-name")
0000000000000000000000000000000000000000;;		node2Name := k8stypes.NodeName("node2-name")
0000000000000000000000000000000000000000;;		dsw.AddNode(node1Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		dsw.AddNode(node2Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <0> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with two nodes with one volume/pod each.
0000000000000000000000000000000000000000;;	// Calls GetVolumesToAttach()
0000000000000000000000000000000000000000;;	// Verifies two volumes to attach.
0000000000000000000000000000000000000000;;	func Test_GetVolumesToAttach_Positive_TwoNodesOneVolumeEach(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		node1Name := k8stypes.NodeName("node1-name")
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		volume1Name := v1.UniqueVolumeName("volume1-name")
0000000000000000000000000000000000000000;;		volume1Spec := controllervolumetesting.GetTestVolumeSpec(string(volume1Name), volume1Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node1Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume1Name, podAddErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volume1Spec, node1Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node2Name := k8stypes.NodeName("node2-name")
0000000000000000000000000000000000000000;;		pod2Name := "pod2-uid"
0000000000000000000000000000000000000000;;		volume2Name := v1.UniqueVolumeName("volume2-name")
0000000000000000000000000000000000000000;;		volume2Spec := controllervolumetesting.GetTestVolumeSpec(string(volume2Name), volume2Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node2Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume2Name, podAddErr := dsw.AddPod(types.UniquePodName(pod2Name), controllervolumetesting.NewPod(pod2Name, pod2Name), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <2> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node1Name, generatedVolume1Name, string(volume1Name))
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node2Name, generatedVolume2Name, string(volume2Name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with two nodes with one volume/pod each and an extra
0000000000000000000000000000000000000000;;	// pod for the second node/volume pair.
0000000000000000000000000000000000000000;;	// Calls GetVolumesToAttach()
0000000000000000000000000000000000000000;;	// Verifies two volumes to attach.
0000000000000000000000000000000000000000;;	func Test_GetVolumesToAttach_Positive_TwoNodesOneVolumeEachExtraPod(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		node1Name := k8stypes.NodeName("node1-name")
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		volume1Name := v1.UniqueVolumeName("volume1-name")
0000000000000000000000000000000000000000;;		volume1Spec := controllervolumetesting.GetTestVolumeSpec(string(volume1Name), volume1Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node1Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume1Name, podAddErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volume1Spec, node1Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node2Name := k8stypes.NodeName("node2-name")
0000000000000000000000000000000000000000;;		pod2Name := "pod2-uid"
0000000000000000000000000000000000000000;;		volume2Name := v1.UniqueVolumeName("volume2-name")
0000000000000000000000000000000000000000;;		volume2Spec := controllervolumetesting.GetTestVolumeSpec(string(volume2Name), volume2Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node2Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume2Name, podAddErr := dsw.AddPod(types.UniquePodName(pod2Name), controllervolumetesting.NewPod(pod2Name, pod2Name), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod3Name := "pod3-uid"
0000000000000000000000000000000000000000;;		dsw.AddPod(types.UniquePodName(pod3Name), controllervolumetesting.NewPod(pod3Name, pod3Name), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		_, podAddErr = dsw.AddPod(types.UniquePodName(pod3Name), controllervolumetesting.NewPod(pod3Name, pod3Name), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod3Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <2> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node1Name, generatedVolume1Name, string(volume1Name))
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node2Name, generatedVolume2Name, string(volume2Name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Populates data struct with two nodes with one volume/pod on one node and two
0000000000000000000000000000000000000000;;	// volume/pod pairs on the other node.
0000000000000000000000000000000000000000;;	// Calls GetVolumesToAttach()
0000000000000000000000000000000000000000;;	// Verifies three volumes to attach.
0000000000000000000000000000000000000000;;	func Test_GetVolumesToAttach_Positive_TwoNodesThreeVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		volumePluginMgr, _ := volumetesting.GetTestVolumePluginMgr(t)
0000000000000000000000000000000000000000;;		dsw := NewDesiredStateOfWorld(volumePluginMgr)
0000000000000000000000000000000000000000;;		node1Name := k8stypes.NodeName("node1-name")
0000000000000000000000000000000000000000;;		pod1Name := "pod1-uid"
0000000000000000000000000000000000000000;;		volume1Name := v1.UniqueVolumeName("volume1-name")
0000000000000000000000000000000000000000;;		volume1Spec := controllervolumetesting.GetTestVolumeSpec(string(volume1Name), volume1Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node1Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume1Name, podAddErr := dsw.AddPod(types.UniquePodName(pod1Name), controllervolumetesting.NewPod(pod1Name, pod1Name), volume1Spec, node1Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod1Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node2Name := k8stypes.NodeName("node2-name")
0000000000000000000000000000000000000000;;		pod2aName := "pod2a-name"
0000000000000000000000000000000000000000;;		volume2Name := v1.UniqueVolumeName("volume2-name")
0000000000000000000000000000000000000000;;		volume2Spec := controllervolumetesting.GetTestVolumeSpec(string(volume2Name), volume2Name)
0000000000000000000000000000000000000000;;		dsw.AddNode(node2Name, false /*keepTerminatedPodVolumes*/)
0000000000000000000000000000000000000000;;		generatedVolume2Name1, podAddErr := dsw.AddPod(types.UniquePodName(pod2aName), controllervolumetesting.NewPod(pod2aName, pod2aName), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2aName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod2bName := "pod2b-name"
0000000000000000000000000000000000000000;;		generatedVolume2Name2, podAddErr := dsw.AddPod(types.UniquePodName(pod2bName), controllervolumetesting.NewPod(pod2bName, pod2bName), volume2Spec, node2Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod2bName,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if generatedVolume2Name1 != generatedVolume2Name2 {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"Generated volume names for the same volume should be the same but they are not: %q and %q",
0000000000000000000000000000000000000000;;				generatedVolume2Name1,
0000000000000000000000000000000000000000;;				generatedVolume2Name2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod3Name := "pod3-uid"
0000000000000000000000000000000000000000;;		volume3Name := v1.UniqueVolumeName("volume3-name")
0000000000000000000000000000000000000000;;		volume3Spec := controllervolumetesting.GetTestVolumeSpec(string(volume3Name), volume3Name)
0000000000000000000000000000000000000000;;		generatedVolume3Name, podAddErr := dsw.AddPod(types.UniquePodName(pod3Name), controllervolumetesting.NewPod(pod3Name, pod3Name), volume3Spec, node1Name)
0000000000000000000000000000000000000000;;		if podAddErr != nil {
0000000000000000000000000000000000000000;;			t.Fatalf(
0000000000000000000000000000000000000000;;				"AddPod failed for pod %q. Expected: <no error> Actual: <%v>",
0000000000000000000000000000000000000000;;				pod3Name,
0000000000000000000000000000000000000000;;				podAddErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		volumesToAttach := dsw.GetVolumesToAttach()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if len(volumesToAttach) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("len(volumesToAttach) Expected: <3> Actual: <%v>", len(volumesToAttach))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node1Name, generatedVolume1Name, string(volume1Name))
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node2Name, generatedVolume2Name1, string(volume2Name))
0000000000000000000000000000000000000000;;		verifyVolumeToAttach(t, volumesToAttach, node1Name, generatedVolume3Name, string(volume3Name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyVolumeToAttach(
0000000000000000000000000000000000000000;;		t *testing.T,
0000000000000000000000000000000000000000;;		volumesToAttach []VolumeToAttach,
0000000000000000000000000000000000000000;;		expectedNodeName k8stypes.NodeName,
0000000000000000000000000000000000000000;;		expectedVolumeName v1.UniqueVolumeName,
0000000000000000000000000000000000000000;;		expectedVolumeSpecName string) {
0000000000000000000000000000000000000000;;		for _, volumeToAttach := range volumesToAttach {
0000000000000000000000000000000000000000;;			if volumeToAttach.NodeName == expectedNodeName &&
0000000000000000000000000000000000000000;;				volumeToAttach.VolumeName == expectedVolumeName &&
0000000000000000000000000000000000000000;;				volumeToAttach.VolumeSpec.Name() == expectedVolumeSpecName {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Fatalf("volumesToAttach (%v) should contain %q/%q. It does not.", volumesToAttach, expectedVolumeName, expectedNodeName)
0000000000000000000000000000000000000000;;	}
