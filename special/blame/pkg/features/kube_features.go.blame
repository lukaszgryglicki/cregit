0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6336e1863a9aa68d5ece4751b75d6dd346155110;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package features
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		genericfeatures "k8s.io/apiserver/pkg/features"
0000000000000000000000000000000000000000;;		utilfeature "k8s.io/apiserver/pkg/util/feature"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Every feature gate should add method here following this template:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// // owner: @username
0000000000000000000000000000000000000000;;		// // alpha: v1.X
0000000000000000000000000000000000000000;;		// MyFeature utilfeature.Feature = "MyFeature"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @tallclair
0000000000000000000000000000000000000000;;		// beta: v1.4
0000000000000000000000000000000000000000;;		AppArmor utilfeature.Feature = "AppArmor"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @girishkalele
0000000000000000000000000000000000000000;;		// alpha: v1.4
0000000000000000000000000000000000000000;;		ExternalTrafficLocalOnly utilfeature.Feature = "AllowExtTrafficLocalEndpoints"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @saad-ali
0000000000000000000000000000000000000000;;		// alpha: v1.3
0000000000000000000000000000000000000000;;		DynamicVolumeProvisioning utilfeature.Feature = "DynamicVolumeProvisioning"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @mtaufen
0000000000000000000000000000000000000000;;		// alpha: v1.4
0000000000000000000000000000000000000000;;		DynamicKubeletConfig utilfeature.Feature = "DynamicKubeletConfig"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: tallclair
0000000000000000000000000000000000000000;;		// alpha: v1.5
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// StreamingProxyRedirects controls whether the apiserver should intercept (and follow)
0000000000000000000000000000000000000000;;		// redirects from the backend (Kubelet) for streaming requests (exec/attach/port-forward).
0000000000000000000000000000000000000000;;		StreamingProxyRedirects utilfeature.Feature = genericfeatures.StreamingProxyRedirects
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @pweil-
0000000000000000000000000000000000000000;;		// alpha: v1.5
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default userns=host for containers that are using other host namespaces, host mounts, the pod
0000000000000000000000000000000000000000;;		// contains a privileged container, or specific non-namespaced capabilities (MKNOD, SYS_MODULE,
0000000000000000000000000000000000000000;;		// SYS_TIME). This should only be enabled if user namespace remapping is enabled in the docker daemon.
0000000000000000000000000000000000000000;;		ExperimentalHostUserNamespaceDefaultingGate utilfeature.Feature = "ExperimentalHostUserNamespaceDefaulting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @vishh
0000000000000000000000000000000000000000;;		// alpha: v1.5
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Ensures guaranteed scheduling of pods marked with a special pod annotation `scheduler.alpha.kubernetes.io/critical-pod`
0000000000000000000000000000000000000000;;		// and also prevents them from being evicted from a node.
0000000000000000000000000000000000000000;;		// Note: This feature is not supported for `BestEffort` pods.
0000000000000000000000000000000000000000;;		ExperimentalCriticalPodAnnotation utilfeature.Feature = "ExperimentalCriticalPodAnnotation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @vishh
0000000000000000000000000000000000000000;;		// alpha: v1.6
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Enables support for GPUs as a schedulable resource.
0000000000000000000000000000000000000000;;		// Only Nvidia GPUs are supported as of v1.6.
0000000000000000000000000000000000000000;;		// Works only with Docker Container Runtime.
0000000000000000000000000000000000000000;;		Accelerators utilfeature.Feature = "Accelerators"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @gmarek
0000000000000000000000000000000000000000;;		// alpha: v1.6
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Changes the logic behind evicting Pods from not ready Nodes
0000000000000000000000000000000000000000;;		// to take advantage of NoExecute Taints and Tolerations.
0000000000000000000000000000000000000000;;		TaintBasedEvictions utilfeature.Feature = "TaintBasedEvictions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @jcbsmpsn
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Gets a server certificate for the kubelet from the Certificate Signing
0000000000000000000000000000000000000000;;		// Request API instead of generating one self signed and auto rotates the
0000000000000000000000000000000000000000;;		// certificate as expiration approaches.
0000000000000000000000000000000000000000;;		RotateKubeletServerCertificate utilfeature.Feature = "RotateKubeletServerCertificate"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @jcbsmpsn
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Automatically renews the client certificate used for communicating with
0000000000000000000000000000000000000000;;		// the API server as the certificate approaches expiration.
0000000000000000000000000000000000000000;;		RotateKubeletClientCertificate utilfeature.Feature = "RotateKubeletClientCertificate"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @msau
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// A new volume type that supports local disks on a node.
0000000000000000000000000000000000000000;;		PersistentLocalVolumes utilfeature.Feature = "PersistentLocalVolumes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @jinxu
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// New local storage types to support local storage capacity isolation
0000000000000000000000000000000000000000;;		LocalStorageCapacityIsolation utilfeature.Feature = "LocalStorageCapacityIsolation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @verb
0000000000000000000000000000000000000000;;		// alpha: v1.8
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Allows running a "debug container" in a pod namespaces to troubleshoot a running pod.
0000000000000000000000000000000000000000;;		DebugContainers utilfeature.Feature = "DebugContainers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @bsalamat
0000000000000000000000000000000000000000;;		// alpha: v1.8
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Add priority to pods. Priority affects scheduling and preemption of pods.
0000000000000000000000000000000000000000;;		PodPriority utilfeature.Feature = "PodPriority"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		utilfeature.DefaultFeatureGate.Add(defaultKubernetesFeatureGates)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultKubernetesFeatureGates consists of all known Kubernetes-specific feature keys.
0000000000000000000000000000000000000000;;	// To add a new feature, define a key for it above and add it here. The features will be
0000000000000000000000000000000000000000;;	// available throughout Kubernetes binaries.
0000000000000000000000000000000000000000;;	var defaultKubernetesFeatureGates = map[utilfeature.Feature]utilfeature.FeatureSpec{
0000000000000000000000000000000000000000;;		ExternalTrafficLocalOnly:                    {Default: true, PreRelease: utilfeature.GA},
0000000000000000000000000000000000000000;;		AppArmor:                                    {Default: true, PreRelease: utilfeature.Beta},
0000000000000000000000000000000000000000;;		DynamicKubeletConfig:                        {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		DynamicVolumeProvisioning:                   {Default: true, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		ExperimentalHostUserNamespaceDefaultingGate: {Default: false, PreRelease: utilfeature.Beta},
0000000000000000000000000000000000000000;;		ExperimentalCriticalPodAnnotation:           {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		Accelerators:                                {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		TaintBasedEvictions:                         {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		RotateKubeletServerCertificate:              {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		RotateKubeletClientCertificate:              {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		PersistentLocalVolumes:                      {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		LocalStorageCapacityIsolation:               {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		DebugContainers:                             {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		PodPriority:                                 {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// inherited features from generic apiserver, relisted here to get a conflict if it is changed
0000000000000000000000000000000000000000;;		// unintentionally on either side:
0000000000000000000000000000000000000000;;		StreamingProxyRedirects:          {Default: true, PreRelease: utilfeature.Beta},
0000000000000000000000000000000000000000;;		genericfeatures.AdvancedAuditing: {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;	}
