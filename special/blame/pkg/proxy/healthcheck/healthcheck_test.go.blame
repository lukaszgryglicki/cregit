0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
593e9700616e97cfd0053e5b535a046f1a2ccc50;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package healthcheck
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeListener struct {
0000000000000000000000000000000000000000;;		openPorts sets.String
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeListener() *fakeListener {
0000000000000000000000000000000000000000;;		return &fakeListener{
0000000000000000000000000000000000000000;;			openPorts: sets.String{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeListener) hasPort(addr string) bool {
0000000000000000000000000000000000000000;;		return fake.openPorts.Has(addr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeListener) Listen(addr string) (net.Listener, error) {
0000000000000000000000000000000000000000;;		fake.openPorts.Insert(addr)
0000000000000000000000000000000000000000;;		return &fakeNetListener{
0000000000000000000000000000000000000000;;			parent: fake,
0000000000000000000000000000000000000000;;			addr:   addr,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeNetListener struct {
0000000000000000000000000000000000000000;;		parent *fakeListener
0000000000000000000000000000000000000000;;		addr   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeNetListener) Accept() (net.Conn, error) {
0000000000000000000000000000000000000000;;		// Not implemented
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeNetListener) Close() error {
0000000000000000000000000000000000000000;;		fake.parent.openPorts.Delete(fake.addr)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeNetListener) Addr() net.Addr {
0000000000000000000000000000000000000000;;		// Not implemented
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHTTPServerFactory struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeHTTPServerFactory() *fakeHTTPServerFactory {
0000000000000000000000000000000000000000;;		return &fakeHTTPServerFactory{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeHTTPServerFactory) New(addr string, handler http.Handler) HTTPServer {
0000000000000000000000000000000000000000;;		return &fakeHTTPServer{
0000000000000000000000000000000000000000;;			addr:    addr,
0000000000000000000000000000000000000000;;			handler: handler,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHTTPServer struct {
0000000000000000000000000000000000000000;;		addr    string
0000000000000000000000000000000000000000;;		handler http.Handler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeHTTPServer) Serve(listener net.Listener) error {
0000000000000000000000000000000000000000;;		return nil // Cause the goroutine to return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mknsn(ns, name string) types.NamespacedName {
0000000000000000000000000000000000000000;;		return types.NamespacedName{
0000000000000000000000000000000000000000;;			Namespace: ns,
0000000000000000000000000000000000000000;;			Name:      name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type hcPayload struct {
0000000000000000000000000000000000000000;;		Service struct {
0000000000000000000000000000000000000000;;			Namespace string
0000000000000000000000000000000000000000;;			Name      string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		LocalEndpoints int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type healthzPayload struct {
0000000000000000000000000000000000000000;;		LastUpdated string
0000000000000000000000000000000000000000;;		CurrentTime string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServer(t *testing.T) {
0000000000000000000000000000000000000000;;		listener := newFakeListener()
0000000000000000000000000000000000000000;;		httpFactory := newFakeHTTPServerFactory()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hcsi := NewServer("hostname", nil, listener, httpFactory)
0000000000000000000000000000000000000000;;		hcs := hcsi.(*server)
0000000000000000000000000000000000000000;;		if len(hcs.services) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync nothing
0000000000000000000000000000000000000000;;		hcs.SyncServices(nil)
0000000000000000000000000000000000000000;;		if len(hcs.services) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(nil)
0000000000000000000000000000000000000000;;		if len(hcs.services) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync unknown endpoints, should be dropped
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{mknsn("a", "b"): 93})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync a real service
0000000000000000000000000000000000000000;;		nsn := mknsn("a", "b")
0000000000000000000000000000000000000000;;		hcs.SyncServices(map[types.NamespacedName]uint16{nsn: 9376})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(listener.openPorts) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 open port, got %d\n%s", len(listener.openPorts), spew.Sdump(listener.openPorts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !listener.hasPort(":9376") {
0000000000000000000000000000000000000000;;			t.Errorf("expected port :9376 to be open\n%s", spew.Sdump(listener.openPorts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handler
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync an endpoint
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{nsn: 18})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 18 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 18 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handler
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn, http.StatusOK, 18, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync zero endpoints
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{nsn: 0})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handler
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// put the endpoint back
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{nsn: 11})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 11 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 18 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// sync nil endpoints
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(nil)
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handler
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// put the endpoint back
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{nsn: 18})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 1 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn].endpoints != 18 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 18 endpoints, got %d", hcs.services[nsn].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// delete the service
0000000000000000000000000000000000000000;;		hcs.SyncServices(nil)
0000000000000000000000000000000000000000;;		if len(hcs.services) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync multiple services
0000000000000000000000000000000000000000;;		nsn1 := mknsn("a", "b")
0000000000000000000000000000000000000000;;		nsn2 := mknsn("c", "d")
0000000000000000000000000000000000000000;;		nsn3 := mknsn("e", "f")
0000000000000000000000000000000000000000;;		nsn4 := mknsn("g", "h")
0000000000000000000000000000000000000000;;		hcs.SyncServices(map[types.NamespacedName]uint16{
0000000000000000000000000000000000000000;;			nsn1: 9376,
0000000000000000000000000000000000000000;;			nsn2: 12909,
0000000000000000000000000000000000000000;;			nsn3: 11113,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn1].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn1].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn2].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn2].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn3].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn3].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(listener.openPorts) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 open ports, got %d\n%s", len(listener.openPorts), spew.Sdump(listener.openPorts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handlers
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn1, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn2, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn3, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync endpoints
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{
0000000000000000000000000000000000000000;;			nsn1: 9,
0000000000000000000000000000000000000000;;			nsn2: 3,
0000000000000000000000000000000000000000;;			nsn3: 7,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn1].endpoints != 9 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 9 endpoints, got %d", hcs.services[nsn1].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn2].endpoints != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 endpoints, got %d", hcs.services[nsn2].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn3].endpoints != 7 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 7 endpoints, got %d", hcs.services[nsn3].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handlers
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn1, http.StatusOK, 9, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn2, http.StatusOK, 3, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn3, http.StatusOK, 7, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync new services
0000000000000000000000000000000000000000;;		hcs.SyncServices(map[types.NamespacedName]uint16{
0000000000000000000000000000000000000000;;			//nsn1: 9376, // remove it
0000000000000000000000000000000000000000;;			nsn2: 12909, // leave it
0000000000000000000000000000000000000000;;			nsn3: 11114, // change it
0000000000000000000000000000000000000000;;			nsn4: 11878, // add it
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 service, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn2].endpoints != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 endpoints, got %d", hcs.services[nsn2].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn3].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn3].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn4].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn4].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handlers
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn2, http.StatusOK, 3, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn3, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn4, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync endpoints
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{
0000000000000000000000000000000000000000;;			nsn1: 9,
0000000000000000000000000000000000000000;;			nsn2: 3,
0000000000000000000000000000000000000000;;			nsn3: 7,
0000000000000000000000000000000000000000;;			nsn4: 6,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn2].endpoints != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 endpoints, got %d", hcs.services[nsn2].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn3].endpoints != 7 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 7 endpoints, got %d", hcs.services[nsn3].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn4].endpoints != 6 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 6 endpoints, got %d", hcs.services[nsn4].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handlers
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn2, http.StatusOK, 3, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn3, http.StatusOK, 7, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn4, http.StatusOK, 6, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sync endpoints, missing nsn2
0000000000000000000000000000000000000000;;		hcs.SyncEndpoints(map[types.NamespacedName]int{
0000000000000000000000000000000000000000;;			nsn3: 7,
0000000000000000000000000000000000000000;;			nsn4: 6,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if len(hcs.services) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 3 services, got %d", len(hcs.services))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn2].endpoints != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 0 endpoints, got %d", hcs.services[nsn2].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn3].endpoints != 7 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 7 endpoints, got %d", hcs.services[nsn3].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hcs.services[nsn4].endpoints != 6 {
0000000000000000000000000000000000000000;;			t.Errorf("expected 6 endpoints, got %d", hcs.services[nsn4].endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test the handlers
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn2, http.StatusServiceUnavailable, 0, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn3, http.StatusOK, 7, t)
0000000000000000000000000000000000000000;;		testHandler(hcs, nsn4, http.StatusOK, 6, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testHandler(hcs *server, nsn types.NamespacedName, status int, endpoints int, t *testing.T) {
0000000000000000000000000000000000000000;;		handler := hcs.services[nsn].server.(*fakeHTTPServer).handler
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "/healthz", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp := httptest.NewRecorder()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ServeHTTP(resp, req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.Code != status {
0000000000000000000000000000000000000000;;			t.Errorf("expected status code %v, got %v", status, resp.Code)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var payload hcPayload
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp.Body.Bytes(), &payload); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if payload.Service.Name != nsn.Name || payload.Service.Namespace != nsn.Namespace {
0000000000000000000000000000000000000000;;			t.Errorf("expected payload name %q, got %v", nsn.String(), payload.Service)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if payload.LocalEndpoints != endpoints {
0000000000000000000000000000000000000000;;			t.Errorf("expected %d endpoints, got %d", endpoints, payload.LocalEndpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHealthzServer(t *testing.T) {
0000000000000000000000000000000000000000;;		listener := newFakeListener()
0000000000000000000000000000000000000000;;		httpFactory := newFakeHTTPServerFactory()
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hs := newHealthzServer(listener, httpFactory, fakeClock, "127.0.0.1:10256", 10*time.Second)
0000000000000000000000000000000000000000;;		server := hs.httpFactory.New(hs.addr, healthzHandler{hs: hs})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should return 200 "OK" by default.
0000000000000000000000000000000000000000;;		testHealthzHandler(server, http.StatusOK, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should return 503 "ServiceUnavailable" if exceed max no respond duration.
0000000000000000000000000000000000000000;;		hs.UpdateTimestamp()
0000000000000000000000000000000000000000;;		fakeClock.Step(25 * time.Second)
0000000000000000000000000000000000000000;;		testHealthzHandler(server, http.StatusServiceUnavailable, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Should return 200 "OK" if timestamp is valid.
0000000000000000000000000000000000000000;;		hs.UpdateTimestamp()
0000000000000000000000000000000000000000;;		fakeClock.Step(5 * time.Second)
0000000000000000000000000000000000000000;;		testHealthzHandler(server, http.StatusOK, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testHealthzHandler(server HTTPServer, status int, t *testing.T) {
0000000000000000000000000000000000000000;;		handler := server.(*fakeHTTPServer).handler
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "/healthz", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp := httptest.NewRecorder()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ServeHTTP(resp, req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.Code != status {
0000000000000000000000000000000000000000;;			t.Errorf("expected status code %v, got %v", status, resp.Code)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var payload healthzPayload
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp.Body.Bytes(), &payload); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
