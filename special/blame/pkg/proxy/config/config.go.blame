0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreinformers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion/core/internalversion"
0000000000000000000000000000000000000000;;		listers "k8s.io/kubernetes/pkg/client/listers/core/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceHandler is an abstract interface of objects which receive
0000000000000000000000000000000000000000;;	// notifications about service object changes.
0000000000000000000000000000000000000000;;	type ServiceHandler interface {
0000000000000000000000000000000000000000;;		// OnServiceAdd is called whenever creation of new service object
0000000000000000000000000000000000000000;;		// is observed.
0000000000000000000000000000000000000000;;		OnServiceAdd(service *api.Service)
0000000000000000000000000000000000000000;;		// OnServiceUpdate is called whenever modification of an existing
0000000000000000000000000000000000000000;;		// service object is observed.
0000000000000000000000000000000000000000;;		OnServiceUpdate(oldService, service *api.Service)
0000000000000000000000000000000000000000;;		// OnServiceDelete is called whenever deletion of an existing service
0000000000000000000000000000000000000000;;		// object is observed.
0000000000000000000000000000000000000000;;		OnServiceDelete(service *api.Service)
0000000000000000000000000000000000000000;;		// OnServiceSynced is called once all the initial even handlers were
0000000000000000000000000000000000000000;;		// called and the state is fully propagated to local cache.
0000000000000000000000000000000000000000;;		OnServiceSynced()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EndpointsHandler is an abstract interface of objects which receive
0000000000000000000000000000000000000000;;	// notifications about endpoints object changes.
0000000000000000000000000000000000000000;;	type EndpointsHandler interface {
0000000000000000000000000000000000000000;;		// OnEndpointsAdd is called whenever creation of new endpoints object
0000000000000000000000000000000000000000;;		// is observed.
0000000000000000000000000000000000000000;;		OnEndpointsAdd(endpoints *api.Endpoints)
0000000000000000000000000000000000000000;;		// OnEndpointsUpdate is called whenever modification of an existing
0000000000000000000000000000000000000000;;		// endpoints object is observed.
0000000000000000000000000000000000000000;;		OnEndpointsUpdate(oldEndpoints, endpoints *api.Endpoints)
0000000000000000000000000000000000000000;;		// OnEndpointsDelete is called whever deletion of an existing endpoints
0000000000000000000000000000000000000000;;		// object is observed.
0000000000000000000000000000000000000000;;		OnEndpointsDelete(endpoints *api.Endpoints)
0000000000000000000000000000000000000000;;		// OnEndpointsSynced is called once all the initial event handlers were
0000000000000000000000000000000000000000;;		// called and the state is fully propagated to local cache.
0000000000000000000000000000000000000000;;		OnEndpointsSynced()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EndpointsConfig tracks a set of endpoints configurations.
0000000000000000000000000000000000000000;;	// It accepts "set", "add" and "remove" operations of endpoints via channels, and invokes registered handlers on change.
0000000000000000000000000000000000000000;;	type EndpointsConfig struct {
0000000000000000000000000000000000000000;;		lister        listers.EndpointsLister
0000000000000000000000000000000000000000;;		listerSynced  cache.InformerSynced
0000000000000000000000000000000000000000;;		eventHandlers []EndpointsHandler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEndpointsConfig creates a new EndpointsConfig.
0000000000000000000000000000000000000000;;	func NewEndpointsConfig(endpointsInformer coreinformers.EndpointsInformer, resyncPeriod time.Duration) *EndpointsConfig {
0000000000000000000000000000000000000000;;		result := &EndpointsConfig{
0000000000000000000000000000000000000000;;			lister:       endpointsInformer.Lister(),
0000000000000000000000000000000000000000;;			listerSynced: endpointsInformer.Informer().HasSynced,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpointsInformer.Informer().AddEventHandlerWithResyncPeriod(
0000000000000000000000000000000000000000;;			cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;				AddFunc:    result.handleAddEndpoints,
0000000000000000000000000000000000000000;;				UpdateFunc: result.handleUpdateEndpoints,
0000000000000000000000000000000000000000;;				DeleteFunc: result.handleDeleteEndpoints,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterEventHandler registers a handler which is called on every endpoints change.
0000000000000000000000000000000000000000;;	func (c *EndpointsConfig) RegisterEventHandler(handler EndpointsHandler) {
0000000000000000000000000000000000000000;;		c.eventHandlers = append(c.eventHandlers, handler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run starts the goroutine responsible for calling registered handlers.
0000000000000000000000000000000000000000;;	func (c *EndpointsConfig) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		defer utilruntime.HandleCrash()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Info("Starting endpoints config controller")
0000000000000000000000000000000000000000;;		defer glog.Info("Shutting down endpoints config controller")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !controller.WaitForCacheSync("endpoints config", stopCh, c.listerSynced) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Calling handler.OnEndpointsSynced()")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnEndpointsSynced()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-stopCh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *EndpointsConfig) handleAddEndpoints(obj interface{}) {
0000000000000000000000000000000000000000;;		endpoints, ok := obj.(*api.Endpoints)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnEndpointsAdd")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnEndpointsAdd(endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *EndpointsConfig) handleUpdateEndpoints(oldObj, newObj interface{}) {
0000000000000000000000000000000000000000;;		oldEndpoints, ok := oldObj.(*api.Endpoints)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", oldObj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoints, ok := newObj.(*api.Endpoints)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", newObj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnEndpointsUpdate")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnEndpointsUpdate(oldEndpoints, endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *EndpointsConfig) handleDeleteEndpoints(obj interface{}) {
0000000000000000000000000000000000000000;;		endpoints, ok := obj.(*api.Endpoints)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if endpoints, ok = tombstone.Obj.(*api.Endpoints); !ok {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnEndpointsDelete")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnEndpointsDelete(endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceConfig tracks a set of service configurations.
0000000000000000000000000000000000000000;;	// It accepts "set", "add" and "remove" operations of services via channels, and invokes registered handlers on change.
0000000000000000000000000000000000000000;;	type ServiceConfig struct {
0000000000000000000000000000000000000000;;		lister        listers.ServiceLister
0000000000000000000000000000000000000000;;		listerSynced  cache.InformerSynced
0000000000000000000000000000000000000000;;		eventHandlers []ServiceHandler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServiceConfig creates a new ServiceConfig.
0000000000000000000000000000000000000000;;	func NewServiceConfig(serviceInformer coreinformers.ServiceInformer, resyncPeriod time.Duration) *ServiceConfig {
0000000000000000000000000000000000000000;;		result := &ServiceConfig{
0000000000000000000000000000000000000000;;			lister:       serviceInformer.Lister(),
0000000000000000000000000000000000000000;;			listerSynced: serviceInformer.Informer().HasSynced,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceInformer.Informer().AddEventHandlerWithResyncPeriod(
0000000000000000000000000000000000000000;;			cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;				AddFunc:    result.handleAddService,
0000000000000000000000000000000000000000;;				UpdateFunc: result.handleUpdateService,
0000000000000000000000000000000000000000;;				DeleteFunc: result.handleDeleteService,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterEventHandler registers a handler which is called on every service change.
0000000000000000000000000000000000000000;;	func (c *ServiceConfig) RegisterEventHandler(handler ServiceHandler) {
0000000000000000000000000000000000000000;;		c.eventHandlers = append(c.eventHandlers, handler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run starts the goroutine responsible for calling
0000000000000000000000000000000000000000;;	// registered handlers.
0000000000000000000000000000000000000000;;	func (c *ServiceConfig) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		defer utilruntime.HandleCrash()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Info("Starting service config controller")
0000000000000000000000000000000000000000;;		defer glog.Info("Shutting down service config controller")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !controller.WaitForCacheSync("service config", stopCh, c.listerSynced) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(3).Infof("Calling handler.OnServiceSynced()")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnServiceSynced()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-stopCh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceConfig) handleAddService(obj interface{}) {
0000000000000000000000000000000000000000;;		service, ok := obj.(*api.Service)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnServiceAdd")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnServiceAdd(service)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceConfig) handleUpdateService(oldObj, newObj interface{}) {
0000000000000000000000000000000000000000;;		oldService, ok := oldObj.(*api.Service)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", oldObj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		service, ok := newObj.(*api.Service)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", newObj))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnServiceUpdate")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnServiceUpdate(oldService, service)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceConfig) handleDeleteService(obj interface{}) {
0000000000000000000000000000000000000000;;		service, ok := obj.(*api.Service)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if service, ok = tombstone.Obj.(*api.Service); !ok {
0000000000000000000000000000000000000000;;				utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range c.eventHandlers {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Calling handler.OnServiceDelete")
0000000000000000000000000000000000000000;;			c.eventHandlers[i].OnServiceDelete(service)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
