0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
08d86636a81df173cc2dc695ff521f0a854e384b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package config provides decoupling between various configuration sources (etcd, files,...) and
0000000000000000000000000000000000000000;;	// the pieces that actually care about them (loadbalancer, proxy). Config takes 1 or more
0000000000000000000000000000000000000000;;	// configuration sources and allows for incremental (add/remove) and full replace (set)
0000000000000000000000000000000000000000;;	// changes from each of the sources, then creates a union of the configuration and provides
0000000000000000000000000000000000000000;;	// a unified view for both service handlers as well as endpoint handlers. There is no attempt
0000000000000000000000000000000000000000;;	// to resolve conflicts of any sort. Basic idea is that each configuration source gets a channel
0000000000000000000000000000000000000000;;	// from the Config service and pushes updates to it via that channel. Config then keeps track of
0000000000000000000000000000000000000000;;	// incremental & replace changes and distributes them to listeners as appropriate.
0000000000000000000000000000000000000000;;	package config // import "k8s.io/kubernetes/pkg/proxy/config"
