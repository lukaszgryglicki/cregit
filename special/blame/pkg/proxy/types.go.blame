0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
89b79096aecf0d8d3f12ee5f4d039ac3e763da7a;pkg/proxy/proxy_provider.go[pkg/proxy/proxy_provider.go][pkg/proxy/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProxyProvider is the interface provided by proxier implementations.
0000000000000000000000000000000000000000;;	type ProxyProvider interface {
0000000000000000000000000000000000000000;;		// Sync immediately synchronizes the ProxyProvider's current state to iptables.
0000000000000000000000000000000000000000;;		Sync()
0000000000000000000000000000000000000000;;		// SyncLoop runs periodic work.
0000000000000000000000000000000000000000;;		// This is expected to run as a goroutine or as the main loop of the app.
0000000000000000000000000000000000000000;;		// It does not return.
0000000000000000000000000000000000000000;;		SyncLoop()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePortName carries a namespace + name + portname.  This is the unique
0000000000000000000000000000000000000000;;	// identfier for a load-balanced service.
0000000000000000000000000000000000000000;;	type ServicePortName struct {
0000000000000000000000000000000000000000;;		types.NamespacedName
0000000000000000000000000000000000000000;;		Port string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spn ServicePortName) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s:%s", spn.NamespacedName.String(), spn.Port)
0000000000000000000000000000000000000000;;	}
