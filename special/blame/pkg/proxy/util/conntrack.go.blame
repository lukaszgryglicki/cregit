0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3ccac40b88af2e783760e93d64fb7d1cc96e58cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Utilities for dealing with conntrack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const noConnectionToDelete = "0 flow entries have been deleted"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteServiceConnection uses the conntrack tool to delete the conntrack entries
0000000000000000000000000000000000000000;;	// for the UDP connections specified by the given service IPs
0000000000000000000000000000000000000000;;	func DeleteServiceConnections(execer exec.Interface, svcIPs []string) {
0000000000000000000000000000000000000000;;		for _, ip := range svcIPs {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Deleting connection tracking state for service IP %s", ip)
0000000000000000000000000000000000000000;;			err := ExecConntrackTool(execer, "-D", "--orig-dst", ip, "-p", "udp")
0000000000000000000000000000000000000000;;			if err != nil && !strings.Contains(err.Error(), noConnectionToDelete) {
0000000000000000000000000000000000000000;;				// TODO: Better handling for deletion failure. When failure occur, stale udp connection may not get flushed.
0000000000000000000000000000000000000000;;				// These stale udp connection will keep black hole traffic. Making this a best effort operation for now, since it
0000000000000000000000000000000000000000;;				// is expensive to baby-sit all udp connections to kubernetes services.
0000000000000000000000000000000000000000;;				glog.Errorf("conntrack returned error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExecConntrackTool executes the conntrack tool using the given parameters
0000000000000000000000000000000000000000;;	func ExecConntrackTool(execer exec.Interface, parameters ...string) error {
0000000000000000000000000000000000000000;;		conntrackPath, err := execer.LookPath("conntrack")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error looking for path of conntrack: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := execer.Command(conntrackPath, parameters...).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("conntrack command returned: %q, error message: %s", string(output), err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
