0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
3ccac40b88af2e783760e93d64fb7d1cc96e58cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecConntrackTool(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte("1 flow entries have been deleted"), nil },
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte("1 flow entries have been deleted"), nil },
0000000000000000000000000000000000000000;;				func() ([]byte, error) {
0000000000000000000000000000000000000000;;					return []byte(""), fmt.Errorf("conntrack v1.4.2 (conntrack-tools): 0 flow entries have been deleted.")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			LookPathFunc: func(cmd string) (string, error) { return cmd, nil },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := [][]string{
0000000000000000000000000000000000000000;;			{"-L", "-p", "udp"},
0000000000000000000000000000000000000000;;			{"-D", "-p", "udp", "-d", "10.0.240.1"},
0000000000000000000000000000000000000000;;			{"-D", "-p", "udp", "--orig-dst", "10.240.0.2", "--dst-nat", "10.0.10.2"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectErr := []bool{false, false, true}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range testCases {
0000000000000000000000000000000000000000;;			err := ExecConntrackTool(&fexec, testCases[i]...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if expectErr[i] {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("expected err, got %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("expected success, got %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			execCmd := strings.Join(fcmd.CombinedOutputLog[i], " ")
0000000000000000000000000000000000000000;;			expectCmd := fmt.Sprintf("%s %s", "conntrack", strings.Join(testCases[i], " "))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if execCmd != expectCmd {
0000000000000000000000000000000000000000;;				t.Errorf("expect execute command: %s, but got: %s", expectCmd, execCmd)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteServiceConnections(t *testing.T) {
0000000000000000000000000000000000000000;;		fcmd := exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: []exec.FakeCombinedOutputAction{
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte("1 flow entries have been deleted"), nil },
0000000000000000000000000000000000000000;;				func() ([]byte, error) { return []byte("1 flow entries have been deleted"), nil },
0000000000000000000000000000000000000000;;				func() ([]byte, error) {
0000000000000000000000000000000000000000;;					return []byte(""), fmt.Errorf("conntrack v1.4.2 (conntrack-tools): 0 flow entries have been deleted.")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fexec := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: []exec.FakeCommandAction{
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;				func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			LookPathFunc: func(cmd string) (string, error) { return cmd, nil },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := [][]string{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"10.240.0.3",
0000000000000000000000000000000000000000;;				"10.240.0.5",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"10.240.0.4",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		svcCount := 0
0000000000000000000000000000000000000000;;		for i := range testCases {
0000000000000000000000000000000000000000;;			DeleteServiceConnections(&fexec, testCases[i])
0000000000000000000000000000000000000000;;			for _, ip := range testCases[i] {
0000000000000000000000000000000000000000;;				expectCommand := fmt.Sprintf("conntrack -D --orig-dst %s -p udp", ip)
0000000000000000000000000000000000000000;;				execCommand := strings.Join(fcmd.CombinedOutputLog[svcCount], " ")
0000000000000000000000000000000000000000;;				if expectCommand != execCommand {
0000000000000000000000000000000000000000;;					t.Errorf("Exepect comand: %s, but executed %s", expectCommand, execCommand)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				svcCount += 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if svcCount != fexec.CommandCalls {
0000000000000000000000000000000000000000;;				t.Errorf("Exepect comand executed %d times, but got %d", svcCount, fexec.CommandCalls)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
