0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bbc5eb69e2cda2afd467f459f39e4b5869ac1469;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudProviderOptions struct {
0000000000000000000000000000000000000000;;		CloudConfigFile string
0000000000000000000000000000000000000000;;		CloudProvider   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCloudProviderOptions() *CloudProviderOptions {
0000000000000000000000000000000000000000;;		return &CloudProviderOptions{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CloudProviderOptions) Validate() []error {
0000000000000000000000000000000000000000;;		allErrors := []error{}
0000000000000000000000000000000000000000;;		return allErrors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CloudProviderOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.StringVar(&s.CloudProvider, "cloud-provider", s.CloudProvider,
0000000000000000000000000000000000000000;;			"The provider for cloud services. Empty string for no provider.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.CloudConfigFile, "cloud-config", s.CloudConfigFile,
0000000000000000000000000000000000000000;;			"The path to the cloud provider configuration file. Empty string for no configuration file.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CloudProviderOptions) DefaultExternalHost(genericoptions *genericoptions.ServerRunOptions) error {
0000000000000000000000000000000000000000;;		if len(genericoptions.ExternalHost) != 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cloudprovider.IsCloudProvider(s.CloudProvider) {
0000000000000000000000000000000000000000;;			cloud, err := cloudprovider.InitCloudProvider(s.CloudProvider, s.CloudConfigFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("%q cloud provider could not be initialized: %v", s.CloudProvider, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			instances, supported := cloud.Instances()
0000000000000000000000000000000000000000;;			if !supported {
0000000000000000000000000000000000000000;;				return fmt.Errorf("%q cloud provider has no instances", s.CloudProvider)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hostname, err := os.Hostname()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to get hostname: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nodeName, err := instances.CurrentNodeName(hostname)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to get NodeName from %q cloud provider: %v", s.CloudProvider, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			addrs, err := instances.NodeAddresses(nodeName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to get external host address from %q cloud provider: %v", s.CloudProvider, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, addr := range addrs {
0000000000000000000000000000000000000000;;					if addr.Type == v1.NodeExternalIP {
0000000000000000000000000000000000000000;;						genericoptions.ExternalHost = addr.Address
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
