0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2bfd9c3fa74e3314908cfa674497951eeb7c9e7a;pkg/genericapiserver/server_run_options_test.go[pkg/genericapiserver/server_run_options_test.go][pkg/kubeapiserver/options/storage_versions_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateStorageVersionMap(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			legacyVersion   string
0000000000000000000000000000000000000000;;			storageVersions string
0000000000000000000000000000000000000000;;			defaultVersions string
0000000000000000000000000000000000000000;;			expectedMap     map[string]schema.GroupVersion
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				legacyVersion:   "v1",
0000000000000000000000000000000000000000;;				storageVersions: "v1,extensions/v1beta1",
0000000000000000000000000000000000000000;;				expectedMap: map[string]schema.GroupVersion{
0000000000000000000000000000000000000000;;					"":           {Version: "v1"},
0000000000000000000000000000000000000000;;					"extensions": {Group: "extensions", Version: "v1beta1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				legacyVersion:   "",
0000000000000000000000000000000000000000;;				storageVersions: "extensions/v1beta1,v1",
0000000000000000000000000000000000000000;;				expectedMap: map[string]schema.GroupVersion{
0000000000000000000000000000000000000000;;					"":           {Version: "v1"},
0000000000000000000000000000000000000000;;					"extensions": {Group: "extensions", Version: "v1beta1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				legacyVersion:   "",
0000000000000000000000000000000000000000;;				storageVersions: "autoscaling=extensions/v1beta1,v1",
0000000000000000000000000000000000000000;;				defaultVersions: "extensions/v1beta1,v1,autoscaling/v1",
0000000000000000000000000000000000000000;;				expectedMap: map[string]schema.GroupVersion{
0000000000000000000000000000000000000000;;					"":            {Version: "v1"},
0000000000000000000000000000000000000000;;					"autoscaling": {Group: "extensions", Version: "v1beta1"},
0000000000000000000000000000000000000000;;					"extensions":  {Group: "extensions", Version: "v1beta1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				legacyVersion:   "",
0000000000000000000000000000000000000000;;				storageVersions: "",
0000000000000000000000000000000000000000;;				expectedMap:     map[string]schema.GroupVersion{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			s := &StorageSerializationOptions{
0000000000000000000000000000000000000000;;				StorageVersions:        test.storageVersions,
0000000000000000000000000000000000000000;;				DefaultStorageVersions: test.defaultVersions,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			output, err := s.StorageGroupsToEncodingVersion()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedMap, output) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error. expect: %v, got: %v", i, test.expectedMap, output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
