0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ab79b7415c89ec9d5326d2715686b6fd93796454;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilflag "k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIEnablementOptions contains the options for which resources to turn on and off.
0000000000000000000000000000000000000000;;	// Given small aggregated API servers, this option isn't required for "normal" API servers
0000000000000000000000000000000000000000;;	type APIEnablementOptions struct {
0000000000000000000000000000000000000000;;		RuntimeConfig utilflag.ConfigurationMap
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAPIEnablementOptions() *APIEnablementOptions {
0000000000000000000000000000000000000000;;		return &APIEnablementOptions{
0000000000000000000000000000000000000000;;			RuntimeConfig: make(utilflag.ConfigurationMap),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFlags adds flags for a specific APIServer to the specified FlagSet
0000000000000000000000000000000000000000;;	func (s *APIEnablementOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.Var(&s.RuntimeConfig, "runtime-config", ""+
0000000000000000000000000000000000000000;;			"A set of key=value pairs that describe runtime configuration that may be passed "+
0000000000000000000000000000000000000000;;			"to apiserver. apis/<groupVersion> key can be used to turn on/off specific api versions. "+
0000000000000000000000000000000000000000;;			"apis/<groupVersion>/<resource> can be used to turn on/off specific resources. api/all and "+
0000000000000000000000000000000000000000;;			"api/legacy are special keys to control all and legacy api versions respectively.")
0000000000000000000000000000000000000000;;	}
