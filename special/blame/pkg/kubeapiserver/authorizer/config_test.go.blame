0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ee7891cd8b4c7adaa0f6ab4c8e19965003335a00;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authorizer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubeapiserver/authorizer/modes"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New has multiple return possibilities. This test
0000000000000000000000000000000000000000;;	// validates that errors are returned only when proper.
0000000000000000000000000000000000000000;;	func TestNew(t *testing.T) {
0000000000000000000000000000000000000000;;		examplePolicyFile := "../../auth/authorizer/abac/example_policy_file.jsonl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			config  AuthorizationConfig
0000000000000000000000000000000000000000;;			wantErr bool
0000000000000000000000000000000000000000;;			msg     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Unknown modes should return errors
0000000000000000000000000000000000000000;;				config:  AuthorizationConfig{AuthorizationModes: []string{"DoesNotExist"}},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "using a fake mode should have returned an error",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// ModeAlwaysAllow and ModeAlwaysDeny should return without authorizationPolicyFile
0000000000000000000000000000000000000000;;				// but error if one is given
0000000000000000000000000000000000000000;;				config: AuthorizationConfig{AuthorizationModes: []string{modes.ModeAlwaysAllow, modes.ModeAlwaysDeny}},
0000000000000000000000000000000000000000;;				msg:    "returned an error for valid config",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// ModeABAC requires a policy file
0000000000000000000000000000000000000000;;				config:  AuthorizationConfig{AuthorizationModes: []string{modes.ModeAlwaysAllow, modes.ModeAlwaysDeny, modes.ModeABAC}},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "specifying ABAC with no policy file should return an error",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// ModeABAC should not error if a valid policy path is provided
0000000000000000000000000000000000000000;;				config: AuthorizationConfig{
0000000000000000000000000000000000000000;;					AuthorizationModes: []string{modes.ModeAlwaysAllow, modes.ModeAlwaysDeny, modes.ModeABAC},
0000000000000000000000000000000000000000;;					PolicyFile:         examplePolicyFile,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				msg: "errored while using a valid policy file",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Authorization Policy file cannot be used without ModeABAC
0000000000000000000000000000000000000000;;				config: AuthorizationConfig{
0000000000000000000000000000000000000000;;					AuthorizationModes: []string{modes.ModeAlwaysAllow, modes.ModeAlwaysDeny},
0000000000000000000000000000000000000000;;					PolicyFile:         examplePolicyFile,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "should have errored when Authorization Policy File is used without ModeABAC",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// At least one authorizationMode is necessary
0000000000000000000000000000000000000000;;				config:  AuthorizationConfig{PolicyFile: examplePolicyFile},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "should have errored when no authorization modes are passed",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// ModeWebhook requires at minimum a target.
0000000000000000000000000000000000000000;;				config:  AuthorizationConfig{AuthorizationModes: []string{modes.ModeWebhook}},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "should have errored when config was empty with ModeWebhook",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Cannot provide webhook flags without ModeWebhook
0000000000000000000000000000000000000000;;				config: AuthorizationConfig{
0000000000000000000000000000000000000000;;					AuthorizationModes: []string{modes.ModeAlwaysAllow},
0000000000000000000000000000000000000000;;					WebhookConfigFile:  "authz_webhook_config.yml",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;				msg:     "should have errored when Webhook config file is used without ModeWebhook",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			_, err := tt.config.New()
0000000000000000000000000000000000000000;;			if tt.wantErr && (err == nil) {
0000000000000000000000000000000000000000;;				t.Errorf("New %s", tt.msg)
0000000000000000000000000000000000000000;;			} else if !tt.wantErr && (err != nil) {
0000000000000000000000000000000000000000;;				t.Errorf("New %s: %v", tt.msg, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
