0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f7b54881fd152be858d114eb07f74ed51339c3f8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package modes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ModeAlwaysAllow string = "AlwaysAllow"
0000000000000000000000000000000000000000;;		ModeAlwaysDeny  string = "AlwaysDeny"
0000000000000000000000000000000000000000;;		ModeABAC        string = "ABAC"
0000000000000000000000000000000000000000;;		ModeWebhook     string = "Webhook"
0000000000000000000000000000000000000000;;		ModeRBAC        string = "RBAC"
0000000000000000000000000000000000000000;;		ModeNode        string = "Node"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var AuthorizationModeChoices = []string{ModeAlwaysAllow, ModeAlwaysDeny, ModeABAC, ModeWebhook, ModeRBAC, ModeNode}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValidAuthorizationMode returns true if the given authorization mode is a valid one for the apiserver
0000000000000000000000000000000000000000;;	func IsValidAuthorizationMode(authzMode string) bool {
0000000000000000000000000000000000000000;;		for _, validMode := range AuthorizationModeChoices {
0000000000000000000000000000000000000000;;			if authzMode == validMode {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
