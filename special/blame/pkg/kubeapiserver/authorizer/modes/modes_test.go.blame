0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f7b54881fd152be858d114eb07f74ed51339c3f8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package modes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidAuthorizationMode(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			authzMode string
0000000000000000000000000000000000000000;;			expected  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", false},
0000000000000000000000000000000000000000;;			{"rBAC", false},        // not supported
0000000000000000000000000000000000000000;;			{"falsy value", false}, // not supported
0000000000000000000000000000000000000000;;			{"RBAC", true},         // supported
0000000000000000000000000000000000000000;;			{"ABAC", true},         // supported
0000000000000000000000000000000000000000;;			{"Webhook", true},      // supported
0000000000000000000000000000000000000000;;			{"AlwaysAllow", true},  // supported
0000000000000000000000000000000000000000;;			{"AlwaysDeny", true},   // supported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := IsValidAuthorizationMode(rt.authzMode)
0000000000000000000000000000000000000000;;			if actual != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed ValidAuthorizationMode:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
