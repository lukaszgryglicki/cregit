0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ac735243f7c46a94a8944b413ed6b942694d86ba;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockLister struct {
0000000000000000000000000000000000000000;;		invoked           int
0000000000000000000000000000000000000000;;		successes         int
0000000000000000000000000000000000000000;;		failures          int
0000000000000000000000000000000000000000;;		configurationList v1alpha1.InitializerConfigurationList
0000000000000000000000000000000000000000;;		t                 *testing.T
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newMockLister(successes, failures int, configurationList v1alpha1.InitializerConfigurationList, t *testing.T) *mockLister {
0000000000000000000000000000000000000000;;		return &mockLister{
0000000000000000000000000000000000000000;;			failures:          failures,
0000000000000000000000000000000000000000;;			successes:         successes,
0000000000000000000000000000000000000000;;			configurationList: configurationList,
0000000000000000000000000000000000000000;;			t:                 t,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The first List will be successful; the next m.failures List will
0000000000000000000000000000000000000000;;	// fail; the next m.successes List will be successful
0000000000000000000000000000000000000000;;	// List should only be called 1+m.failures+m.successes times.
0000000000000000000000000000000000000000;;	func (m *mockLister) List(options metav1.ListOptions) (*v1alpha1.InitializerConfigurationList, error) {
0000000000000000000000000000000000000000;;		m.invoked++
0000000000000000000000000000000000000000;;		if m.invoked == 1 {
0000000000000000000000000000000000000000;;			return &m.configurationList, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.invoked <= 1+m.failures {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("some error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.invoked <= 1+m.failures+m.successes {
0000000000000000000000000000000000000000;;			return &m.configurationList, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m.t.Fatalf("unexpected call to List, should only be called %d times", 1+m.successes+m.failures)
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ InitializerConfigurationLister = &mockLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			failures int
0000000000000000000000000000000000000000;;			// note that the first call to mockLister is always a success.
0000000000000000000000000000000000000000;;			successes   int
0000000000000000000000000000000000000000;;			expectReady bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "number of failures hasn't reached failureThreshold",
0000000000000000000000000000000000000000;;				failures:    defaultFailureThreshold - 1,
0000000000000000000000000000000000000000;;				expectReady: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "number of failures just reaches failureThreshold",
0000000000000000000000000000000000000000;;				failures:    defaultFailureThreshold,
0000000000000000000000000000000000000000;;				expectReady: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "number of failures exceeds failureThreshold",
0000000000000000000000000000000000000000;;				failures:    defaultFailureThreshold + 1,
0000000000000000000000000000000000000000;;				expectReady: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "number of failures exceeds failureThreshold, but then get another success",
0000000000000000000000000000000000000000;;				failures:    defaultFailureThreshold + 1,
0000000000000000000000000000000000000000;;				successes:   1,
0000000000000000000000000000000000000000;;				expectReady: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			mock := newMockLister(c.successes, c.failures, v1alpha1.InitializerConfigurationList{}, t)
0000000000000000000000000000000000000000;;			manager := NewInitializerConfigurationManager(mock)
0000000000000000000000000000000000000000;;			manager.interval = 1 * time.Millisecond
0000000000000000000000000000000000000000;;			for i := 0; i < 1+c.successes+c.failures; i++ {
0000000000000000000000000000000000000000;;				manager.sync()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err := manager.Initializers()
0000000000000000000000000000000000000000;;			if err != nil && c.expectReady {
0000000000000000000000000000000000000000;;				t.Errorf("case %s, expect ready, got: %v", c.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && !c.expectReady {
0000000000000000000000000000000000000000;;				t.Errorf("case %s, expect not ready", c.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeInitializerConfigurations(t *testing.T) {
0000000000000000000000000000000000000000;;		configurationsList := v1alpha1.InitializerConfigurationList{
0000000000000000000000000000000000000000;;			Items: []v1alpha1.InitializerConfiguration{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "provider_2",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Initializers: []v1alpha1.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer_a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer_b",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "provider_1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Initializers: []v1alpha1.Initializer{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer_c",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "initializer_d",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := &v1alpha1.InitializerConfiguration{
0000000000000000000000000000000000000000;;			Initializers: []v1alpha1.Initializer{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "initializer_c",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "initializer_d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "initializer_a",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "initializer_b",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got := mergeInitializerConfigurations(&configurationsList)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(got, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %#v, got: %#v", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
