0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ac735243f7c46a94a8944b413ed6b942694d86ba;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializerConfigurationLister interface {
0000000000000000000000000000000000000000;;		List(opts metav1.ListOptions) (*v1alpha1.InitializerConfigurationList, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializerConfigurationManager struct {
0000000000000000000000000000000000000000;;		*poller
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInitializerConfigurationManager(c InitializerConfigurationLister) *InitializerConfigurationManager {
0000000000000000000000000000000000000000;;		getFn := func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;			list, err := c.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if errors.IsNotFound(err) || errors.IsForbidden(err) {
0000000000000000000000000000000000000000;;					glog.V(5).Infof("Initializers are disabled due to an error: %v", err)
0000000000000000000000000000000000000000;;					return nil, ErrDisabled
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return mergeInitializerConfigurations(list), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &InitializerConfigurationManager{
0000000000000000000000000000000000000000;;			newPoller(getFn),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initializers returns the merged InitializerConfiguration.
0000000000000000000000000000000000000000;;	func (im *InitializerConfigurationManager) Initializers() (*v1alpha1.InitializerConfiguration, error) {
0000000000000000000000000000000000000000;;		configuration, err := im.poller.configuration()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initializerConfiguration, ok := configuration.(*v1alpha1.InitializerConfiguration)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("expected type %v, got type %v", reflect.TypeOf(initializerConfiguration), reflect.TypeOf(configuration))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return initializerConfiguration, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (im *InitializerConfigurationManager) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		im.poller.Run(stopCh)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mergeInitializerConfigurations(initializerConfigurationList *v1alpha1.InitializerConfigurationList) *v1alpha1.InitializerConfiguration {
0000000000000000000000000000000000000000;;		configurations := initializerConfigurationList.Items
0000000000000000000000000000000000000000;;		sort.SliceStable(configurations, InitializerConfigurationSorter(configurations).ByName)
0000000000000000000000000000000000000000;;		var ret v1alpha1.InitializerConfiguration
0000000000000000000000000000000000000000;;		for _, c := range configurations {
0000000000000000000000000000000000000000;;			ret.Initializers = append(ret.Initializers, c.Initializers...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializerConfigurationSorter []v1alpha1.InitializerConfiguration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a InitializerConfigurationSorter) ByName(i, j int) bool {
0000000000000000000000000000000000000000;;		return a[i].Name < a[j].Name
0000000000000000000000000000000000000000;;	}
