0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a4257d258b0cd90abd00dfdd82bf4056a64b1ea5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTolerateBootstrapFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		var fakeGetSucceed bool
0000000000000000000000000000000000000000;;		var fakeGetSucceedLock sync.RWMutex
0000000000000000000000000000000000000000;;		fakeGetFn := func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;			fakeGetSucceedLock.RLock()
0000000000000000000000000000000000000000;;			defer fakeGetSucceedLock.RUnlock()
0000000000000000000000000000000000000000;;			if fakeGetSucceed {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("this error shouldn't be exposed to caller")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		poller := newPoller(fakeGetFn)
0000000000000000000000000000000000000000;;		poller.bootstrapGracePeriod = 100 * time.Second
0000000000000000000000000000000000000000;;		poller.bootstrapRetries = math.MaxInt32
0000000000000000000000000000000000000000;;		// set failureThreshold to 0 so that one single failure will set "ready" to false.
0000000000000000000000000000000000000000;;		poller.failureThreshold = 0
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		go poller.Run(stopCh)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			// The test might have false negative, but won't be flaky
0000000000000000000000000000000000000000;;			timer := time.NewTimer(2 * time.Second)
0000000000000000000000000000000000000000;;			<-timer.C
0000000000000000000000000000000000000000;;			fakeGetSucceedLock.Lock()
0000000000000000000000000000000000000000;;			defer fakeGetSucceedLock.Unlock()
0000000000000000000000000000000000000000;;			fakeGetSucceed = true
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		done := make(chan struct{})
0000000000000000000000000000000000000000;;		go func(t *testing.T) {
0000000000000000000000000000000000000000;;			_, err := poller.configuration()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			close(done)
0000000000000000000000000000000000000000;;		}(t)
0000000000000000000000000000000000000000;;		<-done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNotTolerateNonbootstrapFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeGetFn := func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("this error should be exposed to caller")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		poller := newPoller(fakeGetFn)
0000000000000000000000000000000000000000;;		poller.bootstrapGracePeriod = 1 * time.Second
0000000000000000000000000000000000000000;;		poller.interval = 1 * time.Millisecond
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		go poller.Run(stopCh)
0000000000000000000000000000000000000000;;		// to kick the bootstrap timer
0000000000000000000000000000000000000000;;		go poller.configuration()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wait.PollInfinite(1*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			poller.lock.Lock()
0000000000000000000000000000000000000000;;			defer poller.lock.Unlock()
0000000000000000000000000000000000000000;;			return poller.bootstrapped, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := poller.configuration()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected no error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
