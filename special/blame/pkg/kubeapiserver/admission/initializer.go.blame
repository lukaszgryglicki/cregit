0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1833e99a97353f88bf8e10fa7ee6ade729f846cf;pkg/admission/init.go[pkg/admission/init.go][pkg/kubeapiserver/admission/initializer.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/quota"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO add a `WantsToRun` which takes a stopCh.  Might make it generic.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsInternalKubeClientSet defines a function which sets ClientSet for admission plugins that need it
0000000000000000000000000000000000000000;;	type WantsInternalKubeClientSet interface {
0000000000000000000000000000000000000000;;		SetInternalKubeClientSet(internalclientset.Interface)
0000000000000000000000000000000000000000;;		admission.Validator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsExternalKubeClientSet defines a function which sets ClientSet for admission plugins that need it
0000000000000000000000000000000000000000;;	type WantsExternalKubeClientSet interface {
0000000000000000000000000000000000000000;;		SetExternalKubeClientSet(clientset.Interface)
0000000000000000000000000000000000000000;;		admission.Validator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsInternalKubeInformerFactory defines a function which sets InformerFactory for admission plugins that need it
0000000000000000000000000000000000000000;;	type WantsInternalKubeInformerFactory interface {
0000000000000000000000000000000000000000;;		SetInternalKubeInformerFactory(informers.SharedInformerFactory)
0000000000000000000000000000000000000000;;		admission.Validator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsAuthorizer defines a function which sets Authorizer for admission plugins that need it.
0000000000000000000000000000000000000000;;	type WantsAuthorizer interface {
0000000000000000000000000000000000000000;;		SetAuthorizer(authorizer.Authorizer)
0000000000000000000000000000000000000000;;		admission.Validator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsCloudConfig defines a function which sets CloudConfig for admission plugins that need it.
0000000000000000000000000000000000000000;;	type WantsCloudConfig interface {
0000000000000000000000000000000000000000;;		SetCloudConfig([]byte)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsRESTMapper defines a function which sets RESTMapper for admission plugins that need it.
0000000000000000000000000000000000000000;;	type WantsRESTMapper interface {
0000000000000000000000000000000000000000;;		SetRESTMapper(meta.RESTMapper)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsQuotaRegistry defines a function which sets quota registry for admission plugins that need it.
0000000000000000000000000000000000000000;;	type WantsQuotaRegistry interface {
0000000000000000000000000000000000000000;;		SetQuotaRegistry(quota.Registry)
0000000000000000000000000000000000000000;;		admission.Validator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsServiceResolver defines a fuction that accepts a ServiceResolver for
0000000000000000000000000000000000000000;;	// admission plugins that need to make calls to services.
0000000000000000000000000000000000000000;;	type WantsServiceResolver interface {
0000000000000000000000000000000000000000;;		SetServiceResolver(ServiceResolver)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantsClientCert defines a fuction that accepts a cert & key for admission
0000000000000000000000000000000000000000;;	// plugins that need to make calls and prove their identity.
0000000000000000000000000000000000000000;;	type WantsClientCert interface {
0000000000000000000000000000000000000000;;		SetClientCert(cert, key []byte)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceResolver knows how to convert a service reference into an actual
0000000000000000000000000000000000000000;;	// location.
0000000000000000000000000000000000000000;;	type ServiceResolver interface {
0000000000000000000000000000000000000000;;		ResolveEndpoint(namespace, name string) (*url.URL, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PluginInitializer struct {
0000000000000000000000000000000000000000;;		internalClient  internalclientset.Interface
0000000000000000000000000000000000000000;;		externalClient  clientset.Interface
0000000000000000000000000000000000000000;;		informers       informers.SharedInformerFactory
0000000000000000000000000000000000000000;;		authorizer      authorizer.Authorizer
0000000000000000000000000000000000000000;;		cloudConfig     []byte
0000000000000000000000000000000000000000;;		restMapper      meta.RESTMapper
0000000000000000000000000000000000000000;;		quotaRegistry   quota.Registry
0000000000000000000000000000000000000000;;		serviceResolver ServiceResolver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for proving we are apiserver in call-outs
0000000000000000000000000000000000000000;;		clientCert []byte
0000000000000000000000000000000000000000;;		clientKey  []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.PluginInitializer = &PluginInitializer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPluginInitializer constructs new instance of PluginInitializer
0000000000000000000000000000000000000000;;	// TODO: switch these parameters to use the builder pattern or just make them
0000000000000000000000000000000000000000;;	// all public, this construction method is pointless boilerplate.
0000000000000000000000000000000000000000;;	func NewPluginInitializer(
0000000000000000000000000000000000000000;;		internalClient internalclientset.Interface,
0000000000000000000000000000000000000000;;		externalClient clientset.Interface,
0000000000000000000000000000000000000000;;		sharedInformers informers.SharedInformerFactory,
0000000000000000000000000000000000000000;;		authz authorizer.Authorizer,
0000000000000000000000000000000000000000;;		cloudConfig []byte,
0000000000000000000000000000000000000000;;		restMapper meta.RESTMapper,
0000000000000000000000000000000000000000;;		quotaRegistry quota.Registry,
0000000000000000000000000000000000000000;;	) *PluginInitializer {
0000000000000000000000000000000000000000;;		return &PluginInitializer{
0000000000000000000000000000000000000000;;			internalClient: internalClient,
0000000000000000000000000000000000000000;;			externalClient: externalClient,
0000000000000000000000000000000000000000;;			informers:      sharedInformers,
0000000000000000000000000000000000000000;;			authorizer:     authz,
0000000000000000000000000000000000000000;;			cloudConfig:    cloudConfig,
0000000000000000000000000000000000000000;;			restMapper:     restMapper,
0000000000000000000000000000000000000000;;			quotaRegistry:  quotaRegistry,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetServiceResolver sets the service resolver which is needed by some plugins.
0000000000000000000000000000000000000000;;	func (i *PluginInitializer) SetServiceResolver(s ServiceResolver) *PluginInitializer {
0000000000000000000000000000000000000000;;		i.serviceResolver = s
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientCert sets the client cert & key (identity used for calling out to
0000000000000000000000000000000000000000;;	// web hooks) which is needed by some plugins.
0000000000000000000000000000000000000000;;	func (i *PluginInitializer) SetClientCert(cert, key []byte) *PluginInitializer {
0000000000000000000000000000000000000000;;		i.clientCert = cert
0000000000000000000000000000000000000000;;		i.clientKey = key
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialize checks the initialization interfaces implemented by each plugin
0000000000000000000000000000000000000000;;	// and provide the appropriate initialization data
0000000000000000000000000000000000000000;;	func (i *PluginInitializer) Initialize(plugin admission.Interface) {
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsInternalKubeClientSet); ok {
0000000000000000000000000000000000000000;;			wants.SetInternalKubeClientSet(i.internalClient)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsExternalKubeClientSet); ok {
0000000000000000000000000000000000000000;;			wants.SetExternalKubeClientSet(i.externalClient)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsInternalKubeInformerFactory); ok {
0000000000000000000000000000000000000000;;			wants.SetInternalKubeInformerFactory(i.informers)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsAuthorizer); ok {
0000000000000000000000000000000000000000;;			wants.SetAuthorizer(i.authorizer)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsCloudConfig); ok {
0000000000000000000000000000000000000000;;			wants.SetCloudConfig(i.cloudConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsRESTMapper); ok {
0000000000000000000000000000000000000000;;			wants.SetRESTMapper(i.restMapper)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsQuotaRegistry); ok {
0000000000000000000000000000000000000000;;			wants.SetQuotaRegistry(i.quotaRegistry)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsServiceResolver); ok {
0000000000000000000000000000000000000000;;			if i.serviceResolver == nil {
0000000000000000000000000000000000000000;;				panic("An admission plugin wants the service resolver, but it was not provided.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wants.SetServiceResolver(i.serviceResolver)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wants, ok := plugin.(WantsClientCert); ok {
0000000000000000000000000000000000000000;;			if i.clientCert == nil || i.clientKey == nil {
0000000000000000000000000000000000000000;;				panic("An admission plugin wants a client cert/key, but they were not provided.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wants.SetClientCert(i.clientCert, i.clientKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
