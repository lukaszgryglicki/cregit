0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e2b8fcef861151028a19ec4954fb0a77a5899dd6;pkg/admission/init_test.go[pkg/admission/init_test.go][pkg/kubeapiserver/admission/init_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAuthorizer is a testing struct for testing that fulfills the authorizer interface.
0000000000000000000000000000000000000000;;	type TestAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *TestAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		return false, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ authorizer.Authorizer = &TestAuthorizer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type doNothingAdmission struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (doNothingAdmission) Admit(a admission.Attributes) error { return nil }
0000000000000000000000000000000000000000;;	func (doNothingAdmission) Handles(o admission.Operation) bool { return false }
0000000000000000000000000000000000000000;;	func (doNothingAdmission) Validate() error                    { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantAuthorizerAdmission is a testing struct that fulfills the WantsAuthorizer
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type WantAuthorizerAdmission struct {
0000000000000000000000000000000000000000;;		doNothingAdmission
0000000000000000000000000000000000000000;;		auth authorizer.Authorizer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *WantAuthorizerAdmission) SetAuthorizer(a authorizer.Authorizer) {
0000000000000000000000000000000000000000;;		self.auth = a
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.Interface = &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;	var _ WantsAuthorizer = &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestWantsAuthorizer ensures that the authorizer is injected when the WantsAuthorizer
0000000000000000000000000000000000000000;;	// interface is implemented.
0000000000000000000000000000000000000000;;	func TestWantsAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		initializer := NewPluginInitializer(nil, nil, nil, &TestAuthorizer{}, nil, nil, nil)
0000000000000000000000000000000000000000;;		wantAuthorizerAdmission := &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;		initializer.Initialize(wantAuthorizerAdmission)
0000000000000000000000000000000000000000;;		if wantAuthorizerAdmission.auth == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected authorizer to be initialized but found nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WantsCloudConfigAdmissionPlugin struct {
0000000000000000000000000000000000000000;;		doNothingAdmission
0000000000000000000000000000000000000000;;		cloudConfig []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *WantsCloudConfigAdmissionPlugin) SetCloudConfig(cloudConfig []byte) {
0000000000000000000000000000000000000000;;		self.cloudConfig = cloudConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCloudConfigAdmissionPlugin(t *testing.T) {
0000000000000000000000000000000000000000;;		cloudConfig := []byte("cloud-configuration")
0000000000000000000000000000000000000000;;		initializer := NewPluginInitializer(nil, nil, nil, &TestAuthorizer{}, cloudConfig, nil, nil)
0000000000000000000000000000000000000000;;		wantsCloudConfigAdmission := &WantsCloudConfigAdmissionPlugin{}
0000000000000000000000000000000000000000;;		initializer.Initialize(wantsCloudConfigAdmission)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wantsCloudConfigAdmission.cloudConfig == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected cloud config to be initialized but found nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeServiceResolver struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeServiceResolver) ResolveEndpoint(namespace, name string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serviceWanter struct {
0000000000000000000000000000000000000000;;		doNothingAdmission
0000000000000000000000000000000000000000;;		got ServiceResolver
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *serviceWanter) SetServiceResolver(sr ServiceResolver) { s.got = sr }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWantsServiceResolver(t *testing.T) {
0000000000000000000000000000000000000000;;		sw := &serviceWanter{}
0000000000000000000000000000000000000000;;		fsr := &fakeServiceResolver{}
0000000000000000000000000000000000000000;;		i := &PluginInitializer{}
0000000000000000000000000000000000000000;;		i.SetServiceResolver(fsr).Initialize(sw)
0000000000000000000000000000000000000000;;		if got, ok := sw.got.(*fakeServiceResolver); !ok || got != fsr {
0000000000000000000000000000000000000000;;			t.Errorf("plumbing fail - %v %v#", ok, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type clientCertWanter struct {
0000000000000000000000000000000000000000;;		doNothingAdmission
0000000000000000000000000000000000000000;;		gotCert, gotKey []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *clientCertWanter) SetClientCert(cert, key []byte) { s.gotCert, s.gotKey = cert, key }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWantsClientCert(t *testing.T) {
0000000000000000000000000000000000000000;;		i := &PluginInitializer{}
0000000000000000000000000000000000000000;;		ccw := &clientCertWanter{}
0000000000000000000000000000000000000000;;		i.SetClientCert([]byte("cert"), []byte("key")).Initialize(ccw)
0000000000000000000000000000000000000000;;		if string(ccw.gotCert) != "cert" || string(ccw.gotKey) != "key" {
0000000000000000000000000000000000000000;;			t.Errorf("plumbing fail - %v %v", ccw.gotCert, ccw.gotKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
