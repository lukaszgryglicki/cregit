0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2bfd9c3fa74e3314908cfa674497951eeb7c9e7a;pkg/genericapiserver/default_storage_factory_builder.go[pkg/genericapiserver/default_storage_factory_builder.go][pkg/kubeapiserver/default_storage_factory_builder.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeapiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serverstorage "k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		utilflag "k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStorageFactory builds the DefaultStorageFactory.
0000000000000000000000000000000000000000;;	// Merges defaultResourceConfig with the user specified overrides and merges
0000000000000000000000000000000000000000;;	// defaultAPIResourceConfig with the corresponding user specified overrides as well.
0000000000000000000000000000000000000000;;	func NewStorageFactory(storageConfig storagebackend.Config, defaultMediaType string, serializer runtime.StorageSerializer,
0000000000000000000000000000000000000000;;		defaultResourceEncoding *serverstorage.DefaultResourceEncodingConfig, storageEncodingOverrides map[string]schema.GroupVersion, resourceEncodingOverrides []schema.GroupVersionResource,
0000000000000000000000000000000000000000;;		defaultAPIResourceConfig *serverstorage.ResourceConfig, resourceConfigOverrides utilflag.ConfigurationMap) (*serverstorage.DefaultStorageFactory, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceEncodingConfig := mergeGroupEncodingConfigs(defaultResourceEncoding, storageEncodingOverrides)
0000000000000000000000000000000000000000;;		resourceEncodingConfig = mergeResourceEncodingConfigs(resourceEncodingConfig, resourceEncodingOverrides)
0000000000000000000000000000000000000000;;		apiResourceConfig, err := mergeAPIResourceConfigs(defaultAPIResourceConfig, resourceConfigOverrides)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return serverstorage.NewDefaultStorageFactory(storageConfig, defaultMediaType, serializer, resourceEncodingConfig, apiResourceConfig), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Merges the given defaultResourceConfig with specifc GroupvVersionResource overrides.
0000000000000000000000000000000000000000;;	func mergeResourceEncodingConfigs(defaultResourceEncoding *serverstorage.DefaultResourceEncodingConfig, resourceEncodingOverrides []schema.GroupVersionResource) *serverstorage.DefaultResourceEncodingConfig {
0000000000000000000000000000000000000000;;		resourceEncodingConfig := defaultResourceEncoding
0000000000000000000000000000000000000000;;		for _, gvr := range resourceEncodingOverrides {
0000000000000000000000000000000000000000;;			resourceEncodingConfig.SetResourceEncoding(gvr.GroupResource(), gvr.GroupVersion(),
0000000000000000000000000000000000000000;;				schema.GroupVersion{Group: gvr.Group, Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resourceEncodingConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Merges the given defaultResourceConfig with specifc GroupVersion overrides.
0000000000000000000000000000000000000000;;	func mergeGroupEncodingConfigs(defaultResourceEncoding *serverstorage.DefaultResourceEncodingConfig, storageEncodingOverrides map[string]schema.GroupVersion) *serverstorage.DefaultResourceEncodingConfig {
0000000000000000000000000000000000000000;;		resourceEncodingConfig := defaultResourceEncoding
0000000000000000000000000000000000000000;;		for group, storageEncodingVersion := range storageEncodingOverrides {
0000000000000000000000000000000000000000;;			resourceEncodingConfig.SetVersionEncoding(group, storageEncodingVersion, schema.GroupVersion{Group: group, Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resourceEncodingConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Merges the given defaultAPIResourceConfig with the given resourceConfigOverrides.
0000000000000000000000000000000000000000;;	func mergeAPIResourceConfigs(defaultAPIResourceConfig *serverstorage.ResourceConfig, resourceConfigOverrides utilflag.ConfigurationMap) (*serverstorage.ResourceConfig, error) {
0000000000000000000000000000000000000000;;		resourceConfig := defaultAPIResourceConfig
0000000000000000000000000000000000000000;;		overrides := resourceConfigOverrides
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// "api/all=false" allows users to selectively enable specific api versions.
0000000000000000000000000000000000000000;;		allAPIFlagValue, ok := overrides["api/all"]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			if allAPIFlagValue == "false" {
0000000000000000000000000000000000000000;;				// Disable all group versions.
0000000000000000000000000000000000000000;;				resourceConfig.DisableVersions(api.Registry.RegisteredGroupVersions()...)
0000000000000000000000000000000000000000;;			} else if allAPIFlagValue == "true" {
0000000000000000000000000000000000000000;;				resourceConfig.EnableVersions(api.Registry.RegisteredGroupVersions()...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// "api/legacy=false" allows users to disable legacy api versions.
0000000000000000000000000000000000000000;;		disableLegacyAPIs := false
0000000000000000000000000000000000000000;;		legacyAPIFlagValue, ok := overrides["api/legacy"]
0000000000000000000000000000000000000000;;		if ok && legacyAPIFlagValue == "false" {
0000000000000000000000000000000000000000;;			disableLegacyAPIs = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_ = disableLegacyAPIs // hush the compiler while we don't have legacy APIs to disable.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// "<resourceSpecifier>={true|false} allows users to enable/disable API.
0000000000000000000000000000000000000000;;		// This takes preference over api/all and api/legacy, if specified.
0000000000000000000000000000000000000000;;		// Iterate through all group/version overrides specified in runtimeConfig.
0000000000000000000000000000000000000000;;		for key := range overrides {
0000000000000000000000000000000000000000;;			if key == "api/all" || key == "api/legacy" {
0000000000000000000000000000000000000000;;				// Have already handled them above. Can skip them here.
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tokens := strings.Split(key, "/")
0000000000000000000000000000000000000000;;			if len(tokens) != 2 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			groupVersionString := tokens[0] + "/" + tokens[1]
0000000000000000000000000000000000000000;;			// HACK: Hack for "v1" legacy group version.
0000000000000000000000000000000000000000;;			// Remove when we stop supporting the legacy group version.
0000000000000000000000000000000000000000;;			if groupVersionString == "api/v1" {
0000000000000000000000000000000000000000;;				groupVersionString = "v1"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			groupVersion, err := schema.ParseGroupVersion(groupVersionString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid key %s", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Verify that the groupVersion is api.Registry.
0000000000000000000000000000000000000000;;			if !api.Registry.IsRegisteredVersion(groupVersion) {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("group version %s that has not been registered", groupVersion.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			enabled, err := getRuntimeConfigValue(overrides, key, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if enabled {
0000000000000000000000000000000000000000;;				resourceConfig.EnableVersions(groupVersion)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				resourceConfig.DisableVersions(groupVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Iterate through all group/version/resource overrides specified in runtimeConfig.
0000000000000000000000000000000000000000;;		for key := range overrides {
0000000000000000000000000000000000000000;;			tokens := strings.Split(key, "/")
0000000000000000000000000000000000000000;;			if len(tokens) != 3 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			groupVersionString := tokens[0] + "/" + tokens[1]
0000000000000000000000000000000000000000;;			// HACK: Hack for "v1" legacy group version.
0000000000000000000000000000000000000000;;			// Remove when we stop supporting the legacy group version.
0000000000000000000000000000000000000000;;			if groupVersionString == "api/v1" {
0000000000000000000000000000000000000000;;				groupVersionString = "v1"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			groupVersion, err := schema.ParseGroupVersion(groupVersionString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid key %s", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resource := tokens[2]
0000000000000000000000000000000000000000;;			// Verify that the groupVersion is api.Registry.
0000000000000000000000000000000000000000;;			if !api.Registry.IsRegisteredVersion(groupVersion) {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("group version %s that has not been registered", groupVersion.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !resourceConfig.AnyResourcesForVersionEnabled(groupVersion) {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("%v is disabled, you cannot configure its resources individually", groupVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			enabled, err := getRuntimeConfigValue(overrides, key, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if enabled {
0000000000000000000000000000000000000000;;				resourceConfig.EnableResources(groupVersion.WithResource(resource))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				resourceConfig.DisableResources(groupVersion.WithResource(resource))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resourceConfig, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getRuntimeConfigValue(overrides utilflag.ConfigurationMap, apiKey string, defaultValue bool) (bool, error) {
0000000000000000000000000000000000000000;;		flagValue, ok := overrides[apiKey]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			if flagValue == "" {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			boolValue, err := strconv.ParseBool(flagValue)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("invalid value of %s: %s, err: %v", apiKey, flagValue, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return boolValue, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return defaultValue, nil
0000000000000000000000000000000000000000;;	}
