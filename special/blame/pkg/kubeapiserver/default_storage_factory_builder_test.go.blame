0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2bfd9c3fa74e3314908cfa674497951eeb7c9e7a;pkg/genericapiserver/default_storage_factory_builder_test.go[pkg/genericapiserver/default_storage_factory_builder_test.go][pkg/kubeapiserver/default_storage_factory_builder_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeapiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsapiv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serverstorage "k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/extensions/install"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseRuntimeConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		extensionsGroupVersion := extensionsapiv1beta1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		apiv1GroupVersion := apiv1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			runtimeConfig         map[string]string
0000000000000000000000000000000000000000;;			defaultResourceConfig func() *serverstorage.ResourceConfig
0000000000000000000000000000000000000000;;			expectedAPIConfig     func() *serverstorage.ResourceConfig
0000000000000000000000000000000000000000;;			err                   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// everything default value.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// no runtimeConfig override.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableVersions(extensionsapiv1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableVersions(extensionsapiv1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// version enabled by runtimeConfig override.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"extensions/v1beta1": "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableVersions(extensionsapiv1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(extensionsapiv1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// disable resource
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"api/v1/pods": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(apiv1GroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(apiv1GroupVersion)
0000000000000000000000000000000000000000;;					config.DisableResources(apiv1GroupVersion.WithResource("pods"))
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Disable v1.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"api/v1": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableVersions(apiv1GroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Enable deployments and disable daemonsets.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"extensions/v1beta1/anything":   "true",
0000000000000000000000000000000000000000;;					"extensions/v1beta1/daemonsets": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(extensionsGroupVersion)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(extensionsGroupVersion)
0000000000000000000000000000000000000000;;					config.DisableResources(extensionsGroupVersion.WithResource("daemonsets"))
0000000000000000000000000000000000000000;;					config.EnableResources(extensionsGroupVersion.WithResource("anything"))
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// invalid runtime config
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"invalidgroup/version": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// cannot disable individual resource when version is not enabled.
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"api/v1/pods": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableResources(schema.GroupVersionResource{Group: "", Version: "v1", Resource: "pods"})
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// enable all
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"api/all": "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.EnableVersions(api.Registry.RegisteredGroupVersions()...)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// disable all
0000000000000000000000000000000000000000;;				runtimeConfig: map[string]string{
0000000000000000000000000000000000000000;;					"api/all": "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				defaultResourceConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					return serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedAPIConfig: func() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;					config := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;					config.DisableVersions(api.Registry.RegisteredGroupVersions()...)
0000000000000000000000000000000000000000;;					return config
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			actualDisablers, err := mergeAPIResourceConfigs(test.defaultResourceConfig(), test.runtimeConfig)
0000000000000000000000000000000000000000;;			if err == nil && test.err {
0000000000000000000000000000000000000000;;				t.Fatalf("expected error for test: %v", test)
0000000000000000000000000000000000000000;;			} else if err != nil && !test.err {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %s, for test: %v", err, test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedConfig := test.expectedAPIConfig()
0000000000000000000000000000000000000000;;			if err == nil && !reflect.DeepEqual(actualDisablers, expectedConfig) {
0000000000000000000000000000000000000000;;				t.Fatalf("%v: unexpected apiResourceDisablers. Actual: %v\n expected: %v", test.runtimeConfig, actualDisablers, expectedConfig)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
