0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Update the Godeps/LICENSES document.
0000000000000000000000000000000000000000;;	# Generates a table of Godep dependencies and their license.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Usage:
0000000000000000000000000000000000000000;;	#    $0 [--create-missing] [/path/to/licenses]
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#    --create-missing will write the files that only exist upstream, locally.
0000000000000000000000000000000000000000;;	#    This option is mostly used for testing as we cannot check-in any of the
0000000000000000000000000000000000000000;;	#    additionally created files into the godep auto-generated tree.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#    Run every time a license file is added/modified within /Godeps to
0000000000000000000000000000000000000000;;	#    update /Godeps/LICENSES
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export LANG=C
0000000000000000000000000000000000000000;;	export LC_ALL=C
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	###############################################################################
0000000000000000000000000000000000000000;;	# Process package content
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# @param package  The incoming package name
0000000000000000000000000000000000000000;;	# @param type     The type of content (LICENSE or COPYRIGHT)
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	process_content () {
0000000000000000000000000000000000000000;;	  local package=$1
0000000000000000000000000000000000000000;;	  local type=$2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local package_root
0000000000000000000000000000000000000000;;	  local ensure_pattern
0000000000000000000000000000000000000000;;	  local dir_root
0000000000000000000000000000000000000000;;	  local find_maxdepth
0000000000000000000000000000000000000000;;	  local find_names
0000000000000000000000000000000000000000;;	  local -a local_files=()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Necessary to expand {}
0000000000000000000000000000000000000000;;	  case ${type} in
0000000000000000000000000000000000000000;;	      LICENSE) find_names=(-iname 'licen[sc]e*')
0000000000000000000000000000000000000000;;	               find_maxdepth=1
0000000000000000000000000000000000000000;;	               # Sadly inconsistent in the wild, but mostly license files
0000000000000000000000000000000000000000;;	               # containing copyrights, but no readme/notice files containing
0000000000000000000000000000000000000000;;	               # licenses (except to "see license file")
0000000000000000000000000000000000000000;;	               ensure_pattern="license|copyright"
0000000000000000000000000000000000000000;;	               ;;
0000000000000000000000000000000000000000;;	    # We search READMEs for copyrights and this includes notice files as well
0000000000000000000000000000000000000000;;	    # Look in as many places as we find files matching
0000000000000000000000000000000000000000;;	    COPYRIGHT) find_names=(-iname 'notice*' -o -iname 'readme*')
0000000000000000000000000000000000000000;;	               find_maxdepth=3
0000000000000000000000000000000000000000;;	               ensure_pattern="copyright"
0000000000000000000000000000000000000000;;	               ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start search at package root
0000000000000000000000000000000000000000;;	  case ${package} in
0000000000000000000000000000000000000000;;	    github.com/*|golang.org/*|bitbucket.org/*)
0000000000000000000000000000000000000000;;	     package_root=$(echo ${package} |awk -F/ '{ print $1"/"$2"/"$3 }')
0000000000000000000000000000000000000000;;	     ;;
0000000000000000000000000000000000000000;;	    go4.org/*)
0000000000000000000000000000000000000000;;	     package_root=$(echo ${package} |awk -F/ '{ print $1 }')
0000000000000000000000000000000000000000;;	     ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	     package_root=$(echo ${package} |awk -F/ '{ print $1"/"$2 }')
0000000000000000000000000000000000000000;;	     ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Find files - only root and package level
0000000000000000000000000000000000000000;;	  local_files=($(
0000000000000000000000000000000000000000;;	    for dir_root in ${package} ${package_root}; do
0000000000000000000000000000000000000000;;	      [[ -d ${DEPS_DIR}/${dir_root} ]] || continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      # One (set) of these is fine
0000000000000000000000000000000000000000;;	      find ${DEPS_DIR}/${dir_root} \
0000000000000000000000000000000000000000;;	          -xdev -follow -maxdepth ${find_maxdepth} \
0000000000000000000000000000000000000000;;	          -type f "${find_names[@]}"
0000000000000000000000000000000000000000;;	    done | sort -u))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local index
0000000000000000000000000000000000000000;;	  local f
0000000000000000000000000000000000000000;;	  index="${package}-${type}"
0000000000000000000000000000000000000000;;	  if [[ -z "${CONTENT[${index}]-}" ]]; then
0000000000000000000000000000000000000000;;	    for f in ${local_files[@]-}; do
0000000000000000000000000000000000000000;;	      # Find some copyright info in any file and break
0000000000000000000000000000000000000000;;	      if egrep -i -wq "${ensure_pattern}" "${f}"; then
0000000000000000000000000000000000000000;;	        CONTENT[${index}]="${f}"
0000000000000000000000000000000000000000;;	        break
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#############################################################################
0000000000000000000000000000000000000000;;	# MAIN
0000000000000000000000000000000000000000;;	#############################################################################
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check bash version
0000000000000000000000000000000000000000;;	if ((${BASH_VERSINFO[0]}<4)); then
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  echo "ERROR: Bash v4+ required."
0000000000000000000000000000000000000000;;	  # Extra help for OSX
0000000000000000000000000000000000000000;;	  if [[ "$(uname -s)" == "Darwin" ]]; then
0000000000000000000000000000000000000000;;	    echo
0000000000000000000000000000000000000000;;	    echo "Ensure you are up to date on the following packages:"
0000000000000000000000000000000000000000;;	    echo "$ brew install md5sha1sum bash jq"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This variable can be injected, as in the verify script.
0000000000000000000000000000000000000000;;	LICENSE_ROOT="${LICENSE_ROOT:-${KUBE_ROOT}}"
0000000000000000000000000000000000000000;;	cd "${LICENSE_ROOT}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GODEPS_LICENSE_FILE="Godeps/LICENSES"
0000000000000000000000000000000000000000;;	TMP_LICENSE_FILE="/tmp/Godeps.LICENSES.$$"
0000000000000000000000000000000000000000;;	DEPS_DIR="vendor"
0000000000000000000000000000000000000000;;	declare -Ag CONTENT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Put the K8S LICENSE on top
0000000000000000000000000000000000000000;;	(
0000000000000000000000000000000000000000;;	echo "================================================================================"
0000000000000000000000000000000000000000;;	echo "= Kubernetes licensed under: ="
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	cat ${LICENSE_ROOT}/LICENSE
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo "= LICENSE $(cat ${LICENSE_ROOT}/LICENSE | md5sum)"
0000000000000000000000000000000000000000;;	echo "================================================================================"
0000000000000000000000000000000000000000;;	) > ${TMP_LICENSE_FILE}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Loop through every package in Godeps.json
0000000000000000000000000000000000000000;;	for PACKAGE in $(cat Godeps/Godeps.json | \
0000000000000000000000000000000000000000;;	                 jq -r ".Deps[].ImportPath" | \
0000000000000000000000000000000000000000;;	                 sort -f); do
0000000000000000000000000000000000000000;;	  process_content ${PACKAGE} LICENSE
0000000000000000000000000000000000000000;;	  process_content ${PACKAGE} COPYRIGHT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # display content
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  echo "================================================================================"
0000000000000000000000000000000000000000;;	  echo "= ${DEPS_DIR}/${PACKAGE} licensed under: ="
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  file=""
0000000000000000000000000000000000000000;;	  if [[ -n "${CONTENT[${PACKAGE}-LICENSE]-}" ]]; then
0000000000000000000000000000000000000000;;	      file="${CONTENT[${PACKAGE}-LICENSE]-}"
0000000000000000000000000000000000000000;;	  elif [[ -n "${CONTENT[${PACKAGE}-COPYRIGHT]-}" ]]; then
0000000000000000000000000000000000000000;;	      file="${CONTENT[${PACKAGE}-COPYRIGHT]-}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -z "${file}" ]]; then
0000000000000000000000000000000000000000;;	      cat > /dev/stderr << __EOF__
0000000000000000000000000000000000000000;;	No license could be found for ${PACKAGE} - aborting.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Options:
0000000000000000000000000000000000000000;;	1. Check if the upstream repository has a newer version with LICENSE and/or
0000000000000000000000000000000000000000;;	   COPYRIGHT files.
0000000000000000000000000000000000000000;;	2. Contact the author of the package to ensure there is a LICENSE and/or
0000000000000000000000000000000000000000;;	   COPYRIGHT file present.
0000000000000000000000000000000000000000;;	3. Do not use this package in Kubernetes.
0000000000000000000000000000000000000000;;	__EOF__
0000000000000000000000000000000000000000;;	      exit 9
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  cat "${file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  echo "= ${file} $(cat ${file} | md5sum)"
0000000000000000000000000000000000000000;;	  echo "================================================================================"
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	done >> ${TMP_LICENSE_FILE}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat ${TMP_LICENSE_FILE} > ${GODEPS_LICENSE_FILE}
