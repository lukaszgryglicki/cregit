0000000000000000000000000000000000000000;;	# Jenkins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Jenkins](http://jenkins-ci.org/) is a pluggable continuous
0000000000000000000000000000000000000000;;	integration system. The Google team is running two Jenkins servers in GCE for
0000000000000000000000000000000000000000;;	the Kubernetes project. The post-commit instance runs continuous builds, unit
0000000000000000000000000000000000000000;;	tests, integration tests, code verification tests, and end-to-end tests on
0000000000000000000000000000000000000000;;	multiple providers using the latest commits to the Kubernetes repo from the
0000000000000000000000000000000000000000;;	master and release branches. The PR Jenkins instance runs these tests on each
0000000000000000000000000000000000000000;;	PR by a trusted contributor, it but only runs a subset of the end-to-end tests
0000000000000000000000000000000000000000;;	and only on GCE.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## General flow
0000000000000000000000000000000000000000;;	The flow of the post-commit Jenkins instance:
0000000000000000000000000000000000000000;;	* Under the `kubernetes-build` job: Every 2 minutes, Jenkins polls for a batch
0000000000000000000000000000000000000000;;	  of new commits, after which it runs the `build.sh` script (in this directory)
0000000000000000000000000000000000000000;;	  on the latest tip. This results in build assets getting pushed to GCS and the
0000000000000000000000000000000000000000;;	  `latest.txt` file in the `ci` bucket being updated.
0000000000000000000000000000000000000000;;	* On trigger, and every half hour (which effectively means all the time, unless
0000000000000000000000000000000000000000;;	  we're failing cluster creation), e2e variants run, on the latest build assets
0000000000000000000000000000000000000000;;	  in GCS:
0000000000000000000000000000000000000000;;	  * `kubernetes-e2e-gce`: Standard GCE e2e.
0000000000000000000000000000000000000000;;	  * `kubernetes-e2e-gke`: GKE provider e2e, with head k8s client and GKE
0000000000000000000000000000000000000000;;	    creating clusters at its default version.
0000000000000000000000000000000000000000;;	  * `kubernetes-e2e-aws`: AWS provider e2e. This only runs once a day.
0000000000000000000000000000000000000000;;	* Each job will not run concurrently with itself, so, for instance,
0000000000000000000000000000000000000000;;	  Jenkins executor will only ever run one `kubernetes-build`
0000000000000000000000000000000000000000;;	  job. However, it may run the jobs in parallel,
0000000000000000000000000000000000000000;;	  i.e. `kubernetes-build` may be run at the same time as
0000000000000000000000000000000000000000;;	  `kubernetes-e2e-gce`. For this reason, you may see your changes
0000000000000000000000000000000000000000;;	  pushed to our GCS bucket rapidly, but they may take some time to
0000000000000000000000000000000000000000;;	  fully work through Jenkins. Or you may get lucky and catch the
0000000000000000000000000000000000000000;;	  train in 5 minutes.
0000000000000000000000000000000000000000;;	* There are many jobs not listed here, including upgrade tests, soak tests, and
0000000000000000000000000000000000000000;;	  tests for previous releases.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Scripts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The scripts in this directory are directly used by Jenkins, either by
0000000000000000000000000000000000000000;;	curl from githubusercontent (if we don't have a git checkout handy) or
0000000000000000000000000000000000000000;;	by executing it from the git checkout. Since Jenkins is an entity
0000000000000000000000000000000000000000;;	outside this repository, it's tricky to keep documentation for it up
0000000000000000000000000000000000000000;;	to date quickly. However, the scripts themselves attempt to provide
0000000000000000000000000000000000000000;;	color for the configuration(s) that each script runs in.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## GCS Log Format
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Our `upload-to-gcs.sh` script runs at the start and end of every job. Logs on
0000000000000000000000000000000000000000;;	post-commit Jenkins go under `gs://kubernetes-jenkins/logs/`. Logs on PR
0000000000000000000000000000000000000000;;	Jenkins go under `gs://kubernetes-jenkins-pull/pr-logs/pull/PULL_NUMBER/`.
0000000000000000000000000000000000000000;;	Individual run logs go into the `JOB_NAME/BUILD_NUMBER` folder.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	At the start of the job, it uploads `started.json` containing the version of
0000000000000000000000000000000000000000;;	Kubernetes under test and the timestamp.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	At the end, it uploads `finished.json` containing the result and timestamp, as
0000000000000000000000000000000000000000;;	well as the build log into `build-log.txt`. Under `artifacts/` we put our
0000000000000000000000000000000000000000;;	test results in `junit_XY.xml`, along with gcp resource lists and cluster logs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It also updates `latest-build.txt` at the end to point to this build number.
0000000000000000000000000000000000000000;;	In the end, the directory structure looks like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	gs://kubernetes-jenkins/logs/kubernetes-e2e-gce/
0000000000000000000000000000000000000000;;	  latest-build.txt
0000000000000000000000000000000000000000;;	  12345/
0000000000000000000000000000000000000000;;	    build-log.txt
0000000000000000000000000000000000000000;;	    started.json
0000000000000000000000000000000000000000;;	    finished.json
0000000000000000000000000000000000000000;;	    artifacts/
0000000000000000000000000000000000000000;;	      gcp-resources-{before, after}.txt
0000000000000000000000000000000000000000;;	      junit_{00, 01, ...}.xml
0000000000000000000000000000000000000000;;	      jenkins-e2e-master/{kube-apiserver.log, ...}
0000000000000000000000000000000000000000;;	      jenkins-e2e-node-abcd/{kubelet.log, ...}
0000000000000000000000000000000000000000;;	  12344/
0000000000000000000000000000000000000000;;	    ...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The munger uses `latest-build.txt` and the JUnit reports to figure out whether
0000000000000000000000000000000000000000;;	or not the job is healthy.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Job Builder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	New jobs should be specified as YAML files to be processed by [Jenkins Job
0000000000000000000000000000000000000000;;	Builder](http://docs.openstack.org/infra/jenkins-job-builder/). The YAML files
0000000000000000000000000000000000000000;;	live in `jenkins/job-configs` and its subfolders **in the 
0000000000000000000000000000000000000000;;	[kubernetes/test-infra repository](https://github.com/kubernetes/test-infra)**.
0000000000000000000000000000000000000000;;	Jenkins runs Jenkins Job Builder in a Docker container defined in
0000000000000000000000000000000000000000;;	`job-builder-image`, and triggers it using `update-jobs.sh`. Jenkins Job Builder
0000000000000000000000000000000000000000;;	uses a config file called
0000000000000000000000000000000000000000;;	[jenkins_jobs.ini](http://docs.openstack.org/infra/jenkins-job-builder/execution.html)
0000000000000000000000000000000000000000;;	which contains the location and credentials of the Jenkins server.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	E2E Job definitions are templated to avoid code duplication. To add a new job,
0000000000000000000000000000000000000000;;	add a new entry to the appropriate `project`.
0000000000000000000000000000000000000000;;	[This](https://github.com/kubernetes/kubernetes/commit/eb273e5a4bdd3905f881563ada4e6543c7eb96b5)
0000000000000000000000000000000000000000;;	is an example of a commit which does this. If necessary, create a new project, as in
0000000000000000000000000000000000000000;;	[this](https://github.com/kubernetes/kubernetes/commit/09c27cdabc300e0420a2914100bedb565c23ed73)
0000000000000000000000000000000000000000;;	commit.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/hack/jenkins/README.md?pixel)]()
