0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	set -o xtrace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	retry() {
0000000000000000000000000000000000000000;;	  for i in {1..5}; do
0000000000000000000000000000000000000000;;	    "$@" && return 0 || sleep $i
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  "$@"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Runs the unit and integration tests, producing JUnit-style XML test
0000000000000000000000000000000000000000;;	# reports in ${WORKSPACE}/artifacts. This script is intended to be run from
0000000000000000000000000000000000000000;;	# kubekins-test container with a kubernetes repo mapped in. See
0000000000000000000000000000000000000000;;	# hack/jenkins/gotest-dockerized.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export PATH=${GOPATH}/bin:${PWD}/third_party/etcd:/usr/local/go/bin:${PATH}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	retry go get github.com/tools/godep && godep version
0000000000000000000000000000000000000000;;	retry go get github.com/jstemmer/go-junit-report
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Enable the Go race detector.
0000000000000000000000000000000000000000;;	export KUBE_RACE=-race
0000000000000000000000000000000000000000;;	# Disable coverage report
0000000000000000000000000000000000000000;;	export KUBE_COVER="n"
0000000000000000000000000000000000000000;;	# Produce a JUnit-style XML test report for Jenkins.
0000000000000000000000000000000000000000;;	export KUBE_JUNIT_REPORT_DIR=${WORKSPACE}/artifacts
0000000000000000000000000000000000000000;;	export ARTIFACTS_DIR=${WORKSPACE}/artifacts
0000000000000000000000000000000000000000;;	# Save the verbose stdout as well.
0000000000000000000000000000000000000000;;	export KUBE_KEEP_VERBOSE_TEST_OUTPUT=y
0000000000000000000000000000000000000000;;	export KUBE_TIMEOUT='-timeout 300s'
0000000000000000000000000000000000000000;;	export KUBE_INTEGRATION_TEST_MAX_CONCURRENCY=4
0000000000000000000000000000000000000000;;	export LOG_LEVEL=4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cd /go/src/k8s.io/kubernetes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	make generated_files
0000000000000000000000000000000000000000;;	go install ./cmd/...
0000000000000000000000000000000000000000;;	./hack/install-etcd.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	make test
0000000000000000000000000000000000000000;;	make test-cmd
0000000000000000000000000000000000000000;;	make test-integration
0000000000000000000000000000000000000000;;	./hack/test-update-storage-objects.sh
