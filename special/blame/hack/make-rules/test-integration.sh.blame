0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	# Lists of API Versions of each groups that should be tested, groups are
0000000000000000000000000000000000000000;;	# separated by comma, lists are separated by semicolon. e.g.,
0000000000000000000000000000000000000000;;	# "v1,compute/v1alpha1,experimental/v1alpha2;v1,compute/v2,experimental/v1alpha3"
0000000000000000000000000000000000000000;;	# TODO: It's going to be:
0000000000000000000000000000000000000000;;	# KUBE_TEST_API_VERSIONS=${KUBE_TEST_API_VERSIONS:-"v1,extensions/v1beta1"}
0000000000000000000000000000000000000000;;	# FIXME: due to current implementation of a test client (see: pkg/api/testapi/testapi.go)
0000000000000000000000000000000000000000;;	# ONLY the last version is tested in each group.
0000000000000000000000000000000000000000;;	ALL_VERSIONS_CSV=$(IFS=',';echo "${KUBE_AVAILABLE_GROUP_VERSIONS[*]// /,}";IFS=$)
0000000000000000000000000000000000000000;;	KUBE_TEST_API_VERSIONS="${KUBE_TEST_API_VERSIONS:-${ALL_VERSIONS_CSV}}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Give integration tests longer to run
0000000000000000000000000000000000000000;;	# TODO: allow a larger value to be passed in
0000000000000000000000000000000000000000;;	#KUBE_TIMEOUT=${KUBE_TIMEOUT:--timeout 240s}
0000000000000000000000000000000000000000;;	KUBE_TIMEOUT="-timeout 600s"
0000000000000000000000000000000000000000;;	KUBE_INTEGRATION_TEST_MAX_CONCURRENCY=${KUBE_INTEGRATION_TEST_MAX_CONCURRENCY:-"-1"}
0000000000000000000000000000000000000000;;	LOG_LEVEL=${LOG_LEVEL:-2}
0000000000000000000000000000000000000000;;	KUBE_TEST_ARGS=${KUBE_TEST_ARGS:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::test::find_integration_test_dirs() {
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    cd ${KUBE_ROOT}
0000000000000000000000000000000000000000;;	    find test/integration/ -name '*_test.go' -print0 \
0000000000000000000000000000000000000000;;	      | xargs -0n1 dirname | sed "s|^|${KUBE_GO_PACKAGE}/|" \
0000000000000000000000000000000000000000;;	      | LC_ALL=C sort -u
0000000000000000000000000000000000000000;;	    find vendor/k8s.io/apiextensions-apiserver/test/integration/ -name '*_test.go' -print0 \
0000000000000000000000000000000000000000;;	      | xargs -0n1 dirname | sed "s|^|${KUBE_GO_PACKAGE}/|" \
0000000000000000000000000000000000000000;;	      | LC_ALL=C sort -u
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CLEANUP_REQUIRED=
0000000000000000000000000000000000000000;;	cleanup() {
0000000000000000000000000000000000000000;;	  if [[ -z "${CLEANUP_REQUIRED}" ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  kube::log::status "Cleaning up etcd"
0000000000000000000000000000000000000000;;	  kube::etcd::cleanup
0000000000000000000000000000000000000000;;	  CLEANUP_REQUIRED=
0000000000000000000000000000000000000000;;	  kube::log::status "Integration test cleanup complete"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	runTests() {
0000000000000000000000000000000000000000;;	  kube::log::status "Starting etcd instance"
0000000000000000000000000000000000000000;;	  CLEANUP_REQUIRED=1
0000000000000000000000000000000000000000;;	  kube::etcd::start
0000000000000000000000000000000000000000;;	  kube::log::status "Running integration test cases"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  KUBE_RACE="-race"
0000000000000000000000000000000000000000;;	  make -C "${KUBE_ROOT}" test \
0000000000000000000000000000000000000000;;	      WHAT="${WHAT:-$(kube::test::find_integration_test_dirs | paste -sd' ' -)}" \
0000000000000000000000000000000000000000;;	      GOFLAGS="${GOFLAGS:-}" \
0000000000000000000000000000000000000000;;	      KUBE_TEST_ARGS="${KUBE_TEST_ARGS:-} ${SHORT:--short=true} --vmodule=garbage*collector*=6 --alsologtostderr=true" \
0000000000000000000000000000000000000000;;	      KUBE_RACE="" \
0000000000000000000000000000000000000000;;	      KUBE_TIMEOUT="${KUBE_TIMEOUT}" \
0000000000000000000000000000000000000000;;	      KUBE_TEST_API_VERSIONS="$1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cleanup
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	checkEtcdOnPath() {
0000000000000000000000000000000000000000;;	  kube::log::status "Checking etcd is on PATH"
0000000000000000000000000000000000000000;;	  which etcd && return
0000000000000000000000000000000000000000;;	  kube::log::status "Cannot find etcd, cannot run integration tests."
0000000000000000000000000000000000000000;;	  kube::log::status "Please see https://github.com/kubernetes/community/blob/master/contributors/devel/testing.md#install-etcd-dependency for instructions."
0000000000000000000000000000000000000000;;	  kube::log::usage "You can use 'hack/install-etcd.sh' to install a copy in third_party/."
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	checkEtcdOnPath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Run cleanup to stop etcd on interrupt or other kill signal.
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If a test case is specified, just run once with v1 API version and exit
0000000000000000000000000000000000000000;;	if [[ -n "${KUBE_TEST_ARGS}" ]]; then
0000000000000000000000000000000000000000;;	  runTests v1
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Convert the CSV to an array of API versions to test
0000000000000000000000000000000000000000;;	IFS=';' read -a apiVersions <<< "${KUBE_TEST_API_VERSIONS}"
0000000000000000000000000000000000000000;;	for apiVersion in "${apiVersions[@]}"; do
0000000000000000000000000000000000000000;;	  runTests "${apiVersion}"
0000000000000000000000000000000000000000;;	done
