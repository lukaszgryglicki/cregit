0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script finds, caches, and prints a list of all directories that hold
0000000000000000000000000000000000000000;;	# *.go files.  If any directory is newer than the cache, re-find everything and
0000000000000000000000000000000000000000;;	# update the cache.  Otherwise use the cached file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${1:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "usage: $0 <cache-file>"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	CACHE="$1"; shift
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	trap "rm -f '${CACHE}'" HUP INT TERM ERR
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This is a partial 'find' command.  The caller is expected to pass the
0000000000000000000000000000000000000000;;	# remaining arguments.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Example:
0000000000000000000000000000000000000000;;	#   kfind -type f -name foobar.go
0000000000000000000000000000000000000000;;	function kfind() {
0000000000000000000000000000000000000000;;	    # include the "special" vendor directories which are actually part
0000000000000000000000000000000000000000;;	    # of the Kubernetes source tree - generators will use these for
0000000000000000000000000000000000000000;;	    # including certain core API concepts.
0000000000000000000000000000000000000000;;	    find -H . ./vendor/k8s.io/apimachinery ./vendor/k8s.io/apiserver ./vendor/k8s.io/kube-aggregator ./vendor/k8s.io/apiextensions-apiserver ./vendor/k8s.io/metrics ./vendor/k8s.io/sample-apiserver ./vendor/k8s.io/api \
0000000000000000000000000000000000000000;;	        \(                         \
0000000000000000000000000000000000000000;;	        -not \(                    \
0000000000000000000000000000000000000000;;	            \(                     \
0000000000000000000000000000000000000000;;	                -path ./vendor -o  \
0000000000000000000000000000000000000000;;	                -path ./staging -o \
0000000000000000000000000000000000000000;;	                -path ./_\* -o     \
0000000000000000000000000000000000000000;;	                -path ./.\* -o     \
0000000000000000000000000000000000000000;;	                -path ./docs -o    \
0000000000000000000000000000000000000000;;	                -path ./examples   \
0000000000000000000000000000000000000000;;	            \) -prune              \
0000000000000000000000000000000000000000;;	        \)                         \
0000000000000000000000000000000000000000;;	        \)                         \
0000000000000000000000000000000000000000;;	        "$@"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	NEED_FIND=true
0000000000000000000000000000000000000000;;	# It's *significantly* faster to check whether any directories are newer than
0000000000000000000000000000000000000000;;	# the cache than to blindly rebuild it.
0000000000000000000000000000000000000000;;	if [[ -f "${CACHE}" ]]; then
0000000000000000000000000000000000000000;;	    N=$(kfind -type d -newer "${CACHE}" -print -quit | wc -l)
0000000000000000000000000000000000000000;;	    [[ "${N}" == 0 ]] && NEED_FIND=false
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	mkdir -p $(dirname "${CACHE}")
0000000000000000000000000000000000000000;;	if $("${NEED_FIND}"); then
0000000000000000000000000000000000000000;;	    kfind -type f -name \*.go  \
0000000000000000000000000000000000000000;;	        | sed 's|/[^/]*$||'    \
0000000000000000000000000000000000000000;;	        | sed 's|^./||'        \
0000000000000000000000000000000000000000;;	        | LC_ALL=C sort -u     \
0000000000000000000000000000000000000000;;	        > "${CACHE}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	cat "${CACHE}"
