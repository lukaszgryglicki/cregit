0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This command checks that the built commands can function together for
0000000000000000000000000000000000000000;;	# simple scenarios.  It does not require Docker.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/test.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/make-rules/test-cmd-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run_kube_apiserver() {
0000000000000000000000000000000000000000;;	  kube::log::status "Building kube-apiserver"
0000000000000000000000000000000000000000;;	  make -C "${KUBE_ROOT}" WHAT="cmd/kube-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start kube-apiserver
0000000000000000000000000000000000000000;;	  kube::log::status "Starting kube-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Admission Controllers to invoke prior to persisting objects in cluster
0000000000000000000000000000000000000000;;	  ADMISSION_CONTROL="Initializers,NamespaceLifecycle,LimitRanger,ResourceQuota"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Include RBAC (to exercise bootstrapping), and AlwaysAllow to allow all actions
0000000000000000000000000000000000000000;;	  AUTHORIZATION_MODE="RBAC,AlwaysAllow"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  "${KUBE_OUTPUT_HOSTBIN}/kube-apiserver" \
0000000000000000000000000000000000000000;;	    --insecure-bind-address="127.0.0.1" \
0000000000000000000000000000000000000000;;	    --bind-address="127.0.0.1" \
0000000000000000000000000000000000000000;;	    --insecure-port="${API_PORT}" \
0000000000000000000000000000000000000000;;	    --authorization-mode="${AUTHORIZATION_MODE}" \
0000000000000000000000000000000000000000;;	    --secure-port="${SECURE_API_PORT}" \
0000000000000000000000000000000000000000;;	    --admission-control="${ADMISSION_CONTROL}" \
0000000000000000000000000000000000000000;;	    --etcd-servers="http://${ETCD_HOST}:${ETCD_PORT}" \
0000000000000000000000000000000000000000;;	    --runtime-config=api/v1 \
0000000000000000000000000000000000000000;;	    --storage-media-type="${KUBE_TEST_API_STORAGE_TYPE-}" \
0000000000000000000000000000000000000000;;	    --cert-dir="${TMPDIR:-/tmp/}" \
0000000000000000000000000000000000000000;;	    --service-cluster-ip-range="10.0.0.0/24" \
0000000000000000000000000000000000000000;;	    --insecure-allow-any-token 1>&2 &
0000000000000000000000000000000000000000;;	  APISERVER_PID=$!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::wait_for_url "http://127.0.0.1:${API_PORT}/healthz" "apiserver"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run_kube_controller_manager() {
0000000000000000000000000000000000000000;;	  kube::log::status "Building kube-controller-manager"
0000000000000000000000000000000000000000;;	  make -C "${KUBE_ROOT}" WHAT="cmd/kube-controller-manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start controller manager
0000000000000000000000000000000000000000;;	  kube::log::status "Starting controller-manager"
0000000000000000000000000000000000000000;;	  "${KUBE_OUTPUT_HOSTBIN}/kube-controller-manager" \
0000000000000000000000000000000000000000;;	    --port="${CTLRMGR_PORT}" \
0000000000000000000000000000000000000000;;	    --kube-api-content-type="${KUBE_TEST_API_TYPE-}" \
0000000000000000000000000000000000000000;;	    --master="127.0.0.1:${API_PORT}" 1>&2 &
0000000000000000000000000000000000000000;;	  CTLRMGR_PID=$!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::wait_for_url "http://127.0.0.1:${CTLRMGR_PORT}/healthz" "controller-manager"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Creates a node object with name 127.0.0.1. This is required because we do not
0000000000000000000000000000000000000000;;	# run kubelet.
0000000000000000000000000000000000000000;;	function create_node() {
0000000000000000000000000000000000000000;;	  kubectl create -f - -s "http://127.0.0.1:${API_PORT}" << __EOF__
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "kind": "Node",
0000000000000000000000000000000000000000;;	  "apiVersion": "v1",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	    "name": "127.0.0.1"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "status": {
0000000000000000000000000000000000000000;;	    "capacity": {
0000000000000000000000000000000000000000;;	      "memory": "1Gi"
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	__EOF__
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::log::status "Running kubectl tests for kube-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	setup
0000000000000000000000000000000000000000;;	run_kube_apiserver
0000000000000000000000000000000000000000;;	run_kube_controller_manager
0000000000000000000000000000000000000000;;	create_node
0000000000000000000000000000000000000000;;	SUPPORTED_RESOURCES=("*")
0000000000000000000000000000000000000000;;	# WARNING: Do not wrap this call in a subshell to capture output, e.g. output=$(runTests)
0000000000000000000000000000000000000000;;	# Doing so will suppress errexit behavior inside runTests
0000000000000000000000000000000000000000;;	runTests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::log::status "TESTS PASSED"
