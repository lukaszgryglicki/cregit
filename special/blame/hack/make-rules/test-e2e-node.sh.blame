0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	focus=${FOCUS:-""}
0000000000000000000000000000000000000000;;	skip=${SKIP-"\[Flaky\]|\[Slow\]|\[Serial\]"}
0000000000000000000000000000000000000000;;	# The number of tests that can run in parallel depends on what tests
0000000000000000000000000000000000000000;;	# are running and on the size of the node. Too many, and tests will
0000000000000000000000000000000000000000;;	# fail due to resource contention. 8 is a reasonable default for a
0000000000000000000000000000000000000000;;	# n1-standard-1 node.
0000000000000000000000000000000000000000;;	# Currently, parallelism only affects when REMOTE=true. For local test,
0000000000000000000000000000000000000000;;	# ginkgo default parallelism (cores - 1) is used.
0000000000000000000000000000000000000000;;	parallelism=${PARALLELISM:-8}
0000000000000000000000000000000000000000;;	artifacts=${ARTIFACTS:-"/tmp/_artifacts/`date +%y%m%dT%H%M%S`"}
0000000000000000000000000000000000000000;;	remote=${REMOTE:-"false"}
0000000000000000000000000000000000000000;;	runtime=${RUNTIME:-"docker"}
0000000000000000000000000000000000000000;;	container_runtime_endpoint=${CONTAINER_RUNTIME_ENDPOINT:-""}
0000000000000000000000000000000000000000;;	image_service_endpoint=${IMAGE_SERVICE_ENDPOINT:-""}
0000000000000000000000000000000000000000;;	run_until_failure=${RUN_UNTIL_FAILURE:-"false"}
0000000000000000000000000000000000000000;;	test_args=${TEST_ARGS:-""}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Parse the flags to pass to ginkgo
0000000000000000000000000000000000000000;;	ginkgoflags=""
0000000000000000000000000000000000000000;;	if [[ $parallelism > 1 ]]; then
0000000000000000000000000000000000000000;;	  ginkgoflags="$ginkgoflags -nodes=$parallelism "
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $focus != "" ]]; then
0000000000000000000000000000000000000000;;	  ginkgoflags="$ginkgoflags -focus=\"$focus\" "
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $skip != "" ]]; then
0000000000000000000000000000000000000000;;	  ginkgoflags="$ginkgoflags -skip=\"$skip\" "
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $run_until_failure != "" ]]; then
0000000000000000000000000000000000000000;;	  ginkgoflags="$ginkgoflags -untilItFails=$run_until_failure "
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Setup the directory to copy test artifacts (logs, junit.xml, etc) from remote host to local host
0000000000000000000000000000000000000000;;	if [ ! -d "${artifacts}" ]; then
0000000000000000000000000000000000000000;;	  echo "Creating artifacts directory at ${artifacts}"
0000000000000000000000000000000000000000;;	  mkdir -p ${artifacts}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	echo "Test artifacts will be written to ${artifacts}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ $remote = true ] ; then
0000000000000000000000000000000000000000;;	  # The following options are only valid in remote run.
0000000000000000000000000000000000000000;;	  images=${IMAGES:-""}
0000000000000000000000000000000000000000;;	  hosts=${HOSTS:-""}
0000000000000000000000000000000000000000;;	  image_project=${IMAGE_PROJECT:-"kubernetes-node-e2e-images"}
0000000000000000000000000000000000000000;;	  metadata=${INSTANCE_METADATA:-""}
0000000000000000000000000000000000000000;;	  list_images=${LIST_IMAGES:-false}
0000000000000000000000000000000000000000;;	  if  [[ $list_images == "true" ]]; then
0000000000000000000000000000000000000000;;	    gcloud compute images list --project="${image_project}" | grep "e2e-node"
0000000000000000000000000000000000000000;;	    exit 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  gubernator=${GUBERNATOR:-"false"}
0000000000000000000000000000000000000000;;	  image_config_file=${IMAGE_CONFIG_FILE:-""}
0000000000000000000000000000000000000000;;	  if [[ $hosts == "" && $images == "" && $image_config_file == "" ]]; then
0000000000000000000000000000000000000000;;	    image_project=${IMAGE_PROJECT:-"cos-cloud"}
0000000000000000000000000000000000000000;;	    gci_image=$(gcloud compute images list --project $image_project \
0000000000000000000000000000000000000000;;	    --no-standard-images --regexp="cos-beta.*" --format="table[no-heading](name)")
0000000000000000000000000000000000000000;;	    images=$gci_image
0000000000000000000000000000000000000000;;	    metadata="user-data<${KUBE_ROOT}/test/e2e_node/jenkins/gci-init.yaml,gci-update-strategy=update_disabled"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  instance_prefix=${INSTANCE_PREFIX:-"test"}
0000000000000000000000000000000000000000;;	  cleanup=${CLEANUP:-"true"}
0000000000000000000000000000000000000000;;	  delete_instances=${DELETE_INSTANCES:-"false"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Get the compute zone
0000000000000000000000000000000000000000;;	  zone=$(gcloud info --format='value(config.properties.compute.zone)')
0000000000000000000000000000000000000000;;	  if [[ $zone == "" ]]; then
0000000000000000000000000000000000000000;;	    echo "Could not find gcloud compute/zone when running: \`gcloud info --format='value(config.properties.compute.zone)'\`"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Get the compute project
0000000000000000000000000000000000000000;;	  project=$(gcloud info --format='value(config.project)')
0000000000000000000000000000000000000000;;	  if [[ $project == "" ]]; then
0000000000000000000000000000000000000000;;	    echo "Could not find gcloud project when running: \`gcloud info --format='value(config.project)'\`"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Check if any of the images specified already have running instances.  If so reuse those instances
0000000000000000000000000000000000000000;;	  # by moving the IMAGE to a HOST
0000000000000000000000000000000000000000;;	  if [[ $images != "" ]]; then
0000000000000000000000000000000000000000;;	  IFS=',' read -ra IM <<< "$images"
0000000000000000000000000000000000000000;;	       images=""
0000000000000000000000000000000000000000;;	       for i in "${IM[@]}"; do
0000000000000000000000000000000000000000;;	         if [[ $(gcloud compute instances list "${instance_prefix}-$i" | grep $i) ]]; then
0000000000000000000000000000000000000000;;	           if [[ $hosts != "" ]]; then
0000000000000000000000000000000000000000;;	             hosts="$hosts,"
0000000000000000000000000000000000000000;;	           fi
0000000000000000000000000000000000000000;;	           echo "Reusing host ${instance_prefix}-$i"
0000000000000000000000000000000000000000;;	           hosts="${hosts}${instance_prefix}-${i}"
0000000000000000000000000000000000000000;;	         else
0000000000000000000000000000000000000000;;	           if [[ $images != "" ]]; then
0000000000000000000000000000000000000000;;	             images="$images,"
0000000000000000000000000000000000000000;;	           fi
0000000000000000000000000000000000000000;;	           images="$images$i"
0000000000000000000000000000000000000000;;	         fi
0000000000000000000000000000000000000000;;	       done
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Output the configuration we will try to run
0000000000000000000000000000000000000000;;	  echo "Running tests remotely using"
0000000000000000000000000000000000000000;;	  echo "Project: $project"
0000000000000000000000000000000000000000;;	  echo "Image Project: $image_project"
0000000000000000000000000000000000000000;;	  echo "Compute/Zone: $zone"
0000000000000000000000000000000000000000;;	  echo "Images: $images"
0000000000000000000000000000000000000000;;	  echo "Hosts: $hosts"
0000000000000000000000000000000000000000;;	  echo "Ginkgo Flags: $ginkgoflags"
0000000000000000000000000000000000000000;;	  echo "Instance Metadata: $metadata"
0000000000000000000000000000000000000000;;	  echo "Image Config File: $image_config_file"
0000000000000000000000000000000000000000;;	  # Invoke the runner
0000000000000000000000000000000000000000;;	  go run test/e2e_node/runner/remote/run_remote.go  --logtostderr --vmodule=*=4 --ssh-env="gce" \
0000000000000000000000000000000000000000;;	    --zone="$zone" --project="$project" --gubernator="$gubernator" \
0000000000000000000000000000000000000000;;	    --hosts="$hosts" --images="$images" --cleanup="$cleanup" \
0000000000000000000000000000000000000000;;	    --results-dir="$artifacts" --ginkgo-flags="$ginkgoflags" \
0000000000000000000000000000000000000000;;	    --image-project="$image_project" --instance-name-prefix="$instance_prefix" \
0000000000000000000000000000000000000000;;	    --delete-instances="$delete_instances" --test_args="$test_args" --instance-metadata="$metadata" \
0000000000000000000000000000000000000000;;	    --image-config-file="$image_config_file" \
0000000000000000000000000000000000000000;;	    2>&1 | tee -i "${artifacts}/build-log.txt"
0000000000000000000000000000000000000000;;	  exit $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  # Refresh sudo credentials for local run
0000000000000000000000000000000000000000;;	  if ! ping -c 1 -q metadata.google.internal &> /dev/null; then
0000000000000000000000000000000000000000;;	    echo "Updating sudo credentials"
0000000000000000000000000000000000000000;;	    sudo -v || exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Do not use any network plugin by default. User could override the flags with
0000000000000000000000000000000000000000;;	  # test_args.
0000000000000000000000000000000000000000;;	  test_args='--kubelet-flags="--network-plugin= --cni-bin-dir=" '$test_args
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Runtime flags
0000000000000000000000000000000000000000;;	  test_args='--kubelet-flags="--container-runtime='$runtime'" '$test_args
0000000000000000000000000000000000000000;;	  if [[ $runtime == "remote" ]] ; then
0000000000000000000000000000000000000000;;	      if [[ ! -z $container_runtime_endpoint ]] ; then
0000000000000000000000000000000000000000;;		      test_args='--kubelet-flags="--container-runtime-endpoint='$container_runtime_endpoint'" '$test_args
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      if [[ ! -z $image_service_endpoint ]] ; then
0000000000000000000000000000000000000000;;		      test_args='--kubelet-flags="--image-service-endpoint='$image_service_endpoint'" '$test_args
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Test using the host the script was run on
0000000000000000000000000000000000000000;;	  # Provided for backwards compatibility
0000000000000000000000000000000000000000;;	  go run test/e2e_node/runner/local/run_local.go --ginkgo-flags="$ginkgoflags" \
0000000000000000000000000000000000000000;;	    --test-flags="--container-runtime=${runtime} \
0000000000000000000000000000000000000000;;	    --container-runtime-endpoint=${container_runtime_endpoint} \
0000000000000000000000000000000000000000;;	    --image-service-endpoint=${image_service_endpoint} \
0000000000000000000000000000000000000000;;	    --alsologtostderr --v 4 --report-dir=${artifacts} --node-name $(hostname) \
0000000000000000000000000000000000000000;;	    $test_args" --build-dependencies=true 2>&1 | tee -i "${artifacts}/build-log.txt"
0000000000000000000000000000000000000000;;	  exit $?
0000000000000000000000000000000000000000;;	fi
