0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This command checks that the built commands can function together for
0000000000000000000000000000000000000000;;	# simple scenarios.  It does not require Docker.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/test.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/make-rules/test-cmd-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run_federation_apiserver() {
0000000000000000000000000000000000000000;;	  kube::log::status "Building federation-apiserver"
0000000000000000000000000000000000000000;;	  make -C "${KUBE_ROOT}" WHAT="federation/cmd/federation-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start federation-apiserver
0000000000000000000000000000000000000000;;	  kube::log::status "Starting federation-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Admission Controllers to invoke prior to persisting objects in cluster
0000000000000000000000000000000000000000;;	  ADMISSION_CONTROL="NamespaceLifecycle"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  "${KUBE_OUTPUT_HOSTBIN}/federation-apiserver" \
0000000000000000000000000000000000000000;;	    --insecure-port="${API_PORT}" \
0000000000000000000000000000000000000000;;	    --secure-port="${SECURE_API_PORT}" \
0000000000000000000000000000000000000000;;	    --admission-control="${ADMISSION_CONTROL}" \
0000000000000000000000000000000000000000;;	    --etcd-servers="http://${ETCD_HOST}:${ETCD_PORT}" \
0000000000000000000000000000000000000000;;	    --storage-media-type="${KUBE_TEST_API_STORAGE_TYPE-}" \
0000000000000000000000000000000000000000;;	    --cert-dir="${TMPDIR:-/tmp/}" \
0000000000000000000000000000000000000000;;	    --insecure-allow-any-token 1>&2 &
0000000000000000000000000000000000000000;;	  APISERVER_PID=$!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::wait_for_url "http://127.0.0.1:${API_PORT}/healthz" "apiserver"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run_federation_controller_manager() {
0000000000000000000000000000000000000000;;	  kube::log::status "Building federation-controller-manager"
0000000000000000000000000000000000000000;;	  make -C "${KUBE_ROOT}" WHAT="federation/cmd/federation-controller-manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Create a kubeconfig for federation apiserver.
0000000000000000000000000000000000000000;;	  local kubeconfig="${KUBE_TEMP}/kubeconfig"
0000000000000000000000000000000000000000;;	  touch "${kubeconfig}"
0000000000000000000000000000000000000000;;	  kubectl config set-cluster "apiserver" --server="http://127.0.0.1:${API_PORT}" --insecure-skip-tls-verify=true --kubeconfig="${kubeconfig}"
0000000000000000000000000000000000000000;;	  kubectl config set-context "context" --cluster="apiserver" --kubeconfig="${kubeconfig}"
0000000000000000000000000000000000000000;;	  kubectl config use-context "context" --kubeconfig="${kubeconfig}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start controller manager
0000000000000000000000000000000000000000;;	  kube::log::status "Starting federation-controller-manager"
0000000000000000000000000000000000000000;;	  "${KUBE_OUTPUT_HOSTBIN}/federation-controller-manager" \
0000000000000000000000000000000000000000;;	    --port="${CTLRMGR_PORT}" \
0000000000000000000000000000000000000000;;	    --kubeconfig="${kubeconfig}" \
0000000000000000000000000000000000000000;;	    --kube-api-content-type="${KUBE_TEST_API_TYPE-}" \
0000000000000000000000000000000000000000;;	    --controllers="service-dns=false" \
0000000000000000000000000000000000000000;;	    --master="127.0.0.1:${API_PORT}" 1>&2 &
0000000000000000000000000000000000000000;;	  CTLRMGR_PID=$!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::wait_for_url "http://127.0.0.1:${CTLRMGR_PORT}/healthz" "controller-manager"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::log::status "Running kubectl tests for federation-apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	setup
0000000000000000000000000000000000000000;;	run_federation_apiserver
0000000000000000000000000000000000000000;;	run_federation_controller_manager
0000000000000000000000000000000000000000;;	# TODO: Fix for replicasets and deployments.
0000000000000000000000000000000000000000;;	SUPPORTED_RESOURCES=("configmaps" "daemonsets" "events" "ingress" "namespaces" "services" "secrets")
0000000000000000000000000000000000000000;;	# Set wait for deletion to true for federation apiserver since resources are
0000000000000000000000000000000000000000;;	# deleted asynchronously.
0000000000000000000000000000000000000000;;	# This is a temporary workaround until https://github.com/kubernetes/kubernetes/issues/42594 is fixed.
0000000000000000000000000000000000000000;;	WAIT_FOR_DELETION="true"
0000000000000000000000000000000000000000;;	# WARNING: Do not wrap this call in a subshell to capture output, e.g. output=$(runTests)
0000000000000000000000000000000000000000;;	# Doing so will suppress errexit behavior inside runTests
0000000000000000000000000000000000000000;;	runTests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::log::status "TESTS PASSED"
