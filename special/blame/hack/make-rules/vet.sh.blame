0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cd "${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If called directly, exit.
0000000000000000000000000000000000000000;;	if [[ "${CALLED_FROM_MAIN_MAKEFILE:-""}" == "" ]]; then
0000000000000000000000000000000000000000;;	    echo "ERROR: $0 should not be run directly." >&2
0000000000000000000000000000000000000000;;	    echo >&2
0000000000000000000000000000000000000000;;	    echo "Please run this command using \"make vet\""
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This is required before we run govet for the results to be correct.
0000000000000000000000000000000000000000;;	# See https://github.com/golang/go/issues/16086 for details.
0000000000000000000000000000000000000000;;	go install ./cmd/...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Use eval to preserve embedded quoted strings.
0000000000000000000000000000000000000000;;	eval "goflags=(${GOFLAGS:-})"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Filter out arguments that start with "-" and move them to goflags.
0000000000000000000000000000000000000000;;	targets=()
0000000000000000000000000000000000000000;;	for arg; do
0000000000000000000000000000000000000000;;	  if [[ "${arg}" == -* ]]; then
0000000000000000000000000000000000000000;;	    goflags+=("${arg}")
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    targets+=("${arg}")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ ${#targets[@]} -eq 0 ]]; then
0000000000000000000000000000000000000000;;	  # Do not run on third_party directories or generated client code.
0000000000000000000000000000000000000000;;	  targets=$(go list -e ./... | egrep -v "/(third_party|vendor|staging|clientset_generated)/")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	go vet "${goflags[@]:+${goflags[@]}}" ${targets[@]}
