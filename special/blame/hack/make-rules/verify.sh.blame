0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Excluded check patterns are always skipped.
0000000000000000000000000000000000000000;;	EXCLUDED_PATTERNS=(
0000000000000000000000000000000000000000;;	  "verify-all.sh"                # this script calls the make rule and would cause a loop
0000000000000000000000000000000000000000;;	  "verify-linkcheck.sh"          # runs in separate Jenkins job once per day due to high network usage
0000000000000000000000000000000000000000;;	  "verify-test-owners.sh"        # TODO(rmmh): figure out how to avoid endless conflicts
0000000000000000000000000000000000000000;;	  "verify-*-dockerized.sh"       # Don't run any scripts that intended to be run dockerized
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EXCLUDED_CHECKS=$(ls ${EXCLUDED_PATTERNS[@]/#/${KUBE_ROOT}\/hack\/} 2>/dev/null || true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function is-excluded {
0000000000000000000000000000000000000000;;	  for e in ${EXCLUDED_CHECKS[@]}; do
0000000000000000000000000000000000000000;;	    if [[ $1 -ef "$e" ]]; then
0000000000000000000000000000000000000000;;	      return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run-cmd {
0000000000000000000000000000000000000000;;	  if ${SILENT}; then
0000000000000000000000000000000000000000;;	    "$@" &> /dev/null
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    "$@"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run-checks {
0000000000000000000000000000000000000000;;	  local -r pattern=$1
0000000000000000000000000000000000000000;;	  local -r runner=$2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for t in $(ls ${pattern})
0000000000000000000000000000000000000000;;	  do
0000000000000000000000000000000000000000;;	    if is-excluded "${t}" ; then
0000000000000000000000000000000000000000;;	      echo "Skipping ${t}"
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    echo -e "Verifying ${t}"
0000000000000000000000000000000000000000;;	    local start=$(date +%s)
0000000000000000000000000000000000000000;;	    run-cmd "${runner}" "${t}" && tr=$? || tr=$?
0000000000000000000000000000000000000000;;	    local elapsed=$(($(date +%s) - ${start}))
0000000000000000000000000000000000000000;;	    if [[ ${tr} -eq 0 ]]; then
0000000000000000000000000000000000000000;;	      echo -e "${color_green}SUCCESS${color_norm}  ${t}\t${elapsed}s"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo -e "${color_red}FAILED${color_norm}   ${t}\t${elapsed}s"
0000000000000000000000000000000000000000;;	      ret=1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while getopts ":v" opt; do
0000000000000000000000000000000000000000;;	  case ${opt} in
0000000000000000000000000000000000000000;;	    v)
0000000000000000000000000000000000000000;;	      SILENT=false
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    \?)
0000000000000000000000000000000000000000;;	      echo "Invalid flag: -${OPTARG}" >&2
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if ${SILENT} ; then
0000000000000000000000000000000000000000;;	  echo "Running in silent mode, run with -v if you want to see script logs."
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ret=0
0000000000000000000000000000000000000000;;	run-checks "${KUBE_ROOT}/hack/verify-*.sh" bash
0000000000000000000000000000000000000000;;	run-checks "${KUBE_ROOT}/hack/verify-*.py" python
0000000000000000000000000000000000000000;;	exit ${ret}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# ex: ts=2 sw=2 et filetype=sh
