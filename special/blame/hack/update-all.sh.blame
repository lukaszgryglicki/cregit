0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A single script that runs a predefined set of update-* scripts, as they often go together.
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SILENT=true
0000000000000000000000000000000000000000;;	ALL=false
0000000000000000000000000000000000000000;;	V=""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while getopts ":va" opt; do
0000000000000000000000000000000000000000;;		case $opt in
0000000000000000000000000000000000000000;;			a)
0000000000000000000000000000000000000000;;				ALL=true
0000000000000000000000000000000000000000;;				;;
0000000000000000000000000000000000000000;;			v)
0000000000000000000000000000000000000000;;				SILENT=false
0000000000000000000000000000000000000000;;				V="-v"
0000000000000000000000000000000000000000;;				;;
0000000000000000000000000000000000000000;;			\?)
0000000000000000000000000000000000000000;;				echo "Invalid flag: -$OPTARG" >&2
0000000000000000000000000000000000000000;;				exit 1
0000000000000000000000000000000000000000;;				;;
0000000000000000000000000000000000000000;;		esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	trap 'exit 1' SIGINT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if $SILENT ; then
0000000000000000000000000000000000000000;;		echo "Running in the silent mode, run with -v if you want to see script logs."
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if ! $ALL ; then
0000000000000000000000000000000000000000;;		echo "Running in short-circuit mode; run with -a to force all scripts to run."
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::ensure_godep_version v79
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if ! kube::util::godep_restored 2>&1 | sed 's/^/  /'; then
0000000000000000000000000000000000000000;;		echo "Running godep restore"
0000000000000000000000000000000000000000;;		"${KUBE_ROOT}/hack/godep-restore.sh" ${V}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	BASH_TARGETS="
0000000000000000000000000000000000000000;;		update-generated-protobuf
0000000000000000000000000000000000000000;;		update-codegen
0000000000000000000000000000000000000000;;		update-codecgen
0000000000000000000000000000000000000000;;		update-generated-docs
0000000000000000000000000000000000000000;;		update-generated-swagger-docs
0000000000000000000000000000000000000000;;		update-swagger-spec
0000000000000000000000000000000000000000;;		update-openapi-spec
0000000000000000000000000000000000000000;;		update-api-reference-docs
0000000000000000000000000000000000000000;;		update-federation-openapi-spec
0000000000000000000000000000000000000000;;		update-federation-swagger-spec
0000000000000000000000000000000000000000;;		update-federation-generated-swagger-docs
0000000000000000000000000000000000000000;;		update-federation-api-reference-docs
0000000000000000000000000000000000000000;;		update-staging-client-go
0000000000000000000000000000000000000000;;		update-staging-godeps
0000000000000000000000000000000000000000;;		update-bazel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for t in $BASH_TARGETS; do
0000000000000000000000000000000000000000;;		echo -e "${color_yellow}Updating $t${color_norm}"
0000000000000000000000000000000000000000;;		if $SILENT ; then
0000000000000000000000000000000000000000;;			if ! bash "$KUBE_ROOT/hack/$t.sh" 1> /dev/null; then
0000000000000000000000000000000000000000;;				echo -e "${color_red}Running $t FAILED${color_norm}"
0000000000000000000000000000000000000000;;				if ! $ALL; then
0000000000000000000000000000000000000000;;					exit 1
0000000000000000000000000000000000000000;;				fi
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		else
0000000000000000000000000000000000000000;;			if ! bash "$KUBE_ROOT/hack/$t.sh"; then
0000000000000000000000000000000000000000;;				echo -e "${color_red}Running $t FAILED${color_norm}"
0000000000000000000000000000000000000000;;				if ! $ALL; then
0000000000000000000000000000000000000000;;					exit 1
0000000000000000000000000000000000000000;;				fi
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo -e "${color_green}Update scripts completed successfully${color_norm}"
