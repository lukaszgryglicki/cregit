0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
36b4ed7d82de0eb9eb933d41e70c8c71bed4002b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unit tests for hack/e2e.go shim
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileInfo struct {
0000000000000000000000000000000000000000;;		when time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) Name() string {
0000000000000000000000000000000000000000;;		return "fake-file"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) Size() int64 {
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) Mode() os.FileMode {
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) ModTime() time.Time {
0000000000000000000000000000000000000000;;		return f.when
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) IsDir() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileInfo) Sys() interface{} {
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParse(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			args     []string
0000000000000000000000000000000000000000;;			expected flags
0000000000000000000000000000000000000000;;			err      error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"hello", "world"},
0000000000000000000000000000000000000000;;				flags{getDefault, oldDefault, []string{"world"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"hello", "--", "--venus", "--karaoke"},
0000000000000000000000000000000000000000;;				flags{getDefault, oldDefault, []string{"--venus", "--karaoke"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"hello", "--alpha", "--beta"},
0000000000000000000000000000000000000000;;				flags{getDefault, oldDefault, []string{"--alpha", "--beta"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"so", "--get", "--boo"},
0000000000000000000000000000000000000000;;				flags{true, oldDefault, []string{"--boo"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"omg", "--get=false", "--", "ugh"},
0000000000000000000000000000000000000000;;				flags{false, oldDefault, []string{"ugh"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"wee", "--old=5m", "--get"},
0000000000000000000000000000000000000000;;				flags{true, 5 * time.Minute, []string{}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"fun", "--times", "--old=666s"},
0000000000000000000000000000000000000000;;				flags{getDefault, oldDefault, []string{"--times", "--old=666s"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"wut", "-h"},
0000000000000000000000000000000000000000;;				flags{},
0000000000000000000000000000000000000000;;				flag.ErrHelp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"wut", "--", "-h"},
0000000000000000000000000000000000000000;;				flags{getDefault, oldDefault, []string{"-h"}},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			a, err := parse(c.args)
0000000000000000000000000000000000000000;;			if err != c.err {
0000000000000000000000000000000000000000;;				t.Errorf("%d: a=%v != e%v", i, err, c.err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e := c.expected
0000000000000000000000000000000000000000;;			if a.get != e.get {
0000000000000000000000000000000000000000;;				t.Errorf("%d: a=%v != e=%v", i, a.get, e.get)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if a.old != e.old {
0000000000000000000000000000000000000000;;				t.Errorf("%d: a=%v != e=%v", i, a.old, e.old)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(a.args, e.args) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: a=%v != e=%v", i, a.args, e.args)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLook(t *testing.T) {
0000000000000000000000000000000000000000;;		lpf := errors.New("LookPath failed")
0000000000000000000000000000000000000000;;		sf := errors.New("Stat failed")
0000000000000000000000000000000000000000;;		lpnc := errors.New("LookPath should not be called")
0000000000000000000000000000000000000000;;		snc := errors.New("Stat should not be called")
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			stat     error
0000000000000000000000000000000000000000;;			lookPath error
0000000000000000000000000000000000000000;;			goPath   string
0000000000000000000000000000000000000000;;			expected error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{ // GOPATH set, stat succeeds returns gopath
0000000000000000000000000000000000000000;;				stat:     nil,
0000000000000000000000000000000000000000;;				lookPath: lpnc,
0000000000000000000000000000000000000000;;				goPath:   "fake-gopath/",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // GOPATH set, stat fails, terms on lookpath
0000000000000000000000000000000000000000;;				stat:     sf,
0000000000000000000000000000000000000000;;				lookPath: lpf,
0000000000000000000000000000000000000000;;				goPath:   "fake-gopath/",
0000000000000000000000000000000000000000;;				expected: lpf,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // GOPATH unset, stat not called, terms on lookpath
0000000000000000000000000000000000000000;;				stat:     snc,
0000000000000000000000000000000000000000;;				lookPath: lpf,
0000000000000000000000000000000000000000;;				goPath:   "",
0000000000000000000000000000000000000000;;				expected: lpf,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{ // GOPATH unset, stat not called, lookpath matches
0000000000000000000000000000000000000000;;				stat:     snc,
0000000000000000000000000000000000000000;;				lookPath: nil,
0000000000000000000000000000000000000000;;				goPath:   "",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			l := tester{
0000000000000000000000000000000000000000;;				func(string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;					return FileInfo{}, c.stat
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				func(string) (string, error) {
0000000000000000000000000000000000000000;;					if c.lookPath != nil {
0000000000000000000000000000000000000000;;						return "FAILED", c.lookPath
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return "$PATH-FOUND", nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				c.goPath,
0000000000000000000000000000000000000000;;				nil, // wait
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := l.lookKubetest(); err != c.expected {
0000000000000000000000000000000000000000;;				t.Errorf("err: %s != %s", err, c.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetKubetest(t *testing.T) {
0000000000000000000000000000000000000000;;		gp := "fake-gopath"
0000000000000000000000000000000000000000;;		gpk := filepath.Join(gp, "bin", "kubetest")
0000000000000000000000000000000000000000;;		p := "PATH"
0000000000000000000000000000000000000000;;		pk := filepath.Join(p, "kubetest")
0000000000000000000000000000000000000000;;		eu := errors.New("upgrade failed")
0000000000000000000000000000000000000000;;		euVerbose := fmt.Errorf("go get -u k8s.io/test-infra/kubetest: %v", eu)
0000000000000000000000000000000000000000;;		et := errors.New("touch failed")
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			get  bool
0000000000000000000000000000000000000000;;			old  time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stat     string        // stat succeeds on this file
0000000000000000000000000000000000000000;;			path     bool          // file exists on path
0000000000000000000000000000000000000000;;			age      time.Duration // age of mod time on file
0000000000000000000000000000000000000000;;			upgraded bool          // go get -u succeeds
0000000000000000000000000000000000000000;;			touched  bool          // touch succeeds
0000000000000000000000000000000000000000;;			goPath   string        // GOPATH var
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			returnPath  string
0000000000000000000000000000000000000000;;			returnError error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{name: "0: Pass when on GOPATH/bin",
0000000000000000000000000000000000000000;;				get: false,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     gpk,
0000000000000000000000000000000000000000;;				path:     false,
0000000000000000000000000000000000000000;;				age:      100,
0000000000000000000000000000000000000000;;				upgraded: false,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   gp,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  gpk,
0000000000000000000000000000000000000000;;				returnError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "1: Pass when on PATH",
0000000000000000000000000000000000000000;;				get: false,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      100,
0000000000000000000000000000000000000000;;				upgraded: false,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   gp,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  pk,
0000000000000000000000000000000000000000;;				returnError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "2: Don't upgrade if on PATH and GOPATH is ''",
0000000000000000000000000000000000000000;;				get: true,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      100,
0000000000000000000000000000000000000000;;				upgraded: false,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   "",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  pk,
0000000000000000000000000000000000000000;;				returnError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "3: Don't upgrade on PATH when young.",
0000000000000000000000000000000000000000;;				get: true,
0000000000000000000000000000000000000000;;				old: time.Hour,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      time.Second,
0000000000000000000000000000000000000000;;				upgraded: false,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   gp,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  pk,
0000000000000000000000000000000000000000;;				returnError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "4: Upgrade if old but GOPATH is set.",
0000000000000000000000000000000000000000;;				get: true,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      time.Second,
0000000000000000000000000000000000000000;;				upgraded: true,
0000000000000000000000000000000000000000;;				touched:  true,
0000000000000000000000000000000000000000;;				goPath:   gp,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  pk,
0000000000000000000000000000000000000000;;				returnError: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "5: Fail if upgrade fails",
0000000000000000000000000000000000000000;;				get: true,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      time.Second,
0000000000000000000000000000000000000000;;				upgraded: false,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   gpk,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  "",
0000000000000000000000000000000000000000;;				returnError: euVerbose,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{name: "6: Fail if touch fails",
0000000000000000000000000000000000000000;;				get: true,
0000000000000000000000000000000000000000;;				old: 0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				stat:     pk,
0000000000000000000000000000000000000000;;				path:     true,
0000000000000000000000000000000000000000;;				age:      time.Second,
0000000000000000000000000000000000000000;;				upgraded: true,
0000000000000000000000000000000000000000;;				touched:  false,
0000000000000000000000000000000000000000;;				goPath:   gpk,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				returnPath:  "",
0000000000000000000000000000000000000000;;				returnError: et,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			didUp := false
0000000000000000000000000000000000000000;;			didTouch := false
0000000000000000000000000000000000000000;;			l := tester{
0000000000000000000000000000000000000000;;				stat: func(p string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;					// stat
0000000000000000000000000000000000000000;;					if p != c.stat {
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Failed to find %s", p)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return FileInfo{time.Now().Add(c.age * -1)}, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				lookPath: func(name string) (string, error) {
0000000000000000000000000000000000000000;;					if c.path {
0000000000000000000000000000000000000000;;						return filepath.Join(p, name), nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return "", fmt.Errorf("Not on path: %s", name)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				goPath: c.goPath,
0000000000000000000000000000000000000000;;				wait: func(cmd string, args ...string) error {
0000000000000000000000000000000000000000;;					if cmd == "go" {
0000000000000000000000000000000000000000;;						if c.upgraded {
0000000000000000000000000000000000000000;;							didUp = true
0000000000000000000000000000000000000000;;							return nil
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return eu
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if c.touched {
0000000000000000000000000000000000000000;;						didTouch = true
0000000000000000000000000000000000000000;;						return nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return et
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p, e := l.getKubetest(c.get, c.old)
0000000000000000000000000000000000000000;;			if p != c.returnPath {
0000000000000000000000000000000000000000;;				t.Errorf("%d: test=%q returnPath %q != %q", i, c.name, p, c.returnPath)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e == nil || c.returnError == nil {
0000000000000000000000000000000000000000;;				if e != c.returnError {
0000000000000000000000000000000000000000;;					t.Errorf("%d: test=%q returnError %q != %q", i, c.name, e, c.returnError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if e.Error() != c.returnError.Error() {
0000000000000000000000000000000000000000;;					t.Errorf("%d: test=%q returnError %q != %q", i, c.name, e, c.returnError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if didUp != c.upgraded {
0000000000000000000000000000000000000000;;				t.Errorf("%d: test=%q bad upgrade state of %v", i, c.name, didUp)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if didTouch != c.touched {
0000000000000000000000000000000000000000;;				t.Errorf("%d: test=%q bad touch state of %v", i, c.name, didTouch)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
