0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function grab_profiles_from_component {
0000000000000000000000000000000000000000;;	  local requested_profiles=$1
0000000000000000000000000000000000000000;;	  local mem_pprof_flags=$2
0000000000000000000000000000000000000000;;	  local binary=$3
0000000000000000000000000000000000000000;;	  local tunnel_port=$4
0000000000000000000000000000000000000000;;	  local path=$5
0000000000000000000000000000000000000000;;	  local output_prefix=$6
0000000000000000000000000000000000000000;;	  local timestamp=$7
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "binary: $binary"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for profile in ${requested_profiles}; do
0000000000000000000000000000000000000000;;	    case ${profile} in
0000000000000000000000000000000000000000;;	      cpu)
0000000000000000000000000000000000000000;;	        go tool pprof "-pdf" "${binary}" "http://localhost:${tunnel_port}${path}/debug/pprof/profile" > "${output_prefix}-${profile}-profile-${timestamp}.pdf"
0000000000000000000000000000000000000000;;	        ;;
0000000000000000000000000000000000000000;;	      mem)
0000000000000000000000000000000000000000;;	        # There are different kinds of memory profiles that are available that
0000000000000000000000000000000000000000;;	        # had to be grabbed separately: --inuse-space, --inuse-objects,
0000000000000000000000000000000000000000;;	        # --alloc-space, --alloc-objects. We need to iterate over all requested
0000000000000000000000000000000000000000;;	        # kinds.
0000000000000000000000000000000000000000;;	        for flag in ${mem_pprof_flags}; do
0000000000000000000000000000000000000000;;	          go tool pprof "-${flag}" "-pdf" "${binary}" "http://localhost:${tunnel_port}${path}/debug/pprof/heap" > "${output_prefix}-${profile}-${flag}-profile-${timestamp}.pdf"
0000000000000000000000000000000000000000;;	        done
0000000000000000000000000000000000000000;;	        ;;
0000000000000000000000000000000000000000;;	    esac
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	server_addr=""
0000000000000000000000000000000000000000;;	kubelet_addreses=""
0000000000000000000000000000000000000000;;	kubelet_binary=""
0000000000000000000000000000000000000000;;	master_binary=""
0000000000000000000000000000000000000000;;	scheduler_binary=""
0000000000000000000000000000000000000000;;	scheduler_port="10251"
0000000000000000000000000000000000000000;;	controller_manager_port="10252"
0000000000000000000000000000000000000000;;	controller_manager_binary=""
0000000000000000000000000000000000000000;;	requested_profiles=""
0000000000000000000000000000000000000000;;	mem_pprof_flags=""
0000000000000000000000000000000000000000;;	profile_components=""
0000000000000000000000000000000000000000;;	output_dir="."
0000000000000000000000000000000000000000;;	tunnel_port="${tunnel_port:-1234}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	args=$(getopt -o s:mho:k:c -l server:,master,heapster,output:,kubelet:,scheduler,controller-manager,help,inuse-space,inuse-objects,alloc-space,alloc-objects,cpu,kubelet-binary:,master-binary:,scheduler-binary:,controller-manager-binary:,scheduler-port:,controller-manager-port: -- "$@")
0000000000000000000000000000000000000000;;	if [[ $? -ne 0 ]]; then
0000000000000000000000000000000000000000;;	  >&2 echo "Error in getopt"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	HEAPSTER_VERSION="v0.18.2"
0000000000000000000000000000000000000000;;	MASTER_PPROF_PATH=""
0000000000000000000000000000000000000000;;	HEAPSTER_PPROF_PATH="/api/v1/proxy/namespaces/kube-system/services/monitoring-heapster"
0000000000000000000000000000000000000000;;	KUBELET_PPROF_PATH_PREFIX="/api/v1/proxy/nodes"
0000000000000000000000000000000000000000;;	SCHEDULER_PPROF_PATH_PREFIX="/api/v1/proxy/namespaces/kube-system/pods/kube-scheduler"
0000000000000000000000000000000000000000;;	CONTROLLER_MANAGER_PPROF_PATH_PREFIX="/api/v1/proxy/namespaces/kube-system/pods/kube-controller-manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	eval set -- "${args}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while true; do
0000000000000000000000000000000000000000;;	  case $1 in
0000000000000000000000000000000000000000;;	    -s|--server)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argument to --server flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      server_addr=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    -m|--master)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      profile_components="master ${profile_components}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --master-binary)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --master-binary flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      master_binary=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    -h|--heapster)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      profile_components="heapster ${profile_components}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    -k|--kubelet)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      profile_components="kubelet ${profile_components}"
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --kubelet flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      kubelet_addreses="$1 $kubelet_addreses"
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --kubelet-binary)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --kubelet-binary flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      kubelet_binary=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --scheduler)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      profile_components="scheduler ${profile_components}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --scheduler-binary)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --scheduler-binary flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      scheduler_binary=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --scheduler-port)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --scheduler-port flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      scheduler_port=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    -c|--controller-manager)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      profile_components="controller-manager ${profile_components}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --controller-manager-binary)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --controller-manager-binary flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      controller_manager_binary=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --controller-manager-port)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argumet to --controller-manager-port flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      controller-managerr_port=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    -o|--output)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      if [ -z "$1" ]; then
0000000000000000000000000000000000000000;;	        >&2 echo "empty argument to --output flag"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      output_dir=$1
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --inuse-space)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      requested_profiles="mem ${requested_profiles}"
0000000000000000000000000000000000000000;;	      mem_pprof_flags="inuse_space ${mem_pprof_flags}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --inuse-objects)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      requested_profiles="mem ${requested_profiles}"
0000000000000000000000000000000000000000;;	      mem_pprof_flags="inuse_objects ${mem_pprof_flags}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --alloc-space)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      requested_profiles="mem ${requested_profiles}"
0000000000000000000000000000000000000000;;	      mem_pprof_flags="alloc_space ${mem_pprof_flags}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --alloc-objects)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      requested_profiles="mem ${requested_profiles}"
0000000000000000000000000000000000000000;;	      mem_pprof_flags="alloc_objects ${mem_pprof_flags}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --cpu)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      requested_profiles="cpu ${requested_profiles}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --help)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      echo "Recognized options:
0000000000000000000000000000000000000000;;	        -o/--output,
0000000000000000000000000000000000000000;;	        -s/--server,
0000000000000000000000000000000000000000;;	        -m/--master,
0000000000000000000000000000000000000000;;	        -h/--heapster,
0000000000000000000000000000000000000000;;	        --inuse-space,
0000000000000000000000000000000000000000;;	        --inuse-objects,
0000000000000000000000000000000000000000;;	        --alloc-space,
0000000000000000000000000000000000000000;;	        --alloc-objects,
0000000000000000000000000000000000000000;;	        --cpu,
0000000000000000000000000000000000000000;;	        --help"
0000000000000000000000000000000000000000;;	      exit 0
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    --)
0000000000000000000000000000000000000000;;	      shift
0000000000000000000000000000000000000000;;	      break;
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${server_addr}" ]]; then
0000000000000000000000000000000000000000;;	  >&2 echo "Server flag is required"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${profile_components}" ]]; then
0000000000000000000000000000000000000000;;	  >&2 echo "Choose at least one component to profile"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${requested_profiles}" ]]; then
0000000000000000000000000000000000000000;;	  >&2 echo "Choose at least one profiling option"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	gcloud compute ssh "${server_addr}" --ssh-flag=-nN --ssh-flag=-L${tunnel_port}:localhost:8080 &
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Waiting for tunnel to be created..."
0000000000000000000000000000000000000000;;	kube::util::wait_for_url http://localhost:${tunnel_port}/healthz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SSH_PID=$(pgrep -f "/usr/bin/ssh.*${tunnel_port}:localhost:8080")
0000000000000000000000000000000000000000;;	kube::util::trap_add 'kill $SSH_PID' EXIT
0000000000000000000000000000000000000000;;	kube::util::trap_add 'kill $SSH_PID' SIGTERM
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	requested_profiles=$(echo ${requested_profiles} | xargs -n1 | LC_ALL=C sort -u | xargs)
0000000000000000000000000000000000000000;;	profile_components=$(echo ${profile_components} | xargs -n1 | LC_ALL=C sort -u | xargs)
0000000000000000000000000000000000000000;;	kubelet_addreses=$(echo ${kubelet_addreses} | xargs -n1 | LC_ALL=C sort -u | xargs)
0000000000000000000000000000000000000000;;	echo "requested profiles: ${requested_profiles}"
0000000000000000000000000000000000000000;;	echo "flags for heap profile: ${mem_pprof_flags}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	timestamp=$(date +%Y%m%d%H%M%S)
0000000000000000000000000000000000000000;;	binary=""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for component in ${profile_components}; do
0000000000000000000000000000000000000000;;	  case ${component} in
0000000000000000000000000000000000000000;;	    master)
0000000000000000000000000000000000000000;;	      path=${MASTER_PPROF_PATH}
0000000000000000000000000000000000000000;;	      binary=${master_binary}
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    controller-manager)
0000000000000000000000000000000000000000;;	      path="${CONTROLLER_MANAGER_PPROF_PATH_PREFIX}-${server_addr}:${controller_manager_port}"
0000000000000000000000000000000000000000;;	      binary=${controller_manager_binary}
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    scheduler)
0000000000000000000000000000000000000000;;	      path="${SCHEDULER_PPROF_PATH_PREFIX}-${server_addr}:${scheduler_port}"
0000000000000000000000000000000000000000;;	      binary=${scheduler_binary}
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    heapster)
0000000000000000000000000000000000000000;;	      rm heapster
0000000000000000000000000000000000000000;;	      wget https://github.com/kubernetes/heapster/releases/download/${HEAPSTER_VERSION}/heapster
0000000000000000000000000000000000000000;;	      kube::util::trap_add 'rm -f heapster' EXIT
0000000000000000000000000000000000000000;;	      kube::util::trap_add 'rm -f heapster' SIGTERM
0000000000000000000000000000000000000000;;	      binary=heapster
0000000000000000000000000000000000000000;;	      path=${HEAPSTER_PPROF_PATH}
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    kubelet)
0000000000000000000000000000000000000000;;	      path="${KUBELET_PPROF_PATH_PREFIX}"
0000000000000000000000000000000000000000;;	      if [[ -z "${kubelet_binary}" ]]; then
0000000000000000000000000000000000000000;;	        binary="${KUBE_ROOT}/_output/local/bin/linux/amd64/kubelet"
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        binary=${kubelet_binary}
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${component}" == "kubelet" ]]; then
0000000000000000000000000000000000000000;;	    for node in $(echo ${kubelet_addreses} | sed 's/[,;]/\n/g'); do
0000000000000000000000000000000000000000;;	      grab_profiles_from_component "${requested_profiles}" "${mem_pprof_flags}" "${binary}" "${tunnel_port}" "${path}/${node}" "${output_dir}/${component}" "${timestamp}"
0000000000000000000000000000000000000000;;	    done    
0000000000000000000000000000000000000000;;	  else 
0000000000000000000000000000000000000000;;	    grab_profiles_from_component "${requested_profiles}" "${mem_pprof_flags}" "${binary}" "${tunnel_port}" "${path}" "${output_dir}/${component}" "${timestamp}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
