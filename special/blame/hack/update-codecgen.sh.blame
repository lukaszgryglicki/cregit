0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::setup_env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The sort at the end makes sure we feed the topological sort a deterministic
0000000000000000000000000000000000000000;;	# list (since there aren't many dependencies).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	generated_files=($(
0000000000000000000000000000000000000000;;	  find ./vendor/k8s.io/api/ \
0000000000000000000000000000000000000000;;	    -name '*.generated.go' | LC_ALL=C sort -r
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  find . -not \( \
0000000000000000000000000000000000000000;;	      \( \
0000000000000000000000000000000000000000;;	        -wholename './output' \
0000000000000000000000000000000000000000;;	        -o -wholename './_output' \
0000000000000000000000000000000000000000;;	        -o -wholename './staging' \
0000000000000000000000000000000000000000;;	        -o -wholename './release' \
0000000000000000000000000000000000000000;;	        -o -wholename './target' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/third_party/*' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/vendor/*' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/codecgen-*-1234.generated.go' \
0000000000000000000000000000000000000000;;	      \) -prune \
0000000000000000000000000000000000000000;;	    \) -name '*.generated.go' | LC_ALL=C sort -r
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  find ./vendor/k8s.io/kube-aggregator/ -not \( \
0000000000000000000000000000000000000000;;	      \( \
0000000000000000000000000000000000000000;;	        -wholename './output' \
0000000000000000000000000000000000000000;;	        -o -wholename './_output' \
0000000000000000000000000000000000000000;;	        -o -wholename './staging' \
0000000000000000000000000000000000000000;;	        -o -wholename './release' \
0000000000000000000000000000000000000000;;	        -o -wholename './target' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/third_party/*' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/codecgen-*-1234.generated.go' \
0000000000000000000000000000000000000000;;	      \) -prune \
0000000000000000000000000000000000000000;;	    \) -name '*.generated.go' | LC_ALL=C sort -r
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  find ./vendor/k8s.io/metrics/ \
0000000000000000000000000000000000000000;;	    -name '*.generated.go' | LC_ALL=C sort -r
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  find ./vendor/k8s.io/apiserver/ -not \( \
0000000000000000000000000000000000000000;;	      \( \
0000000000000000000000000000000000000000;;	        -wholename './output' \
0000000000000000000000000000000000000000;;	        -o -wholename './_output' \
0000000000000000000000000000000000000000;;	        -o -wholename './staging' \
0000000000000000000000000000000000000000;;	        -o -wholename './release' \
0000000000000000000000000000000000000000;;	        -o -wholename './target' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/third_party/*' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/codecgen-*-1234.generated.go' \
0000000000000000000000000000000000000000;;	      \) -prune \
0000000000000000000000000000000000000000;;	    \) -name '*.generated.go' | LC_ALL=C sort -r
0000000000000000000000000000000000000000;;	))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# We only work for deps within this prefix.
0000000000000000000000000000000000000000;;	my_prefix="k8s.io/kubernetes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Register function to be called on EXIT to remove codecgen
0000000000000000000000000000000000000000;;	# binary and also to touch the files that should be regenerated
0000000000000000000000000000000000000000;;	# since they are first removed.
0000000000000000000000000000000000000000;;	# This is necessary to make the script work after previous failure.
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	  rm -f "${CODECGEN:-}"
0000000000000000000000000000000000000000;;	  pushd "${KUBE_ROOT}" > /dev/null
0000000000000000000000000000000000000000;;	  for (( i=0; i < number; i++ )); do
0000000000000000000000000000000000000000;;	    touch "${generated_files[${i}]}" || true
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Precompute dependencies for all directories.
0000000000000000000000000000000000000000;;	# Then sort all files in the dependency order.
0000000000000000000000000000000000000000;;	number=${#generated_files[@]}
0000000000000000000000000000000000000000;;	result=""
0000000000000000000000000000000000000000;;	for (( i=0; i<number; i++ )); do
0000000000000000000000000000000000000000;;	  visited[${i}]=false
0000000000000000000000000000000000000000;;	  file="${generated_files[${i}]/\.generated\.go/.go}"
0000000000000000000000000000000000000000;;	  deps[${i}]=$(go list -f '{{range .Deps}}{{.}}{{"\n"}}{{end}}' ${file} | grep "^${my_prefix}")
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	###echo "DBG: found $number generated files"
0000000000000000000000000000000000000000;;	###for f in $(echo "${generated_files[@]}" | LC_ALL=C sort); do
0000000000000000000000000000000000000000;;	###    echo "DBG:   $f"
0000000000000000000000000000000000000000;;	###done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# NOTE: depends function assumes that the whole repository is under
0000000000000000000000000000000000000000;;	# $my_prefix - it will NOT work if that is not true.
0000000000000000000000000000000000000000;;	function depends {
0000000000000000000000000000000000000000;;	  rhs="$(dirname ${generated_files[$2]/#./${my_prefix}})"
0000000000000000000000000000000000000000;;	  ###echo "DBG: does ${file} depend on ${rhs}?"
0000000000000000000000000000000000000000;;	  for dep in ${deps[$1]}; do
0000000000000000000000000000000000000000;;	    ###echo "DBG:   checking against $dep"
0000000000000000000000000000000000000000;;	    if [[ "${dep}" == "${rhs}" ]]; then
0000000000000000000000000000000000000000;;	      ###echo "DBG: = yes"
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  ###echo "DBG: = no"
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function tsort {
0000000000000000000000000000000000000000;;	  visited[$1]=true
0000000000000000000000000000000000000000;;	  local j=0
0000000000000000000000000000000000000000;;	  for (( j=0; j<number; j++ )); do
0000000000000000000000000000000000000000;;	    if ! ${visited[${j}]}; then
0000000000000000000000000000000000000000;;	      if depends "$1" ${j}; then
0000000000000000000000000000000000000000;;	        tsort $j
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  result="${result} $1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	echo "Building dependencies"
0000000000000000000000000000000000000000;;	for (( i=0; i<number; i++ )); do
0000000000000000000000000000000000000000;;	  ###echo "DBG: considering ${generated_files[${i}]}"
0000000000000000000000000000000000000000;;	  if ! ${visited[${i}]}; then
0000000000000000000000000000000000000000;;	    ###echo "DBG: tsorting ${generated_files[${i}]}"
0000000000000000000000000000000000000000;;	    tsort ${i}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	index=(${result})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	haveindex=${index:-}
0000000000000000000000000000000000000000;;	if [[ -z ${haveindex} ]]; then
0000000000000000000000000000000000000000;;	  echo No files found for $0
0000000000000000000000000000000000000000;;	  echo A previous run of $0 may have deleted all the files and then crashed.
0000000000000000000000000000000000000000;;	  echo Use 'touch' to create files named 'types.generated.go' listed as deleted in 'git status'
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Building codecgen"
0000000000000000000000000000000000000000;;	make generated_files
0000000000000000000000000000000000000000;;	CODECGEN="${PWD}/codecgen_binary"
0000000000000000000000000000000000000000;;	go build -o "${CODECGEN}" ./vendor/github.com/ugorji/go/codec/codecgen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Running codecgen fails if some of the files doesn't compile.
0000000000000000000000000000000000000000;;	# Thus (since all the files are completely auto-generated and
0000000000000000000000000000000000000000;;	# not required for the code to be compilable, we first remove
0000000000000000000000000000000000000000;;	# them and the regenerate them.
0000000000000000000000000000000000000000;;	for (( i=0; i < number; i++ )); do
0000000000000000000000000000000000000000;;	  rm -f "${generated_files[${i}]}"
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generate files in the dependency order.
0000000000000000000000000000000000000000;;	for current in "${index[@]}"; do
0000000000000000000000000000000000000000;;	  generated_file=${generated_files[${current}]}
0000000000000000000000000000000000000000;;	  initial_dir=${PWD}
0000000000000000000000000000000000000000;;	  file=${generated_file/\.generated\.go/.go}
0000000000000000000000000000000000000000;;	  echo "processing ${file}"
0000000000000000000000000000000000000000;;	  # codecgen work only if invoked from directory where the file
0000000000000000000000000000000000000000;;	  # is located.
0000000000000000000000000000000000000000;;	  pushd "$(dirname ${file})" > /dev/null
0000000000000000000000000000000000000000;;	  base_file=$(basename "${file}")
0000000000000000000000000000000000000000;;	  base_generated_file=$(basename "${generated_file}")
0000000000000000000000000000000000000000;;	  # We use '-d 1234' flag to have a deterministic output every time.
0000000000000000000000000000000000000000;;	  # The constant was just randomly chosen.
0000000000000000000000000000000000000000;;	  ###echo "DBG: running ${CODECGEN} -d 1234 -o ${base_generated_file} ${base_file}"
0000000000000000000000000000000000000000;;	  ${CODECGEN} -d 1234 -o "${base_generated_file}" "${base_file}"
0000000000000000000000000000000000000000;;	  # Add boilerplate at the beginning of the generated file.
0000000000000000000000000000000000000000;;	  sed 's/YEAR/2016/' "${initial_dir}/hack/boilerplate/boilerplate.go.txt" > "${base_generated_file}.tmp"
0000000000000000000000000000000000000000;;	  cat "${base_generated_file}" >> "${base_generated_file}.tmp"
0000000000000000000000000000000000000000;;	  mv "${base_generated_file}.tmp" "${base_generated_file}"
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	done
