0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A set of helpers for starting/running etcd for tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ETCD_VERSION=${ETCD_VERSION:-3.0.17}
0000000000000000000000000000000000000000;;	ETCD_HOST=${ETCD_HOST:-127.0.0.1}
0000000000000000000000000000000000000000;;	ETCD_PORT=${ETCD_PORT:-2379}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::validate() {
0000000000000000000000000000000000000000;;	  # validate if in path
0000000000000000000000000000000000000000;;	  which etcd >/dev/null || {
0000000000000000000000000000000000000000;;	    kube::log::usage "etcd must be in your PATH"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # validate it is not running
0000000000000000000000000000000000000000;;	  if pgrep -x etcd >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	    kube::log::usage "etcd appears to already be running on this machine (`pgrep -xl etcd`) (or its a zombie and you need to kill its parent)."
0000000000000000000000000000000000000000;;	    kube::log::usage "retry after you resolve this etcd error."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # validate installed version is at least equal to minimum
0000000000000000000000000000000000000000;;	  version=$(etcd --version | tail -n +1 | head -n 1 | cut -d " " -f 3)
0000000000000000000000000000000000000000;;	  if [[ $(kube::etcd::version $ETCD_VERSION) -gt $(kube::etcd::version $version) ]]; then
0000000000000000000000000000000000000000;;	   export PATH=$KUBE_ROOT/third_party/etcd:$PATH
0000000000000000000000000000000000000000;;	   hash etcd
0000000000000000000000000000000000000000;;	   echo $PATH
0000000000000000000000000000000000000000;;	   version=$(etcd --version | head -n 1 | cut -d " " -f 3)
0000000000000000000000000000000000000000;;	   if [[ $(kube::etcd::version $ETCD_VERSION) -gt $(kube::etcd::version $version) ]]; then
0000000000000000000000000000000000000000;;	    kube::log::usage "etcd version ${ETCD_VERSION} or greater required."
0000000000000000000000000000000000000000;;	    kube::log::info "You can use 'hack/install-etcd.sh' to install a copy in third_party/."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	   fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::version() {
0000000000000000000000000000000000000000;;	  printf '%s\n' "${@}" | awk -F . '{ printf("%d%03d%03d\n", $1, $2, $3) }'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::start() {
0000000000000000000000000000000000000000;;	  # validate before running
0000000000000000000000000000000000000000;;	  kube::etcd::validate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Start etcd
0000000000000000000000000000000000000000;;	  ETCD_DIR=${ETCD_DIR:-$(mktemp -d 2>/dev/null || mktemp -d -t test-etcd.XXXXXX)}
0000000000000000000000000000000000000000;;	  if [[ -d "${ARTIFACTS_DIR:-}" ]]; then
0000000000000000000000000000000000000000;;	    ETCD_LOGFILE="${ARTIFACTS_DIR}/etcd.$(uname -n).$(id -un).log.DEBUG.$(date +%Y%m%d-%H%M%S).$$"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    ETCD_LOGFILE=/dev/null
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  kube::log::info "etcd --advertise-client-urls http://${ETCD_HOST}:${ETCD_PORT} --data-dir ${ETCD_DIR} --listen-client-urls http://${ETCD_HOST}:${ETCD_PORT} --debug > \"${ETCD_LOGFILE}\" 2>/dev/null"
0000000000000000000000000000000000000000;;	  etcd --advertise-client-urls http://${ETCD_HOST}:${ETCD_PORT} --data-dir ${ETCD_DIR} --listen-client-urls http://${ETCD_HOST}:${ETCD_PORT} --debug 2> "${ETCD_LOGFILE}" >/dev/null &
0000000000000000000000000000000000000000;;	  ETCD_PID=$!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Waiting for etcd to come up."
0000000000000000000000000000000000000000;;	  kube::util::wait_for_url "http://${ETCD_HOST}:${ETCD_PORT}/v2/machines" "etcd: " 0.25 80
0000000000000000000000000000000000000000;;	  curl -fs -X PUT "http://${ETCD_HOST}:${ETCD_PORT}/v2/keys/_test"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::stop() {
0000000000000000000000000000000000000000;;	  kill "${ETCD_PID-}" >/dev/null 2>&1 || :
0000000000000000000000000000000000000000;;	  wait "${ETCD_PID-}" >/dev/null 2>&1 || :
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::clean_etcd_dir() {
0000000000000000000000000000000000000000;;	  rm -rf "${ETCD_DIR-}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::cleanup() {
0000000000000000000000000000000000000000;;	  kube::etcd::stop
0000000000000000000000000000000000000000;;	  kube::etcd::clean_etcd_dir
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::install() {
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    cd "${KUBE_ROOT}/third_party"
0000000000000000000000000000000000000000;;	    if [[ $(uname) == "Darwin" ]]; then
0000000000000000000000000000000000000000;;	      download_file="etcd-v${ETCD_VERSION}-darwin-amd64.zip"
0000000000000000000000000000000000000000;;	      url="https://github.com/coreos/etcd/releases/download/v${ETCD_VERSION}/${download_file}"
0000000000000000000000000000000000000000;;	      kube::util::download_file "${url}" "${download_file}"
0000000000000000000000000000000000000000;;	      unzip -o "${download_file}"
0000000000000000000000000000000000000000;;	      ln -fns "etcd-v${ETCD_VERSION}-darwin-amd64" etcd
0000000000000000000000000000000000000000;;	      rm "${download_file}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      url="https://github.com/coreos/etcd/releases/download/v${ETCD_VERSION}/etcd-v${ETCD_VERSION}-linux-amd64.tar.gz"
0000000000000000000000000000000000000000;;	      download_file="etcd-v${ETCD_VERSION}-linux-amd64.tar.gz"
0000000000000000000000000000000000000000;;	      kube::util::download_file "${url}" "${download_file}"
0000000000000000000000000000000000000000;;	      tar xzf "${download_file}"
0000000000000000000000000000000000000000;;	      ln -fns "etcd-v${ETCD_VERSION}-linux-amd64" etcd
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    kube::log::info "etcd v${ETCD_VERSION} installed. To use:"
0000000000000000000000000000000000000000;;	    kube::log::info "export PATH=$(pwd)/etcd:\${PATH}"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
