0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Contains swagger related util functions.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The root of the build/dist directory
0000000000000000000000000000000000000000;;	KUBE_ROOT="$(cd "$(dirname "${BASH_SOURCE}")/../.." && pwd -P)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generates types_swagger_doc_generated file for the given group version.
0000000000000000000000000000000000000000;;	# $1: Name of the group version
0000000000000000000000000000000000000000;;	# $2: Path to the directory where types.go for that group version exists. This
0000000000000000000000000000000000000000;;	# is the directory where the file will be generated.
0000000000000000000000000000000000000000;;	kube::swagger::gen_types_swagger_doc() {
0000000000000000000000000000000000000000;;	  local group_version=$1
0000000000000000000000000000000000000000;;	  local gv_dir=$2
0000000000000000000000000000000000000000;;	  local TMPFILE="${TMPDIR:-/tmp}/types_swagger_doc_generated.$(date +%s).go"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Generating swagger type docs for ${group_version} at ${gv_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  sed 's/YEAR/2016/' hack/boilerplate/boilerplate.go.txt > "$TMPFILE"
0000000000000000000000000000000000000000;;	  echo "package ${group_version##*/}" >> "$TMPFILE"
0000000000000000000000000000000000000000;;	  cat >> "$TMPFILE" <<EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  go run cmd/genswaggertypedocs/swagger_type_docs.go -s \
0000000000000000000000000000000000000000;;	    "${gv_dir}/types.go" \
0000000000000000000000000000000000000000;;	    -f - \
0000000000000000000000000000000000000000;;	    >>  "$TMPFILE"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "// AUTO-GENERATED FUNCTIONS END HERE" >> "$TMPFILE"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  gofmt -w -s "$TMPFILE"
0000000000000000000000000000000000000000;;	  mv "$TMPFILE" ""${gv_dir}"/types_swagger_doc_generated.go"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generates API reference docs for the given API group versions.
0000000000000000000000000000000000000000;;	# Required env vars:
0000000000000000000000000000000000000000;;	#   GROUP_VERSIONS: Array of group versions to be included in the reference
0000000000000000000000000000000000000000;;	#   docs.
0000000000000000000000000000000000000000;;	#   GV_DIRS: Array of root directories for those group versions.
0000000000000000000000000000000000000000;;	# Input vars:
0000000000000000000000000000000000000000;;	#   $1: Root directory path for swagger spec
0000000000000000000000000000000000000000;;	#   $2: Root directory path where the reference docs should be generated.
0000000000000000000000000000000000000000;;	kube::swagger::gen_api_ref_docs() {
0000000000000000000000000000000000000000;;	    : "${GROUP_VERSIONS?Must set GROUP_VERSIONS env var}"
0000000000000000000000000000000000000000;;	    : "${GV_DIRS?Must set GV_DIRS env var}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Generating API reference docs for group versions: ${GROUP_VERSIONS[@]}, at dirs: ${GV_DIRS[@]}"
0000000000000000000000000000000000000000;;	  GROUP_VERSIONS=(${GROUP_VERSIONS[@]})
0000000000000000000000000000000000000000;;	  GV_DIRS=(${GV_DIRS[@]})
0000000000000000000000000000000000000000;;	  local swagger_spec_path=${1}
0000000000000000000000000000000000000000;;	  local output_dir=${2}
0000000000000000000000000000000000000000;;	  echo "Reading swagger spec from: ${swagger_spec_path}"
0000000000000000000000000000000000000000;;	  echo "Generating the docs at: ${output_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Use REPO_DIR if provided so we can set it to the host-resolvable path
0000000000000000000000000000000000000000;;	  # to the repo root if we are running this script from a container with
0000000000000000000000000000000000000000;;	  # docker mounted in as a volume.
0000000000000000000000000000000000000000;;	  # We pass the host output dir as the source dir to `docker run -v`, but use
0000000000000000000000000000000000000000;;	  # the regular one to compute diff (they will be the same if running this
0000000000000000000000000000000000000000;;	  # test on the host, potentially different if running in a container).
0000000000000000000000000000000000000000;;	  local repo_dir=${REPO_DIR:-"${KUBE_ROOT}"}
0000000000000000000000000000000000000000;;	  local tmp_subpath="_output/generated_html"
0000000000000000000000000000000000000000;;	  local output_tmp_in_host="${repo_dir}/${tmp_subpath}"
0000000000000000000000000000000000000000;;	  local output_tmp="${KUBE_ROOT}/${tmp_subpath}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Generating api reference docs at ${output_tmp}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for ver in "${GROUP_VERSIONS[@]}"; do
0000000000000000000000000000000000000000;;	    mkdir -p "${output_tmp}/${ver}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  user_flags="-u $(id -u)"
0000000000000000000000000000000000000000;;	  if [[ $(uname) == "Darwin" ]]; then
0000000000000000000000000000000000000000;;	    # mapping in a uid from OS X doesn't make any sense
0000000000000000000000000000000000000000;;	    user_flags=""
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for i in "${!GROUP_VERSIONS[@]}"; do
0000000000000000000000000000000000000000;;	    local ver=${GROUP_VERSIONS[i]}
0000000000000000000000000000000000000000;;	    local dir=${GV_DIRS[i]}
0000000000000000000000000000000000000000;;	    local tmp_in_host="${output_tmp_in_host}/${ver}"
0000000000000000000000000000000000000000;;	    local register_file="${dir}/register.go"
0000000000000000000000000000000000000000;;	    local swagger_json_name="$(kube::util::gv-to-swagger-name "${ver}")"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    docker run ${user_flags} \
0000000000000000000000000000000000000000;;	      --rm -v "${tmp_in_host}":/output:z \
0000000000000000000000000000000000000000;;	      -v "${swagger_spec_path}":/swagger-source:z \
0000000000000000000000000000000000000000;;	      -v "${register_file}":/register.go:z \
0000000000000000000000000000000000000000;;	      --net=host -e "https_proxy=${KUBERNETES_HTTPS_PROXY:-}" \
0000000000000000000000000000000000000000;;	      gcr.io/google_containers/gen-swagger-docs:v8 \
0000000000000000000000000000000000000000;;	      "${swagger_json_name}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Check if we actually changed anything
0000000000000000000000000000000000000000;;	  pushd "${output_tmp}" > /dev/null
0000000000000000000000000000000000000000;;	  touch .generated_html
0000000000000000000000000000000000000000;;	  find . -type f | cut -sd / -f 2- | LC_ALL=C sort > .generated_html
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if LANG=C sed --help 2>&1 | grep -q GNU; then
0000000000000000000000000000000000000000;;	    SED="sed"
0000000000000000000000000000000000000000;;	  elif which gsed &>/dev/null; then
0000000000000000000000000000000000000000;;	    SED="gsed"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Failed to find GNU sed as sed or gsed. If you are on Mac: brew install gnu-sed." >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  while read file; do
0000000000000000000000000000000000000000;;	    if [[ -e "${output_dir}/${file}" && -e "${output_tmp}/${file}" ]]; then
0000000000000000000000000000000000000000;;	      echo "comparing ${output_dir}/${file} with ${output_tmp}/${file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      # Remove the timestamp to reduce conflicts in PR(s)
0000000000000000000000000000000000000000;;	      $SED -i 's/^Last updated.*$//' "${output_tmp}/${file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      # By now, the contents should be normalized and stripped of any
0000000000000000000000000000000000000000;;	      # auto-managed content.
0000000000000000000000000000000000000000;;	      if diff -NauprB "${output_dir}/${file}" "${output_tmp}/${file}" >/dev/null; then
0000000000000000000000000000000000000000;;	        # actual contents same, overwrite generated with original.
0000000000000000000000000000000000000000;;	        cp "${output_dir}/${file}" "${output_tmp}/${file}"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done <"${output_tmp}/.generated_html"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Moving api reference docs from ${output_tmp} to ${output_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Create output_dir if doesn't exist. Prevents error on copy.
0000000000000000000000000000000000000000;;	  mkdir -p "${output_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cp -af "${output_tmp}"/* "${output_dir}"
0000000000000000000000000000000000000000;;	  rm -r "${output_tmp}"
0000000000000000000000000000000000000000;;	}
