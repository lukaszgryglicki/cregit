0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::sortable_date() {
0000000000000000000000000000000000000000;;	  date "+%Y%m%d-%H%M%S"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::wait_for_url() {
0000000000000000000000000000000000000000;;	  local url=$1
0000000000000000000000000000000000000000;;	  local prefix=${2:-}
0000000000000000000000000000000000000000;;	  local wait=${3:-1}
0000000000000000000000000000000000000000;;	  local times=${4:-30}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  which curl >/dev/null || {
0000000000000000000000000000000000000000;;	    kube::log::usage "curl must be installed"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local i
0000000000000000000000000000000000000000;;	  for i in $(seq 1 $times); do
0000000000000000000000000000000000000000;;	    local out
0000000000000000000000000000000000000000;;	    if out=$(curl --max-time 1 -gkfs $url 2>/dev/null); then
0000000000000000000000000000000000000000;;	      kube::log::status "On try ${i}, ${prefix}: ${out}"
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    sleep ${wait}
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  kube::log::error "Timed out waiting for ${prefix} to answer at ${url}; tried ${times} waiting ${wait} between each"
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# returns a random port
0000000000000000000000000000000000000000;;	kube::util::get_random_port() {
0000000000000000000000000000000000000000;;	  awk -v min=1024 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# use netcat to check if the host($1):port($2) is free (return 0 means free, 1 means used)
0000000000000000000000000000000000000000;;	kube::util::test_host_port_free() {
0000000000000000000000000000000000000000;;	  local host=$1
0000000000000000000000000000000000000000;;	  local port=$2
0000000000000000000000000000000000000000;;	  local success=0
0000000000000000000000000000000000000000;;	  local fail=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  which nc >/dev/null || {
0000000000000000000000000000000000000000;;	    kube::log::usage "netcat isn't installed, can't verify if ${host}:${port} is free, skipping the check..."
0000000000000000000000000000000000000000;;	    return ${success}
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [ ! $(nc -vz "${host}" "${port}") ]; then
0000000000000000000000000000000000000000;;	    kube::log::status "${host}:${port} is free, proceeding..."
0000000000000000000000000000000000000000;;	    return ${success}
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    kube::log::status "${host}:${port} is already used"
0000000000000000000000000000000000000000;;	    return ${fail}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Example:  kube::util::trap_add 'echo "in trap DEBUG"' DEBUG
0000000000000000000000000000000000000000;;	# See: http://stackoverflow.com/questions/3338030/multiple-bash-traps-for-the-same-signal
0000000000000000000000000000000000000000;;	kube::util::trap_add() {
0000000000000000000000000000000000000000;;	  local trap_add_cmd
0000000000000000000000000000000000000000;;	  trap_add_cmd=$1
0000000000000000000000000000000000000000;;	  shift
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for trap_add_name in "$@"; do
0000000000000000000000000000000000000000;;	    local existing_cmd
0000000000000000000000000000000000000000;;	    local new_cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Grab the currently defined trap commands for this trap
0000000000000000000000000000000000000000;;	    existing_cmd=`trap -p "${trap_add_name}" |  awk -F"'" '{print $2}'`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ -z "${existing_cmd}" ]]; then
0000000000000000000000000000000000000000;;	      new_cmd="${trap_add_cmd}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      new_cmd="${existing_cmd};${trap_add_cmd}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Assign the test
0000000000000000000000000000000000000000;;	    trap "${new_cmd}" "${trap_add_name}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Opposite of kube::util::ensure-temp-dir()
0000000000000000000000000000000000000000;;	kube::util::cleanup-temp-dir() {
0000000000000000000000000000000000000000;;	  rm -rf "${KUBE_TEMP}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a temp dir that'll be deleted at the end of this bash session.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Vars set:
0000000000000000000000000000000000000000;;	#   KUBE_TEMP
0000000000000000000000000000000000000000;;	kube::util::ensure-temp-dir() {
0000000000000000000000000000000000000000;;	  if [[ -z ${KUBE_TEMP-} ]]; then
0000000000000000000000000000000000000000;;	    KUBE_TEMP=$(mktemp -d 2>/dev/null || mktemp -d -t kubernetes.XXXXXX)
0000000000000000000000000000000000000000;;	    kube::util::trap_add kube::util::cleanup-temp-dir EXIT
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This figures out the host platform without relying on golang.  We need this as
0000000000000000000000000000000000000000;;	# we don't want a golang install to be a prerequisite to building yet we need
0000000000000000000000000000000000000000;;	# this info to figure out where the final binaries are placed.
0000000000000000000000000000000000000000;;	kube::util::host_platform() {
0000000000000000000000000000000000000000;;	  local host_os
0000000000000000000000000000000000000000;;	  local host_arch
0000000000000000000000000000000000000000;;	  case "$(uname -s)" in
0000000000000000000000000000000000000000;;	    Darwin)
0000000000000000000000000000000000000000;;	      host_os=darwin
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    Linux)
0000000000000000000000000000000000000000;;	      host_os=linux
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      kube::log::error "Unsupported host OS.  Must be Linux or Mac OS X."
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  case "$(uname -m)" in
0000000000000000000000000000000000000000;;	    x86_64*)
0000000000000000000000000000000000000000;;	      host_arch=amd64
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    i?86_64*)
0000000000000000000000000000000000000000;;	      host_arch=amd64
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    amd64*)
0000000000000000000000000000000000000000;;	      host_arch=amd64
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    aarch64*)
0000000000000000000000000000000000000000;;	      host_arch=arm64
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    arm64*)
0000000000000000000000000000000000000000;;	      host_arch=arm64
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    arm*)
0000000000000000000000000000000000000000;;	      host_arch=arm
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    i?86*)
0000000000000000000000000000000000000000;;	      host_arch=x86
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    s390x*)
0000000000000000000000000000000000000000;;	      host_arch=s390x
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    ppc64le*)
0000000000000000000000000000000000000000;;	      host_arch=ppc64le
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      kube::log::error "Unsupported host arch. Must be x86_64, 386, arm, arm64, s390x or ppc64le."
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	  echo "${host_os}/${host_arch}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::find-binary-for-platform() {
0000000000000000000000000000000000000000;;	  local -r lookfor="$1"
0000000000000000000000000000000000000000;;	  local -r platform="$2"
0000000000000000000000000000000000000000;;	  local locations=(
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/bin/${lookfor}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/dockerized/bin/${platform}/${lookfor}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/local/bin/${platform}/${lookfor}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/platforms/${platform}/${lookfor}"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  # Also search for binary in bazel build tree.
0000000000000000000000000000000000000000;;	  # In some cases we have to name the binary $BINARY_bin, since there was a
0000000000000000000000000000000000000000;;	  # directory named $BINARY next to it.
0000000000000000000000000000000000000000;;	  locations+=($(find "${KUBE_ROOT}/bazel-bin/" -type f -executable \
0000000000000000000000000000000000000000;;	    \( -name "${lookfor}" -o -name "${lookfor}_bin" \) 2>/dev/null || true) )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # List most recently-updated location.
0000000000000000000000000000000000000000;;	  local -r bin=$( (ls -t "${locations[@]}" 2>/dev/null || true) | head -1 )
0000000000000000000000000000000000000000;;	  echo -n "${bin}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::find-binary() {
0000000000000000000000000000000000000000;;	  kube::util::find-binary-for-platform "$1" "$(kube::util::host_platform)"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Run all known doc generators (today gendocs and genman for kubectl)
0000000000000000000000000000000000000000;;	# $1 is the directory to put those generated documents
0000000000000000000000000000000000000000;;	kube::util::gen-docs() {
0000000000000000000000000000000000000000;;	  local dest="$1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Find binary
0000000000000000000000000000000000000000;;	  gendocs=$(kube::util::find-binary "gendocs")
0000000000000000000000000000000000000000;;	  genkubedocs=$(kube::util::find-binary "genkubedocs")
0000000000000000000000000000000000000000;;	  genman=$(kube::util::find-binary "genman")
0000000000000000000000000000000000000000;;	  genyaml=$(kube::util::find-binary "genyaml")
0000000000000000000000000000000000000000;;	  genfeddocs=$(kube::util::find-binary "genfeddocs")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${dest}/docs/user-guide/kubectl/"
0000000000000000000000000000000000000000;;	  "${gendocs}" "${dest}/docs/user-guide/kubectl/"
0000000000000000000000000000000000000000;;	  mkdir -p "${dest}/docs/admin/"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "kube-apiserver"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "kube-controller-manager"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "cloud-controller-manager"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "kube-proxy"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "kube-scheduler"
0000000000000000000000000000000000000000;;	  "${genkubedocs}" "${dest}/docs/admin/" "kubelet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # We don't really need federation-apiserver and federation-controller-manager
0000000000000000000000000000000000000000;;	  # binaries to generate the docs. We just pass their names to decide which docs
0000000000000000000000000000000000000000;;	  # to generate. The actual binary for running federation is hyperkube.
0000000000000000000000000000000000000000;;	  "${genfeddocs}" "${dest}/docs/admin/" "federation-apiserver"
0000000000000000000000000000000000000000;;	  "${genfeddocs}" "${dest}/docs/admin/" "federation-controller-manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${dest}/docs/man/man1/"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kube-apiserver"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kube-controller-manager"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "cloud-controller-manager"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kube-proxy"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kube-scheduler"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kubelet"
0000000000000000000000000000000000000000;;	  "${genman}" "${dest}/docs/man/man1/" "kubectl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${dest}/docs/yaml/kubectl/"
0000000000000000000000000000000000000000;;	  "${genyaml}" "${dest}/docs/yaml/kubectl/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # create the list of generated files
0000000000000000000000000000000000000000;;	  pushd "${dest}" > /dev/null
0000000000000000000000000000000000000000;;	  touch docs/.generated_docs
0000000000000000000000000000000000000000;;	  find . -type f | cut -sd / -f 2- | LC_ALL=C sort > docs/.generated_docs
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Puts a placeholder for every generated doc. This makes the link checker work.
0000000000000000000000000000000000000000;;	kube::util::set-placeholder-gen-docs() {
0000000000000000000000000000000000000000;;	  local list_file="${KUBE_ROOT}/docs/.generated_docs"
0000000000000000000000000000000000000000;;	  if [ -e ${list_file} ]; then
0000000000000000000000000000000000000000;;	    # remove all of the old docs; we don't want to check them in.
0000000000000000000000000000000000000000;;	    while read file; do
0000000000000000000000000000000000000000;;	      if [[ "${list_file}" != "${KUBE_ROOT}/${file}" ]]; then
0000000000000000000000000000000000000000;;	        cp "${KUBE_ROOT}/hack/autogenerated_placeholder.txt" "${KUBE_ROOT}/${file}"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    done <"${list_file}"
0000000000000000000000000000000000000000;;	    # The docs/.generated_docs file lists itself, so we don't need to explicitly
0000000000000000000000000000000000000000;;	    # delete it.
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Removes previously generated docs-- we don't want to check them in. $KUBE_ROOT
0000000000000000000000000000000000000000;;	# must be set.
0000000000000000000000000000000000000000;;	kube::util::remove-gen-docs() {
0000000000000000000000000000000000000000;;	  if [ -e "${KUBE_ROOT}/docs/.generated_docs" ]; then
0000000000000000000000000000000000000000;;	    # remove all of the old docs; we don't want to check them in.
0000000000000000000000000000000000000000;;	    while read file; do
0000000000000000000000000000000000000000;;	      rm "${KUBE_ROOT}/${file}" 2>/dev/null || true
0000000000000000000000000000000000000000;;	    done <"${KUBE_ROOT}/docs/.generated_docs"
0000000000000000000000000000000000000000;;	    # The docs/.generated_docs file lists itself, so we don't need to explicitly
0000000000000000000000000000000000000000;;	    # delete it.
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Takes a path $1 to traverse for md files to append the ga-beacon tracking
0000000000000000000000000000000000000000;;	# link to, if needed. If $2 is set, just print files that are missing
0000000000000000000000000000000000000000;;	# the link.
0000000000000000000000000000000000000000;;	kube::util::gen-analytics() {
0000000000000000000000000000000000000000;;	  local path="$1"
0000000000000000000000000000000000000000;;	  local dryrun="${2:-}"
0000000000000000000000000000000000000000;;	  local mdfiles dir link
0000000000000000000000000000000000000000;;	  # find has some strange inconsistencies between darwin/linux. The
0000000000000000000000000000000000000000;;	  # path to search must end in '/' for linux, but darwin will put an extra
0000000000000000000000000000000000000000;;	  # slash in results if there is a trailing '/'.
0000000000000000000000000000000000000000;;	  if [[ $( uname ) == 'Linux' ]]; then
0000000000000000000000000000000000000000;;	    dir="${path}/"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    dir="${path}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # We don't touch files in special dirs, and the kubectl docs are
0000000000000000000000000000000000000000;;	  # autogenerated by gendocs.
0000000000000000000000000000000000000000;;	  # Don't descend into .directories
0000000000000000000000000000000000000000;;	  mdfiles=($( find "${dir}" -name "*.md" -type f \
0000000000000000000000000000000000000000;;	              -not -path '*/\.*' \
0000000000000000000000000000000000000000;;	              -not -path "${path}/vendor/*" \
0000000000000000000000000000000000000000;;	              -not -path "${path}/staging/*" \
0000000000000000000000000000000000000000;;	              -not -path "${path}/third_party/*" \
0000000000000000000000000000000000000000;;	              -not -path "${path}/_gopath/*" \
0000000000000000000000000000000000000000;;	              -not -path "${path}/_output/*" \
0000000000000000000000000000000000000000;;	              -not -path "${path}/docs/user-guide/kubectl/kubectl*" ))
0000000000000000000000000000000000000000;;	  for f in "${mdfiles[@]}"; do
0000000000000000000000000000000000000000;;	    link=$(kube::util::analytics-link "${f#${path}/}")
0000000000000000000000000000000000000000;;	    if grep -q -F -x "${link}" "${f}"; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    elif [[ -z "${dryrun}" ]]; then
0000000000000000000000000000000000000000;;	      echo -e "\n\n${link}" >> "${f}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "$f"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Prints analytics link to append to a file at path $1.
0000000000000000000000000000000000000000;;	kube::util::analytics-link() {
0000000000000000000000000000000000000000;;	  local path="$1"
0000000000000000000000000000000000000000;;	  echo "[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/${path}?pixel)]()"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Takes a group/version and returns the path to its location on disk, sans
0000000000000000000000000000000000000000;;	# "pkg". E.g.:
0000000000000000000000000000000000000000;;	# * default behavior: extensions/v1beta1 -> apis/extensions/v1beta1
0000000000000000000000000000000000000000;;	# * default behavior for only a group: experimental -> apis/experimental
0000000000000000000000000000000000000000;;	# * Special handling for empty group: v1 -> api/v1, unversioned -> api/unversioned
0000000000000000000000000000000000000000;;	# * Special handling for groups suffixed with ".k8s.io": foo.k8s.io/v1 -> apis/foo/v1
0000000000000000000000000000000000000000;;	# * Very special handling for when both group and version are "": / -> api
0000000000000000000000000000000000000000;;	kube::util::group-version-to-pkg-path() {
0000000000000000000000000000000000000000;;	  staging_apis=(
0000000000000000000000000000000000000000;;	  $(
0000000000000000000000000000000000000000;;	    pushd ${KUBE_ROOT}/staging/src/k8s.io/api > /dev/null
0000000000000000000000000000000000000000;;	      find . -name types.go | xargs -n1 dirname | sed "s|\./||g" | sort
0000000000000000000000000000000000000000;;	    popd > /dev/null
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local group_version="$1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ " ${staging_apis[@]} " =~ " ${group_version/.*k8s.io/} " ]]; then
0000000000000000000000000000000000000000;;	    echo "vendor/k8s.io/api/${group_version/.*k8s.io/}"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # "v1" is the API GroupVersion 
0000000000000000000000000000000000000000;;	  if [[ "${group_version}" == "v1" ]]; then
0000000000000000000000000000000000000000;;	    echo "vendor/k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Special cases first.
0000000000000000000000000000000000000000;;	  # TODO(lavalamp): Simplify this by moving pkg/api/v1 and splitting pkg/api,
0000000000000000000000000000000000000000;;	  # moving the results to pkg/apis/api.
0000000000000000000000000000000000000000;;	  case "${group_version}" in
0000000000000000000000000000000000000000;;	    # both group and version are "", this occurs when we generate deep copies for internal objects of the legacy v1 API.
0000000000000000000000000000000000000000;;	    __internal)
0000000000000000000000000000000000000000;;	      echo "pkg/api"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    federation/v1beta1)
0000000000000000000000000000000000000000;;	      echo "federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    meta/v1)
0000000000000000000000000000000000000000;;	      echo "vendor/k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    meta/v1)
0000000000000000000000000000000000000000;;	      echo "../vendor/k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    meta/v1alpha1)
0000000000000000000000000000000000000000;;	      echo "vendor/k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    meta/v1alpha1)
0000000000000000000000000000000000000000;;	      echo "../vendor/k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    unversioned)
0000000000000000000000000000000000000000;;	      echo "pkg/api/unversioned"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *.k8s.io)
0000000000000000000000000000000000000000;;	      echo "pkg/apis/${group_version%.*k8s.io}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *.k8s.io/*)
0000000000000000000000000000000000000000;;	      echo "pkg/apis/${group_version/.*k8s.io/}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      echo "pkg/apis/${group_version%__internal}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Takes a group/version and returns the swagger-spec file name.
0000000000000000000000000000000000000000;;	# default behavior: extensions/v1beta1 -> extensions_v1beta1
0000000000000000000000000000000000000000;;	# special case for v1: v1 -> v1
0000000000000000000000000000000000000000;;	kube::util::gv-to-swagger-name() {
0000000000000000000000000000000000000000;;	  local group_version="$1"
0000000000000000000000000000000000000000;;	  case "${group_version}" in
0000000000000000000000000000000000000000;;	    v1)
0000000000000000000000000000000000000000;;	      echo "v1"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      echo "${group_version%/*}_${group_version#*/}"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Fetches swagger spec from apiserver.
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	# SWAGGER_API_PATH: Base path for swaggerapi on apiserver. Ex:
0000000000000000000000000000000000000000;;	# http://localhost:8080/swaggerapi.
0000000000000000000000000000000000000000;;	# SWAGGER_ROOT_DIR: Root dir where we want to to save the fetched spec.
0000000000000000000000000000000000000000;;	# VERSIONS: Array of group versions to include in swagger spec.
0000000000000000000000000000000000000000;;	kube::util::fetch-swagger-spec() {
0000000000000000000000000000000000000000;;	  for ver in ${VERSIONS}; do
0000000000000000000000000000000000000000;;	    if [[ " ${KUBE_NONSERVER_GROUP_VERSIONS} " == *" ${ver} "* ]]; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # fetch the swagger spec for each group version.
0000000000000000000000000000000000000000;;	    if [[ ${ver} == "v1" ]]; then
0000000000000000000000000000000000000000;;	      SUBPATH="api"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      SUBPATH="apis"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    SUBPATH="${SUBPATH}/${ver}"
0000000000000000000000000000000000000000;;	    SWAGGER_JSON_NAME="$(kube::util::gv-to-swagger-name ${ver}).json"
0000000000000000000000000000000000000000;;	    curl -w "\n" -fs "${SWAGGER_API_PATH}${SUBPATH}" > "${SWAGGER_ROOT_DIR}/${SWAGGER_JSON_NAME}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # fetch the swagger spec for the discovery mechanism at group level.
0000000000000000000000000000000000000000;;	    if [[ ${ver} == "v1" ]]; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    SUBPATH="apis/"${ver%/*}
0000000000000000000000000000000000000000;;	    SWAGGER_JSON_NAME="${ver%/*}.json"
0000000000000000000000000000000000000000;;	    curl -w "\n" -fs "${SWAGGER_API_PATH}${SUBPATH}" > "${SWAGGER_ROOT_DIR}/${SWAGGER_JSON_NAME}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # fetch swagger specs for other discovery mechanism.
0000000000000000000000000000000000000000;;	  curl -w "\n" -fs "${SWAGGER_API_PATH}" > "${SWAGGER_ROOT_DIR}/resourceListing.json"
0000000000000000000000000000000000000000;;	  curl -w "\n" -fs "${SWAGGER_API_PATH}version" > "${SWAGGER_ROOT_DIR}/version.json"
0000000000000000000000000000000000000000;;	  curl -w "\n" -fs "${SWAGGER_API_PATH}api" > "${SWAGGER_ROOT_DIR}/api.json"
0000000000000000000000000000000000000000;;	  curl -w "\n" -fs "${SWAGGER_API_PATH}apis" > "${SWAGGER_ROOT_DIR}/apis.json"
0000000000000000000000000000000000000000;;	  curl -w "\n" -fs "${SWAGGER_API_PATH}logs" > "${SWAGGER_ROOT_DIR}/logs.json"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Returns the name of the upstream remote repository name for the local git
0000000000000000000000000000000000000000;;	# repo, e.g. "upstream" or "origin".
0000000000000000000000000000000000000000;;	kube::util::git_upstream_remote_name() {
0000000000000000000000000000000000000000;;	  git remote -v | grep fetch |\
0000000000000000000000000000000000000000;;	    grep -E 'github.com[/:]kubernetes/kubernetes|k8s.io/kubernetes' |\
0000000000000000000000000000000000000000;;	    head -n 1 | awk '{print $1}'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Checks whether godep restore was run in the current GOPATH, i.e. that all referenced repos exist
0000000000000000000000000000000000000000;;	# and are checked out to the referenced rev.
0000000000000000000000000000000000000000;;	kube::util::godep_restored() {
0000000000000000000000000000000000000000;;	  local -r godeps_json=${1:-Godeps/Godeps.json}
0000000000000000000000000000000000000000;;	  local -r gopath=${2:-${GOPATH%:*}}
0000000000000000000000000000000000000000;;	  if ! which jq &>/dev/null; then
0000000000000000000000000000000000000000;;	    echo "jq not found. Please install." 1>&2
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local root
0000000000000000000000000000000000000000;;	  local old_rev=""
0000000000000000000000000000000000000000;;	  while read path rev; do
0000000000000000000000000000000000000000;;	    rev=$(echo "${rev}" | sed "s/['\"]//g") # remove quotes which are around revs sometimes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ "${rev}" == "${old_rev}" ]] && [[ "${path}" == "${root}"* ]]; then
0000000000000000000000000000000000000000;;	      # avoid checking the same git/hg root again
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    root="${path}"
0000000000000000000000000000000000000000;;	    while [ "${root}" != "." -a ! -d "${gopath}/src/${root}/.git" -a ! -d "${gopath}/src/${root}/.hg" ]; do
0000000000000000000000000000000000000000;;	      root=$(dirname "${root}")
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    if [ "${root}" == "." ]; then
0000000000000000000000000000000000000000;;	      echo "No checkout of ${path} found in GOPATH \"${gopath}\"." 1>&2
0000000000000000000000000000000000000000;;	      return 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    local head
0000000000000000000000000000000000000000;;	    if [ -d "${gopath}/src/${root}/.git" ]; then
0000000000000000000000000000000000000000;;	      head="$(cd "${gopath}/src/${root}" && git rev-parse HEAD)"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      head="$(cd "${gopath}/src/${root}" && hg parent --template '{node}')"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ "${head}" != "${rev}" ]; then
0000000000000000000000000000000000000000;;	      echo "Unexpected HEAD '${head}' at ${gopath}/src/${root}, expected '${rev}'." 1>&2
0000000000000000000000000000000000000000;;	      return 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    old_rev="${rev}"
0000000000000000000000000000000000000000;;	  done < <(jq '.Deps|.[]|.ImportPath + " " + .Rev' -r < "${godeps_json}")
0000000000000000000000000000000000000000;;	  return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Exits script if working directory is dirty. If it's run interactively in the terminal
0000000000000000000000000000000000000000;;	# the user can commit changes in a second terminal. This script will wait.
0000000000000000000000000000000000000000;;	kube::util::ensure_clean_working_dir() {
0000000000000000000000000000000000000000;;	  while ! git diff HEAD --exit-code &>/dev/null; do
0000000000000000000000000000000000000000;;	    echo -e "\nUnexpected dirty working directory:\n"
0000000000000000000000000000000000000000;;	    git status -s | sed 's/^/  /'
0000000000000000000000000000000000000000;;	    if ! tty -s; then
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    echo -e "\nCommit your changes in another terminal and then continue here by pressing enter."
0000000000000000000000000000000000000000;;	    read
0000000000000000000000000000000000000000;;	  done 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Ensure that the given godep version is installed and in the path
0000000000000000000000000000000000000000;;	kube::util::ensure_godep_version() {
0000000000000000000000000000000000000000;;	  GODEP_VERSION=${1:-"v79"}
0000000000000000000000000000000000000000;;	  if [[ "$(godep version)" == *"godep ${GODEP_VERSION}"* ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::ensure-temp-dir
0000000000000000000000000000000000000000;;	  mkdir -p "${KUBE_TEMP}/go/src"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  GOPATH="${KUBE_TEMP}/go" go get -d -u github.com/tools/godep 2>/dev/null
0000000000000000000000000000000000000000;;	  pushd "${KUBE_TEMP}/go/src/github.com/tools/godep" >/dev/null
0000000000000000000000000000000000000000;;	    git checkout "${GODEP_VERSION}"
0000000000000000000000000000000000000000;;	    GOPATH="${KUBE_TEMP}/go" go install .
0000000000000000000000000000000000000000;;	  popd >/dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  PATH="${KUBE_TEMP}/go/bin:${PATH}"
0000000000000000000000000000000000000000;;	  hash -r # force bash to clear PATH cache
0000000000000000000000000000000000000000;;	  godep version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Checks that the GOPATH is simple, i.e. consists only of one directory, not multiple.
0000000000000000000000000000000000000000;;	kube::util::ensure_single_dir_gopath() {
0000000000000000000000000000000000000000;;	  if [[ "${GOPATH}" == *:* ]]; then
0000000000000000000000000000000000000000;;	    echo "GOPATH must consist of a single directory." 1>&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Checks whether there are any files matching pattern $2 changed between the
0000000000000000000000000000000000000000;;	# current branch and upstream branch named by $1.
0000000000000000000000000000000000000000;;	# Returns 1 (false) if there are no changes, 0 (true) if there are changes
0000000000000000000000000000000000000000;;	# detected.
0000000000000000000000000000000000000000;;	kube::util::has_changes_against_upstream_branch() {
0000000000000000000000000000000000000000;;	  local -r git_branch=$1
0000000000000000000000000000000000000000;;	  local -r pattern=$2
0000000000000000000000000000000000000000;;	  local -r not_pattern=${3:-totallyimpossiblepattern}
0000000000000000000000000000000000000000;;	  local full_branch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  full_branch="$(kube::util::git_upstream_remote_name)/${git_branch}"
0000000000000000000000000000000000000000;;	  echo "Checking for '${pattern}' changes against '${full_branch}'"
0000000000000000000000000000000000000000;;	  # make sure the branch is valid, otherwise the check will pass erroneously.
0000000000000000000000000000000000000000;;	  if ! git describe "${full_branch}" >/dev/null; then
0000000000000000000000000000000000000000;;	    # abort!
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # notice this uses ... to find the first shared ancestor
0000000000000000000000000000000000000000;;	  if git diff --name-only "${full_branch}...HEAD" | grep -v -E "${not_pattern}" | grep "${pattern}" > /dev/null; then
0000000000000000000000000000000000000000;;	    return 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # also check for pending changes
0000000000000000000000000000000000000000;;	  if git status --porcelain | grep -v -E "${not_pattern}" | grep "${pattern}" > /dev/null; then
0000000000000000000000000000000000000000;;	    echo "Detected '${pattern}' uncommitted changes."
0000000000000000000000000000000000000000;;	    return 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "No '${pattern}' changes detected."
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::download_file() {
0000000000000000000000000000000000000000;;	  local -r url=$1
0000000000000000000000000000000000000000;;	  local -r destination_file=$2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  rm  ${destination_file} 2&> /dev/null || true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for i in $(seq 5)
0000000000000000000000000000000000000000;;	  do
0000000000000000000000000000000000000000;;	    if ! curl -fsSL --retry 3 --keepalive-time 2 ${url} -o ${destination_file}; then
0000000000000000000000000000000000000000;;	      echo "Downloading ${url} failed. $((5-i)) retries left."
0000000000000000000000000000000000000000;;	      sleep 1
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "Downloading ${url} succeed"
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Test whether openssl is installed.
0000000000000000000000000000000000000000;;	# Sets:
0000000000000000000000000000000000000000;;	#  OPENSSL_BIN: The path to the openssl binary to use
0000000000000000000000000000000000000000;;	function kube::util::test_openssl_installed {
0000000000000000000000000000000000000000;;	    openssl version >& /dev/null
0000000000000000000000000000000000000000;;	    if [ "$?" != "0" ]; then
0000000000000000000000000000000000000000;;	      echo "Failed to run openssl. Please ensure openssl is installed"
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    OPENSSL_BIN=$(command -v openssl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# creates a client CA, args are sudo, dest-dir, ca-id, purpose
0000000000000000000000000000000000000000;;	# purpose is dropped in after "key encipherment", you usually want
0000000000000000000000000000000000000000;;	# '"client auth"'
0000000000000000000000000000000000000000;;	# '"server auth"'
0000000000000000000000000000000000000000;;	# '"client auth","server auth"'
0000000000000000000000000000000000000000;;	function kube::util::create_signing_certkey {
0000000000000000000000000000000000000000;;	    local sudo=$1
0000000000000000000000000000000000000000;;	    local dest_dir=$2
0000000000000000000000000000000000000000;;	    local id=$3
0000000000000000000000000000000000000000;;	    local purpose=$4
0000000000000000000000000000000000000000;;	    # Create client ca
0000000000000000000000000000000000000000;;	    ${sudo} /bin/bash -e <<EOF
0000000000000000000000000000000000000000;;	    rm -f "${dest_dir}/${id}-ca.crt" "${dest_dir}/${id}-ca.key"
0000000000000000000000000000000000000000;;	    ${OPENSSL_BIN} req -x509 -sha256 -new -nodes -days 365 -newkey rsa:2048 -keyout "${dest_dir}/${id}-ca.key" -out "${dest_dir}/${id}-ca.crt" -subj "/C=xx/ST=x/L=x/O=x/OU=x/CN=ca/emailAddress=x/"
0000000000000000000000000000000000000000;;	    echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment",${purpose}]}}}' > "${dest_dir}/${id}-ca-config.json"
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# signs a client certificate: args are sudo, dest-dir, CA, filename (roughly), username, groups...
0000000000000000000000000000000000000000;;	function kube::util::create_client_certkey {
0000000000000000000000000000000000000000;;	    local sudo=$1
0000000000000000000000000000000000000000;;	    local dest_dir=$2
0000000000000000000000000000000000000000;;	    local ca=$3
0000000000000000000000000000000000000000;;	    local id=$4
0000000000000000000000000000000000000000;;	    local cn=${5:-$4}
0000000000000000000000000000000000000000;;	    local groups=""
0000000000000000000000000000000000000000;;	    local SEP=""
0000000000000000000000000000000000000000;;	    shift 5
0000000000000000000000000000000000000000;;	    while [ -n "${1:-}" ]; do
0000000000000000000000000000000000000000;;	        groups+="${SEP}{\"O\":\"$1\"}"
0000000000000000000000000000000000000000;;	        SEP=","
0000000000000000000000000000000000000000;;	        shift 1
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    ${sudo} /bin/bash -e <<EOF
0000000000000000000000000000000000000000;;	    cd ${dest_dir}
0000000000000000000000000000000000000000;;	    echo '{"CN":"${cn}","names":[${groups}],"hosts":[""],"key":{"algo":"rsa","size":2048}}' | ${CFSSL_BIN} gencert -ca=${ca}.crt -ca-key=${ca}.key -config=${ca}-config.json - | ${CFSSLJSON_BIN} -bare client-${id}
0000000000000000000000000000000000000000;;	    mv "client-${id}-key.pem" "client-${id}.key"
0000000000000000000000000000000000000000;;	    mv "client-${id}.pem" "client-${id}.crt"
0000000000000000000000000000000000000000;;	    rm -f "client-${id}.csr"
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# signs a serving certificate: args are sudo, dest-dir, ca, filename (roughly), subject, hosts...
0000000000000000000000000000000000000000;;	function kube::util::create_serving_certkey {
0000000000000000000000000000000000000000;;	    local sudo=$1
0000000000000000000000000000000000000000;;	    local dest_dir=$2
0000000000000000000000000000000000000000;;	    local ca=$3
0000000000000000000000000000000000000000;;	    local id=$4
0000000000000000000000000000000000000000;;	    local cn=${5:-$4}
0000000000000000000000000000000000000000;;	    local hosts=""
0000000000000000000000000000000000000000;;	    local SEP=""
0000000000000000000000000000000000000000;;	    shift 5
0000000000000000000000000000000000000000;;	    while [ -n "${1:-}" ]; do
0000000000000000000000000000000000000000;;	        hosts+="${SEP}\"$1\""
0000000000000000000000000000000000000000;;	        SEP=","
0000000000000000000000000000000000000000;;	        shift 1
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    ${sudo} /bin/bash -e <<EOF
0000000000000000000000000000000000000000;;	    cd ${dest_dir}
0000000000000000000000000000000000000000;;	    echo '{"CN":"${cn}","hosts":[${hosts}],"key":{"algo":"rsa","size":2048}}' | ${CFSSL_BIN} gencert -ca=${ca}.crt -ca-key=${ca}.key -config=${ca}-config.json - | ${CFSSLJSON_BIN} -bare serving-${id}
0000000000000000000000000000000000000000;;	    mv "serving-${id}-key.pem" "serving-${id}.key"
0000000000000000000000000000000000000000;;	    mv "serving-${id}.pem" "serving-${id}.crt"
0000000000000000000000000000000000000000;;	    rm -f "serving-${id}.csr"
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# creates a self-contained kubeconfig: args are sudo, dest-dir, ca file, host, port, client id, token(optional)
0000000000000000000000000000000000000000;;	function kube::util::write_client_kubeconfig {
0000000000000000000000000000000000000000;;	    local sudo=$1
0000000000000000000000000000000000000000;;	    local dest_dir=$2
0000000000000000000000000000000000000000;;	    local ca_file=$3
0000000000000000000000000000000000000000;;	    local api_host=$4
0000000000000000000000000000000000000000;;	    local api_port=$5
0000000000000000000000000000000000000000;;	    local client_id=$6
0000000000000000000000000000000000000000;;	    local token=${7:-}
0000000000000000000000000000000000000000;;	    cat <<EOF | ${sudo} tee "${dest_dir}"/${client_id}.kubeconfig > /dev/null
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	  - cluster:
0000000000000000000000000000000000000000;;	      certificate-authority: ${ca_file}
0000000000000000000000000000000000000000;;	      server: https://${api_host}:${api_port}/
0000000000000000000000000000000000000000;;	    name: local-up-cluster
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	  - user:
0000000000000000000000000000000000000000;;	      token: ${token}
0000000000000000000000000000000000000000;;	      client-certificate: ${dest_dir}/client-${client_id}.crt
0000000000000000000000000000000000000000;;	      client-key: ${dest_dir}/client-${client_id}.key
0000000000000000000000000000000000000000;;	    name: local-up-cluster
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	  - context:
0000000000000000000000000000000000000000;;	      cluster: local-up-cluster
0000000000000000000000000000000000000000;;	      user: local-up-cluster
0000000000000000000000000000000000000000;;	    name: local-up-cluster
0000000000000000000000000000000000000000;;	current-context: local-up-cluster
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # flatten the kubeconfig files to make them self contained
0000000000000000000000000000000000000000;;	    username=$(whoami)
0000000000000000000000000000000000000000;;	    ${sudo} /bin/bash -e <<EOF
0000000000000000000000000000000000000000;;	    $(kube::util::find-binary kubectl) --kubeconfig="${dest_dir}/${client_id}.kubeconfig" config view --minify --flatten > "/tmp/${client_id}.kubeconfig"
0000000000000000000000000000000000000000;;	    mv -f "/tmp/${client_id}.kubeconfig" "${dest_dir}/${client_id}.kubeconfig"
0000000000000000000000000000000000000000;;	    chown ${username} "${dest_dir}/${client_id}.kubeconfig"
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Determines if docker can be run, failures may simply require that the user be added to the docker group.
0000000000000000000000000000000000000000;;	function kube::util::ensure_docker_daemon_connectivity {
0000000000000000000000000000000000000000;;	  DOCKER=(docker ${DOCKER_OPTS})
0000000000000000000000000000000000000000;;	  if ! "${DOCKER[@]}" info > /dev/null 2>&1 ; then
0000000000000000000000000000000000000000;;	    cat <<'EOF' >&2
0000000000000000000000000000000000000000;;	Can't connect to 'docker' daemon.  please fix and retry.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Possible causes:
0000000000000000000000000000000000000000;;	  - Docker Daemon not started
0000000000000000000000000000000000000000;;	    - Linux: confirm via your init system
0000000000000000000000000000000000000000;;	    - macOS w/ docker-machine: run `docker-machine ls` and `docker-machine start <name>`
0000000000000000000000000000000000000000;;	    - macOS w/ Docker for Mac: Check the menu bar and start the Docker application
0000000000000000000000000000000000000000;;	  - DOCKER_HOST hasn't been set or is set incorrectly
0000000000000000000000000000000000000000;;	    - Linux: domain socket is used, DOCKER_* should be unset. In Bash run `unset ${!DOCKER_*}`
0000000000000000000000000000000000000000;;	    - macOS w/ docker-machine: run `eval "$(docker-machine env <name>)"`
0000000000000000000000000000000000000000;;	    - macOS w/ Docker for Mac: domain socket is used, DOCKER_* should be unset. In Bash run `unset ${!DOCKER_*}`
0000000000000000000000000000000000000000;;	  - Other things to check:
0000000000000000000000000000000000000000;;	    - Linux: User isn't in 'docker' group.  Add and relogin.
0000000000000000000000000000000000000000;;	      - Something like 'sudo usermod -a -G docker ${USER}'
0000000000000000000000000000000000000000;;	      - RHEL7 bug and workaround: https://bugzilla.redhat.com/show_bug.cgi?id=1119282#c8
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Wait for background jobs to finish. Return with
0000000000000000000000000000000000000000;;	# an error status if any of the jobs failed.
0000000000000000000000000000000000000000;;	kube::util::wait-for-jobs() {
0000000000000000000000000000000000000000;;	  local fail=0
0000000000000000000000000000000000000000;;	  local job
0000000000000000000000000000000000000000;;	  for job in $(jobs -p); do
0000000000000000000000000000000000000000;;	    wait "${job}" || fail=$((fail + 1))
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  return ${fail}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# kube::util::join <delim> <list...>
0000000000000000000000000000000000000000;;	# Concatenates the list elements with the delimiter passed as first parameter
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Ex: kube::util::join , a b c
0000000000000000000000000000000000000000;;	#  -> a,b,c
0000000000000000000000000000000000000000;;	function kube::util::join {
0000000000000000000000000000000000000000;;	  local IFS="$1"
0000000000000000000000000000000000000000;;	  shift
0000000000000000000000000000000000000000;;	  echo "$*"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Downloads cfssl/cfssljson into $1 directory if they do not already exist in PATH
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   $1 (cfssl directory) (optional)
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Sets:
0000000000000000000000000000000000000000;;	#  CFSSL_BIN: The path of the installed cfssl binary
0000000000000000000000000000000000000000;;	#  CFSSLJSON_BIN: The path of the installed cfssljson binary
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	function kube::util::ensure-cfssl {
0000000000000000000000000000000000000000;;	  if command -v cfssl &>/dev/null && command -v cfssljson &>/dev/null; then
0000000000000000000000000000000000000000;;	    CFSSL_BIN=$(command -v cfssl)
0000000000000000000000000000000000000000;;	    CFSSLJSON_BIN=$(command -v cfssljson)
0000000000000000000000000000000000000000;;	    return 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Create a temp dir for cfssl if no directory was given
0000000000000000000000000000000000000000;;	  local cfssldir=${1:-}
0000000000000000000000000000000000000000;;	  if [[ -z "${cfssldir}" ]]; then
0000000000000000000000000000000000000000;;	    kube::util::ensure-temp-dir
0000000000000000000000000000000000000000;;	    cfssldir="${KUBE_TEMP}/cfssl"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${cfssldir}"
0000000000000000000000000000000000000000;;	  pushd "${cfssldir}" > /dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Unable to successfully run 'cfssl' from $PATH; downloading instead..."
0000000000000000000000000000000000000000;;	    kernel=$(uname -s)
0000000000000000000000000000000000000000;;	    case "${kernel}" in
0000000000000000000000000000000000000000;;	      Linux)
0000000000000000000000000000000000000000;;	        curl -s -L -o cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
0000000000000000000000000000000000000000;;	        curl -s -L -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
0000000000000000000000000000000000000000;;	        ;;
0000000000000000000000000000000000000000;;	      Darwin)
0000000000000000000000000000000000000000;;	        curl -s -L -o cfssl https://pkg.cfssl.org/R1.2/cfssl_darwin-amd64
0000000000000000000000000000000000000000;;	        curl -s -L -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_darwin-amd64
0000000000000000000000000000000000000000;;	        ;;
0000000000000000000000000000000000000000;;	      *)
0000000000000000000000000000000000000000;;	        echo "Unknown, unsupported platform: ${kernel}." >&2
0000000000000000000000000000000000000000;;	        echo "Supported platforms: Linux, Darwin." >&2
0000000000000000000000000000000000000000;;	        exit 2
0000000000000000000000000000000000000000;;	    esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    chmod +x cfssl || true
0000000000000000000000000000000000000000;;	    chmod +x cfssljson || true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    CFSSL_BIN="${cfssldir}/cfssl"
0000000000000000000000000000000000000000;;	    CFSSLJSON_BIN="${cfssldir}/cfssljson"
0000000000000000000000000000000000000000;;	    if [[ ! -x ${CFSSL_BIN} || ! -x ${CFSSLJSON_BIN} ]]; then
0000000000000000000000000000000000000000;;	      echo "Failed to download 'cfssl'. Please install cfssl and cfssljson and verify they are in \$PATH."
0000000000000000000000000000000000000000;;	      echo "Hint: export PATH=\$PATH:\$GOPATH/bin; go get -u github.com/cloudflare/cfssl/cmd/..."
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Some useful colors.
0000000000000000000000000000000000000000;;	if [[ -z "${color_start-}" ]]; then
0000000000000000000000000000000000000000;;	  declare -r color_start="\033["
0000000000000000000000000000000000000000;;	  declare -r color_red="${color_start}0;31m"
0000000000000000000000000000000000000000;;	  declare -r color_yellow="${color_start}0;33m"
0000000000000000000000000000000000000000;;	  declare -r color_green="${color_start}0;32m"
0000000000000000000000000000000000000000;;	  declare -r color_norm="${color_start}0m"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# ex: ts=2 sw=2 et filetype=sh
