0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# -----------------------------------------------------------------------------
0000000000000000000000000000000000000000;;	# Version management helpers.  These functions help to set, save and load the
0000000000000000000000000000000000000000;;	# following variables:
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#    KUBE_GIT_COMMIT - The git commit id corresponding to this
0000000000000000000000000000000000000000;;	#          source code.
0000000000000000000000000000000000000000;;	#    KUBE_GIT_TREE_STATE - "clean" indicates no changes since the git commit id
0000000000000000000000000000000000000000;;	#        "dirty" indicates source code changes after the git commit id
0000000000000000000000000000000000000000;;	#    KUBE_GIT_VERSION - "vX.Y" used to indicate the last release version.
0000000000000000000000000000000000000000;;	#    KUBE_GIT_MAJOR - The major part of the version
0000000000000000000000000000000000000000;;	#    KUBE_GIT_MINOR - The minor component of the version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Grovels through git to set a set of env variables.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# If KUBE_GIT_VERSION_FILE, this function will load from that file instead of
0000000000000000000000000000000000000000;;	# querying git.
0000000000000000000000000000000000000000;;	kube::version::get_version_vars() {
0000000000000000000000000000000000000000;;	  if [[ -n ${KUBE_GIT_VERSION_FILE-} ]]; then
0000000000000000000000000000000000000000;;	    kube::version::load_version_vars "${KUBE_GIT_VERSION_FILE}"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local git=(git --work-tree "${KUBE_ROOT}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n ${KUBE_GIT_COMMIT-} ]] || KUBE_GIT_COMMIT=$("${git[@]}" rev-parse "HEAD^{commit}" 2>/dev/null); then
0000000000000000000000000000000000000000;;	    if [[ -z ${KUBE_GIT_TREE_STATE-} ]]; then
0000000000000000000000000000000000000000;;	      # Check if the tree is dirty.  default to dirty
0000000000000000000000000000000000000000;;	      if git_status=$("${git[@]}" status --porcelain 2>/dev/null) && [[ -z ${git_status} ]]; then
0000000000000000000000000000000000000000;;	        KUBE_GIT_TREE_STATE="clean"
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        KUBE_GIT_TREE_STATE="dirty"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Use git describe to find the version based on annotated tags.
0000000000000000000000000000000000000000;;	    if [[ -n ${KUBE_GIT_VERSION-} ]] || KUBE_GIT_VERSION=$("${git[@]}" describe --tags --abbrev=14 "${KUBE_GIT_COMMIT}^{commit}" 2>/dev/null); then
0000000000000000000000000000000000000000;;	      # This translates the "git describe" to an actual semver.org
0000000000000000000000000000000000000000;;	      # compatible semantic version that looks something like this:
0000000000000000000000000000000000000000;;	      #   v1.1.0-alpha.0.6+84c76d1142ea4d
0000000000000000000000000000000000000000;;	      #
0000000000000000000000000000000000000000;;	      # TODO: We continue calling this "git version" because so many
0000000000000000000000000000000000000000;;	      # downstream consumers are expecting it there.
0000000000000000000000000000000000000000;;	      DASHES_IN_VERSION=$(echo "${KUBE_GIT_VERSION}" | sed "s/[^-]//g")
0000000000000000000000000000000000000000;;	      if [[ "${DASHES_IN_VERSION}" == "---" ]] ; then
0000000000000000000000000000000000000000;;	        # We have distance to subversion (v1.1.0-subversion-1-gCommitHash)
0000000000000000000000000000000000000000;;	        KUBE_GIT_VERSION=$(echo "${KUBE_GIT_VERSION}" | sed "s/-\([0-9]\{1,\}\)-g\([0-9a-f]\{14\}\)$/.\1\+\2/")
0000000000000000000000000000000000000000;;	      elif [[ "${DASHES_IN_VERSION}" == "--" ]] ; then
0000000000000000000000000000000000000000;;	        # We have distance to base tag (v1.1.0-1-gCommitHash)
0000000000000000000000000000000000000000;;	        KUBE_GIT_VERSION=$(echo "${KUBE_GIT_VERSION}" | sed "s/-g\([0-9a-f]\{14\}\)$/+\1/")
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      if [[ "${KUBE_GIT_TREE_STATE}" == "dirty" ]]; then
0000000000000000000000000000000000000000;;	        # git describe --dirty only considers changes to existing files, but
0000000000000000000000000000000000000000;;	        # that is problematic since new untracked .go files affect the build,
0000000000000000000000000000000000000000;;	        # so use our idea of "dirty" from git status instead.
0000000000000000000000000000000000000000;;	        KUBE_GIT_VERSION+="-dirty"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      # Try to match the "git describe" output to a regex to try to extract
0000000000000000000000000000000000000000;;	      # the "major" and "minor" versions and whether this is the exact tagged
0000000000000000000000000000000000000000;;	      # version or whether the tree is between two tagged versions.
0000000000000000000000000000000000000000;;	      if [[ "${KUBE_GIT_VERSION}" =~ ^v([0-9]+)\.([0-9]+)(\.[0-9]+)?([-].*)?$ ]]; then
0000000000000000000000000000000000000000;;	        KUBE_GIT_MAJOR=${BASH_REMATCH[1]}
0000000000000000000000000000000000000000;;	        KUBE_GIT_MINOR=${BASH_REMATCH[2]}
0000000000000000000000000000000000000000;;	        if [[ -n "${BASH_REMATCH[4]}" ]]; then
0000000000000000000000000000000000000000;;	          KUBE_GIT_MINOR+="+"
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Saves the environment flags to $1
0000000000000000000000000000000000000000;;	kube::version::save_version_vars() {
0000000000000000000000000000000000000000;;	  local version_file=${1-}
0000000000000000000000000000000000000000;;	  [[ -n ${version_file} ]] || {
0000000000000000000000000000000000000000;;	    echo "!!! Internal error.  No file specified in kube::version::save_version_vars"
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cat <<EOF >"${version_file}"
0000000000000000000000000000000000000000;;	KUBE_GIT_COMMIT='${KUBE_GIT_COMMIT-}'
0000000000000000000000000000000000000000;;	KUBE_GIT_TREE_STATE='${KUBE_GIT_TREE_STATE-}'
0000000000000000000000000000000000000000;;	KUBE_GIT_VERSION='${KUBE_GIT_VERSION-}'
0000000000000000000000000000000000000000;;	KUBE_GIT_MAJOR='${KUBE_GIT_MAJOR-}'
0000000000000000000000000000000000000000;;	KUBE_GIT_MINOR='${KUBE_GIT_MINOR-}'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Loads up the version variables from file $1
0000000000000000000000000000000000000000;;	kube::version::load_version_vars() {
0000000000000000000000000000000000000000;;	  local version_file=${1-}
0000000000000000000000000000000000000000;;	  [[ -n ${version_file} ]] || {
0000000000000000000000000000000000000000;;	    echo "!!! Internal error.  No file specified in kube::version::load_version_vars"
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  source "${version_file}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::version::ldflag() {
0000000000000000000000000000000000000000;;	  local key=${1}
0000000000000000000000000000000000000000;;	  local val=${2}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # If you update these, also update the list pkg/version/def.bzl.
0000000000000000000000000000000000000000;;	  echo "-X ${KUBE_GO_PACKAGE}/pkg/version.${key}=${val}"
0000000000000000000000000000000000000000;;	  echo "-X ${KUBE_GO_PACKAGE}/vendor/k8s.io/client-go/pkg/version.${key}=${val}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Prints the value that needs to be passed to the -ldflags parameter of go build
0000000000000000000000000000000000000000;;	# in order to set the Kubernetes based on the git tree status.
0000000000000000000000000000000000000000;;	# IMPORTANT: if you update any of these, also update the lists in
0000000000000000000000000000000000000000;;	# pkg/version/def.bzl and hack/print-workspace-status.sh.
0000000000000000000000000000000000000000;;	kube::version::ldflags() {
0000000000000000000000000000000000000000;;	  kube::version::get_version_vars
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -a ldflags=($(kube::version::ldflag "buildDate" "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"))
0000000000000000000000000000000000000000;;	  if [[ -n ${KUBE_GIT_COMMIT-} ]]; then
0000000000000000000000000000000000000000;;	    ldflags+=($(kube::version::ldflag "gitCommit" "${KUBE_GIT_COMMIT}"))
0000000000000000000000000000000000000000;;	    ldflags+=($(kube::version::ldflag "gitTreeState" "${KUBE_GIT_TREE_STATE}"))
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n ${KUBE_GIT_VERSION-} ]]; then
0000000000000000000000000000000000000000;;	    ldflags+=($(kube::version::ldflag "gitVersion" "${KUBE_GIT_VERSION}"))
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n ${KUBE_GIT_MAJOR-} && -n ${KUBE_GIT_MINOR-} ]]; then
0000000000000000000000000000000000000000;;	    ldflags+=(
0000000000000000000000000000000000000000;;	      $(kube::version::ldflag "gitMajor" "${KUBE_GIT_MAJOR}")
0000000000000000000000000000000000000000;;	      $(kube::version::ldflag "gitMinor" "${KUBE_GIT_MINOR}")
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # The -ldflags parameter takes a single string, so join the output.
0000000000000000000000000000000000000000;;	  echo "${ldflags[*]-}"
0000000000000000000000000000000000000000;;	}
