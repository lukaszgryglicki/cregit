0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a9737e5457fcfe02ec06c17681b0c47059416b30;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// User-interface for test-infra/kubetest/e2e.go
0000000000000000000000000000000000000000;;	// Equivalent to go get -u k8s.io/test-infra/kubetest && kubetest "${@}"
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/build"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flags struct {
0000000000000000000000000000000000000000;;		get  bool
0000000000000000000000000000000000000000;;		old  time.Duration
0000000000000000000000000000000000000000;;		args []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		getDefault = true
0000000000000000000000000000000000000000;;		oldDefault = 24 * time.Hour
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parse(args []string) (flags, error) {
0000000000000000000000000000000000000000;;		fs := flag.NewFlagSet(args[0], flag.ContinueOnError)
0000000000000000000000000000000000000000;;		get := fs.Bool("get", getDefault, "go get -u kubetest if old or not installed")
0000000000000000000000000000000000000000;;		old := fs.Duration("old", oldDefault, "Consider kubetest old if it exceeds this")
0000000000000000000000000000000000000000;;		var a []string
0000000000000000000000000000000000000000;;		if err := fs.Parse(args[1:]); err == flag.ErrHelp {
0000000000000000000000000000000000000000;;			os.Stderr.WriteString("  -- kubetestArgs\n")
0000000000000000000000000000000000000000;;			os.Stderr.WriteString("        All flags after -- are passed to the kubetest program\n")
0000000000000000000000000000000000000000;;			return flags{}, err
0000000000000000000000000000000000000000;;		} else if err != nil {
0000000000000000000000000000000000000000;;			log.Print("NOTICE: go run hack/e2e.go is now a shim for test-infra/kubetest")
0000000000000000000000000000000000000000;;			log.Printf("  Usage: go run hack/e2e.go [--get=%v] [--old=%v] -- [KUBETEST_ARGS]", getDefault, oldDefault)
0000000000000000000000000000000000000000;;			log.Print("  The separator is required to use --get or --old flags")
0000000000000000000000000000000000000000;;			log.Print("  The -- flag separator also suppresses this message")
0000000000000000000000000000000000000000;;			a = args[len(args)-fs.NArg()-1:]
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			a = fs.Args()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return flags{*get, *old, a}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		log.SetFlags(log.LstdFlags | log.Lshortfile)
0000000000000000000000000000000000000000;;		f, err := parse(os.Args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			os.Exit(2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t := newTester()
0000000000000000000000000000000000000000;;		k, err := t.getKubetest(f.get, f.old)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("Calling kubetest %v...", strings.Join(f.args, " "))
0000000000000000000000000000000000000000;;		if err = t.wait(k, f.args...); err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Print("Done")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wait(cmd string, args ...string) error {
0000000000000000000000000000000000000000;;		c := exec.Command(cmd, args...)
0000000000000000000000000000000000000000;;		c.Stdout = os.Stdout
0000000000000000000000000000000000000000;;		c.Stderr = os.Stderr
0000000000000000000000000000000000000000;;		if err := c.Start(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Struct that allows unit tests to override functionality.
0000000000000000000000000000000000000000;;	type tester struct {
0000000000000000000000000000000000000000;;		// os.Stat
0000000000000000000000000000000000000000;;		stat func(string) (os.FileInfo, error)
0000000000000000000000000000000000000000;;		// exec.LookPath
0000000000000000000000000000000000000000;;		lookPath func(string) (string, error)
0000000000000000000000000000000000000000;;		// build.Default.GOPATH
0000000000000000000000000000000000000000;;		goPath string
0000000000000000000000000000000000000000;;		wait   func(string, ...string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTester() tester {
0000000000000000000000000000000000000000;;		return tester{os.Stat, exec.LookPath, build.Default.GOPATH, wait}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Try to find kubetest, either GOPATH/bin/kubetest or PATH
0000000000000000000000000000000000000000;;	func (t tester) lookKubetest() (string, error) {
0000000000000000000000000000000000000000;;		// Check for kubetest in GOPATH/bin
0000000000000000000000000000000000000000;;		if t.goPath != "" {
0000000000000000000000000000000000000000;;			p := filepath.Join(t.goPath, "bin", "kubetest")
0000000000000000000000000000000000000000;;			_, err := t.stat(p)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return p, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check for kubetest in PATH
0000000000000000000000000000000000000000;;		p, err := t.lookPath("kubetest")
0000000000000000000000000000000000000000;;		return p, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Upgrade if kubetest does not exist or has not been updated today
0000000000000000000000000000000000000000;;	func (t tester) getKubetest(get bool, old time.Duration) (string, error) {
0000000000000000000000000000000000000000;;		// Find kubetest installation
0000000000000000000000000000000000000000;;		p, err := t.lookKubetest()
0000000000000000000000000000000000000000;;		if err == nil && !get {
0000000000000000000000000000000000000000;;			return p, nil // Installed, Skip update
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			// Installed recently?
0000000000000000000000000000000000000000;;			if s, err := t.stat(p); err != nil {
0000000000000000000000000000000000000000;;				return p, err // Cannot stat
0000000000000000000000000000000000000000;;			} else if time.Since(s.ModTime()) <= old {
0000000000000000000000000000000000000000;;				return p, nil // Recently updated
0000000000000000000000000000000000000000;;			} else if t.goPath == "" {
0000000000000000000000000000000000000000;;				log.Print("Skipping kubetest upgrade because $GOPATH is empty")
0000000000000000000000000000000000000000;;				return p, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			log.Printf("The kubetest binary is older than %s.", old)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.goPath == "" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Cannot install kubetest until $GOPATH is set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Print("Updating kubetest binary...")
0000000000000000000000000000000000000000;;		cmd := []string{"go", "get", "-u", "k8s.io/test-infra/kubetest"}
0000000000000000000000000000000000000000;;		if err = t.wait(cmd[0], cmd[1:]...); err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("%s: %v", strings.Join(cmd, " "), err) // Could not upgrade
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p, err = t.lookKubetest(); err != nil {
0000000000000000000000000000000000000000;;			return "", err // Cannot find kubetest
0000000000000000000000000000000000000000;;		} else if err = t.wait("touch", p); err != nil {
0000000000000000000000000000000000000000;;			return "", err // Could not touch
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return p, nil // Updated modtime
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
