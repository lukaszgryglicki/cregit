0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# updates the godeps.json file in the staging folders to allow clean vendoring
0000000000000000000000000000000000000000;;	# based on kubernetes levels.
0000000000000000000000000000000000000000;;	# TODO this does not address client-go, since it takes a different approach to vendoring
0000000000000000000000000000000000000000;;	# TODO client-go should probably be made consistent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	V=""
0000000000000000000000000000000000000000;;	DRY_RUN=false
0000000000000000000000000000000000000000;;	FAIL_ON_DIFF=false
0000000000000000000000000000000000000000;;	while getopts ":vdf" opt; do
0000000000000000000000000000000000000000;;	  case $opt in
0000000000000000000000000000000000000000;;	    v) # increase verbosity
0000000000000000000000000000000000000000;;	      V="-v"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    d) # do not godep-restore into a temporary directory, but use the existing GOPATH
0000000000000000000000000000000000000000;;	      DRY_RUN=true
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    f) # fail if something in the Godeps.json files changed
0000000000000000000000000000000000000000;;	      FAIL_ON_DIFF=true
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    \?)
0000000000000000000000000000000000000000;;	      echo "Invalid option: -$OPTARG" >&2
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	readonly V IN_PLACE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Checking whether godeps are restored"
0000000000000000000000000000000000000000;;	if ! kube::util::godep_restored 2>&1 | sed 's/^/  /'; then
0000000000000000000000000000000000000000;;	  echo -e '\nExecute script 'hack/godep-restore.sh' to download dependencies.' 1>&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::util::ensure-temp-dir
0000000000000000000000000000000000000000;;	kube::util::ensure_godep_version v79
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	TMP_GOPATH="${KUBE_TEMP}/go"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function updateGodepManifest() {
0000000000000000000000000000000000000000;;	  local repo="${1}"
0000000000000000000000000000000000000000;;	  pushd "${TMP_GOPATH}/src/k8s.io/${repo}" >/dev/null
0000000000000000000000000000000000000000;;	    echo "Updating godeps for k8s.io/${repo}"
0000000000000000000000000000000000000000;;	    rm -rf Godeps # remove the current Godeps.json so we always rebuild it
0000000000000000000000000000000000000000;;	    GOPATH="${TMP_GOPATH}:${GOPATH}:${KUBE_ROOT}/staging" godep save ${V} ./... 2>&1 | sed 's/^/  /'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Rewriting Godeps.json to remove commits that don't really exist because we haven't pushed the prereqs yet"
0000000000000000000000000000000000000000;;	    go run "${KUBE_ROOT}/staging/godeps-json-updater.go" --godeps-file="${TMP_GOPATH}/src/k8s.io/${repo}/Godeps/Godeps.json" --override-import-path="k8s.io/${repo}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # commit so that following repos do not see this repo as dirty
0000000000000000000000000000000000000000;;	    git add vendor >/dev/null
0000000000000000000000000000000000000000;;	    git commit -a -m "Updated Godeps.json" >/dev/null
0000000000000000000000000000000000000000;;	  popd >/dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# move into staging and save the dependencies for everything in order
0000000000000000000000000000000000000000;;	mkdir -p "${TMP_GOPATH}/src/k8s.io"
0000000000000000000000000000000000000000;;	for repo in $(ls ${KUBE_ROOT}/staging/src/k8s.io); do
0000000000000000000000000000000000000000;;	  # we skip metrics because it's synced to the real repo manually
0000000000000000000000000000000000000000;;	  if [ "${repo}" == "metrics" ]; then
0000000000000000000000000000000000000000;;	    continue
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::util::ensure_clean_working_dir
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cp -a "${KUBE_ROOT}/staging/src/k8s.io/${repo}" "${TMP_GOPATH}/src/k8s.io/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  pushd "${TMP_GOPATH}/src/k8s.io/${repo}" >/dev/null
0000000000000000000000000000000000000000;;	    git init >/dev/null
0000000000000000000000000000000000000000;;	    git config --local user.email "nobody@k8s.io"
0000000000000000000000000000000000000000;;	    git config --local user.name "$0"
0000000000000000000000000000000000000000;;	    git add . >/dev/null
0000000000000000000000000000000000000000;;	    git commit -q -m "Snapshot" >/dev/null
0000000000000000000000000000000000000000;;	  popd >/dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  updateGodepManifest "${repo}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [ "${FAIL_ON_DIFF}" == true ]; then
0000000000000000000000000000000000000000;;	    diff --ignore-matching-lines='^\s*\"GoVersion\":' --ignore-matching-line='^\s*\"GodepVersion\":' --ignore-matching-lines='^\s*\"Comment\"' -u "${KUBE_ROOT}/staging/src/k8s.io/${repo}/Godeps" "${TMP_GOPATH}/src/k8s.io/${repo}/Godeps/Godeps.json"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [ "${DRY_RUN}" != true ]; then
0000000000000000000000000000000000000000;;	    cp "${TMP_GOPATH}/src/k8s.io/${repo}/Godeps/Godeps.json" "${KUBE_ROOT}/staging/src/k8s.io/${repo}/Godeps"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
