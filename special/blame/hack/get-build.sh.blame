0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/common.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	declare -r KUBE_RELEASE_BUCKET_URL="https://storage.googleapis.com/kubernetes-release"
0000000000000000000000000000000000000000;;	declare -r KUBE_DEV_RELEASE_BUCKET_URL="https://storage.googleapis.com/kubernetes-release-dev"
0000000000000000000000000000000000000000;;	declare -r KUBE_TAR_NAME="kubernetes.tar.gz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	usage() {
0000000000000000000000000000000000000000;;	  echo "${0} [-v] <version number or publication>"
0000000000000000000000000000000000000000;;	  echo "  -v:  Don't get tars, just print the version number"
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	  echo '  Version number or publication is either a proper version number'
0000000000000000000000000000000000000000;;	  echo '  (e.g. "v1.0.6", "v1.2.0-alpha.1.881+376438b69c7612") or a version'
0000000000000000000000000000000000000000;;	  echo '  publication of the form <bucket>/<version> (e.g. "release/stable",'
0000000000000000000000000000000000000000;;	  echo '  "ci/latest-1").  Some common ones are:'
0000000000000000000000000000000000000000;;	  echo '    - "release/stable"'
0000000000000000000000000000000000000000;;	  echo '    - "release/latest"'
0000000000000000000000000000000000000000;;	  echo '    - "ci/latest"'
0000000000000000000000000000000000000000;;	  echo '  See the docs on getting builds for more information about version'
0000000000000000000000000000000000000000;;	  echo '  publication.'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	print_version=false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while getopts ":vh" opt; do
0000000000000000000000000000000000000000;;	  case ${opt} in
0000000000000000000000000000000000000000;;	    v)
0000000000000000000000000000000000000000;;	      print_version="true"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    h)
0000000000000000000000000000000000000000;;	      usage
0000000000000000000000000000000000000000;;	      exit 0
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    \?)
0000000000000000000000000000000000000000;;	      echo "Invalid option: -$OPTARG" >&2
0000000000000000000000000000000000000000;;	      usage
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	shift $((OPTIND-1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $# -ne 1 ]]; then
0000000000000000000000000000000000000000;;	    usage
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set_binary_version "${1}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${print_version}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "Using version at ${1}: ${KUBE_VERSION}" >&2
0000000000000000000000000000000000000000;;	  if [[ ${KUBE_VERSION} =~ ${KUBE_RELEASE_VERSION_REGEX} ]]; then
0000000000000000000000000000000000000000;;	    curl --fail -o "kubernetes-${KUBE_VERSION}.tar.gz" "${KUBE_RELEASE_BUCKET_URL}/release/${KUBE_VERSION}/${KUBE_TAR_NAME}"
0000000000000000000000000000000000000000;;	  elif [[ ${KUBE_VERSION} =~ ${KUBE_CI_VERSION_REGEX} ]]; then
0000000000000000000000000000000000000000;;	    curl --fail -o "kubernetes-${KUBE_VERSION}.tar.gz" "${KUBE_DEV_RELEASE_BUCKET_URL}/ci/${KUBE_VERSION}/${KUBE_TAR_NAME}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Version doesn't match regexp" >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
