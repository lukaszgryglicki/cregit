0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::verify_go_version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if ! which golint > /dev/null; then
0000000000000000000000000000000000000000;;	  echo 'Can not find golint, install with:'
0000000000000000000000000000000000000000;;	  echo 'go get -u github.com/golang/lint/golint'
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cd "${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	array_contains () {
0000000000000000000000000000000000000000;;	    local seeking=$1; shift # shift will iterate through the array
0000000000000000000000000000000000000000;;	    local in=1 # in holds the exit status for the function
0000000000000000000000000000000000000000;;	    for element; do
0000000000000000000000000000000000000000;;	        if [[ "$element" == "$seeking" ]]; then
0000000000000000000000000000000000000000;;	            in=0 # set in to 0 since we found it
0000000000000000000000000000000000000000;;	            break
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    return $in
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check that the file is in alphabetical order
0000000000000000000000000000000000000000;;	linted_file="${KUBE_ROOT}/hack/.linted_packages"
0000000000000000000000000000000000000000;;	if ! diff -u "${linted_file}" <(LC_ALL=C sort "${linted_file}"); then
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;			echo "hack/.linted_packages is not in alphabetical order. Please sort it:"
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;			echo "  LC_ALL=C sort -o hack/.linted_packages hack/.linted_packages"
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;		} >&2
0000000000000000000000000000000000000000;;		false
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export IFS=$'\n'
0000000000000000000000000000000000000000;;	# NOTE: when "go list -e ./..." is run within GOPATH, it turns the k8s.io/kubernetes
0000000000000000000000000000000000000000;;	# as the prefix, however if we run it outside it returns the full path of the file
0000000000000000000000000000000000000000;;	# with a leading underscore. We'll need to support both scenarios for all_packages.
0000000000000000000000000000000000000000;;	all_packages=(
0000000000000000000000000000000000000000;;		$(go list -e ./... | egrep -v "/(third_party|vendor|staging/src/k8s.io/client-go/pkg|generated|clientset_generated)" | sed -e 's|^k8s.io/kubernetes/||' -e "s|^_${KUBE_ROOT}/\?||")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	linted_packages=(
0000000000000000000000000000000000000000;;		$(cat $linted_file)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	unset IFS
0000000000000000000000000000000000000000;;	linted=()
0000000000000000000000000000000000000000;;	errors=()
0000000000000000000000000000000000000000;;	for p in "${all_packages[@]}"; do
0000000000000000000000000000000000000000;;		# Run golint on package/*.go file explicitly to validate all go files
0000000000000000000000000000000000000000;;		# and not just the ones for the current platform.
0000000000000000000000000000000000000000;;		failedLint=$(golint "$p"/*.go)
0000000000000000000000000000000000000000;;		if [ "$failedLint" ]; then
0000000000000000000000000000000000000000;;			if array_contains "$p" "${linted_packages[@]}"; then
0000000000000000000000000000000000000000;;				errors+=( "$failedLint" )
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		else
0000000000000000000000000000000000000000;;			array_contains "$p" "${linted_packages[@]}" || linted+=( "$p" )
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check that all linted_packages actually still exist
0000000000000000000000000000000000000000;;	gone=()
0000000000000000000000000000000000000000;;	for p in "${linted_packages[@]}"; do
0000000000000000000000000000000000000000;;		array_contains "$p" "${all_packages[@]}" || gone+=( "$p" )
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check to be sure all the packages that should pass lint are.
0000000000000000000000000000000000000000;;	if [ ${#errors[@]} -eq 0 ]; then
0000000000000000000000000000000000000000;;		echo 'Congratulations!  All Go source files have been linted.'
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			echo "Errors from golint:"
0000000000000000000000000000000000000000;;			for err in "${errors[@]}"; do
0000000000000000000000000000000000000000;;				echo "$err"
0000000000000000000000000000000000000000;;			done
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;			echo 'Please fix the above errors. You can test via "golint" and commit the result.'
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;		} >&2
0000000000000000000000000000000000000000;;		false
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# check to make sure all packages that pass lint are in the linted file.
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	if [ ${#linted[@]} -eq 0 -a ${#gone[@]} -eq 0 ]; then
0000000000000000000000000000000000000000;;		echo 'Success! All packages that should pass lint are listed in the linted file.'
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			if [ ${#gone[@]} -gt 0 ]; then
0000000000000000000000000000000000000000;;				echo "Some packages in hack/.linted_packages do not exist anymore. Please remove them"
0000000000000000000000000000000000000000;;				echo "from hack/.linted_packages:"
0000000000000000000000000000000000000000;;				echo
0000000000000000000000000000000000000000;;				for p in "${gone[@]}"; do
0000000000000000000000000000000000000000;;					echo "  $p"
0000000000000000000000000000000000000000;;				done
0000000000000000000000000000000000000000;;				echo
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;			if [ ${#linted[@]} -gt 0 ]; then
0000000000000000000000000000000000000000;;				echo "Some packages passed golint but are not listed in hack/.linted_packages."
0000000000000000000000000000000000000000;;				echo "Please add them in alphabetical order:"
0000000000000000000000000000000000000000;;				echo
0000000000000000000000000000000000000000;;				for p in "${linted[@]}"; do
0000000000000000000000000000000000000000;;					echo "  echo $p >> hack/.linted_packages"
0000000000000000000000000000000000000000;;				done
0000000000000000000000000000000000000000;;				echo "  LC_ALL=C sort -o hack/.linted_packages hack/.linted_packages"
0000000000000000000000000000000000000000;;				echo
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;			echo 'You can test via this script and commit the result.'
0000000000000000000000000000000000000000;;			echo
0000000000000000000000000000000000000000;;		} >&2
0000000000000000000000000000000000000000;;		false
0000000000000000000000000000000000000000;;	fi
