0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# locate all API groups by their packages and versions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	prefix="${KUBE_ROOT%"k8s.io/kubernetes"}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	register_files=()
0000000000000000000000000000000000000000;;	while IFS= read -d $'\0' -r file ; do
0000000000000000000000000000000000000000;;		register_files+=("${file}")
0000000000000000000000000000000000000000;;	done < <(find "${KUBE_ROOT}"/pkg/apis -name register.go -print0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# every register file should contain a GroupName.  Gather the different representations.
0000000000000000000000000000000000000000;;	# 1. group directory name for go2idl client gen
0000000000000000000000000000000000000000;;	# 2. external group versions for init.sh all APIs list
0000000000000000000000000000000000000000;;	# 3. install packages for inclusion in import_known_versions files
0000000000000000000000000000000000000000;;	group_dirnames=()
0000000000000000000000000000000000000000;;	external_group_versions=()
0000000000000000000000000000000000000000;;	expected_install_packages=()
0000000000000000000000000000000000000000;;	for register_file in "${register_files[@]}"; do
0000000000000000000000000000000000000000;;		package="${register_file#"${prefix}"}"
0000000000000000000000000000000000000000;;		package="${package%"/register.go"}"
0000000000000000000000000000000000000000;;		group_dirname="${package#"k8s.io/kubernetes/pkg/apis/"}"
0000000000000000000000000000000000000000;;		group_dirname="${group_dirname%%"/*"}"
0000000000000000000000000000000000000000;;		group_name=""
0000000000000000000000000000000000000000;;		if grep -q 'GroupName = "' "${register_file}"; then
0000000000000000000000000000000000000000;;			group_name=$(grep -q 'GroupName = "' "${register_file}" | cut -d\" -f2 -)
0000000000000000000000000000000000000000;;		else
0000000000000000000000000000000000000000;;			echo "${register_file} is missing \"const GroupName =\""
0000000000000000000000000000000000000000;;			exit 1
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# does the dirname doesn't have a slash, then it's the internal package.
0000000000000000000000000000000000000000;;		# if does have one, then its an external
0000000000000000000000000000000000000000;;		if [[ "${group_dirname#*'/'}" == "${group_dirname}" ]]; then
0000000000000000000000000000000000000000;;			group_dirnames+=("${group_dirname}")
0000000000000000000000000000000000000000;;			expected_install_packages+=("${package}")
0000000000000000000000000000000000000000;;		else
0000000000000000000000000000000000000000;;			version=$(echo "${group_dirname}" | cut -d/ -f2 -)
0000000000000000000000000000000000000000;;			external_group_versions+=("${group_name}/${version}")
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# check to make sure that client gen is getting
0000000000000000000000000000000000000000;;	# groups_without_codegen is the list of group we EXPECT to not have the client generated for
0000000000000000000000000000000000000000;;	# them.  This happens for types that aren't served from the API server
0000000000000000000000000000000000000000;;	groups_without_codegen=(
0000000000000000000000000000000000000000;;		"abac"
0000000000000000000000000000000000000000;;		"componentconfig"
0000000000000000000000000000000000000000;;		"imagepolicy"
0000000000000000000000000000000000000000;;		"admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	client_gen_file="${KUBE_ROOT}/cmd/libs/go2idl/client-gen/main.go"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for group_dirname in "${group_dirnames[@]}"; do
0000000000000000000000000000000000000000;;		if ! grep -q "${group_dirname}/" "${client_gen_file}" ; then
0000000000000000000000000000000000000000;;			found=0
0000000000000000000000000000000000000000;;			for group_without_codegen in "${groups_without_codegen[@]}"; do
0000000000000000000000000000000000000000;;				if [[ "${group_without_codegen}" == "${group_dirname}" ]]; then
0000000000000000000000000000000000000000;;					found=1
0000000000000000000000000000000000000000;;				fi
0000000000000000000000000000000000000000;;			done
0000000000000000000000000000000000000000;;			if [ "${found}" -ne "1" ] ; then
0000000000000000000000000000000000000000;;				echo "need to add ${group_dirname}/ to ${client_gen_file}"
0000000000000000000000000000000000000000;;				exit 1
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# import_known_versions checks to be sure we'll get installed
0000000000000000000000000000000000000000;;	# groups_without_codegen is the list of group we EXPECT to not have the client generated for
0000000000000000000000000000000000000000;;	# them.  This happens for types that aren't served from the API server
0000000000000000000000000000000000000000;;	packages_without_install=(
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/abac"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	known_version_files=(
0000000000000000000000000000000000000000;;		"pkg/master/import_known_versions.go"
0000000000000000000000000000000000000000;;		"pkg/client/clientset_generated/internal_clientset/import_known_versions.go"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	for expected_install_package in "${expected_install_packages[@]}"; do
0000000000000000000000000000000000000000;;		found=0
0000000000000000000000000000000000000000;;		for package_without_install in "${packages_without_install[@]}"; do
0000000000000000000000000000000000000000;;			if [ "${package_without_install}" == "${expected_install_package}" ]; then
0000000000000000000000000000000000000000;;				found=1
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		done
0000000000000000000000000000000000000000;;		if [[ "${found}" -eq "1" ]] ; then
0000000000000000000000000000000000000000;;			continue
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for known_version_file in "${known_version_files[@]}"; do
0000000000000000000000000000000000000000;;			if ! grep -q "${expected_install_package}/install" ${known_version_files} ; then
0000000000000000000000000000000000000000;;				echo "missing ${expected_install_package}/install from ${known_version_files}"
0000000000000000000000000000000000000000;;				exit 1
0000000000000000000000000000000000000000;;			fi
0000000000000000000000000000000000000000;;		done
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# check all groupversions to make sure they're in the init.sh file.  This isn't perfect, but its slightly
0000000000000000000000000000000000000000;;	# better than nothing
0000000000000000000000000000000000000000;;	for external_group_version in "${external_group_versions[@]}"; do
0000000000000000000000000000000000000000;;		if ! grep -q "${external_group_version}" "${KUBE_ROOT}/hack/lib/init.sh" ; then
0000000000000000000000000000000000000000;;			echo "missing ${external_group_version} from hack/lib/init.sh:/KUBE_AVAILABLE_GROUP_VERSIONS or hack/init.sh:/KUBE_NONSERVER_GROUP_VERSIONS"
0000000000000000000000000000000000000000;;			exit 1
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
