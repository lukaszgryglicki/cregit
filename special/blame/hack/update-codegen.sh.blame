0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::setup_env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	BUILD_TARGETS=(
0000000000000000000000000000000000000000;;	  cmd/libs/go2idl/client-gen
0000000000000000000000000000000000000000;;	  cmd/libs/go2idl/lister-gen
0000000000000000000000000000000000000000;;	  cmd/libs/go2idl/informer-gen
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	make -C "${KUBE_ROOT}" WHAT="${BUILD_TARGETS[*]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	clientgen=$(kube::util::find-binary "client-gen")
0000000000000000000000000000000000000000;;	listergen=$(kube::util::find-binary "lister-gen")
0000000000000000000000000000000000000000;;	informergen=$(kube::util::find-binary "informer-gen")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Please do not add any logic to this shell script. Add logic to the go code
0000000000000000000000000000000000000000;;	# that generates the set-gen program.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GROUP_VERSIONS=(${KUBE_AVAILABLE_GROUP_VERSIONS})
0000000000000000000000000000000000000000;;	GV_DIRS=()
0000000000000000000000000000000000000000;;	for gv in "${GROUP_VERSIONS[@]}"; do
0000000000000000000000000000000000000000;;		# add items, but strip off any leading apis/ you find to match command expectations
0000000000000000000000000000000000000000;;		api_dir=$(kube::util::group-version-to-pkg-path "${gv}")
0000000000000000000000000000000000000000;;		nopkg_dir=${api_dir#pkg/}
0000000000000000000000000000000000000000;;		nopkg_dir=${nopkg_dir#vendor/k8s.io/api/}
0000000000000000000000000000000000000000;;		pkg_dir=${nopkg_dir#apis/}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# skip groups that aren't being served, clients for these don't matter
0000000000000000000000000000000000000000;;	    if [[ " ${KUBE_NONSERVER_GROUP_VERSIONS} " == *" ${gv} "* ]]; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GV_DIRS+=("${pkg_dir}")
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	# delimit by commas for the command
0000000000000000000000000000000000000000;;	GV_DIRS_CSV=$(IFS=',';echo "${GV_DIRS[*]// /,}";IFS=$)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This can be called with one flag, --verify-only, so it works for both the
0000000000000000000000000000000000000000;;	# update- and verify- scripts.
0000000000000000000000000000000000000000;;	${clientgen} "$@"
0000000000000000000000000000000000000000;;	${clientgen} -t "$@"
0000000000000000000000000000000000000000;;	${clientgen} --clientset-name="clientset" --input-base="k8s.io/kubernetes/vendor/k8s.io/api" --input="${GV_DIRS_CSV}" "$@"
0000000000000000000000000000000000000000;;	# Clientgen for federation clientset.
0000000000000000000000000000000000000000;;	${clientgen} --clientset-name=federation_internalclientset --clientset-path=k8s.io/kubernetes/federation/client/clientset_generated --input="../../federation/apis/federation/","api/","extensions/","batch/","autoscaling/" --included-types-overrides="api/Service,api/Namespace,extensions/ReplicaSet,api/Secret,extensions/Ingress,extensions/Deployment,extensions/DaemonSet,api/ConfigMap,api/Event,batch/Job,autoscaling/HorizontalPodAutoscaler"   "$@"
0000000000000000000000000000000000000000;;	${clientgen} --clientset-name=federation_clientset --clientset-path=k8s.io/kubernetes/federation/client/clientset_generated --input-base="k8s.io/kubernetes/vendor/k8s.io/api" --input="../../../federation/apis/federation/v1beta1","core/v1","extensions/v1beta1","batch/v1","autoscaling/v1" --included-types-overrides="core/v1/Service,core/v1/Namespace,extensions/v1beta1/ReplicaSet,core/v1/Secret,extensions/v1beta1/Ingress,extensions/v1beta1/Deployment,extensions/v1beta1/DaemonSet,core/v1/ConfigMap,core/v1/Event,batch/v1/Job,autoscaling/v1/HorizontalPodAutoscaler"   "$@"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	listergen_kubernetes_apis=(
0000000000000000000000000000000000000000;;	pkg/api
0000000000000000000000000000000000000000;;	$(
0000000000000000000000000000000000000000;;	  cd ${KUBE_ROOT}
0000000000000000000000000000000000000000;;	  # because client-gen doesn't do policy/v1alpha1, we have to skip it too
0000000000000000000000000000000000000000;;	  find pkg/apis -name types.go | xargs -n1 dirname | sort | grep -v pkg.apis.policy.v1alpha1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	listergen_kubernetes_apis=(${listergen_kubernetes_apis[@]/#/k8s.io/kubernetes/})
0000000000000000000000000000000000000000;;	listergen_staging_apis=(
0000000000000000000000000000000000000000;;	$(
0000000000000000000000000000000000000000;;	  cd ${KUBE_ROOT}/staging/src
0000000000000000000000000000000000000000;;	  # because client-gen doesn't do policy/v1alpha1, we have to skip it too
0000000000000000000000000000000000000000;;	  find k8s.io/api -name types.go | xargs -n1 dirname | sort | grep -v pkg.apis.policy.v1alpha1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	LISTERGEN_APIS=$(IFS=,; echo "${listergen_kubernetes_apis[*]}")
0000000000000000000000000000000000000000;;	LISTERGEN_APIS+=","
0000000000000000000000000000000000000000;;	LISTERGEN_APIS+=$(IFS=,; echo "${listergen_staging_apis[*]}")
0000000000000000000000000000000000000000;;	${listergen} --input-dirs "${LISTERGEN_APIS}" "$@"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	informergen_kubernetes_apis=(
0000000000000000000000000000000000000000;;	pkg/api
0000000000000000000000000000000000000000;;	$(
0000000000000000000000000000000000000000;;	  cd ${KUBE_ROOT}
0000000000000000000000000000000000000000;;	  # because client-gen doesn't do policy/v1alpha1, we have to skip it too
0000000000000000000000000000000000000000;;	  find pkg/apis -name types.go | xargs -n1 dirname | sort | grep -v pkg.apis.policy.v1alpha1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	informergen_kubernetes_apis=(${informergen_kubernetes_apis[@]/#/k8s.io/kubernetes/})
0000000000000000000000000000000000000000;;	informergen_staging_apis=(
0000000000000000000000000000000000000000;;	$(
0000000000000000000000000000000000000000;;	  cd ${KUBE_ROOT}/staging/src
0000000000000000000000000000000000000000;;	  # because client-gen doesn't do policy/v1alpha1, we have to skip it too
0000000000000000000000000000000000000000;;	  find k8s.io/api -name types.go | xargs -n1 dirname | sort | grep -v pkg.apis.policy.v1alpha1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	INFORMERGEN_APIS=$(IFS=,; echo "${informergen_kubernetes_apis[*]}")
0000000000000000000000000000000000000000;;	INFORMERGEN_APIS+=","
0000000000000000000000000000000000000000;;	INFORMERGEN_APIS+=$(IFS=,; echo "${informergen_staging_apis[*]}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	${informergen} \
0000000000000000000000000000000000000000;;	  --input-dirs "${INFORMERGEN_APIS}" \
0000000000000000000000000000000000000000;;	  --versioned-clientset-package k8s.io/kubernetes/pkg/client/clientset_generated/clientset \
0000000000000000000000000000000000000000;;	  --internal-clientset-package k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset \
0000000000000000000000000000000000000000;;	  --listers-package k8s.io/kubernetes/pkg/client/listers \
0000000000000000000000000000000000000000;;	  "$@"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# You may add additional calls of code generators like set-gen above.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# call generation on sub-project for now
0000000000000000000000000000000000000000;;	vendor/k8s.io/kube-aggregator/hack/update-codegen.sh
0000000000000000000000000000000000000000;;	vendor/k8s.io/sample-apiserver/hack/update-codegen.sh
0000000000000000000000000000000000000000;;	vendor/k8s.io/apiextensions-apiserver/hack/update-codegen.sh
0000000000000000000000000000000000000000;;	vendor/k8s.io/metrics/hack/update-codegen.sh
