0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# As of go 1.6, the vendor experiment is enabled by default.
0000000000000000000000000000000000000000;;	export GO15VENDOREXPERIMENT=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### HACK ####
0000000000000000000000000000000000000000;;	# Sometimes godep just can't handle things. This lets use manually put
0000000000000000000000000000000000000000;;	# some deps in place first, so godep won't fall over.
0000000000000000000000000000000000000000;;	preload-dep() {
0000000000000000000000000000000000000000;;	  org="$1"
0000000000000000000000000000000000000000;;	  project="$2"
0000000000000000000000000000000000000000;;	  sha="$3"
0000000000000000000000000000000000000000;;	  # project_dir ($4) is optional, if unset we will generate it
0000000000000000000000000000000000000000;;	  if [[ -z ${4:-} ]]; then
0000000000000000000000000000000000000000;;	    project_dir="${GOPATH}/src/${org}/${project}.git"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    project_dir="${4}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "**HACK** preloading dep for ${org} ${project} at ${sha} into ${project_dir}"
0000000000000000000000000000000000000000;;	  git clone "https://${org}/${project}" "${project_dir}" > /dev/null 2>&1
0000000000000000000000000000000000000000;;	  pushd "${project_dir}" > /dev/null
0000000000000000000000000000000000000000;;	    git checkout "${sha}"
0000000000000000000000000000000000000000;;	  popd > /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly branch=${1:-${KUBE_VERIFY_GIT_BRANCH:-master}}
0000000000000000000000000000000000000000;;	if ! [[ ${KUBE_FORCE_VERIFY_CHECKS:-} =~ ^[yY]$ ]] && \
0000000000000000000000000000000000000000;;	  ! kube::util::has_changes_against_upstream_branch "${branch}" 'Godeps/' && \
0000000000000000000000000000000000000000;;	  ! kube::util::has_changes_against_upstream_branch "${branch}" 'vendor/' && \
0000000000000000000000000000000000000000;;	  ! kube::util::has_changes_against_upstream_branch "${branch}" 'hack/'; then
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z ${TMP_GOPATH:-} ]]; then
0000000000000000000000000000000000000000;;	  # Create a nice clean place to put our new godeps
0000000000000000000000000000000000000000;;	  _tmpdir="$(mktemp -d -t gopath.XXXXXX)"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  # reuse what we might have saved previously
0000000000000000000000000000000000000000;;	  _tmpdir="${TMP_GOPATH}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z ${KEEP_TMP:-} ]]; then
0000000000000000000000000000000000000000;;	    KEEP_TMP=false
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	  if [ "${KEEP_TMP}" == "true" ]; then
0000000000000000000000000000000000000000;;	    echo "Leaving ${_tmpdir} for you to examine or copy. Please delete it manually when finished. (rm -rf ${_tmpdir})"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Removing ${_tmpdir}"
0000000000000000000000000000000000000000;;	    rm -rf "${_tmpdir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  export GODEP=""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copy the contents of the kube directory into the nice clean place
0000000000000000000000000000000000000000;;	_kubetmp="${_tmpdir}/src/k8s.io"
0000000000000000000000000000000000000000;;	mkdir -p "${_kubetmp}"
0000000000000000000000000000000000000000;;	# should create ${_kubectmp}/kubernetes
0000000000000000000000000000000000000000;;	git archive --format=tar --prefix=kubernetes/ $(git write-tree) | (cd "${_kubetmp}" && tar xf -)
0000000000000000000000000000000000000000;;	_kubetmp="${_kubetmp}/kubernetes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Do all our work in the new GOPATH
0000000000000000000000000000000000000000;;	export GOPATH="${_tmpdir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	pushd "${_kubetmp}" 2>&1 > /dev/null
0000000000000000000000000000000000000000;;	  # Restore the Godeps into our temp directory
0000000000000000000000000000000000000000;;	  hack/godep-restore.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Destroy deps in the copy of the kube tree
0000000000000000000000000000000000000000;;	  rm -rf ./Godeps ./vendor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # For some reason the kube tree needs to be a git repo for the godep tool to
0000000000000000000000000000000000000000;;	  # run. Doesn't make sense.
0000000000000000000000000000000000000000;;	  git init > /dev/null 2>&1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Recreate the Godeps using the nice clean set we just downloaded
0000000000000000000000000000000000000000;;	  hack/godep-save.sh
0000000000000000000000000000000000000000;;	popd 2>&1 > /dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ret=0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	pushd "${KUBE_ROOT}" 2>&1 > /dev/null
0000000000000000000000000000000000000000;;	  # Test for diffs
0000000000000000000000000000000000000000;;	  if ! _out="$(diff -Naupr --ignore-matching-lines='^\s*\"GoVersion\":' --ignore-matching-line='^\s*\"GodepVersion\":' --ignore-matching-lines='^\s*\"Comment\":' Godeps/Godeps.json ${_kubetmp}/Godeps/Godeps.json)"; then
0000000000000000000000000000000000000000;;	    echo "Your Godeps.json is different:"
0000000000000000000000000000000000000000;;	    echo "${_out}"
0000000000000000000000000000000000000000;;	    echo "Godeps Verify failed."
0000000000000000000000000000000000000000;;	    echo "${_out}" > godepdiff.patch
0000000000000000000000000000000000000000;;	    echo "If you're seeing this locally, run the below command to fix your Godeps.json:"
0000000000000000000000000000000000000000;;	    echo "patch -p0 < godepdiff.patch"
0000000000000000000000000000000000000000;;	    echo "(The above output can be saved as godepdiff.patch if you're not running this locally)"
0000000000000000000000000000000000000000;;	    echo "(The patch file should also be exported as a build artifact if run through CI)"
0000000000000000000000000000000000000000;;	    KEEP_TMP=true
0000000000000000000000000000000000000000;;	    if [[ -f godepdiff.patch && -d "${ARTIFACTS_DIR:-}" ]]; then
0000000000000000000000000000000000000000;;	      echo "Copying patch to artifacts.."
0000000000000000000000000000000000000000;;	      cp godepdiff.patch "${ARTIFACTS_DIR:-}/"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    ret=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if ! _out="$(diff -Naupr -x "BUILD" -x "AUTHORS*" -x "CONTRIBUTORS*" vendor ${_kubetmp}/vendor)"; then
0000000000000000000000000000000000000000;;	    echo "Your vendored results are different:"
0000000000000000000000000000000000000000;;	    echo "${_out}"
0000000000000000000000000000000000000000;;	    echo "Godeps Verify failed."
0000000000000000000000000000000000000000;;	    echo "${_out}" > vendordiff.patch
0000000000000000000000000000000000000000;;	    echo "If you're seeing this locally, run the below command to fix your directories:"
0000000000000000000000000000000000000000;;	    echo "patch -p0 < vendordiff.patch"
0000000000000000000000000000000000000000;;	    echo "(The above output can be saved as godepdiff.patch if you're not running this locally)"
0000000000000000000000000000000000000000;;	    echo "(The patch file should also be exported as a build artifact if run through CI)"
0000000000000000000000000000000000000000;;	    KEEP_TMP=true
0000000000000000000000000000000000000000;;	    if [[ -f vendordiff.patch && -d "${ARTIFACTS_DIR:-}" ]]; then
0000000000000000000000000000000000000000;;	      echo "Copying patch to artifacts.."
0000000000000000000000000000000000000000;;	      cp vendordiff.patch "${ARTIFACTS_DIR:-}/"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    ret=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	popd 2>&1 > /dev/null
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ ${ret} > 0 ]]; then
0000000000000000000000000000000000000000;;	  exit ${ret}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Godeps Verified."
0000000000000000000000000000000000000000;;	# ex: ts=2 sw=2 et filetype=sh
