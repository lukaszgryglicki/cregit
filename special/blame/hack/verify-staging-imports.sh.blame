0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::setup_env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function print_forbidden_imports () {
0000000000000000000000000000000000000000;;	    set -o errexit # this was unset by ||
0000000000000000000000000000000000000000;;	    local PACKAGE="$1"
0000000000000000000000000000000000000000;;	    shift
0000000000000000000000000000000000000000;;	    local RE=""
0000000000000000000000000000000000000000;;	    local SEP=""
0000000000000000000000000000000000000000;;	    for CLAUSE in "$@"; do
0000000000000000000000000000000000000000;;	        RE+="${SEP}${CLAUSE}"
0000000000000000000000000000000000000000;;	        SEP='\|'
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    local FORBIDDEN=$(
0000000000000000000000000000000000000000;;	        go list -f $'{{with $package := .ImportPath}}{{range $.Imports}}{{$package}} imports {{.}}\n{{end}}{{end}}' ./vendor/k8s.io/${PACKAGE}/... |
0000000000000000000000000000000000000000;;	        sed 's|^k8s.io/kubernetes/vendor/||;s| k8s.io/kubernetes/vendor/| |' |
0000000000000000000000000000000000000000;;	        grep -v " k8s.io/${PACKAGE}" |
0000000000000000000000000000000000000000;;	        grep " k8s.io/" |
0000000000000000000000000000000000000000;;	        grep -v -e "imports \(${RE}\)"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	    if [ -n "${FORBIDDEN}" ]; then
0000000000000000000000000000000000000000;;	        echo "${PACKAGE} has a forbidden dependency:"
0000000000000000000000000000000000000000;;	        echo
0000000000000000000000000000000000000000;;	        echo "${FORBIDDEN}" | sed 's/^/  /'
0000000000000000000000000000000000000000;;	        echo
0000000000000000000000000000000000000000;;	        return 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    local TEST_FORBIDDEN=$(
0000000000000000000000000000000000000000;;	        go list -f $'{{with $package := .ImportPath}}{{range $.TestImports}}{{$package}} imports {{.}}\n{{end}}{{end}}' ./vendor/k8s.io/${PACKAGE}/... |
0000000000000000000000000000000000000000;;	        sed 's|^k8s.io/kubernetes/vendor/||;s| k8s.io/kubernetes/vendor/| |' |
0000000000000000000000000000000000000000;;	        grep -v " k8s.io/${PACKAGE}" |
0000000000000000000000000000000000000000;;	        grep " k8s.io/" |
0000000000000000000000000000000000000000;;	        grep -v -e "imports \(${RE}\)"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	    if [ -n "${TEST_FORBIDDEN}" ]; then
0000000000000000000000000000000000000000;;	        echo "${PACKAGE} has a forbidden dependency in test code:"
0000000000000000000000000000000000000000;;	        echo
0000000000000000000000000000000000000000;;	        echo "${TEST_FORBIDDEN}" | sed 's/^/  /'
0000000000000000000000000000000000000000;;	        echo
0000000000000000000000000000000000000000;;	        return 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	RC=0
0000000000000000000000000000000000000000;;	print_forbidden_imports apimachinery || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports api k8s.io/apimachinery || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports client-go k8s.io/apimachinery k8s.io/api || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports apiserver k8s.io/apimachinery k8s.io/client-go k8s.io/api || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports kube-aggregator k8s.io/apimachinery k8s.io/client-go k8s.io/apiserver k8s.io/api || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports sample-apiserver k8s.io/apimachinery k8s.io/client-go k8s.io/apiserver k8s.io/api || RC=1
0000000000000000000000000000000000000000;;	print_forbidden_imports apiextensions-apiserver k8s.io/apimachinery k8s.io/client-go k8s.io/apiserver k8s.io/api || RC=1
0000000000000000000000000000000000000000;;	if [ ${RC} != 0 ]; then
0000000000000000000000000000000000000000;;	    exit ${RC}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if grep -rq '// import "k8s.io/kubernetes/' 'staging/'; then
0000000000000000000000000000000000000000;;		echo 'file has "// import "k8s.io/kubernetes/"'
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for EXAMPLE in vendor/k8s.io/client-go/examples/{in-cluster-client-configuration,out-of-cluster-client-configuration} vendor/k8s.io/apiextensions-apiserver/examples ; do
0000000000000000000000000000000000000000;;		test -d "${EXAMPLE}" # make sure example is still there
0000000000000000000000000000000000000000;;		if go list -f '{{ join .Deps "\n" }}' "./${EXAMPLE}/..." | sort | uniq | grep -q k8s.io/client-go/plugin; then
0000000000000000000000000000000000000000;;			echo "${EXAMPLE} imports client-go plugins by default, but shouldn't."
0000000000000000000000000000000000000000;;			exit 1
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	exit 0
