0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/common.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Find the ginkgo binary build as part of the release.
0000000000000000000000000000000000000000;;	ginkgo=$(kube::util::find-binary "ginkgo")
0000000000000000000000000000000000000000;;	e2e_test=$(kube::util::find-binary "e2e.test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --- Setup some env vars.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GINKGO_PARALLEL=${GINKGO_PARALLEL:-n} # set to 'y' to run tests in parallel
0000000000000000000000000000000000000000;;	CLOUD_CONFIG=${CLOUD_CONFIG:-""}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If 'y', Ginkgo's reporter will not print out in color when tests are run
0000000000000000000000000000000000000000;;	# in parallel
0000000000000000000000000000000000000000;;	GINKGO_NO_COLOR=${GINKGO_NO_COLOR:-n}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If 'y', will rerun failed tests once to give them a second chance.
0000000000000000000000000000000000000000;;	GINKGO_TOLERATE_FLAKES=${GINKGO_TOLERATE_FLAKES:-n}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The number of tests that can run in parallel depends on what tests
0000000000000000000000000000000000000000;;	# are running and on the size of the cluster. Too many, and tests will
0000000000000000000000000000000000000000;;	# fail due to resource contention. 25 is a reasonable default for a
0000000000000000000000000000000000000000;;	# 3-node (n1-standard-1) cluster running all fast, non-disruptive tests.
0000000000000000000000000000000000000000;;	GINKGO_PARALLELISM=${GINKGO_PARALLELISM:-25}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	: ${KUBECTL:="${KUBE_ROOT}/cluster/kubectl.sh"}
0000000000000000000000000000000000000000;;	: ${KUBE_CONFIG_FILE:="config-test.sh"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export KUBECTL KUBE_CONFIG_FILE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# ---- Do cloud-provider-specific setup
0000000000000000000000000000000000000000;;	if [[ -n "${KUBERNETES_CONFORMANCE_TEST:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Conformance test: not doing test setup."
0000000000000000000000000000000000000000;;	    KUBERNETES_PROVIDER=${KUBERNETES_CONFORMANCE_PROVIDER:-"skeleton"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    detect-master-from-kubeconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    auth_config=(
0000000000000000000000000000000000000000;;	      "--kubeconfig=${KUBECONFIG}"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    echo "Setting up for KUBERNETES_PROVIDER=\"${KUBERNETES_PROVIDER}\"."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    prepare-e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    detect-master >/dev/null
0000000000000000000000000000000000000000;;	    KUBE_MASTER_URL="${KUBE_MASTER_URL:-https://${KUBE_MASTER_IP:-}}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    auth_config=(
0000000000000000000000000000000000000000;;	      "--kubeconfig=${KUBECONFIG:-$DEFAULT_KUBECONFIG}"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "${NODE_INSTANCE_PREFIX:-}" ]]; then
0000000000000000000000000000000000000000;;	  NODE_INSTANCE_GROUP="${NODE_INSTANCE_PREFIX}-group"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  NODE_INSTANCE_GROUP=""
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_PROVIDER}" == "gce" ]]; then
0000000000000000000000000000000000000000;;	  set_num_migs
0000000000000000000000000000000000000000;;	  NODE_INSTANCE_GROUP=""
0000000000000000000000000000000000000000;;	  for ((i=1; i<=${NUM_MIGS}; i++)); do
0000000000000000000000000000000000000000;;	    if [[ $i == ${NUM_MIGS} ]]; then
0000000000000000000000000000000000000000;;	      # We are assigning the same mig names as create-nodes function from cluster/gce/util.sh.
0000000000000000000000000000000000000000;;	      NODE_INSTANCE_GROUP="${NODE_INSTANCE_GROUP}${NODE_INSTANCE_PREFIX}-group"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      NODE_INSTANCE_GROUP="${NODE_INSTANCE_GROUP}${NODE_INSTANCE_PREFIX}-group-${i},"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_PROVIDER}" == "gke" ]]; then
0000000000000000000000000000000000000000;;	  detect-node-instance-groups
0000000000000000000000000000000000000000;;	  NODE_INSTANCE_GROUP=$(kube::util::join , "${NODE_INSTANCE_GROUPS[@]}")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_PROVIDER}" == "azure" ]]; then
0000000000000000000000000000000000000000;;	    if [[ ${CLOUD_CONFIG} == "" ]]; then
0000000000000000000000000000000000000000;;	        echo "Missing azure cloud config"
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ginkgo_args=()
0000000000000000000000000000000000000000;;	if [[ -n "${CONFORMANCE_TEST_SKIP_REGEX:-}" ]]; then
0000000000000000000000000000000000000000;;	  ginkgo_args+=("--skip=${CONFORMANCE_TEST_SKIP_REGEX}")
0000000000000000000000000000000000000000;;	  ginkgo_args+=("--seed=1436380640")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	if [[ -n "${GINKGO_PARALLEL_NODES:-}" ]]; then
0000000000000000000000000000000000000000;;	  ginkgo_args+=("--nodes=${GINKGO_PARALLEL_NODES}")
0000000000000000000000000000000000000000;;	elif [[ ${GINKGO_PARALLEL} =~ ^[yY]$ ]]; then
0000000000000000000000000000000000000000;;	  ginkgo_args+=("--nodes=25")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${GINKGO_UNTIL_IT_FAILS:-}" == true ]]; then
0000000000000000000000000000000000000000;;	ginkgo_args+=("--untilItFails=true")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	FLAKE_ATTEMPTS=1
0000000000000000000000000000000000000000;;	if [[ "${GINKGO_TOLERATE_FLAKES}" == "y" ]]; then
0000000000000000000000000000000000000000;;	  FLAKE_ATTEMPTS=2
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${GINKGO_NO_COLOR}" == "y" ]]; then
0000000000000000000000000000000000000000;;	  ginkgo_args+=("--noColor")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The --host setting is used only when providing --auth_config
0000000000000000000000000000000000000000;;	# If --kubeconfig is used, the host to use is retrieved from the .kubeconfig
0000000000000000000000000000000000000000;;	# file and the one provided with --host is ignored.
0000000000000000000000000000000000000000;;	# Add path for things like running kubectl binary.
0000000000000000000000000000000000000000;;	export PATH=$(dirname "${e2e_test}"):"${PATH}"
0000000000000000000000000000000000000000;;	"${ginkgo}" "${ginkgo_args[@]:+${ginkgo_args[@]}}" "${e2e_test}" -- \
0000000000000000000000000000000000000000;;	  "${auth_config[@]:+${auth_config[@]}}" \
0000000000000000000000000000000000000000;;	  --ginkgo.flakeAttempts="${FLAKE_ATTEMPTS}" \
0000000000000000000000000000000000000000;;	  --host="${KUBE_MASTER_URL}" \
0000000000000000000000000000000000000000;;	  --provider="${KUBERNETES_PROVIDER}" \
0000000000000000000000000000000000000000;;	  --gce-project="${PROJECT:-}" \
0000000000000000000000000000000000000000;;	  --gce-zone="${ZONE:-}" \
0000000000000000000000000000000000000000;;	  --gce-multizone="${MULTIZONE:-false}" \
0000000000000000000000000000000000000000;;	  --gke-cluster="${CLUSTER_NAME:-}" \
0000000000000000000000000000000000000000;;	  --kube-master="${KUBE_MASTER:-}" \
0000000000000000000000000000000000000000;;	  --cluster-tag="${CLUSTER_ID:-}" \
0000000000000000000000000000000000000000;;	  --cloud-config-file="${CLOUD_CONFIG:-}" \
0000000000000000000000000000000000000000;;	  --repo-root="${KUBE_ROOT}" \
0000000000000000000000000000000000000000;;	  --node-instance-group="${NODE_INSTANCE_GROUP:-}" \
0000000000000000000000000000000000000000;;	  --prefix="${KUBE_GCE_INSTANCE_PREFIX:-e2e}" \
0000000000000000000000000000000000000000;;	  --network="${KUBE_GCE_NETWORK:-${KUBE_GKE_NETWORK:-e2e}}" \
0000000000000000000000000000000000000000;;	  --node-tag="${NODE_TAG:-}" \
0000000000000000000000000000000000000000;;	  --master-tag="${MASTER_TAG:-}" \
0000000000000000000000000000000000000000;;	  --federated-kube-context="${FEDERATION_KUBE_CONTEXT:-e2e-federation}" \
0000000000000000000000000000000000000000;;	  ${KUBE_CONTAINER_RUNTIME:+"--container-runtime=${KUBE_CONTAINER_RUNTIME}"} \
0000000000000000000000000000000000000000;;	  ${MASTER_OS_DISTRIBUTION:+"--master-os-distro=${MASTER_OS_DISTRIBUTION}"} \
0000000000000000000000000000000000000000;;	  ${NODE_OS_DISTRIBUTION:+"--node-os-distro=${NODE_OS_DISTRIBUTION}"} \
0000000000000000000000000000000000000000;;	  ${NUM_NODES:+"--num-nodes=${NUM_NODES}"} \
0000000000000000000000000000000000000000;;	  ${CLUSTER_IP_RANGE:+"--cluster-ip-range=${CLUSTER_IP_RANGE}"} \
0000000000000000000000000000000000000000;;	  ${E2E_CLEAN_START:+"--clean-start=true"} \
0000000000000000000000000000000000000000;;	  ${E2E_MIN_STARTUP_PODS:+"--minStartupPods=${E2E_MIN_STARTUP_PODS}"} \
0000000000000000000000000000000000000000;;	  ${E2E_REPORT_DIR:+"--report-dir=${E2E_REPORT_DIR}"} \
0000000000000000000000000000000000000000;;	  ${E2E_REPORT_PREFIX:+"--report-prefix=${E2E_REPORT_PREFIX}"} \
0000000000000000000000000000000000000000;;	  "${@:-}"
