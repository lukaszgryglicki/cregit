0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::setup_env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	make -C "${KUBE_ROOT}" WHAT=cmd/genswaggertypedocs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Find binary
0000000000000000000000000000000000000000;;	genswaggertypedocs=$(kube::util::find-binary "genswaggertypedocs")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	gen_swagger_result=0
0000000000000000000000000000000000000000;;	result=0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	find_files() {
0000000000000000000000000000000000000000;;	  find . -not \( \
0000000000000000000000000000000000000000;;	      \( \
0000000000000000000000000000000000000000;;	        -wholename './output' \
0000000000000000000000000000000000000000;;	        -o -wholename './_output' \
0000000000000000000000000000000000000000;;	        -o -wholename './_gopath' \
0000000000000000000000000000000000000000;;	        -o -wholename './release' \
0000000000000000000000000000000000000000;;	        -o -wholename './target' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/third_party/*' \
0000000000000000000000000000000000000000;;	        -o -wholename '*/vendor/*' \
0000000000000000000000000000000000000000;;	      \) -prune \
0000000000000000000000000000000000000000;;	    \) \
0000000000000000000000000000000000000000;;	    \( -wholename '*pkg/api/v*/types.go' \
0000000000000000000000000000000000000000;;	       -o -wholename '*pkg/apis/*/v*/types.go' \
0000000000000000000000000000000000000000;;	       -o -wholename '*pkg/api/unversioned/types.go' \
0000000000000000000000000000000000000000;;	    \)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $# -eq 0 ]]; then
0000000000000000000000000000000000000000;;	  versioned_api_files=$(find_files | egrep "pkg/.[^/]*/((v.[^/]*)|unversioned)/types\.go")
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  versioned_api_files="${*}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for file in $versioned_api_files; do
0000000000000000000000000000000000000000;;	  $genswaggertypedocs -v -s "${file}" -f - || gen_swagger_result=$?
0000000000000000000000000000000000000000;;	  if [[ "${gen_swagger_result}" -ne "0" ]]; then
0000000000000000000000000000000000000000;;	    echo "API file: ${file} is missing: ${gen_swagger_result} descriptions"
0000000000000000000000000000000000000000;;	    result=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if grep json: "${file}" | grep -v // | grep description: ; then
0000000000000000000000000000000000000000;;	    echo "API file: ${file} should not contain descriptions in struct tags"
0000000000000000000000000000000000000000;;	    result=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if grep json: "${file}" | grep -Ee ",[[:space:]]+omitempty|omitempty[[:space:]]+" ; then
0000000000000000000000000000000000000000;;	    echo "API file: ${file} should not contain leading or trailing spaces for omitempty directive"
0000000000000000000000000000000000000000;;	    result=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	internal_types_files="${KUBE_ROOT}/pkg/api/types.go ${KUBE_ROOT}/pkg/apis/extensions/types.go"
0000000000000000000000000000000000000000;;	for internal_types_file in $internal_types_files; do
0000000000000000000000000000000000000000;;	  if [[ ! -e $internal_types_file ]]; then
0000000000000000000000000000000000000000;;	    echo "Internal types file ${internal_types_file} does not exist"
0000000000000000000000000000000000000000;;	    result=1
0000000000000000000000000000000000000000;;	    continue
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if grep json: "${internal_types_file}" | grep -v // | grep description: ; then
0000000000000000000000000000000000000000;;	    echo "Internal API types should not contain descriptions"
0000000000000000000000000000000000000000;;	    result=1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	exit ${result}
