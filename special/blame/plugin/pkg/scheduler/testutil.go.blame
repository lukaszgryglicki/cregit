0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3512dae18c736dcc9d3fde373cbe156fbd60c6c4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		corelisters "k8s.io/kubernetes/pkg/client/listers/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeConfigurator is an implementation for test.
0000000000000000000000000000000000000000;;	type FakeConfigurator struct {
0000000000000000000000000000000000000000;;		Config *Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPriorityFunctionConfigs is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetPriorityFunctionConfigs(priorityKeys sets.String) ([]algorithm.PriorityConfig, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPriorityMetadataProducer is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetPriorityMetadataProducer() (algorithm.MetadataProducer, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPredicateMetadataProducer is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetPredicateMetadataProducer() (algorithm.MetadataProducer, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPredicates is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetPredicates(predicateKeys sets.String) (map[string]algorithm.FitPredicate, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHardPodAffinitySymmetricWeight is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetHardPodAffinitySymmetricWeight() int {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSchedulerName is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetSchedulerName() string {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeDefaultErrorFunc is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) MakeDefaultErrorFunc(backoff *util.PodBackoff, podQueue *cache.FIFO) func(pod *v1.Pod, err error) {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponsibleForPod is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) ResponsibleForPod(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNodeLister is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetNodeLister() corelisters.NodeLister {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetClient is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetClient() clientset.Interface {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetScheduledPodLister is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) GetScheduledPodLister() corelisters.PodLister {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run is not implemented yet.
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) Run() {
0000000000000000000000000000000000000000;;		panic("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create returns FakeConfigurator.Config
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) Create() (*Config, error) {
0000000000000000000000000000000000000000;;		return fc.Config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateFromProvider returns FakeConfigurator.Config
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) CreateFromProvider(providerName string) (*Config, error) {
0000000000000000000000000000000000000000;;		return fc.Config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateFromConfig returns FakeConfigurator.Config
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) CreateFromConfig(policy schedulerapi.Policy) (*Config, error) {
0000000000000000000000000000000000000000;;		return fc.Config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateFromKeys returns FakeConfigurator.Config
0000000000000000000000000000000000000000;;	func (fc *FakeConfigurator) CreateFromKeys(predicateKeys, priorityKeys sets.String, extenders []algorithm.SchedulerExtender) (*Config, error) {
0000000000000000000000000000000000000000;;		return fc.Config, nil
0000000000000000000000000000000000000000;;	}
