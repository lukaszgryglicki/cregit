0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
e6e6fe8fc5bb22367bf0d36bcaab53919a425e0e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeCache is used for testing
0000000000000000000000000000000000000000;;	type FakeCache struct {
0000000000000000000000000000000000000000;;		AssumeFunc func(*v1.Pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) AssumePod(pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		f.AssumeFunc(pod)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) FinishBinding(pod *v1.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) ForgetPod(pod *v1.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) AddPod(pod *v1.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) UpdatePod(oldPod, newPod *v1.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) RemovePod(pod *v1.Pod) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) AddNode(node *v1.Node) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) UpdateNode(oldNode, newNode *v1.Node) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) RemoveNode(node *v1.Node) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) UpdateNodeNameToInfoMap(infoMap map[string]*schedulercache.NodeInfo) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeCache) List(s labels.Selector) ([]*v1.Pod, error) { return nil, nil }
