0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a3dc8d69e05351582f47f6135813ec671c39ea13;pkg/scheduler/listers.go[pkg/scheduler/listers.go][plugin/pkg/scheduler/testing/fake_lister.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ NodeLister = &FakeNodeLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeNodeLister implements NodeLister on a []string for test purposes.
0000000000000000000000000000000000000000;;	type FakeNodeLister []*v1.Node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns nodes as a []string.
0000000000000000000000000000000000000000;;	func (f FakeNodeLister) List() ([]*v1.Node, error) {
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ PodLister = &FakePodLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakePodLister implements PodLister on an []v1.Pods for test purposes.
0000000000000000000000000000000000000000;;	type FakePodLister []*v1.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns []*v1.Pod matching a query.
0000000000000000000000000000000000000000;;	func (f FakePodLister) List(s labels.Selector) (selected []*v1.Pod, err error) {
0000000000000000000000000000000000000000;;		for _, pod := range f {
0000000000000000000000000000000000000000;;			if s.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				selected = append(selected, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return selected, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ServiceLister = &FakeServiceLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeServiceLister implements ServiceLister on []v1.Service for test purposes.
0000000000000000000000000000000000000000;;	type FakeServiceLister []*v1.Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns v1.ServiceList, the list of all services.
0000000000000000000000000000000000000000;;	func (f FakeServiceLister) List(labels.Selector) ([]*v1.Service, error) {
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodServices gets the services that have the selector that match the labels on the given pod.
0000000000000000000000000000000000000000;;	func (f FakeServiceLister) GetPodServices(pod *v1.Pod) (services []*v1.Service, err error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range f {
0000000000000000000000000000000000000000;;			service := f[i]
0000000000000000000000000000000000000000;;			// consider only services that are in the same namespace as the pod
0000000000000000000000000000000000000000;;			if service.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector = labels.Set(service.Spec.Selector).AsSelectorPreValidated()
0000000000000000000000000000000000000000;;			if selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				services = append(services, service)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ControllerLister = &FakeControllerLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeControllerLister implements ControllerLister on []v1.ReplicationController for test purposes.
0000000000000000000000000000000000000000;;	type FakeControllerLister []*v1.ReplicationController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns []v1.ReplicationController, the list of all ReplicationControllers.
0000000000000000000000000000000000000000;;	func (f FakeControllerLister) List(labels.Selector) ([]*v1.ReplicationController, error) {
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodControllers gets the ReplicationControllers that have the selector that match the labels on the given pod
0000000000000000000000000000000000000000;;	func (f FakeControllerLister) GetPodControllers(pod *v1.Pod) (controllers []*v1.ReplicationController, err error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range f {
0000000000000000000000000000000000000000;;			controller := f[i]
0000000000000000000000000000000000000000;;			if controller.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector = labels.Set(controller.Spec.Selector).AsSelectorPreValidated()
0000000000000000000000000000000000000000;;			if selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				controllers = append(controllers, controller)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(controllers) == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Could not find Replication Controller for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ReplicaSetLister = &FakeReplicaSetLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeReplicaSetLister implements ControllerLister on []extensions.ReplicaSet for test purposes.
0000000000000000000000000000000000000000;;	type FakeReplicaSetLister []*extensions.ReplicaSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodReplicaSets gets the ReplicaSets that have the selector that match the labels on the given pod
0000000000000000000000000000000000000000;;	func (f FakeReplicaSetLister) GetPodReplicaSets(pod *v1.Pod) (rss []*extensions.ReplicaSet, err error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rs := range f {
0000000000000000000000000000000000000000;;			if rs.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err = metav1.LabelSelectorAsSelector(rs.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				rss = append(rss, rs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(rss) == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Could not find ReplicaSet for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StatefulSetLister = &FakeStatefulSetLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeStatefulSetLister implements ControllerLister on []apps.StatefulSet for testing purposes.
0000000000000000000000000000000000000000;;	type FakeStatefulSetLister []*apps.StatefulSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodStatefulSets gets the StatefulSets that have the selector that match the labels on the given pod.
0000000000000000000000000000000000000000;;	func (f FakeStatefulSetLister) GetPodStatefulSets(pod *v1.Pod) (sss []*apps.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, ss := range f {
0000000000000000000000000000000000000000;;			if ss.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err = metav1.LabelSelectorAsSelector(ss.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				sss = append(sss, ss)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(sss) == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Could not find StatefulSet for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
