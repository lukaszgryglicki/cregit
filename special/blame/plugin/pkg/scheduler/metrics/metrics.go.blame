0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f03edebb7800a77d361b4cae2b7fef83deb62a10;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const schedulerSubsystem = "scheduler"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var BindingSaturationReportInterval = 1 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		E2eSchedulingLatency = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Subsystem: schedulerSubsystem,
0000000000000000000000000000000000000000;;				Name:      "e2e_scheduling_latency_microseconds",
0000000000000000000000000000000000000000;;				Help:      "E2e scheduling latency (scheduling algorithm + binding)",
0000000000000000000000000000000000000000;;				Buckets:   prometheus.ExponentialBuckets(1000, 2, 15),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		SchedulingAlgorithmLatency = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Subsystem: schedulerSubsystem,
0000000000000000000000000000000000000000;;				Name:      "scheduling_algorithm_latency_microseconds",
0000000000000000000000000000000000000000;;				Help:      "Scheduling algorithm latency",
0000000000000000000000000000000000000000;;				Buckets:   prometheus.ExponentialBuckets(1000, 2, 15),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		BindingLatency = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Subsystem: schedulerSubsystem,
0000000000000000000000000000000000000000;;				Name:      "binding_latency_microseconds",
0000000000000000000000000000000000000000;;				Help:      "Binding latency",
0000000000000000000000000000000000000000;;				Buckets:   prometheus.ExponentialBuckets(1000, 2, 15),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registerMetrics sync.Once
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register all metrics.
0000000000000000000000000000000000000000;;	func Register() {
0000000000000000000000000000000000000000;;		// Register the metrics.
0000000000000000000000000000000000000000;;		registerMetrics.Do(func() {
0000000000000000000000000000000000000000;;			prometheus.MustRegister(E2eSchedulingLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(SchedulingAlgorithmLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(BindingLatency)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the time since the specified start in microseconds.
0000000000000000000000000000000000000000;;	func SinceInMicroseconds(start time.Time) float64 {
0000000000000000000000000000000000000000;;		return float64(time.Since(start).Nanoseconds() / time.Microsecond.Nanoseconds())
0000000000000000000000000000000000000000;;	}
