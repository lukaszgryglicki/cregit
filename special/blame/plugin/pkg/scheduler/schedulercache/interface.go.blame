0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
85a0fa3b63d2dc05e722b20ea2071ba9f955019d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package schedulercache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cache collects pods' information and provides node-level aggregated information.
0000000000000000000000000000000000000000;;	// It's intended for generic scheduler to do efficient lookup.
0000000000000000000000000000000000000000;;	// Cache's operations are pod centric. It does incremental updates based on pod events.
0000000000000000000000000000000000000000;;	// Pod events are sent via network. We don't have guaranteed delivery of all events:
0000000000000000000000000000000000000000;;	// We use Reflector to list and watch from remote.
0000000000000000000000000000000000000000;;	// Reflector might be slow and do a relist, which would lead to missing events.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// State Machine of a pod's events in scheduler's cache:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   +-------------------------------------------+  +----+
0000000000000000000000000000000000000000;;	//   |                            Add            |  |    |
0000000000000000000000000000000000000000;;	//   |                                           |  |    | Update
0000000000000000000000000000000000000000;;	//   +      Assume                Add            v  v    |
0000000000000000000000000000000000000000;;	//Initial +--------> Assumed +------------+---> Added <--+
0000000000000000000000000000000000000000;;	//   ^                +   +               |       +
0000000000000000000000000000000000000000;;	//   |                |   |               |       |
0000000000000000000000000000000000000000;;	//   |                |   |           Add |       | Remove
0000000000000000000000000000000000000000;;	//   |                |   |               |       |
0000000000000000000000000000000000000000;;	//   |                |   |               +       |
0000000000000000000000000000000000000000;;	//   +----------------+   +-----------> Expired   +----> Deleted
0000000000000000000000000000000000000000;;	//         Forget             Expire
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note that an assumed pod can expire, because if we haven't received Add event notifying us
0000000000000000000000000000000000000000;;	// for a while, there might be some problems and we shouldn't keep the pod in cache anymore.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note that "Initial", "Expired", and "Deleted" pods do not actually exist in cache.
0000000000000000000000000000000000000000;;	// Based on existing use cases, we are making the following assumptions:
0000000000000000000000000000000000000000;;	// - No pod would be assumed twice
0000000000000000000000000000000000000000;;	// - A pod could be added without going through scheduler. In this case, we will see Add but not Assume event.
0000000000000000000000000000000000000000;;	// - If a pod wasn't added, it wouldn't be removed or updated.
0000000000000000000000000000000000000000;;	// - Both "Expired" and "Deleted" are valid end states. In case of some problems, e.g. network issue,
0000000000000000000000000000000000000000;;	//   a pod might have changed its state (e.g. added and deleted) without delivering notification to the cache.
0000000000000000000000000000000000000000;;	type Cache interface {
0000000000000000000000000000000000000000;;		// AssumePod assumes a pod scheduled and aggregates the pod's information into its node.
0000000000000000000000000000000000000000;;		// The implementation also decides the policy to expire pod before being confirmed (receiving Add event).
0000000000000000000000000000000000000000;;		// After expiration, its information would be subtracted.
0000000000000000000000000000000000000000;;		AssumePod(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FinishBinding signals that cache for assumed pod can be expired
0000000000000000000000000000000000000000;;		FinishBinding(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForgetPod removes an assumed pod from cache.
0000000000000000000000000000000000000000;;		ForgetPod(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AddPod either confirms a pod if it's assumed, or adds it back if it's expired.
0000000000000000000000000000000000000000;;		// If added back, the pod's information would be added again.
0000000000000000000000000000000000000000;;		AddPod(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdatePod removes oldPod's information and adds newPod's information.
0000000000000000000000000000000000000000;;		UpdatePod(oldPod, newPod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RemovePod removes a pod. The pod's information would be subtracted from assigned node.
0000000000000000000000000000000000000000;;		RemovePod(pod *v1.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AddNode adds overall information about node.
0000000000000000000000000000000000000000;;		AddNode(node *v1.Node) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdateNode updates overall information about node.
0000000000000000000000000000000000000000;;		UpdateNode(oldNode, newNode *v1.Node) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RemoveNode removes overall information about node.
0000000000000000000000000000000000000000;;		RemoveNode(node *v1.Node) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdateNodeNameToInfoMap updates the passed infoMap to the current contents of Cache.
0000000000000000000000000000000000000000;;		// The node info contains aggregated information of pods scheduled (including assumed to be)
0000000000000000000000000000000000000000;;		// on this node.
0000000000000000000000000000000000000000;;		UpdateNodeNameToInfoMap(infoMap map[string]*NodeInfo) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List lists all cached pods (including assumed ones).
0000000000000000000000000000000000000000;;		List(labels.Selector) ([]*v1.Pod, error)
0000000000000000000000000000000000000000;;	}
