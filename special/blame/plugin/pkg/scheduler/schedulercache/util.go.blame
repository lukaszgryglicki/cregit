0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2d7d08c28018dc2d8cb131a6a2bb1cf354ea4b29;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package schedulercache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNodeNameToInfoMap obtains a list of pods and pivots that list into a map where the keys are node names
0000000000000000000000000000000000000000;;	// and the values are the aggregated information for that node.
0000000000000000000000000000000000000000;;	func CreateNodeNameToInfoMap(pods []*v1.Pod, nodes []*v1.Node) map[string]*NodeInfo {
0000000000000000000000000000000000000000;;		nodeNameToInfo := make(map[string]*NodeInfo)
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			nodeName := pod.Spec.NodeName
0000000000000000000000000000000000000000;;			if _, ok := nodeNameToInfo[nodeName]; !ok {
0000000000000000000000000000000000000000;;				nodeNameToInfo[nodeName] = NewNodeInfo()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nodeNameToInfo[nodeName].addPod(pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			if _, ok := nodeNameToInfo[node.Name]; !ok {
0000000000000000000000000000000000000000;;				nodeNameToInfo[node.Name] = NewNodeInfo()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nodeNameToInfo[node.Name].SetNode(node)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nodeNameToInfo
0000000000000000000000000000000000000000;;	}
