0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c6510882ccd910f8fdd42265cf1279227d269677;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package algorithmprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/factory"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		algorithmProviderNames = []string{
0000000000000000000000000000000000000000;;			factory.DefaultProvider,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultConfigExists(t *testing.T) {
0000000000000000000000000000000000000000;;		p, err := factory.GetAlgorithmProvider(factory.DefaultProvider)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error retrieving default provider: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p == nil {
0000000000000000000000000000000000000000;;			t.Error("algorithm provider config should not be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(p.FitPredicateKeys) == 0 {
0000000000000000000000000000000000000000;;			t.Error("default algorithm provider shouldn't have 0 fit predicates")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAlgorithmProviders(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, pn := range algorithmProviderNames {
0000000000000000000000000000000000000000;;			p, err := factory.GetAlgorithmProvider(pn)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error retrieving '%s' provider: %v", pn, err)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(p.PriorityFunctionKeys) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s algorithm provider shouldn't have 0 priority functions", pn)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, pf := range p.PriorityFunctionKeys.List() {
0000000000000000000000000000000000000000;;				if !factory.IsPriorityFunctionRegistered(pf) {
0000000000000000000000000000000000000000;;					t.Errorf("priority function %s is not registered but is used in the %s algorithm provider", pf, pn)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, fp := range p.FitPredicateKeys.List() {
0000000000000000000000000000000000000000;;				if !factory.IsFitPredicateRegistered(fp) {
0000000000000000000000000000000000000000;;					t.Errorf("fit predicate %s is not registered but is used in the %s algorithm provider", fp, pn)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
