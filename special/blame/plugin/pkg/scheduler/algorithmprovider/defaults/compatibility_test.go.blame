0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8162c214244d70ba77ef84ef8bfe0dc1344671d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaults
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		latestschedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api/latest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/factory"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCompatibility_v1_Scheduler(t *testing.T) {
0000000000000000000000000000000000000000;;		// Add serialized versions of scheduler config that exercise available options to ensure compatibility between releases
0000000000000000000000000000000000000000;;		schedulerFiles := map[string]struct {
0000000000000000000000000000000000000000;;			JSON           string
0000000000000000000000000000000000000000;;			ExpectedPolicy schedulerapi.Policy
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.0": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;	  "kind": "Policy",
0000000000000000000000000000000000000000;;	  "apiVersion": "v1",
0000000000000000000000000000000000000000;;	  "predicates": [
0000000000000000000000000000000000000000;;	    {"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;	    {"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;	    {"name": "PodFitsPorts"},
0000000000000000000000000000000000000000;;	    {"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;	    {"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;	    {"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}}
0000000000000000000000000000000000000000;;	  ],"priorities": [
0000000000000000000000000000000000000000;;	    {"name": "LeastRequestedPriority",   "weight": 1},
0000000000000000000000000000000000000000;;	    {"name": "ServiceSpreadingPriority", "weight": 2},
0000000000000000000000000000000000000000;;	    {"name": "TestServiceAntiAffinity",  "weight": 3, "argument": {"serviceAntiAffinity": {"label": "zone"}}},
0000000000000000000000000000000000000000;;	    {"name": "TestLabelPreference",      "weight": 4, "argument": {"labelPreference": {"label": "bar", "presence":true}}}
0000000000000000000000000000000000000000;;	  ]
0000000000000000000000000000000000000000;;	}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsPorts"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 1},
0000000000000000000000000000000000000000;;						{Name: "ServiceSpreadingPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAntiAffinity", Weight: 3, Argument: &schedulerapi.PriorityArgument{ServiceAntiAffinity: &schedulerapi.ServiceAntiAffinity{Label: "zone"}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelPreference", Weight: 4, Argument: &schedulerapi.PriorityArgument{LabelPreference: &schedulerapi.LabelPreference{Label: "bar", Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.1": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;			  "kind": "Policy",
0000000000000000000000000000000000000000;;			  "apiVersion": "v1",
0000000000000000000000000000000000000000;;			  "predicates": [
0000000000000000000000000000000000000000;;				{"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;				{"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;				{"name": "HostName"},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}}
0000000000000000000000000000000000000000;;			  ],"priorities": [
0000000000000000000000000000000000000000;;				{"name": "EqualPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "LeastRequestedPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "BalancedResourceAllocation",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "SelectorSpreadPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAntiAffinity",  "weight": 3, "argument": {"serviceAntiAffinity": {"label": "zone"}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelPreference",      "weight": 4, "argument": {"labelPreference": {"label": "bar", "presence":true}}}
0000000000000000000000000000000000000000;;			  ]
0000000000000000000000000000000000000000;;			}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "HostName"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "EqualPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "BalancedResourceAllocation", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "SelectorSpreadPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAntiAffinity", Weight: 3, Argument: &schedulerapi.PriorityArgument{ServiceAntiAffinity: &schedulerapi.ServiceAntiAffinity{Label: "zone"}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelPreference", Weight: 4, Argument: &schedulerapi.PriorityArgument{LabelPreference: &schedulerapi.LabelPreference{Label: "bar", Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.2": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;			  "kind": "Policy",
0000000000000000000000000000000000000000;;			  "apiVersion": "v1",
0000000000000000000000000000000000000000;;			  "predicates": [
0000000000000000000000000000000000000000;;				{"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;				{"name": "HostName"},
0000000000000000000000000000000000000000;;				{"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;				{"name": "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;				{"name": "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}}
0000000000000000000000000000000000000000;;			  ],"priorities": [
0000000000000000000000000000000000000000;;				{"name": "EqualPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodeAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "ImageLocalityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "LeastRequestedPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "BalancedResourceAllocation",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "SelectorSpreadPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAntiAffinity",  "weight": 3, "argument": {"serviceAntiAffinity": {"label": "zone"}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelPreference",      "weight": 4, "argument": {"labelPreference": {"label": "bar", "presence":true}}}
0000000000000000000000000000000000000000;;			  ]
0000000000000000000000000000000000000000;;			}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;						{Name: "HostName"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;						{Name: "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "EqualPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodeAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "ImageLocalityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "BalancedResourceAllocation", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "SelectorSpreadPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAntiAffinity", Weight: 3, Argument: &schedulerapi.PriorityArgument{ServiceAntiAffinity: &schedulerapi.ServiceAntiAffinity{Label: "zone"}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelPreference", Weight: 4, Argument: &schedulerapi.PriorityArgument{LabelPreference: &schedulerapi.LabelPreference{Label: "bar", Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.3": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;			  "kind": "Policy",
0000000000000000000000000000000000000000;;			  "apiVersion": "v1",
0000000000000000000000000000000000000000;;			  "predicates": [
0000000000000000000000000000000000000000;;				{"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;				{"name": "HostName"},
0000000000000000000000000000000000000000;;				{"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;				{"name": "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;				{"name": "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;				{"name": "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;				{"name": "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;				{"name": "GeneralPredicates"},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}}
0000000000000000000000000000000000000000;;			  ],"priorities": [
0000000000000000000000000000000000000000;;				{"name": "EqualPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "ImageLocalityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "LeastRequestedPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "BalancedResourceAllocation",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "SelectorSpreadPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodeAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "TaintTolerationPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "InterPodAffinityPriority",   "weight": 2}
0000000000000000000000000000000000000000;;			  ]
0000000000000000000000000000000000000000;;			}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;						{Name: "HostName"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;						{Name: "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;						{Name: "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;						{Name: "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;						{Name: "GeneralPredicates"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "EqualPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "ImageLocalityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "BalancedResourceAllocation", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "SelectorSpreadPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodeAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TaintTolerationPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "InterPodAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.4": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;			  "kind": "Policy",
0000000000000000000000000000000000000000;;			  "apiVersion": "v1",
0000000000000000000000000000000000000000;;			  "predicates": [
0000000000000000000000000000000000000000;;				{"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;				{"name": "HostName"},
0000000000000000000000000000000000000000;;				{"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;				{"name": "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;				{"name": "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;				{"name": "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;				{"name": "CheckNodeDiskPressure"},
0000000000000000000000000000000000000000;;				{"name": "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;				{"name": "GeneralPredicates"},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}}
0000000000000000000000000000000000000000;;			  ],"priorities": [
0000000000000000000000000000000000000000;;				{"name": "EqualPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "ImageLocalityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "LeastRequestedPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "BalancedResourceAllocation",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "SelectorSpreadPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodePreferAvoidPodsPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodeAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "TaintTolerationPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "InterPodAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "MostRequestedPriority",   "weight": 2}
0000000000000000000000000000000000000000;;			  ]
0000000000000000000000000000000000000000;;			}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;						{Name: "HostName"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;						{Name: "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;						{Name: "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;						{Name: "CheckNodeDiskPressure"},
0000000000000000000000000000000000000000;;						{Name: "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;						{Name: "GeneralPredicates"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "EqualPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "ImageLocalityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "BalancedResourceAllocation", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "SelectorSpreadPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodePreferAvoidPodsPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodeAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TaintTolerationPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "InterPodAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "MostRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Do not change this JSON after the corresponding release has been tagged.
0000000000000000000000000000000000000000;;			// A failure indicates backwards compatibility with the specified release was broken.
0000000000000000000000000000000000000000;;			"1.7": {
0000000000000000000000000000000000000000;;				JSON: `{
0000000000000000000000000000000000000000;;			  "kind": "Policy",
0000000000000000000000000000000000000000;;			  "apiVersion": "v1",
0000000000000000000000000000000000000000;;			  "predicates": [
0000000000000000000000000000000000000000;;				{"name": "MatchNodeSelector"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsResources"},
0000000000000000000000000000000000000000;;				{"name": "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;				{"name": "HostName"},
0000000000000000000000000000000000000000;;				{"name": "NoDiskConflict"},
0000000000000000000000000000000000000000;;				{"name": "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;				{"name": "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;				{"name": "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;				{"name": "CheckNodeDiskPressure"},
0000000000000000000000000000000000000000;;				{"name": "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;				{"name": "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;				{"name": "GeneralPredicates"},
0000000000000000000000000000000000000000;;				{"name": "TestServiceAffinity", "argument": {"serviceAffinity" : {"labels" : ["region"]}}},
0000000000000000000000000000000000000000;;				{"name": "TestLabelsPresence",  "argument": {"labelsPresence"  : {"labels" : ["foo"], "presence":true}}},
0000000000000000000000000000000000000000;;				{"name": "NoVolumeNodeConflict"}
0000000000000000000000000000000000000000;;			  ],"priorities": [
0000000000000000000000000000000000000000;;				{"name": "EqualPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "ImageLocalityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "LeastRequestedPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "BalancedResourceAllocation",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "SelectorSpreadPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodePreferAvoidPodsPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "NodeAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "TaintTolerationPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "InterPodAffinityPriority",   "weight": 2},
0000000000000000000000000000000000000000;;				{"name": "MostRequestedPriority",   "weight": 2}
0000000000000000000000000000000000000000;;			  ]
0000000000000000000000000000000000000000;;			}`,
0000000000000000000000000000000000000000;;				ExpectedPolicy: schedulerapi.Policy{
0000000000000000000000000000000000000000;;					Predicates: []schedulerapi.PredicatePolicy{
0000000000000000000000000000000000000000;;						{Name: "MatchNodeSelector"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsResources"},
0000000000000000000000000000000000000000;;						{Name: "PodFitsHostPorts"},
0000000000000000000000000000000000000000;;						{Name: "HostName"},
0000000000000000000000000000000000000000;;						{Name: "NoDiskConflict"},
0000000000000000000000000000000000000000;;						{Name: "NoVolumeZoneConflict"},
0000000000000000000000000000000000000000;;						{Name: "PodToleratesNodeTaints"},
0000000000000000000000000000000000000000;;						{Name: "CheckNodeMemoryPressure"},
0000000000000000000000000000000000000000;;						{Name: "CheckNodeDiskPressure"},
0000000000000000000000000000000000000000;;						{Name: "MaxEBSVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxGCEPDVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MaxAzureDiskVolumeCount"},
0000000000000000000000000000000000000000;;						{Name: "MatchInterPodAffinity"},
0000000000000000000000000000000000000000;;						{Name: "GeneralPredicates"},
0000000000000000000000000000000000000000;;						{Name: "TestServiceAffinity", Argument: &schedulerapi.PredicateArgument{ServiceAffinity: &schedulerapi.ServiceAffinity{Labels: []string{"region"}}}},
0000000000000000000000000000000000000000;;						{Name: "TestLabelsPresence", Argument: &schedulerapi.PredicateArgument{LabelsPresence: &schedulerapi.LabelsPresence{Labels: []string{"foo"}, Presence: true}}},
0000000000000000000000000000000000000000;;						{Name: "NoVolumeNodeConflict"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Priorities: []schedulerapi.PriorityPolicy{
0000000000000000000000000000000000000000;;						{Name: "EqualPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "ImageLocalityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "LeastRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "BalancedResourceAllocation", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "SelectorSpreadPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodePreferAvoidPodsPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "NodeAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "TaintTolerationPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "InterPodAffinityPriority", Weight: 2},
0000000000000000000000000000000000000000;;						{Name: "MostRequestedPriority", Weight: 2},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		registeredPredicates := sets.NewString(factory.ListRegisteredFitPredicates()...)
0000000000000000000000000000000000000000;;		registeredPriorities := sets.NewString(factory.ListRegisteredPriorityFunctions()...)
0000000000000000000000000000000000000000;;		seenPredicates := sets.NewString()
0000000000000000000000000000000000000000;;		seenPriorities := sets.NewString()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for v, tc := range schedulerFiles {
0000000000000000000000000000000000000000;;			fmt.Printf("%s: Testing scheduler config\n", v)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			policy := schedulerapi.Policy{}
0000000000000000000000000000000000000000;;			if err := runtime.DecodeInto(latestschedulerapi.Codec, []byte(tc.JSON), &policy); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Error decoding: %v", v, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, predicate := range policy.Predicates {
0000000000000000000000000000000000000000;;				seenPredicates.Insert(predicate.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, priority := range policy.Priorities {
0000000000000000000000000000000000000000;;				seenPriorities.Insert(priority.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(policy, tc.ExpectedPolicy) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected:\n\t%#v\nGot:\n\t%#v", v, tc.ExpectedPolicy, policy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			handler := utiltesting.FakeHandler{
0000000000000000000000000000000000000000;;				StatusCode:   500,
0000000000000000000000000000000000000000;;				ResponseBody: "",
0000000000000000000000000000000000000000;;				T:            t,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;			client := clientset.NewForConfigOrDie(&restclient.Config{Host: server.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(client, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := factory.NewConfigFactory(
0000000000000000000000000000000000000000;;				"some-scheduler-name",
0000000000000000000000000000000000000000;;				client,
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().Nodes(),
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().Pods(),
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().PersistentVolumes(),
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().PersistentVolumeClaims(),
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().ReplicationControllers(),
0000000000000000000000000000000000000000;;				informerFactory.Extensions().V1beta1().ReplicaSets(),
0000000000000000000000000000000000000000;;				informerFactory.Apps().V1beta1().StatefulSets(),
0000000000000000000000000000000000000000;;				informerFactory.Core().V1().Services(),
0000000000000000000000000000000000000000;;				v1.DefaultHardPodAffinitySymmetricWeight,
0000000000000000000000000000000000000000;;			).CreateFromConfig(policy); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Error constructing: %v", v, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !seenPredicates.HasAll(registeredPredicates.List()...) {
0000000000000000000000000000000000000000;;			t.Errorf("Registered predicates are missing from compatibility test (add to test stanza for version currently in development): %#v", registeredPredicates.Difference(seenPredicates).List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !seenPriorities.HasAll(registeredPriorities.List()...) {
0000000000000000000000000000000000000000;;			t.Errorf("Registered priorities are missing from compatibility test (add to test stanza for version currently in development): %#v", registeredPriorities.Difference(seenPriorities).List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
