0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
73651cc9de22cc202a55c41d729bc41a4f2c084e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaults
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMaxVols(t *testing.T) {
0000000000000000000000000000000000000000;;		previousValue := os.Getenv(KubeMaxPDVols)
0000000000000000000000000000000000000000;;		defaultValue := 39
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			rawMaxVols string
0000000000000000000000000000000000000000;;			expected   int
0000000000000000000000000000000000000000;;			test       string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rawMaxVols: "invalid",
0000000000000000000000000000000000000000;;				expected:   defaultValue,
0000000000000000000000000000000000000000;;				test:       "Unable to parse maximum PD volumes value, using default value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rawMaxVols: "-2",
0000000000000000000000000000000000000000;;				expected:   defaultValue,
0000000000000000000000000000000000000000;;				test:       "Maximum PD volumes must be a positive value, using default value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rawMaxVols: "40",
0000000000000000000000000000000000000000;;				expected:   40,
0000000000000000000000000000000000000000;;				test:       "Parse maximum PD volumes value from env",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			os.Setenv(KubeMaxPDVols, test.rawMaxVols)
0000000000000000000000000000000000000000;;			result := getMaxVols(defaultValue)
0000000000000000000000000000000000000000;;			if result != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v got %v", test.test, test.expected, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os.Unsetenv(KubeMaxPDVols)
0000000000000000000000000000000000000000;;		if previousValue != "" {
0000000000000000000000000000000000000000;;			os.Setenv(KubeMaxPDVols, previousValue)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
