0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c6510882ccd910f8fdd42265cf1279227d269677;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaults
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/aws"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm/predicates"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm/priorities"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/core"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/factory"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DefaultMaxGCEPDVolumes defines the maximum number of PD Volumes for GCE
0000000000000000000000000000000000000000;;		// GCE instances can have up to 16 PD volumes attached.
0000000000000000000000000000000000000000;;		DefaultMaxGCEPDVolumes = 16
0000000000000000000000000000000000000000;;		// DefaultMaxAzureDiskVolumes defines the maximum number of PD Volumes for Azure
0000000000000000000000000000000000000000;;		// Larger Azure VMs can actually have much more disks attached.
0000000000000000000000000000000000000000;;		// TODO We should determine the max based on VM size
0000000000000000000000000000000000000000;;		DefaultMaxAzureDiskVolumes = 16
0000000000000000000000000000000000000000;;		// ClusterAutoscalerProvider defines the default autoscaler provider
0000000000000000000000000000000000000000;;		ClusterAutoscalerProvider = "ClusterAutoscalerProvider"
0000000000000000000000000000000000000000;;		// StatefulSetKind defines the name of 'StatefulSet' kind
0000000000000000000000000000000000000000;;		StatefulSetKind = "StatefulSet"
0000000000000000000000000000000000000000;;		// KubeMaxPDVols defines the maximum number of PD Volumes per kubelet
0000000000000000000000000000000000000000;;		KubeMaxPDVols = "KUBE_MAX_PD_VOLS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// Register functions that extract metadata used by predicates and priorities computations.
0000000000000000000000000000000000000000;;		factory.RegisterPredicateMetadataProducerFactory(
0000000000000000000000000000000000000000;;			func(args factory.PluginFactoryArgs) algorithm.MetadataProducer {
0000000000000000000000000000000000000000;;				return predicates.NewPredicateMetadataFactory(args.PodLister)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		factory.RegisterPriorityMetadataProducerFactory(
0000000000000000000000000000000000000000;;			func(args factory.PluginFactoryArgs) algorithm.MetadataProducer {
0000000000000000000000000000000000000000;;				return priorities.PriorityMetadata
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Registers algorithm providers. By default we use 'DefaultProvider', but user can specify one to be used
0000000000000000000000000000000000000000;;		// by specifying flag.
0000000000000000000000000000000000000000;;		factory.RegisterAlgorithmProvider(factory.DefaultProvider, defaultPredicates(), defaultPriorities())
0000000000000000000000000000000000000000;;		// Cluster autoscaler friendly scheduling algorithm.
0000000000000000000000000000000000000000;;		factory.RegisterAlgorithmProvider(ClusterAutoscalerProvider, defaultPredicates(),
0000000000000000000000000000000000000000;;			copyAndReplace(defaultPriorities(), "LeastRequestedPriority", "MostRequestedPriority"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Registers predicates and priorities that are not enabled by default, but user can pick when creating his
0000000000000000000000000000000000000000;;		// own set of priorities/predicates.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PodFitsPorts has been replaced by PodFitsHostPorts for better user understanding.
0000000000000000000000000000000000000000;;		// For backwards compatibility with 1.0, PodFitsPorts is registered as well.
0000000000000000000000000000000000000000;;		factory.RegisterFitPredicate("PodFitsPorts", predicates.PodFitsHostPorts)
0000000000000000000000000000000000000000;;		// Fit is defined based on the absence of port conflicts.
0000000000000000000000000000000000000000;;		// This predicate is actually a default predicate, because it is invoked from
0000000000000000000000000000000000000000;;		// predicates.GeneralPredicates()
0000000000000000000000000000000000000000;;		factory.RegisterFitPredicate("PodFitsHostPorts", predicates.PodFitsHostPorts)
0000000000000000000000000000000000000000;;		// Fit is determined by resource availability.
0000000000000000000000000000000000000000;;		// This predicate is actually a default predicate, because it is invoked from
0000000000000000000000000000000000000000;;		// predicates.GeneralPredicates()
0000000000000000000000000000000000000000;;		factory.RegisterFitPredicate("PodFitsResources", predicates.PodFitsResources)
0000000000000000000000000000000000000000;;		// Fit is determined by the presence of the Host parameter and a string match
0000000000000000000000000000000000000000;;		// This predicate is actually a default predicate, because it is invoked from
0000000000000000000000000000000000000000;;		// predicates.GeneralPredicates()
0000000000000000000000000000000000000000;;		factory.RegisterFitPredicate("HostName", predicates.PodFitsHost)
0000000000000000000000000000000000000000;;		// Fit is determined by node selector query.
0000000000000000000000000000000000000000;;		factory.RegisterFitPredicate("MatchNodeSelector", predicates.PodMatchNodeSelector)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use equivalence class to speed up predicates & priorities
0000000000000000000000000000000000000000;;		factory.RegisterGetEquivalencePodFunction(GetEquivalencePod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceSpreadingPriority is a priority config factory that spreads pods by minimizing
0000000000000000000000000000000000000000;;		// the number of pods (belonging to the same service) on the same node.
0000000000000000000000000000000000000000;;		// Register the factory so that it's available, but do not include it as part of the default priorities
0000000000000000000000000000000000000000;;		// Largely replaced by "SelectorSpreadPriority", but registered for backward compatibility with 1.0
0000000000000000000000000000000000000000;;		factory.RegisterPriorityConfigFactory(
0000000000000000000000000000000000000000;;			"ServiceSpreadingPriority",
0000000000000000000000000000000000000000;;			factory.PriorityConfigFactory{
0000000000000000000000000000000000000000;;				Function: func(args factory.PluginFactoryArgs) algorithm.PriorityFunction {
0000000000000000000000000000000000000000;;					return priorities.NewSelectorSpreadPriority(args.ServiceLister, algorithm.EmptyControllerLister{}, algorithm.EmptyReplicaSetLister{}, algorithm.EmptyStatefulSetLister{})
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Weight: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EqualPriority is a prioritizer function that gives an equal weight of one to all nodes
0000000000000000000000000000000000000000;;		// Register the priority function so that its available
0000000000000000000000000000000000000000;;		// but do not include it as part of the default priorities
0000000000000000000000000000000000000000;;		factory.RegisterPriorityFunction2("EqualPriority", core.EqualPriorityMap, nil, 1)
0000000000000000000000000000000000000000;;		// ImageLocalityPriority prioritizes nodes based on locality of images requested by a pod. Nodes with larger size
0000000000000000000000000000000000000000;;		// of already-installed packages required by the pod will be preferred over nodes with no already-installed
0000000000000000000000000000000000000000;;		// packages required by the pod or a small total size of already-installed packages required by the pod.
0000000000000000000000000000000000000000;;		factory.RegisterPriorityFunction2("ImageLocalityPriority", priorities.ImageLocalityPriorityMap, nil, 1)
0000000000000000000000000000000000000000;;		// Optional, cluster-autoscaler friendly priority function - give used nodes higher priority.
0000000000000000000000000000000000000000;;		factory.RegisterPriorityFunction2("MostRequestedPriority", priorities.MostRequestedPriorityMap, nil, 1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultPredicates() sets.String {
0000000000000000000000000000000000000000;;		return sets.NewString(
0000000000000000000000000000000000000000;;			// Fit is determined by volume zone requirements.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"NoVolumeZoneConflict",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					return predicates.NewVolumeZonePredicate(args.PVInfo, args.PVCInfo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			// Fit is determined by whether or not there would be too many AWS EBS volumes attached to the node
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"MaxEBSVolumeCount",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					// TODO: allow for generically parameterized scheduler predicates, because this is a bit ugly
0000000000000000000000000000000000000000;;					maxVols := getMaxVols(aws.DefaultMaxEBSVolumes)
0000000000000000000000000000000000000000;;					return predicates.NewMaxPDVolumeCountPredicate(predicates.EBSVolumeFilter, maxVols, args.PVInfo, args.PVCInfo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			// Fit is determined by whether or not there would be too many GCE PD volumes attached to the node
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"MaxGCEPDVolumeCount",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					// TODO: allow for generically parameterized scheduler predicates, because this is a bit ugly
0000000000000000000000000000000000000000;;					maxVols := getMaxVols(DefaultMaxGCEPDVolumes)
0000000000000000000000000000000000000000;;					return predicates.NewMaxPDVolumeCountPredicate(predicates.GCEPDVolumeFilter, maxVols, args.PVInfo, args.PVCInfo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			// Fit is determined by whether or not there would be too many Azure Disk volumes attached to the node
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"MaxAzureDiskVolumeCount",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					// TODO: allow for generically parameterized scheduler predicates, because this is a bit ugly
0000000000000000000000000000000000000000;;					maxVols := getMaxVols(DefaultMaxAzureDiskVolumes)
0000000000000000000000000000000000000000;;					return predicates.NewMaxPDVolumeCountPredicate(predicates.AzureDiskVolumeFilter, maxVols, args.PVInfo, args.PVCInfo)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			// Fit is determined by inter-pod affinity.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"MatchInterPodAffinity",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					return predicates.NewPodAffinityPredicate(args.NodeInfo, args.PodLister)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fit is determined by non-conflicting disk volumes.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicate("NoDiskConflict", predicates.NoDiskConflict),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// GeneralPredicates are the predicates that are enforced by all Kubernetes components
0000000000000000000000000000000000000000;;			// (e.g. kubelet and all schedulers)
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicate("GeneralPredicates", predicates.GeneralPredicates),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fit is determined based on whether a pod can tolerate all of the node's taints
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicate("PodToleratesNodeTaints", predicates.PodToleratesNodeTaints),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fit is determined by node memory pressure condition.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicate("CheckNodeMemoryPressure", predicates.CheckNodeMemoryPressurePredicate),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fit is determined by node disk pressure condition.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicate("CheckNodeDiskPressure", predicates.CheckNodeDiskPressurePredicate),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fit is determined by volume zone requirements.
0000000000000000000000000000000000000000;;			factory.RegisterFitPredicateFactory(
0000000000000000000000000000000000000000;;				"NoVolumeNodeConflict",
0000000000000000000000000000000000000000;;				func(args factory.PluginFactoryArgs) algorithm.FitPredicate {
0000000000000000000000000000000000000000;;					return predicates.NewVolumeNodePredicate(args.PVInfo, args.PVCInfo, nil)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultPriorities() sets.String {
0000000000000000000000000000000000000000;;		return sets.NewString(
0000000000000000000000000000000000000000;;			// spreads pods by minimizing the number of pods (belonging to the same service or replication controller) on the same node.
0000000000000000000000000000000000000000;;			factory.RegisterPriorityConfigFactory(
0000000000000000000000000000000000000000;;				"SelectorSpreadPriority",
0000000000000000000000000000000000000000;;				factory.PriorityConfigFactory{
0000000000000000000000000000000000000000;;					Function: func(args factory.PluginFactoryArgs) algorithm.PriorityFunction {
0000000000000000000000000000000000000000;;						return priorities.NewSelectorSpreadPriority(args.ServiceLister, args.ControllerLister, args.ReplicaSetLister, args.StatefulSetLister)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Weight: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;			// pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
0000000000000000000000000000000000000000;;			// as some other pods, or, conversely, should not be placed in the same topological domain as some other pods.
0000000000000000000000000000000000000000;;			factory.RegisterPriorityConfigFactory(
0000000000000000000000000000000000000000;;				"InterPodAffinityPriority",
0000000000000000000000000000000000000000;;				factory.PriorityConfigFactory{
0000000000000000000000000000000000000000;;					Function: func(args factory.PluginFactoryArgs) algorithm.PriorityFunction {
0000000000000000000000000000000000000000;;						return priorities.NewInterPodAffinityPriority(args.NodeInfo, args.NodeLister, args.PodLister, args.HardPodAffinitySymmetricWeight)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Weight: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Prioritize nodes by least requested utilization.
0000000000000000000000000000000000000000;;			factory.RegisterPriorityFunction2("LeastRequestedPriority", priorities.LeastRequestedPriorityMap, nil, 1),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Prioritizes nodes to help achieve balanced resource usage
0000000000000000000000000000000000000000;;			factory.RegisterPriorityFunction2("BalancedResourceAllocation", priorities.BalancedResourceAllocationMap, nil, 1),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Set this weight large enough to override all other priority functions.
0000000000000000000000000000000000000000;;			// TODO: Figure out a better way to do this, maybe at same time as fixing #24720.
0000000000000000000000000000000000000000;;			factory.RegisterPriorityFunction2("NodePreferAvoidPodsPriority", priorities.CalculateNodePreferAvoidPodsPriorityMap, nil, 10000),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Prioritizes nodes that have labels matching NodeAffinity
0000000000000000000000000000000000000000;;			factory.RegisterPriorityFunction2("NodeAffinityPriority", priorities.CalculateNodeAffinityPriorityMap, priorities.CalculateNodeAffinityPriorityReduce, 1),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// TODO: explain what it does.
0000000000000000000000000000000000000000;;			factory.RegisterPriorityFunction2("TaintTolerationPriority", priorities.ComputeTaintTolerationPriorityMap, priorities.ComputeTaintTolerationPriorityReduce, 1),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getMaxVols checks the max PD volumes environment variable, otherwise returning a default value
0000000000000000000000000000000000000000;;	func getMaxVols(defaultVal int) int {
0000000000000000000000000000000000000000;;		if rawMaxVols := os.Getenv(KubeMaxPDVols); rawMaxVols != "" {
0000000000000000000000000000000000000000;;			if parsedMaxVols, err := strconv.Atoi(rawMaxVols); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Unable to parse maximum PD volumes value, using default of %v: %v", defaultVal, err)
0000000000000000000000000000000000000000;;			} else if parsedMaxVols <= 0 {
0000000000000000000000000000000000000000;;				glog.Errorf("Maximum PD volumes must be a positive value, using default of %v", defaultVal)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return parsedMaxVols
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return defaultVal
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyAndReplace(set sets.String, replaceWhat, replaceWith string) sets.String {
0000000000000000000000000000000000000000;;		result := sets.NewString(set.List()...)
0000000000000000000000000000000000000000;;		if result.Has(replaceWhat) {
0000000000000000000000000000000000000000;;			result.Delete(replaceWhat)
0000000000000000000000000000000000000000;;			result.Insert(replaceWith)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetEquivalencePod returns a EquivalencePod which contains a group of pod attributes which can be reused.
0000000000000000000000000000000000000000;;	func GetEquivalencePod(pod *v1.Pod) interface{} {
0000000000000000000000000000000000000000;;		// For now we only consider pods:
0000000000000000000000000000000000000000;;		// 1. OwnerReferences is Controller
0000000000000000000000000000000000000000;;		// 2. with same OwnerReferences
0000000000000000000000000000000000000000;;		// to be equivalent
0000000000000000000000000000000000000000;;		if len(pod.OwnerReferences) != 0 {
0000000000000000000000000000000000000000;;			for _, ref := range pod.OwnerReferences {
0000000000000000000000000000000000000000;;				if *ref.Controller {
0000000000000000000000000000000000000000;;					// a pod can only belongs to one controller
0000000000000000000000000000000000000000;;					return &EquivalencePod{
0000000000000000000000000000000000000000;;						ControllerRef: ref,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EquivalencePod is a group of pod attributes which can be reused as equivalence to schedule other pods.
0000000000000000000000000000000000000000;;	type EquivalencePod struct {
0000000000000000000000000000000000000000;;		ControllerRef metav1.OwnerReference
0000000000000000000000000000000000000000;;	}
