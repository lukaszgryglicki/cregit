0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
184f19e39f4665efa1da538e9d9290d4e50f48e5;plugin/pkg/scheduler/extender_test.go[plugin/pkg/scheduler/extender_test.go][plugin/pkg/scheduler/core/extender_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;		schedulertesting "k8s.io/kubernetes/plugin/pkg/scheduler/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fitPredicate func(pod *v1.Pod, node *v1.Node) (bool, error)
0000000000000000000000000000000000000000;;	type priorityFunc func(pod *v1.Pod, nodes []*v1.Node) (*schedulerapi.HostPriorityList, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type priorityConfig struct {
0000000000000000000000000000000000000000;;		function priorityFunc
0000000000000000000000000000000000000000;;		weight   int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func errorPredicateExtender(pod *v1.Pod, node *v1.Node) (bool, error) {
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("Some error")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func falsePredicateExtender(pod *v1.Pod, node *v1.Node) (bool, error) {
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func truePredicateExtender(pod *v1.Pod, node *v1.Node) (bool, error) {
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func machine1PredicateExtender(pod *v1.Pod, node *v1.Node) (bool, error) {
0000000000000000000000000000000000000000;;		if node.Name == "machine1" {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func machine2PredicateExtender(pod *v1.Pod, node *v1.Node) (bool, error) {
0000000000000000000000000000000000000000;;		if node.Name == "machine2" {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func errorPrioritizerExtender(pod *v1.Pod, nodes []*v1.Node) (*schedulerapi.HostPriorityList, error) {
0000000000000000000000000000000000000000;;		return &schedulerapi.HostPriorityList{}, fmt.Errorf("Some error")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func machine1PrioritizerExtender(pod *v1.Pod, nodes []*v1.Node) (*schedulerapi.HostPriorityList, error) {
0000000000000000000000000000000000000000;;		result := schedulerapi.HostPriorityList{}
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			score := 1
0000000000000000000000000000000000000000;;			if node.Name == "machine1" {
0000000000000000000000000000000000000000;;				score = 10
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, schedulerapi.HostPriority{Host: node.Name, Score: score})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func machine2PrioritizerExtender(pod *v1.Pod, nodes []*v1.Node) (*schedulerapi.HostPriorityList, error) {
0000000000000000000000000000000000000000;;		result := schedulerapi.HostPriorityList{}
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			score := 1
0000000000000000000000000000000000000000;;			if node.Name == "machine2" {
0000000000000000000000000000000000000000;;				score = 10
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, schedulerapi.HostPriority{Host: node.Name, Score: score})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func machine2Prioritizer(_ *v1.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo, nodes []*v1.Node) (schedulerapi.HostPriorityList, error) {
0000000000000000000000000000000000000000;;		result := []schedulerapi.HostPriority{}
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			score := 1
0000000000000000000000000000000000000000;;			if node.Name == "machine2" {
0000000000000000000000000000000000000000;;				score = 10
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = append(result, schedulerapi.HostPriority{Host: node.Name, Score: score})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeExtender struct {
0000000000000000000000000000000000000000;;		predicates       []fitPredicate
0000000000000000000000000000000000000000;;		prioritizers     []priorityConfig
0000000000000000000000000000000000000000;;		weight           int
0000000000000000000000000000000000000000;;		nodeCacheCapable bool
0000000000000000000000000000000000000000;;		filteredNodes    []*v1.Node
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeExtender) Filter(pod *v1.Pod, nodes []*v1.Node, nodeNameToInfo map[string]*schedulercache.NodeInfo) ([]*v1.Node, schedulerapi.FailedNodesMap, error) {
0000000000000000000000000000000000000000;;		filtered := []*v1.Node{}
0000000000000000000000000000000000000000;;		failedNodesMap := schedulerapi.FailedNodesMap{}
0000000000000000000000000000000000000000;;		for _, node := range nodes {
0000000000000000000000000000000000000000;;			fits := true
0000000000000000000000000000000000000000;;			for _, predicate := range f.predicates {
0000000000000000000000000000000000000000;;				fit, err := predicate(pod, node)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return []*v1.Node{}, schedulerapi.FailedNodesMap{}, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !fit {
0000000000000000000000000000000000000000;;					fits = false
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if fits {
0000000000000000000000000000000000000000;;				filtered = append(filtered, node)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				failedNodesMap[node.Name] = "FakeExtender failed"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.filteredNodes = filtered
0000000000000000000000000000000000000000;;		if f.nodeCacheCapable {
0000000000000000000000000000000000000000;;			return filtered, failedNodesMap, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filtered, failedNodesMap, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeExtender) Prioritize(pod *v1.Pod, nodes []*v1.Node) (*schedulerapi.HostPriorityList, int, error) {
0000000000000000000000000000000000000000;;		result := schedulerapi.HostPriorityList{}
0000000000000000000000000000000000000000;;		combinedScores := map[string]int{}
0000000000000000000000000000000000000000;;		for _, prioritizer := range f.prioritizers {
0000000000000000000000000000000000000000;;			weight := prioritizer.weight
0000000000000000000000000000000000000000;;			if weight == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			priorityFunc := prioritizer.function
0000000000000000000000000000000000000000;;			prioritizedList, err := priorityFunc(pod, nodes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return &schedulerapi.HostPriorityList{}, 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, hostEntry := range *prioritizedList {
0000000000000000000000000000000000000000;;				combinedScores[hostEntry.Host] += hostEntry.Score * weight
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for host, score := range combinedScores {
0000000000000000000000000000000000000000;;			result = append(result, schedulerapi.HostPriority{Host: host, Score: score})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &result, f.weight, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeExtender) Bind(binding *v1.Binding) error {
0000000000000000000000000000000000000000;;		if len(f.filteredNodes) != 0 {
0000000000000000000000000000000000000000;;			for _, node := range f.filteredNodes {
0000000000000000000000000000000000000000;;				if node.Name == binding.Target.Name {
0000000000000000000000000000000000000000;;					f.filteredNodes = nil
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := fmt.Errorf("Node %v not in filtered nodes %v", binding.Target.Name, f.filteredNodes)
0000000000000000000000000000000000000000;;			f.filteredNodes = nil
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeExtender) IsBinder() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenericSchedulerWithExtenders(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name                 string
0000000000000000000000000000000000000000;;			predicates           map[string]algorithm.FitPredicate
0000000000000000000000000000000000000000;;			prioritizers         []algorithm.PriorityConfig
0000000000000000000000000000000000000000;;			extenders            []FakeExtender
0000000000000000000000000000000000000000;;			extenderPredicates   []fitPredicate
0000000000000000000000000000000000000000;;			extenderPrioritizers []priorityConfig
0000000000000000000000000000000000000000;;			nodes                []string
0000000000000000000000000000000000000000;;			expectedHost         string
0000000000000000000000000000000000000000;;			expectsErr           bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{errorPredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:      []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectsErr: true,
0000000000000000000000000000000000000000;;				name:       "test 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{falsePredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:      []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectsErr: true,
0000000000000000000000000000000000000000;;				name:       "test 2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{machine1PredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectedHost: "machine1",
0000000000000000000000000000000000000000;;				name:         "test 3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{machine2PredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates: []fitPredicate{machine1PredicateExtender},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:      []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectsErr: true,
0000000000000000000000000000000000000000;;				name:       "test 4",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates:   []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;						prioritizers: []priorityConfig{{errorPrioritizerExtender, 10}},
0000000000000000000000000000000000000000;;						weight:       1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        []string{"machine1"},
0000000000000000000000000000000000000000;;				expectedHost: "machine1",
0000000000000000000000000000000000000000;;				name:         "test 5",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates:   []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;						prioritizers: []priorityConfig{{machine1PrioritizerExtender, 10}},
0000000000000000000000000000000000000000;;						weight:       1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates:   []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;						prioritizers: []priorityConfig{{machine2PrioritizerExtender, 10}},
0000000000000000000000000000000000000000;;						weight:       5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectedHost: "machine2",
0000000000000000000000000000000000000000;;				name:         "test 6",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				predicates:   map[string]algorithm.FitPredicate{"true": truePredicate},
0000000000000000000000000000000000000000;;				prioritizers: []algorithm.PriorityConfig{{Function: machine2Prioritizer, Weight: 20}},
0000000000000000000000000000000000000000;;				extenders: []FakeExtender{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						predicates:   []fitPredicate{truePredicateExtender},
0000000000000000000000000000000000000000;;						prioritizers: []priorityConfig{{machine1PrioritizerExtender, 10}},
0000000000000000000000000000000000000000;;						weight:       1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        []string{"machine1", "machine2"},
0000000000000000000000000000000000000000;;				expectedHost: "machine2", // machine2 has higher score
0000000000000000000000000000000000000000;;				name:         "test 7",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			extenders := []algorithm.SchedulerExtender{}
0000000000000000000000000000000000000000;;			for ii := range test.extenders {
0000000000000000000000000000000000000000;;				extenders = append(extenders, &test.extenders[ii])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cache := schedulercache.New(time.Duration(0), wait.NeverStop)
0000000000000000000000000000000000000000;;			for _, name := range test.nodes {
0000000000000000000000000000000000000000;;				cache.AddNode(&v1.Node{ObjectMeta: metav1.ObjectMeta{Name: name}})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			scheduler := NewGenericScheduler(
0000000000000000000000000000000000000000;;				cache, nil, test.predicates, algorithm.EmptyMetadataProducer, test.prioritizers, algorithm.EmptyMetadataProducer, extenders)
0000000000000000000000000000000000000000;;			podIgnored := &v1.Pod{}
0000000000000000000000000000000000000000;;			machine, err := scheduler.Schedule(podIgnored, schedulertesting.FakeNodeLister(makeNodeList(test.nodes)))
0000000000000000000000000000000000000000;;			if test.expectsErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected non-error for %s, machine %s", test.name, machine)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if test.expectedHost != machine {
0000000000000000000000000000000000000000;;					t.Errorf("Failed : %s, Expected: %s, Saw: %s", test.name, test.expectedHost, machine)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
