0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
69abb5224d0705d9898c376e281e1aadc8eec18f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package priorities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		priorityutil "k8s.io/kubernetes/plugin/pkg/scheduler/algorithm/priorities/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPriorityMetadata(t *testing.T) {
0000000000000000000000000000000000000000;;		nonZeroReqs := &schedulercache.Resource{}
0000000000000000000000000000000000000000;;		nonZeroReqs.MilliCPU = priorityutil.DefaultMilliCpuRequest
0000000000000000000000000000000000000000;;		nonZeroReqs.Memory = priorityutil.DefaultMemoryRequest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specifiedReqs := &schedulercache.Resource{}
0000000000000000000000000000000000000000;;		specifiedReqs.MilliCPU = 200
0000000000000000000000000000000000000000;;		specifiedReqs.Memory = 2000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tolerations := []v1.Toleration{{
0000000000000000000000000000000000000000;;			Key:      "foo",
0000000000000000000000000000000000000000;;			Operator: v1.TolerationOpEqual,
0000000000000000000000000000000000000000;;			Value:    "bar",
0000000000000000000000000000000000000000;;			Effect:   v1.TaintEffectPreferNoSchedule,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;		podAffinity := &v1.Affinity{
0000000000000000000000000000000000000000;;			PodAffinity: &v1.PodAffinity{
0000000000000000000000000000000000000000;;				PreferredDuringSchedulingIgnoredDuringExecution: []v1.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Weight: 5,
0000000000000000000000000000000000000000;;						PodAffinityTerm: v1.PodAffinityTerm{
0000000000000000000000000000000000000000;;							LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;								MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:      "security",
0000000000000000000000000000000000000000;;										Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;										Values:   []string{"S1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							TopologyKey: "region",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podWithTolerationsAndAffinity := &v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "container",
0000000000000000000000000000000000000000;;						Image:           "image",
0000000000000000000000000000000000000000;;						ImagePullPolicy: "Always",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Affinity:    podAffinity,
0000000000000000000000000000000000000000;;				Tolerations: tolerations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podWithTolerationsAndRequests := &v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "container",
0000000000000000000000000000000000000000;;						Image:           "image",
0000000000000000000000000000000000000000;;						ImagePullPolicy: "Always",
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								"cpu":    resource.MustParse("200m"),
0000000000000000000000000000000000000000;;								"memory": resource.MustParse("2000"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Tolerations: tolerations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod      *v1.Pod
0000000000000000000000000000000000000000;;			test     string
0000000000000000000000000000000000000000;;			expected interface{}
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:      nil,
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;				test:     "pod is nil , priorityMetadata is nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: podWithTolerationsAndAffinity,
0000000000000000000000000000000000000000;;				expected: &priorityMetadata{
0000000000000000000000000000000000000000;;					nonZeroRequest: nonZeroReqs,
0000000000000000000000000000000000000000;;					podTolerations: tolerations,
0000000000000000000000000000000000000000;;					affinity:       podAffinity,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				test: "Produce a priorityMetadata with default requests",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: podWithTolerationsAndRequests,
0000000000000000000000000000000000000000;;				expected: &priorityMetadata{
0000000000000000000000000000000000000000;;					nonZeroRequest: specifiedReqs,
0000000000000000000000000000000000000000;;					podTolerations: tolerations,
0000000000000000000000000000000000000000;;					affinity:       nil,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				test: "Produce a priorityMetadata with specified requests",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			ptData := PriorityMetadata(test.pod, nil)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expected, ptData) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %#v, got %#v", test.test, test.expected, ptData)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
