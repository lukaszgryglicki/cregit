0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b81be4af4fb49d109f2ab1c123ba4455c1aef87d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package priorities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// priorityMetadata is a type that is passed as metadata for priority functions
0000000000000000000000000000000000000000;;	type priorityMetadata struct {
0000000000000000000000000000000000000000;;		nonZeroRequest *schedulercache.Resource
0000000000000000000000000000000000000000;;		podTolerations []v1.Toleration
0000000000000000000000000000000000000000;;		affinity       *v1.Affinity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PriorityMetadata is a MetadataProducer.  Node info can be nil.
0000000000000000000000000000000000000000;;	func PriorityMetadata(pod *v1.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo) interface{} {
0000000000000000000000000000000000000000;;		// If we cannot compute metadata, just return nil
0000000000000000000000000000000000000000;;		if pod == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tolerationsPreferNoSchedule := getAllTolerationPreferNoSchedule(pod.Spec.Tolerations)
0000000000000000000000000000000000000000;;		return &priorityMetadata{
0000000000000000000000000000000000000000;;			nonZeroRequest: getNonZeroRequests(pod),
0000000000000000000000000000000000000000;;			podTolerations: tolerationsPreferNoSchedule,
0000000000000000000000000000000000000000;;			affinity:       pod.Spec.Affinity,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
