0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f9d18465d02f51f1518cc71090b0582fe383aad6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package priorities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		v1helper "k8s.io/kubernetes/pkg/api/v1/helper"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountIntolerableTaintsPreferNoSchedule gives the count of intolerable taints of a pod with effect PreferNoSchedule
0000000000000000000000000000000000000000;;	func countIntolerableTaintsPreferNoSchedule(taints []v1.Taint, tolerations []v1.Toleration) (intolerableTaints int) {
0000000000000000000000000000000000000000;;		for _, taint := range taints {
0000000000000000000000000000000000000000;;			// check only on taints that have effect PreferNoSchedule
0000000000000000000000000000000000000000;;			if taint.Effect != v1.TaintEffectPreferNoSchedule {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !v1helper.TolerationsTolerateTaint(tolerations, &taint) {
0000000000000000000000000000000000000000;;				intolerableTaints++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getAllTolerationEffectPreferNoSchedule gets the list of all Tolerations with Effect PreferNoSchedule or with no effect.
0000000000000000000000000000000000000000;;	func getAllTolerationPreferNoSchedule(tolerations []v1.Toleration) (tolerationList []v1.Toleration) {
0000000000000000000000000000000000000000;;		for _, toleration := range tolerations {
0000000000000000000000000000000000000000;;			// Empty effect means all effects which includes PreferNoSchedule, so we need to collect it as well.
0000000000000000000000000000000000000000;;			if len(toleration.Effect) == 0 || toleration.Effect == v1.TaintEffectPreferNoSchedule {
0000000000000000000000000000000000000000;;				tolerationList = append(tolerationList, toleration)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ComputeTaintTolerationPriorityMap prepares the priority list for all the nodes based on the number of intolerable taints on the node
0000000000000000000000000000000000000000;;	func ComputeTaintTolerationPriorityMap(pod *v1.Pod, meta interface{}, nodeInfo *schedulercache.NodeInfo) (schedulerapi.HostPriority, error) {
0000000000000000000000000000000000000000;;		node := nodeInfo.Node()
0000000000000000000000000000000000000000;;		if node == nil {
0000000000000000000000000000000000000000;;			return schedulerapi.HostPriority{}, fmt.Errorf("node not found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// To hold all the tolerations with Effect PreferNoSchedule
0000000000000000000000000000000000000000;;		var tolerationsPreferNoSchedule []v1.Toleration
0000000000000000000000000000000000000000;;		if priorityMeta, ok := meta.(*priorityMetadata); ok {
0000000000000000000000000000000000000000;;			tolerationsPreferNoSchedule = priorityMeta.podTolerations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			tolerationsPreferNoSchedule = getAllTolerationPreferNoSchedule(pod.Spec.Tolerations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return schedulerapi.HostPriority{
0000000000000000000000000000000000000000;;			Host:  node.Name,
0000000000000000000000000000000000000000;;			Score: countIntolerableTaintsPreferNoSchedule(node.Spec.Taints, tolerationsPreferNoSchedule),
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ComputeTaintTolerationPriorityReduce calculates the source of each node based on the number of intolerable taints on the node
0000000000000000000000000000000000000000;;	func ComputeTaintTolerationPriorityReduce(pod *v1.Pod, meta interface{}, nodeNameToInfo map[string]*schedulercache.NodeInfo, result schedulerapi.HostPriorityList) error {
0000000000000000000000000000000000000000;;		var maxCount int
0000000000000000000000000000000000000000;;		for i := range result {
0000000000000000000000000000000000000000;;			if result[i].Score > maxCount {
0000000000000000000000000000000000000000;;				maxCount = result[i].Score
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		maxCountFloat := float64(maxCount)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum priority value to give to a node
0000000000000000000000000000000000000000;;		// Priority values range from 0 - maxPriority
0000000000000000000000000000000000000000;;		const maxPriority = float64(10)
0000000000000000000000000000000000000000;;		for i := range result {
0000000000000000000000000000000000000000;;			fScore := maxPriority
0000000000000000000000000000000000000000;;			if maxCountFloat > 0 {
0000000000000000000000000000000000000000;;				fScore = (1.0 - float64(result[i].Score)/maxCountFloat) * 10
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if glog.V(10) {
0000000000000000000000000000000000000000;;				// We explicitly don't do glog.V(10).Infof() to avoid computing all the parameters if this is
0000000000000000000000000000000000000000;;				// not logged. There is visible performance gain from it.
0000000000000000000000000000000000000000;;				glog.Infof("%v -> %v: Taint Toleration Priority, Score: (%d)", pod.Name, result[i].Host, int(fScore))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[i].Score = int(fScore)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
