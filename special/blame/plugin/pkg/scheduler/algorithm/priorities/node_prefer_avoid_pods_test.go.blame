0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d5f46aea2c93b1de0a123b5726fce7d84b42e456;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package priorities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodePreferAvoidPriority(t *testing.T) {
0000000000000000000000000000000000000000;;		annotations1 := map[string]string{
0000000000000000000000000000000000000000;;			v1.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;								                    "uid": "abcdef123456",
0000000000000000000000000000000000000000;;								                    "controller": true
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		annotations2 := map[string]string{
0000000000000000000000000000000000000000;;			v1.PreferAvoidPodsAnnotationKey: `
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;								    "preferAvoidPods": [
0000000000000000000000000000000000000000;;								        {
0000000000000000000000000000000000000000;;								            "podSignature": {
0000000000000000000000000000000000000000;;								                "podController": {
0000000000000000000000000000000000000000;;								                    "apiVersion": "v1",
0000000000000000000000000000000000000000;;								                    "kind": "ReplicaSet",
0000000000000000000000000000000000000000;;								                    "name": "foo",
0000000000000000000000000000000000000000;;								                    "uid": "qwert12345",
0000000000000000000000000000000000000000;;								                    "controller": true
0000000000000000000000000000000000000000;;								                }
0000000000000000000000000000000000000000;;								            },
0000000000000000000000000000000000000000;;								            "reason": "some reason",
0000000000000000000000000000000000000000;;								            "message": "some message"
0000000000000000000000000000000000000000;;								        }
0000000000000000000000000000000000000000;;								    ]
0000000000000000000000000000000000000000;;								}`,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testNodes := []*v1.Node{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "machine1", Annotations: annotations1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "machine2", Annotations: annotations2},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "machine3"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod          *v1.Pod
0000000000000000000000000000000000000000;;			nodes        []*v1.Node
0000000000000000000000000000000000000000;;			expectedList schedulerapi.HostPriorityList
0000000000000000000000000000000000000000;;			test         string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{Kind: "ReplicationController", Name: "foo", UID: "abcdef123456", Controller: &trueVar},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        testNodes,
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 0}, {Host: "machine2", Score: 10}, {Host: "machine3", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "pod managed by ReplicationController should avoid a node, this node get lowest priority score",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{Kind: "RandomController", Name: "foo", UID: "abcdef123456", Controller: &trueVar},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        testNodes,
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 10}, {Host: "machine2", Score: 10}, {Host: "machine3", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "ownership by random controller should be ignored",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{Kind: "ReplicationController", Name: "foo", UID: "abcdef123456"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        testNodes,
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 10}, {Host: "machine2", Score: 10}, {Host: "machine3", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "owner without Controller field set should be ignored",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{Kind: "ReplicaSet", Name: "foo", UID: "qwert12345", Controller: &trueVar},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nodes:        testNodes,
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 10}, {Host: "machine2", Score: 0}, {Host: "machine3", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "pod managed by ReplicaSet should avoid a node, this node get lowest priority score",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			nodeNameToInfo := schedulercache.CreateNodeNameToInfoMap(nil, test.nodes)
0000000000000000000000000000000000000000;;			list, err := priorityFunction(CalculateNodePreferAvoidPodsPriorityMap, nil)(test.pod, nodeNameToInfo, test.nodes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// sort the two lists to avoid failures on account of different ordering
0000000000000000000000000000000000000000;;			sort.Sort(test.expectedList)
0000000000000000000000000000000000000000;;			sort.Sort(list)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedList, list) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %#v, got %#v", test.test, test.expectedList, list)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
