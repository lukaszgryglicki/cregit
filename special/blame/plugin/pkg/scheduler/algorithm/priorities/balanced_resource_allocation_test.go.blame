0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d5f46aea2c93b1de0a123b5726fce7d84b42e456;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package priorities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBalancedResourceAllocation(t *testing.T) {
0000000000000000000000000000000000000000;;		labels1 := map[string]string{
0000000000000000000000000000000000000000;;			"foo": "bar",
0000000000000000000000000000000000000000;;			"baz": "blah",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labels2 := map[string]string{
0000000000000000000000000000000000000000;;			"bar": "foo",
0000000000000000000000000000000000000000;;			"baz": "blah",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		machine1Spec := v1.PodSpec{
0000000000000000000000000000000000000000;;			NodeName: "machine1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		machine2Spec := v1.PodSpec{
0000000000000000000000000000000000000000;;			NodeName: "machine2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noResources := v1.PodSpec{
0000000000000000000000000000000000000000;;			Containers: []v1.Container{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cpuOnly := v1.PodSpec{
0000000000000000000000000000000000000000;;			NodeName: "machine1",
0000000000000000000000000000000000000000;;			Containers: []v1.Container{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;							"cpu":    resource.MustParse("1000m"),
0000000000000000000000000000000000000000;;							"memory": resource.MustParse("0"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;							"cpu":    resource.MustParse("2000m"),
0000000000000000000000000000000000000000;;							"memory": resource.MustParse("0"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cpuOnly2 := cpuOnly
0000000000000000000000000000000000000000;;		cpuOnly2.NodeName = "machine2"
0000000000000000000000000000000000000000;;		cpuAndMemory := v1.PodSpec{
0000000000000000000000000000000000000000;;			NodeName: "machine2",
0000000000000000000000000000000000000000;;			Containers: []v1.Container{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;							"cpu":    resource.MustParse("1000m"),
0000000000000000000000000000000000000000;;							"memory": resource.MustParse("2000"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;							"cpu":    resource.MustParse("2000m"),
0000000000000000000000000000000000000000;;							"memory": resource.MustParse("3000"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod          *v1.Pod
0000000000000000000000000000000000000000;;			pods         []*v1.Pod
0000000000000000000000000000000000000000;;			nodes        []*v1.Node
0000000000000000000000000000000000000000;;			expectedList schedulerapi.HostPriorityList
0000000000000000000000000000000000000000;;			test         string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores (remaining resources) on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 0 / 4000 = 0%
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 10000 = 0%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0-0)*10 = 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores (remaining resources) on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 0 / 4000 = 0 %
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 10000 = 0%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0-0)*10 = 10
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: noResources},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 4000, 10000), makeNode("machine2", 4000, 10000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 10}, {Host: "machine2", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "nothing scheduled, nothing requested",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 3000 / 4000= 75%
0000000000000000000000000000000000000000;;					Memory Fraction: 5000 / 10000 = 50%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0.75-0.5)*10 = 7
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 3000 / 6000= 50%
0000000000000000000000000000000000000000;;					Memory Fraction: 5000/10000 = 50%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0.5-0.5)*10 = 10
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 4000, 10000), makeNode("machine2", 6000, 10000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 7}, {Host: "machine2", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "nothing scheduled, resources requested, differently sized machines",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 0 / 4000= 0%
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 10000 = 0%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0-0)*10 = 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 0 / 4000= 0%
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 10000 = 0%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0-0)*10 = 10
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: noResources},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 4000, 10000), makeNode("machine2", 4000, 10000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 10}, {Host: "machine2", Score: 10}},
0000000000000000000000000000000000000000;;				test:         "no resources requested, pods scheduled",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: machine1Spec, ObjectMeta: metav1.ObjectMeta{Labels: labels2}},
0000000000000000000000000000000000000000;;					{Spec: machine1Spec, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;					{Spec: machine2Spec, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;					{Spec: machine2Spec, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 20000 = 0%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0.6-0)*10 = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 5000 / 20000 = 25%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0.6-0.25)*10 = 6
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: noResources},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 10000, 20000), makeNode("machine2", 10000, 20000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 4}, {Host: "machine2", Score: 6}},
0000000000000000000000000000000000000000;;				test:         "no resources requested, pods scheduled with resources",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: cpuOnly, ObjectMeta: metav1.ObjectMeta{Labels: labels2}},
0000000000000000000000000000000000000000;;					{Spec: cpuOnly, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;					{Spec: cpuOnly2, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;					{Spec: cpuAndMemory, ObjectMeta: metav1.ObjectMeta{Labels: labels1}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 5000 / 20000 = 25%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0.6-0.25)*10 = 6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 10000 / 20000 = 50%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0.6-0.5)*10 = 9
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 10000, 20000), makeNode("machine2", 10000, 20000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 6}, {Host: "machine2", Score: 9}},
0000000000000000000000000000000000000000;;				test:         "resources requested, pods scheduled with resources",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: cpuOnly},
0000000000000000000000000000000000000000;;					{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 5000 / 20000 = 25%
0000000000000000000000000000000000000000;;					Node1 Score: 10 - (0.6-0.25)*10 = 6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 10000 = 60%
0000000000000000000000000000000000000000;;					Memory Fraction: 10000 / 50000 = 20%
0000000000000000000000000000000000000000;;					Node2 Score: 10 - (0.6-0.2)*10 = 6
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 10000, 20000), makeNode("machine2", 10000, 50000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 6}, {Host: "machine2", Score: 6}},
0000000000000000000000000000000000000000;;				test:         "resources requested, pods scheduled with resources, differently sized machines",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: cpuOnly},
0000000000000000000000000000000000000000;;					{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				/*
0000000000000000000000000000000000000000;;					Node1 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 4000 > 100% ==> Score := 0
0000000000000000000000000000000000000000;;					Memory Fraction: 0 / 10000 = 0
0000000000000000000000000000000000000000;;					Node1 Score: 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					Node2 scores on 0-10 scale
0000000000000000000000000000000000000000;;					CPU Fraction: 6000 / 4000 > 100% ==> Score := 0
0000000000000000000000000000000000000000;;					Memory Fraction 5000 / 10000 = 50%
0000000000000000000000000000000000000000;;					Node2 Score: 0
0000000000000000000000000000000000000000;;				*/
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: cpuOnly},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 4000, 10000), makeNode("machine2", 4000, 10000)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 0}, {Host: "machine2", Score: 0}},
0000000000000000000000000000000000000000;;				test:         "requested resources exceed node capacity",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: cpuOnly},
0000000000000000000000000000000000000000;;					{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:          &v1.Pod{Spec: noResources},
0000000000000000000000000000000000000000;;				nodes:        []*v1.Node{makeNode("machine1", 0, 0), makeNode("machine2", 0, 0)},
0000000000000000000000000000000000000000;;				expectedList: []schedulerapi.HostPriority{{Host: "machine1", Score: 0}, {Host: "machine2", Score: 0}},
0000000000000000000000000000000000000000;;				test:         "zero node resources, pods scheduled with resources",
0000000000000000000000000000000000000000;;				pods: []*v1.Pod{
0000000000000000000000000000000000000000;;					{Spec: cpuOnly},
0000000000000000000000000000000000000000;;					{Spec: cpuAndMemory},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			nodeNameToInfo := schedulercache.CreateNodeNameToInfoMap(test.pods, test.nodes)
0000000000000000000000000000000000000000;;			list, err := priorityFunction(BalancedResourceAllocationMap, nil)(test.pod, nodeNameToInfo, test.nodes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedList, list) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %#v, got %#v", test.test, test.expectedList, list)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
