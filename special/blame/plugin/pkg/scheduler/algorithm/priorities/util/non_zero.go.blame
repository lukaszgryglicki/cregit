0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
07b54d277f07b7908014061057969760196e2d5b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// For each of these resources, a pod that doesn't request the resource explicitly
0000000000000000000000000000000000000000;;	// will be treated as having requested the amount indicated below, for the purpose
0000000000000000000000000000000000000000;;	// of computing priority only. This ensures that when scheduling zero-request pods, such
0000000000000000000000000000000000000000;;	// pods will not all be scheduled to the machine with the smallest in-use request,
0000000000000000000000000000000000000000;;	// and that when scheduling regular pods, such pods will not see zero-request pods as
0000000000000000000000000000000000000000;;	// consuming no resources whatsoever. We chose these values to be similar to the
0000000000000000000000000000000000000000;;	// resources that we give to cluster addon pods (#10653). But they are pretty arbitrary.
0000000000000000000000000000000000000000;;	// As described in #11713, we use request instead of limit to deal with resource requirements.
0000000000000000000000000000000000000000;;	const DefaultMilliCpuRequest int64 = 100             // 0.1 core
0000000000000000000000000000000000000000;;	const DefaultMemoryRequest int64 = 200 * 1024 * 1024 // 200 MB
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNonzeroRequests returns the default resource request if none is found or what is provided on the request
0000000000000000000000000000000000000000;;	// TODO: Consider setting default as a fixed fraction of machine capacity (take "capacity v1.ResourceList"
0000000000000000000000000000000000000000;;	// as an additional argument here) rather than using constants
0000000000000000000000000000000000000000;;	func GetNonzeroRequests(requests *v1.ResourceList) (int64, int64) {
0000000000000000000000000000000000000000;;		var outMilliCPU, outMemory int64
0000000000000000000000000000000000000000;;		// Override if un-set, but not if explicitly set to zero
0000000000000000000000000000000000000000;;		if _, found := (*requests)[v1.ResourceCPU]; !found {
0000000000000000000000000000000000000000;;			outMilliCPU = DefaultMilliCpuRequest
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			outMilliCPU = requests.Cpu().MilliValue()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Override if un-set, but not if explicitly set to zero
0000000000000000000000000000000000000000;;		if _, found := (*requests)[v1.ResourceMemory]; !found {
0000000000000000000000000000000000000000;;			outMemory = DefaultMemoryRequest
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			outMemory = requests.Memory().Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return outMilliCPU, outMemory
0000000000000000000000000000000000000000;;	}
