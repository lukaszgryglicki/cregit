0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8e1c5b2581fcdddc9dc6fc4276c11b92b1fda222;pkg/scheduler/types.go[pkg/scheduler/types.go][plugin/pkg/scheduler/algorithm/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package algorithm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FitPredicate is a function that indicates if a pod fits into an existing node.
0000000000000000000000000000000000000000;;	// The failure information is given by the error.
0000000000000000000000000000000000000000;;	// TODO: Change interface{} to a specific type.
0000000000000000000000000000000000000000;;	type FitPredicate func(pod *v1.Pod, meta interface{}, nodeInfo *schedulercache.NodeInfo) (bool, []PredicateFailureReason, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PriorityMapFunction is a function that computes per-node results for a given node.
0000000000000000000000000000000000000000;;	// TODO: Figure out the exact API of this method.
0000000000000000000000000000000000000000;;	// TODO: Change interface{} to a specific type.
0000000000000000000000000000000000000000;;	type PriorityMapFunction func(pod *v1.Pod, meta interface{}, nodeInfo *schedulercache.NodeInfo) (schedulerapi.HostPriority, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PriorityReduceFunction is a function that aggregated per-node results and computes
0000000000000000000000000000000000000000;;	// final scores for all nodes.
0000000000000000000000000000000000000000;;	// TODO: Figure out the exact API of this method.
0000000000000000000000000000000000000000;;	// TODO: Change interface{} to a specific type.
0000000000000000000000000000000000000000;;	type PriorityReduceFunction func(pod *v1.Pod, meta interface{}, nodeNameToInfo map[string]*schedulercache.NodeInfo, result schedulerapi.HostPriorityList) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetadataProducer is a function that computes metadata for a given pod.
0000000000000000000000000000000000000000;;	type MetadataProducer func(pod *v1.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo) interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DEPRECATED
0000000000000000000000000000000000000000;;	// Use Map-Reduce pattern for priority functions.
0000000000000000000000000000000000000000;;	type PriorityFunction func(pod *v1.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo, nodes []*v1.Node) (schedulerapi.HostPriorityList, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PriorityConfig struct {
0000000000000000000000000000000000000000;;		Map    PriorityMapFunction
0000000000000000000000000000000000000000;;		Reduce PriorityReduceFunction
0000000000000000000000000000000000000000;;		// TODO: Remove it after migrating all functions to
0000000000000000000000000000000000000000;;		// Map-Reduce pattern.
0000000000000000000000000000000000000000;;		Function PriorityFunction
0000000000000000000000000000000000000000;;		Weight   int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmptyMetadataProducer returns a no-op MetadataProducer type.
0000000000000000000000000000000000000000;;	func EmptyMetadataProducer(pod *v1.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo) interface{} {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PredicateFailureReason interface {
0000000000000000000000000000000000000000;;		GetReason() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetEquivalencePodFunc func(pod *v1.Pod) interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeLister interface represents anything that can list nodes for a scheduler.
0000000000000000000000000000000000000000;;	type NodeLister interface {
0000000000000000000000000000000000000000;;		// We explicitly return []*v1.Node, instead of v1.NodeList, to avoid
0000000000000000000000000000000000000000;;		// performing expensive copies that are unneeded.
0000000000000000000000000000000000000000;;		List() ([]*v1.Node, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodLister interface represents anything that can list pods for a scheduler.
0000000000000000000000000000000000000000;;	type PodLister interface {
0000000000000000000000000000000000000000;;		// We explicitly return []*v1.Pod, instead of v1.PodList, to avoid
0000000000000000000000000000000000000000;;		// performing expensive copies that are unneeded.
0000000000000000000000000000000000000000;;		List(labels.Selector) ([]*v1.Pod, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceLister interface represents anything that can produce a list of services; the list is consumed by a scheduler.
0000000000000000000000000000000000000000;;	type ServiceLister interface {
0000000000000000000000000000000000000000;;		// Lists all the services
0000000000000000000000000000000000000000;;		List(labels.Selector) ([]*v1.Service, error)
0000000000000000000000000000000000000000;;		// Gets the services for the given pod
0000000000000000000000000000000000000000;;		GetPodServices(*v1.Pod) ([]*v1.Service, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerLister interface represents anything that can produce a list of ReplicationController; the list is consumed by a scheduler.
0000000000000000000000000000000000000000;;	type ControllerLister interface {
0000000000000000000000000000000000000000;;		// Lists all the replication controllers
0000000000000000000000000000000000000000;;		List(labels.Selector) ([]*v1.ReplicationController, error)
0000000000000000000000000000000000000000;;		// Gets the services for the given pod
0000000000000000000000000000000000000000;;		GetPodControllers(*v1.Pod) ([]*v1.ReplicationController, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicaSetLister interface represents anything that can produce a list of ReplicaSet; the list is consumed by a scheduler.
0000000000000000000000000000000000000000;;	type ReplicaSetLister interface {
0000000000000000000000000000000000000000;;		// Gets the replicasets for the given pod
0000000000000000000000000000000000000000;;		GetPodReplicaSets(*v1.Pod) ([]*extensions.ReplicaSet, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ControllerLister = &EmptyControllerLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmptyControllerLister implements ControllerLister on []v1.ReplicationController returning empty data
0000000000000000000000000000000000000000;;	type EmptyControllerLister struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns nil
0000000000000000000000000000000000000000;;	func (f EmptyControllerLister) List(labels.Selector) ([]*v1.ReplicationController, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodControllers returns nil
0000000000000000000000000000000000000000;;	func (f EmptyControllerLister) GetPodControllers(pod *v1.Pod) (controllers []*v1.ReplicationController, err error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ReplicaSetLister = &EmptyReplicaSetLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmptyReplicaSetLister implements ReplicaSetLister on []extensions.ReplicaSet returning empty data
0000000000000000000000000000000000000000;;	type EmptyReplicaSetLister struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodReplicaSets returns nil
0000000000000000000000000000000000000000;;	func (f EmptyReplicaSetLister) GetPodReplicaSets(pod *v1.Pod) (rss []*extensions.ReplicaSet, err error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetLister interface represents anything that can produce a list of StatefulSet; the list is consumed by a scheduler.
0000000000000000000000000000000000000000;;	type StatefulSetLister interface {
0000000000000000000000000000000000000000;;		// Gets the StatefulSet for the given pod.
0000000000000000000000000000000000000000;;		GetPodStatefulSets(*v1.Pod) ([]*apps.StatefulSet, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StatefulSetLister = &EmptyStatefulSetLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmptyStatefulSetLister implements StatefulSetLister on []apps.StatefulSet returning empty data.
0000000000000000000000000000000000000000;;	type EmptyStatefulSetLister struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodStatefulSets of EmptyStatefulSetLister returns nil.
0000000000000000000000000000000000000000;;	func (f EmptyStatefulSetLister) GetPodStatefulSets(pod *v1.Pod) (sss []*apps.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
