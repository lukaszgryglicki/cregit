0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/scheduler_test.go[pkg/registry/scheduler_test.go][plugin/pkg/scheduler/algorithm/scheduler_interface_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package algorithm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Some functions used by multiple scheduler tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type schedulerTester struct {
0000000000000000000000000000000000000000;;		t          *testing.T
0000000000000000000000000000000000000000;;		scheduler  ScheduleAlgorithm
0000000000000000000000000000000000000000;;		nodeLister NodeLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Call if you know exactly where pod should get scheduled.
0000000000000000000000000000000000000000;;	func (st *schedulerTester) expectSchedule(pod *v1.Pod, expected string) {
0000000000000000000000000000000000000000;;		actual, err := st.scheduler.Schedule(pod, st.nodeLister)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			st.t.Errorf("Unexpected error %v\nTried to schedule: %#v", err, pod)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual != expected {
0000000000000000000000000000000000000000;;			st.t.Errorf("Unexpected scheduling value: %v, expected %v", actual, expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Call if you can't predict where pod will be scheduled.
0000000000000000000000000000000000000000;;	func (st *schedulerTester) expectSuccess(pod *v1.Pod) {
0000000000000000000000000000000000000000;;		_, err := st.scheduler.Schedule(pod, st.nodeLister)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			st.t.Errorf("Unexpected error %v\nTried to schedule: %#v", err, pod)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Call if pod should *not* schedule.
0000000000000000000000000000000000000000;;	func (st *schedulerTester) expectFailure(pod *v1.Pod) {
0000000000000000000000000000000000000000;;		_, err := st.scheduler.Schedule(pod, st.nodeLister)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			st.t.Error("Unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
