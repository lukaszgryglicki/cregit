0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/scheduler.go[pkg/registry/scheduler.go][plugin/pkg/scheduler/algorithm/scheduler_interface.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package algorithm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchedulerExtender is an interface for external processes to influence scheduling
0000000000000000000000000000000000000000;;	// decisions made by Kubernetes. This is typically needed for resources not directly
0000000000000000000000000000000000000000;;	// managed by Kubernetes.
0000000000000000000000000000000000000000;;	type SchedulerExtender interface {
0000000000000000000000000000000000000000;;		// Filter based on extender-implemented predicate functions. The filtered list is
0000000000000000000000000000000000000000;;		// expected to be a subset of the supplied list. failedNodesMap optionally contains
0000000000000000000000000000000000000000;;		// the list of failed nodes and failure reasons.
0000000000000000000000000000000000000000;;		Filter(pod *v1.Pod, nodes []*v1.Node, nodeNameToInfo map[string]*schedulercache.NodeInfo) (filteredNodes []*v1.Node, failedNodesMap schedulerapi.FailedNodesMap, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Prioritize based on extender-implemented priority functions. The returned scores & weight
0000000000000000000000000000000000000000;;		// are used to compute the weighted score for an extender. The weighted scores are added to
0000000000000000000000000000000000000000;;		// the scores computed  by Kubernetes scheduler. The total scores are used to do the host selection.
0000000000000000000000000000000000000000;;		Prioritize(pod *v1.Pod, nodes []*v1.Node) (hostPriorities *schedulerapi.HostPriorityList, weight int, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Bind delegates the action of binding a pod to a node to the extender.
0000000000000000000000000000000000000000;;		Bind(binding *v1.Binding) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IsBinder returns whether this extender is configured for the Bind method.
0000000000000000000000000000000000000000;;		IsBinder() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScheduleAlgorithm is an interface implemented by things that know how to schedule pods
0000000000000000000000000000000000000000;;	// onto machines.
0000000000000000000000000000000000000000;;	type ScheduleAlgorithm interface {
0000000000000000000000000000000000000000;;		Schedule(*v1.Pod, NodeLister) (selectedMachine string, err error)
0000000000000000000000000000000000000000;;		// Predicates() returns a pointer to a map of predicate functions. This is
0000000000000000000000000000000000000000;;		// exposed for testing.
0000000000000000000000000000000000000000;;		Predicates() map[string]FitPredicate
0000000000000000000000000000000000000000;;		// Prioritizers returns a slice of priority config. This is exposed for
0000000000000000000000000000000000000000;;		// testing.
0000000000000000000000000000000000000000;;		Prioritizers() []PriorityConfig
0000000000000000000000000000000000000000;;	}
