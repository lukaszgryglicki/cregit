0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5eaa45722d6ad11880f28debffebe67631916e9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package predicates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindLabelsInSet gets as many key/value pairs as possible out of a label set.
0000000000000000000000000000000000000000;;	func FindLabelsInSet(labelsToKeep []string, selector labels.Set) map[string]string {
0000000000000000000000000000000000000000;;		aL := make(map[string]string)
0000000000000000000000000000000000000000;;		for _, l := range labelsToKeep {
0000000000000000000000000000000000000000;;			if selector.Has(l) {
0000000000000000000000000000000000000000;;				aL[l] = selector.Get(l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return aL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddUnsetLabelsToMap backfills missing values with values we find in a map.
0000000000000000000000000000000000000000;;	func AddUnsetLabelsToMap(aL map[string]string, labelsToAdd []string, labelSet labels.Set) {
0000000000000000000000000000000000000000;;		for _, l := range labelsToAdd {
0000000000000000000000000000000000000000;;			// if the label is already there, dont overwrite it.
0000000000000000000000000000000000000000;;			if _, exists := aL[l]; exists {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// otherwise, backfill this label.
0000000000000000000000000000000000000000;;			if labelSet.Has(l) {
0000000000000000000000000000000000000000;;				aL[l] = labelSet.Get(l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterPodsByNamespace filters pods outside a namespace from the given list.
0000000000000000000000000000000000000000;;	func FilterPodsByNamespace(pods []*v1.Pod, ns string) []*v1.Pod {
0000000000000000000000000000000000000000;;		filtered := []*v1.Pod{}
0000000000000000000000000000000000000000;;		for _, nsPod := range pods {
0000000000000000000000000000000000000000;;			if nsPod.Namespace == ns {
0000000000000000000000000000000000000000;;				filtered = append(filtered, nsPod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filtered
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSelectorFromLabels is used to define a selector that corresponds to the keys in a map.
0000000000000000000000000000000000000000;;	func CreateSelectorFromLabels(aL map[string]string) labels.Selector {
0000000000000000000000000000000000000000;;		if aL == nil || len(aL) == 0 {
0000000000000000000000000000000000000000;;			return labels.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(aL).AsSelector()
0000000000000000000000000000000000000000;;	}
