0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
64d3c50d0129fb8a2d4ef52e223bd34043c9bab1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package predicates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// The predicateName tries to be consistent as the predicate name used in DefaultAlgorithmProvider defined in
0000000000000000000000000000000000000000;;		// defaults.go (which tend to be stable for backward compatibility)
0000000000000000000000000000000000000000;;		ErrDiskConflict              = newPredicateFailureError("NoDiskConflict")
0000000000000000000000000000000000000000;;		ErrVolumeZoneConflict        = newPredicateFailureError("NoVolumeZoneConflict")
0000000000000000000000000000000000000000;;		ErrNodeSelectorNotMatch      = newPredicateFailureError("MatchNodeSelector")
0000000000000000000000000000000000000000;;		ErrPodAffinityNotMatch       = newPredicateFailureError("MatchInterPodAffinity")
0000000000000000000000000000000000000000;;		ErrTaintsTolerationsNotMatch = newPredicateFailureError("PodToleratesNodeTaints")
0000000000000000000000000000000000000000;;		ErrPodNotMatchHostName       = newPredicateFailureError("HostName")
0000000000000000000000000000000000000000;;		ErrPodNotFitsHostPorts       = newPredicateFailureError("PodFitsHostPorts")
0000000000000000000000000000000000000000;;		ErrNodeLabelPresenceViolated = newPredicateFailureError("CheckNodeLabelPresence")
0000000000000000000000000000000000000000;;		ErrServiceAffinityViolated   = newPredicateFailureError("CheckServiceAffinity")
0000000000000000000000000000000000000000;;		ErrMaxVolumeCountExceeded    = newPredicateFailureError("MaxVolumeCount")
0000000000000000000000000000000000000000;;		ErrNodeUnderMemoryPressure   = newPredicateFailureError("NodeUnderMemoryPressure")
0000000000000000000000000000000000000000;;		ErrNodeUnderDiskPressure     = newPredicateFailureError("NodeUnderDiskPressure")
0000000000000000000000000000000000000000;;		ErrVolumeNodeConflict        = newPredicateFailureError("NoVolumeNodeConflict")
0000000000000000000000000000000000000000;;		// ErrFakePredicate is used for test only. The fake predicates returning false also returns error
0000000000000000000000000000000000000000;;		// as ErrFakePredicate.
0000000000000000000000000000000000000000;;		ErrFakePredicate = newPredicateFailureError("FakePredicateError")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InsufficientResourceError is an error type that indicates what kind of resource limit is
0000000000000000000000000000000000000000;;	// hit and caused the unfitting failure.
0000000000000000000000000000000000000000;;	type InsufficientResourceError struct {
0000000000000000000000000000000000000000;;		// resourceName is the name of the resource that is insufficient
0000000000000000000000000000000000000000;;		ResourceName v1.ResourceName
0000000000000000000000000000000000000000;;		requested    int64
0000000000000000000000000000000000000000;;		used         int64
0000000000000000000000000000000000000000;;		capacity     int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInsufficientResourceError(resourceName v1.ResourceName, requested, used, capacity int64) *InsufficientResourceError {
0000000000000000000000000000000000000000;;		return &InsufficientResourceError{
0000000000000000000000000000000000000000;;			ResourceName: resourceName,
0000000000000000000000000000000000000000;;			requested:    requested,
0000000000000000000000000000000000000000;;			used:         used,
0000000000000000000000000000000000000000;;			capacity:     capacity,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *InsufficientResourceError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Node didn't have enough resource: %s, requested: %d, used: %d, capacity: %d",
0000000000000000000000000000000000000000;;			e.ResourceName, e.requested, e.used, e.capacity)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *InsufficientResourceError) GetReason() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Insufficient %v", e.ResourceName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *InsufficientResourceError) GetInsufficientAmount() int64 {
0000000000000000000000000000000000000000;;		return e.requested - (e.capacity - e.used)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PredicateFailureError struct {
0000000000000000000000000000000000000000;;		PredicateName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPredicateFailureError(predicateName string) *PredicateFailureError {
0000000000000000000000000000000000000000;;		return &PredicateFailureError{PredicateName: predicateName}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *PredicateFailureError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Predicate %s failed", e.PredicateName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *PredicateFailureError) GetReason() string {
0000000000000000000000000000000000000000;;		return e.PredicateName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailureReason struct {
0000000000000000000000000000000000000000;;		reason string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFailureReason(msg string) *FailureReason {
0000000000000000000000000000000000000000;;		return &FailureReason{reason: msg}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *FailureReason) GetReason() string {
0000000000000000000000000000000000000000;;		return e.reason
0000000000000000000000000000000000000000;;	}
