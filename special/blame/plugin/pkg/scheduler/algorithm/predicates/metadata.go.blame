0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1d241e14450093eb8453d7d05fce0390d6244548;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package predicates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;		schedutil "k8s.io/kubernetes/plugin/pkg/scheduler/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PredicateMetadataFactory struct {
0000000000000000000000000000000000000000;;		podLister algorithm.PodLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPredicateMetadataFactory(podLister algorithm.PodLister) algorithm.MetadataProducer {
0000000000000000000000000000000000000000;;		factory := &PredicateMetadataFactory{
0000000000000000000000000000000000000000;;			podLister,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return factory.GetMetadata
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetadata returns the predicateMetadata used which will be used by various predicates.
0000000000000000000000000000000000000000;;	func (pfactory *PredicateMetadataFactory) GetMetadata(pod *v1.Pod, nodeNameToInfoMap map[string]*schedulercache.NodeInfo) interface{} {
0000000000000000000000000000000000000000;;		// If we cannot compute metadata, just return nil
0000000000000000000000000000000000000000;;		if pod == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		matchingTerms, err := getMatchingAntiAffinityTerms(pod, nodeNameToInfoMap)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		predicateMetadata := &predicateMetadata{
0000000000000000000000000000000000000000;;			pod:                       pod,
0000000000000000000000000000000000000000;;			podBestEffort:             isPodBestEffort(pod),
0000000000000000000000000000000000000000;;			podRequest:                GetResourceRequest(pod),
0000000000000000000000000000000000000000;;			podPorts:                  schedutil.GetUsedPorts(pod),
0000000000000000000000000000000000000000;;			matchingAntiAffinityTerms: matchingTerms,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for predicateName, precomputeFunc := range predicatePrecomputations {
0000000000000000000000000000000000000000;;			glog.V(10).Infof("Precompute: %v", predicateName)
0000000000000000000000000000000000000000;;			precomputeFunc(predicateMetadata)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return predicateMetadata
0000000000000000000000000000000000000000;;	}
