0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5eaa45722d6ad11880f28debffebe67631916e9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package predicates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExampleUtils is a https://blog.golang.org/examples styled unit test.
0000000000000000000000000000000000000000;;	func ExampleFindLabelsInSet() {
0000000000000000000000000000000000000000;;		labelSubset := labels.Set{}
0000000000000000000000000000000000000000;;		labelSubset["label1"] = "value1"
0000000000000000000000000000000000000000;;		labelSubset["label2"] = "value2"
0000000000000000000000000000000000000000;;		// Lets make believe that these pods are on the cluster.
0000000000000000000000000000000000000000;;		// Utility functions will inspect their labels, filter them, and so on.
0000000000000000000000000000000000000000;;		nsPods := []*v1.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "pod1",
0000000000000000000000000000000000000000;;					Namespace: "ns1",
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"label1": "wontSeeThis",
0000000000000000000000000000000000000000;;						"label2": "wontSeeThis",
0000000000000000000000000000000000000000;;						"label3": "will_see_this",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, // first pod which will be used via the utilities
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "pod2",
0000000000000000000000000000000000000000;;					Namespace: "ns1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "pod3ThatWeWontSee",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println(FindLabelsInSet([]string{"label1", "label2", "label3"}, nsPods[0].ObjectMeta.Labels)["label3"])
0000000000000000000000000000000000000000;;		AddUnsetLabelsToMap(labelSubset, []string{"label1", "label2", "label3"}, nsPods[0].ObjectMeta.Labels)
0000000000000000000000000000000000000000;;		fmt.Println(labelSubset)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, pod := range FilterPodsByNamespace(nsPods, "ns1") {
0000000000000000000000000000000000000000;;			fmt.Print(pod.Name, ",")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// will_see_this
0000000000000000000000000000000000000000;;		// label1=value1,label2=value2,label3=will_see_this
0000000000000000000000000000000000000000;;		// pod1,pod2,
0000000000000000000000000000000000000000;;	}
