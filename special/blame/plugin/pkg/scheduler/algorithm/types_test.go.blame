0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
811fd2612f7eb0275cc9512d883d15a49d15fd6e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package algorithm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmptyMetadataProducer should returns a no-op MetadataProducer type.
0000000000000000000000000000000000000000;;	func TestEmptyMetadataProducer(t *testing.T) {
0000000000000000000000000000000000000000;;		fakePod := new(v1.Pod)
0000000000000000000000000000000000000000;;		fakeLabelSelector := labels.SelectorFromSet(labels.Set{"foo": "bar"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeNameToInfo := map[string]*schedulercache.NodeInfo{
0000000000000000000000000000000000000000;;			"2": schedulercache.NewNodeInfo(fakePod),
0000000000000000000000000000000000000000;;			"1": schedulercache.NewNodeInfo(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test EmptyMetadataProducer
0000000000000000000000000000000000000000;;		metadata := EmptyMetadataProducer(fakePod, nodeNameToInfo)
0000000000000000000000000000000000000000;;		if metadata != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to produce empty metadata: got %v, expected nil", metadata)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test EmptyControllerLister should return nill
0000000000000000000000000000000000000000;;		controllerLister := EmptyControllerLister{}
0000000000000000000000000000000000000000;;		nilController, nilError := controllerLister.List(fakeLabelSelector)
0000000000000000000000000000000000000000;;		if nilController != nil || nilError != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to produce empty controller lister: got %v, expected nil", nilController)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test GetPodControllers on empty controller lister should return nill
0000000000000000000000000000000000000000;;		nilController, nilError = controllerLister.GetPodControllers(fakePod)
0000000000000000000000000000000000000000;;		if nilController != nil || nilError != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to produce empty controller lister: got %v, expected nil", nilController)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test GetPodReplicaSets on empty replica sets should return nill
0000000000000000000000000000000000000000;;		replicaSetLister := EmptyReplicaSetLister{}
0000000000000000000000000000000000000000;;		nilRss, nilErrRss := replicaSetLister.GetPodReplicaSets(fakePod)
0000000000000000000000000000000000000000;;		if nilRss != nil || nilErrRss != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to produce empty replicaSetLister: got %v, expected nil", nilRss)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test GetPodStatefulSets on empty replica sets should return nill
0000000000000000000000000000000000000000;;		statefulSetLister := EmptyStatefulSetLister{}
0000000000000000000000000000000000000000;;		nilSSL, nilErrSSL := statefulSetLister.GetPodStatefulSets(fakePod)
0000000000000000000000000000000000000000;;		if nilSSL != nil || nilErrSSL != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to produce empty statefulSetLister: got %v, expected nil", nilSSL)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
