0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
caa4787cbfd4c6f6d6e39f6e9f7f7d20c119489e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUsedPorts returns the used host ports of Pods: if 'port' was used, a 'port:true' pair
0000000000000000000000000000000000000000;;	// will be in the result; but it does not resolve port conflict.
0000000000000000000000000000000000000000;;	func GetUsedPorts(pods ...*v1.Pod) map[int]bool {
0000000000000000000000000000000000000000;;		ports := make(map[int]bool)
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			for j := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;				container := &pod.Spec.Containers[j]
0000000000000000000000000000000000000000;;				for k := range container.Ports {
0000000000000000000000000000000000000000;;					podPort := &container.Ports[k]
0000000000000000000000000000000000000000;;					// "0" is explicitly ignored in PodFitsHostPorts,
0000000000000000000000000000000000000000;;					// which is the only function that uses this value.
0000000000000000000000000000000000000000;;					if podPort.HostPort != 0 {
0000000000000000000000000000000000000000;;						ports[int(podPort.HostPort)] = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ports
0000000000000000000000000000000000000000;;	}
