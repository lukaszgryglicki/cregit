0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0d256681b018e44f017644355f370d62a449a621;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		ktypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeClock struct {
0000000000000000000000000000000000000000;;		t time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeClock) Now() time.Time {
0000000000000000000000000000000000000000;;		return f.t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBackoff(t *testing.T) {
0000000000000000000000000000000000000000;;		clock := fakeClock{}
0000000000000000000000000000000000000000;;		backoff := CreatePodBackoffWithClock(1*time.Second, 60*time.Second, &clock)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			podID            ktypes.NamespacedName
0000000000000000000000000000000000000000;;			expectedDuration time.Duration
0000000000000000000000000000000000000000;;			advanceClock     time.Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podID:            ktypes.NamespacedName{Namespace: "default", Name: "foo"},
0000000000000000000000000000000000000000;;				expectedDuration: 1 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podID:            ktypes.NamespacedName{Namespace: "default", Name: "foo"},
0000000000000000000000000000000000000000;;				expectedDuration: 2 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podID:            ktypes.NamespacedName{Namespace: "default", Name: "foo"},
0000000000000000000000000000000000000000;;				expectedDuration: 4 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podID:            ktypes.NamespacedName{Namespace: "default", Name: "bar"},
0000000000000000000000000000000000000000;;				expectedDuration: 1 * time.Second,
0000000000000000000000000000000000000000;;				advanceClock:     120 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// 'foo' should have been gc'd here.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podID:            ktypes.NamespacedName{Namespace: "default", Name: "foo"},
0000000000000000000000000000000000000000;;				expectedDuration: 1 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			duration := backoff.GetEntry(test.podID).getBackoff(backoff.maxDuration)
0000000000000000000000000000000000000000;;			if duration != test.expectedDuration {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, got %s for %s", test.expectedDuration.String(), duration.String(), test.podID)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			clock.t = clock.t.Add(test.advanceClock)
0000000000000000000000000000000000000000;;			backoff.Gc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fooID := ktypes.NamespacedName{Namespace: "default", Name: "foo"}
0000000000000000000000000000000000000000;;		backoff.perPodBackoff[fooID].backoff = 60 * time.Second
0000000000000000000000000000000000000000;;		duration := backoff.GetEntry(fooID).getBackoff(backoff.maxDuration)
0000000000000000000000000000000000000000;;		if duration != 60*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("expected: 60, got %s", duration.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Verify that we split on namespaces correctly, same name, different namespace
0000000000000000000000000000000000000000;;		fooID.Namespace = "other"
0000000000000000000000000000000000000000;;		duration = backoff.GetEntry(fooID).getBackoff(backoff.maxDuration)
0000000000000000000000000000000000000000;;		if duration != 1*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("expected: 1, got %s", duration.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
