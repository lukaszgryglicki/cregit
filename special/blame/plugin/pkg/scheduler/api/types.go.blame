0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
fcfce78e8cff70aa02fdf9c01e340eaf2b4f4ed6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		MaxUint          = ^uint(0)
0000000000000000000000000000000000000000;;		MaxInt           = int(MaxUint >> 1)
0000000000000000000000000000000000000000;;		MaxTotalPriority = MaxInt
0000000000000000000000000000000000000000;;		MaxPriority      = 10
0000000000000000000000000000000000000000;;		MaxWeight        = MaxInt / MaxPriority
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Policy struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Holds the information to configure the fit predicate functions
0000000000000000000000000000000000000000;;		Predicates []PredicatePolicy
0000000000000000000000000000000000000000;;		// Holds the information to configure the priority functions
0000000000000000000000000000000000000000;;		Priorities []PriorityPolicy
0000000000000000000000000000000000000000;;		// Holds the information to communicate with the extender(s)
0000000000000000000000000000000000000000;;		ExtenderConfigs []ExtenderConfig
0000000000000000000000000000000000000000;;		// RequiredDuringScheduling affinity is not symmetric, but there is an implicit PreferredDuringScheduling affinity rule
0000000000000000000000000000000000000000;;		// corresponding to every RequiredDuringScheduling affinity rule.
0000000000000000000000000000000000000000;;		// HardPodAffinitySymmetricWeight represents the weight of implicit PreferredDuringScheduling affinity rule, in the range 1-100.
0000000000000000000000000000000000000000;;		HardPodAffinitySymmetricWeight int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PredicatePolicy struct {
0000000000000000000000000000000000000000;;		// Identifier of the predicate policy
0000000000000000000000000000000000000000;;		// For a custom predicate, the name can be user-defined
0000000000000000000000000000000000000000;;		// For the Kubernetes provided predicates, the name is the identifier of the pre-defined predicate
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Holds the parameters to configure the given predicate
0000000000000000000000000000000000000000;;		Argument *PredicateArgument
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PriorityPolicy struct {
0000000000000000000000000000000000000000;;		// Identifier of the priority policy
0000000000000000000000000000000000000000;;		// For a custom priority, the name can be user-defined
0000000000000000000000000000000000000000;;		// For the Kubernetes provided priority functions, the name is the identifier of the pre-defined priority function
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// The numeric multiplier for the node scores that the priority function generates
0000000000000000000000000000000000000000;;		// The weight should be a positive integer
0000000000000000000000000000000000000000;;		Weight int
0000000000000000000000000000000000000000;;		// Holds the parameters to configure the given priority function
0000000000000000000000000000000000000000;;		Argument *PriorityArgument
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents the arguments that the different types of predicates take
0000000000000000000000000000000000000000;;	// Only one of its members may be specified
0000000000000000000000000000000000000000;;	type PredicateArgument struct {
0000000000000000000000000000000000000000;;		// The predicate that provides affinity for pods belonging to a service
0000000000000000000000000000000000000000;;		// It uses a label to identify nodes that belong to the same "group"
0000000000000000000000000000000000000000;;		ServiceAffinity *ServiceAffinity
0000000000000000000000000000000000000000;;		// The predicate that checks whether a particular node has a certain label
0000000000000000000000000000000000000000;;		// defined or not, regardless of value
0000000000000000000000000000000000000000;;		LabelsPresence *LabelsPresence
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents the arguments that the different types of priorities take.
0000000000000000000000000000000000000000;;	// Only one of its members may be specified
0000000000000000000000000000000000000000;;	type PriorityArgument struct {
0000000000000000000000000000000000000000;;		// The priority function that ensures a good spread (anti-affinity) for pods belonging to a service
0000000000000000000000000000000000000000;;		// It uses a label to identify nodes that belong to the same "group"
0000000000000000000000000000000000000000;;		ServiceAntiAffinity *ServiceAntiAffinity
0000000000000000000000000000000000000000;;		// The priority function that checks whether a particular node has a certain label
0000000000000000000000000000000000000000;;		// defined or not, regardless of value
0000000000000000000000000000000000000000;;		LabelPreference *LabelPreference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Holds the parameters that are used to configure the corresponding predicate
0000000000000000000000000000000000000000;;	type ServiceAffinity struct {
0000000000000000000000000000000000000000;;		// The list of labels that identify node "groups"
0000000000000000000000000000000000000000;;		// All of the labels should match for the node to be considered a fit for hosting the pod
0000000000000000000000000000000000000000;;		Labels []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Holds the parameters that are used to configure the corresponding predicate
0000000000000000000000000000000000000000;;	type LabelsPresence struct {
0000000000000000000000000000000000000000;;		// The list of labels that identify node "groups"
0000000000000000000000000000000000000000;;		// All of the labels should be either present (or absent) for the node to be considered a fit for hosting the pod
0000000000000000000000000000000000000000;;		Labels []string
0000000000000000000000000000000000000000;;		// The boolean flag that indicates whether the labels should be present or absent from the node
0000000000000000000000000000000000000000;;		Presence bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Holds the parameters that are used to configure the corresponding priority function
0000000000000000000000000000000000000000;;	type ServiceAntiAffinity struct {
0000000000000000000000000000000000000000;;		// Used to identify node "groups"
0000000000000000000000000000000000000000;;		Label string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Holds the parameters that are used to configure the corresponding priority function
0000000000000000000000000000000000000000;;	type LabelPreference struct {
0000000000000000000000000000000000000000;;		// Used to identify node "groups"
0000000000000000000000000000000000000000;;		Label string
0000000000000000000000000000000000000000;;		// This is a boolean flag
0000000000000000000000000000000000000000;;		// If true, higher priority is given to nodes that have the label
0000000000000000000000000000000000000000;;		// If false, higher priority is given to nodes that do not have the label
0000000000000000000000000000000000000000;;		Presence bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Holds the parameters used to communicate with the extender. If a verb is unspecified/empty,
0000000000000000000000000000000000000000;;	// it is assumed that the extender chose not to provide that extension.
0000000000000000000000000000000000000000;;	type ExtenderConfig struct {
0000000000000000000000000000000000000000;;		// URLPrefix at which the extender is available
0000000000000000000000000000000000000000;;		URLPrefix string
0000000000000000000000000000000000000000;;		// Verb for the filter call, empty if not supported. This verb is appended to the URLPrefix when issuing the filter call to extender.
0000000000000000000000000000000000000000;;		FilterVerb string
0000000000000000000000000000000000000000;;		// Verb for the prioritize call, empty if not supported. This verb is appended to the URLPrefix when issuing the prioritize call to extender.
0000000000000000000000000000000000000000;;		PrioritizeVerb string
0000000000000000000000000000000000000000;;		// The numeric multiplier for the node scores that the prioritize call generates.
0000000000000000000000000000000000000000;;		// The weight should be a positive integer
0000000000000000000000000000000000000000;;		Weight int
0000000000000000000000000000000000000000;;		// Verb for the bind call, empty if not supported. This verb is appended to the URLPrefix when issuing the bind call to extender.
0000000000000000000000000000000000000000;;		// If this method is implemented by the extender, it is the extender's responsibility to bind the pod to apiserver. Only one extender
0000000000000000000000000000000000000000;;		// can implement this function.
0000000000000000000000000000000000000000;;		BindVerb string
0000000000000000000000000000000000000000;;		// EnableHttps specifies whether https should be used to communicate with the extender
0000000000000000000000000000000000000000;;		EnableHttps bool
0000000000000000000000000000000000000000;;		// TLSConfig specifies the transport layer security config
0000000000000000000000000000000000000000;;		TLSConfig *restclient.TLSClientConfig
0000000000000000000000000000000000000000;;		// HTTPTimeout specifies the timeout duration for a call to the extender. Filter timeout fails the scheduling of the pod. Prioritize
0000000000000000000000000000000000000000;;		// timeout is ignored, k8s/other extenders priorities are used to select the node.
0000000000000000000000000000000000000000;;		HTTPTimeout time.Duration
0000000000000000000000000000000000000000;;		// NodeCacheCapable specifies that the extender is capable of caching node information,
0000000000000000000000000000000000000000;;		// so the scheduler should only send minimal information about the eligible nodes
0000000000000000000000000000000000000000;;		// assuming that the extender already cached full details of all nodes in the cluster
0000000000000000000000000000000000000000;;		NodeCacheCapable bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtenderArgs represents the arguments needed by the extender to filter/prioritize
0000000000000000000000000000000000000000;;	// nodes for a pod.
0000000000000000000000000000000000000000;;	type ExtenderArgs struct {
0000000000000000000000000000000000000000;;		// Pod being scheduled
0000000000000000000000000000000000000000;;		Pod v1.Pod
0000000000000000000000000000000000000000;;		// List of candidate nodes where the pod can be scheduled; to be populated
0000000000000000000000000000000000000000;;		// only if ExtenderConfig.NodeCacheCapable == false
0000000000000000000000000000000000000000;;		Nodes *v1.NodeList
0000000000000000000000000000000000000000;;		// List of candidate node names where the pod can be scheduled; to be
0000000000000000000000000000000000000000;;		// populated only if ExtenderConfig.NodeCacheCapable == true
0000000000000000000000000000000000000000;;		NodeNames *[]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FailedNodesMap represents the filtered out nodes, with node names and failure messages
0000000000000000000000000000000000000000;;	type FailedNodesMap map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtenderFilterResult represents the results of a filter call to an extender
0000000000000000000000000000000000000000;;	type ExtenderFilterResult struct {
0000000000000000000000000000000000000000;;		// Filtered set of nodes where the pod can be scheduled; to be populated
0000000000000000000000000000000000000000;;		// only if ExtenderConfig.NodeCacheCapable == false
0000000000000000000000000000000000000000;;		Nodes *v1.NodeList
0000000000000000000000000000000000000000;;		// Filtered set of nodes where the pod can be scheduled; to be populated
0000000000000000000000000000000000000000;;		// only if ExtenderConfig.NodeCacheCapable == true
0000000000000000000000000000000000000000;;		NodeNames *[]string
0000000000000000000000000000000000000000;;		// Filtered out nodes where the pod can't be scheduled and the failure messages
0000000000000000000000000000000000000000;;		FailedNodes FailedNodesMap
0000000000000000000000000000000000000000;;		// Error message indicating failure
0000000000000000000000000000000000000000;;		Error string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtenderBindingArgs represents the arguments to an extender for binding a pod to a node.
0000000000000000000000000000000000000000;;	type ExtenderBindingArgs struct {
0000000000000000000000000000000000000000;;		// PodName is the name of the pod being bound
0000000000000000000000000000000000000000;;		PodName string
0000000000000000000000000000000000000000;;		// PodNamespace is the namespace of the pod being bound
0000000000000000000000000000000000000000;;		PodNamespace string
0000000000000000000000000000000000000000;;		// PodUID is the UID of the pod being bound
0000000000000000000000000000000000000000;;		PodUID types.UID
0000000000000000000000000000000000000000;;		// Node selected by the scheduler
0000000000000000000000000000000000000000;;		Node string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtenderBindingResult represents the result of binding of a pod to a node from an extender.
0000000000000000000000000000000000000000;;	type ExtenderBindingResult struct {
0000000000000000000000000000000000000000;;		// Error message indicating failure
0000000000000000000000000000000000000000;;		Error string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HostPriority represents the priority of scheduling to a particular host, higher priority is better.
0000000000000000000000000000000000000000;;	type HostPriority struct {
0000000000000000000000000000000000000000;;		// Name of the host
0000000000000000000000000000000000000000;;		Host string
0000000000000000000000000000000000000000;;		// Score associated with the host
0000000000000000000000000000000000000000;;		Score int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPriorityList []HostPriority
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostPriorityList) Len() int {
0000000000000000000000000000000000000000;;		return len(h)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostPriorityList) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if h[i].Score == h[j].Score {
0000000000000000000000000000000000000000;;			return h[i].Host < h[j].Host
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return h[i].Score < h[j].Score
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostPriorityList) Swap(i, j int) {
0000000000000000000000000000000000000000;;		h[i], h[j] = h[j], h[i]
0000000000000000000000000000000000000000;;	}
