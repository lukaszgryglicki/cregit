0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
773cbf2c23d266302b8bb9842f236819722310e8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidatePolicy checks for errors in the Config
0000000000000000000000000000000000000000;;	// It does not return early so that it can find as many errors as possible
0000000000000000000000000000000000000000;;	func ValidatePolicy(policy schedulerapi.Policy) error {
0000000000000000000000000000000000000000;;		var validationErrors []error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, priority := range policy.Priorities {
0000000000000000000000000000000000000000;;			if priority.Weight <= 0 || priority.Weight >= schedulerapi.MaxWeight {
0000000000000000000000000000000000000000;;				validationErrors = append(validationErrors, fmt.Errorf("Priority %s should have a positive weight applied to it or it has overflown", priority.Name))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		binders := 0
0000000000000000000000000000000000000000;;		for _, extender := range policy.ExtenderConfigs {
0000000000000000000000000000000000000000;;			if extender.Weight <= 0 {
0000000000000000000000000000000000000000;;				validationErrors = append(validationErrors, fmt.Errorf("Priority for extender %s should have a positive weight applied to it", extender.URLPrefix))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if extender.BindVerb != "" {
0000000000000000000000000000000000000000;;				binders++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if binders > 1 {
0000000000000000000000000000000000000000;;			validationErrors = append(validationErrors, fmt.Errorf("Only one extender can implement bind, found %v", binders))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(validationErrors)
0000000000000000000000000000000000000000;;	}
