0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9c97f06e1356e7ea7b8c52255a3c0aebc1c1200d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreinformers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion/core/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type graphPopulator struct {
0000000000000000000000000000000000000000;;		graph *Graph
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddGraphEventHandlers(graph *Graph, pods coreinformers.PodInformer, pvs coreinformers.PersistentVolumeInformer) {
0000000000000000000000000000000000000000;;		g := &graphPopulator{
0000000000000000000000000000000000000000;;			graph: graph,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			AddFunc:    g.addPod,
0000000000000000000000000000000000000000;;			UpdateFunc: g.updatePod,
0000000000000000000000000000000000000000;;			DeleteFunc: g.deletePod,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvs.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			AddFunc:    g.addPV,
0000000000000000000000000000000000000000;;			UpdateFunc: g.updatePV,
0000000000000000000000000000000000000000;;			DeleteFunc: g.deletePV,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) addPod(obj interface{}) {
0000000000000000000000000000000000000000;;		g.updatePod(nil, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) updatePod(oldObj, obj interface{}) {
0000000000000000000000000000000000000000;;		pod := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		if len(pod.Spec.NodeName) == 0 {
0000000000000000000000000000000000000000;;			// No node assigned
0000000000000000000000000000000000000000;;			glog.V(5).Infof("updatePod %s/%s, no node", pod.Namespace, pod.Name)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if oldPod, ok := oldObj.(*api.Pod); ok && oldPod != nil {
0000000000000000000000000000000000000000;;			if (pod.Spec.NodeName == oldPod.Spec.NodeName) && (pod.UID == oldPod.UID) {
0000000000000000000000000000000000000000;;				// Node and uid are unchanged, all object references in the pod spec are immutable
0000000000000000000000000000000000000000;;				glog.V(5).Infof("updatePod %s/%s, node unchanged", pod.Namespace, pod.Name)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("updatePod %s/%s for node %s", pod.Namespace, pod.Name, pod.Spec.NodeName)
0000000000000000000000000000000000000000;;		g.graph.AddPod(pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) deletePod(obj interface{}) {
0000000000000000000000000000000000000000;;		if tombstone, ok := obj.(cache.DeletedFinalStateUnknown); ok {
0000000000000000000000000000000000000000;;			obj = tombstone.Obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod, ok := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			glog.Infof("unexpected type %T", obj)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(pod.Spec.NodeName) == 0 {
0000000000000000000000000000000000000000;;			glog.V(5).Infof("deletePod %s/%s, no node", pod.Namespace, pod.Name)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("deletePod %s/%s for node %s", pod.Namespace, pod.Name, pod.Spec.NodeName)
0000000000000000000000000000000000000000;;		g.graph.DeletePod(pod.Name, pod.Namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) addPV(obj interface{}) {
0000000000000000000000000000000000000000;;		g.updatePV(nil, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) updatePV(oldObj, obj interface{}) {
0000000000000000000000000000000000000000;;		pv := obj.(*api.PersistentVolume)
0000000000000000000000000000000000000000;;		// TODO: skip add if uid, pvc, and secrets are all identical between old and new
0000000000000000000000000000000000000000;;		g.graph.AddPV(pv)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *graphPopulator) deletePV(obj interface{}) {
0000000000000000000000000000000000000000;;		if tombstone, ok := obj.(cache.DeletedFinalStateUnknown); ok {
0000000000000000000000000000000000000000;;			obj = tombstone.Obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pv, ok := obj.(*api.PersistentVolume)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			glog.Infof("unexpected type %T", obj)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.graph.DeletePV(pv.Name)
0000000000000000000000000000000000000000;;	}
