0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4e07c70b9e659ac375e092feca91223033da2829;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rbac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		rbacregistryvalidation "k8s.io/kubernetes/pkg/registry/rbac/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSubjectLocator(t *testing.T) {
0000000000000000000000000000000000000000;;		type actionToSubjects struct {
0000000000000000000000000000000000000000;;			action   authorizer.Attributes
0000000000000000000000000000000000000000;;			subjects []rbac.Subject
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name                string
0000000000000000000000000000000000000000;;			roles               []*rbac.Role
0000000000000000000000000000000000000000;;			roleBindings        []*rbac.RoleBinding
0000000000000000000000000000000000000000;;			clusterRoles        []*rbac.ClusterRole
0000000000000000000000000000000000000000;;			clusterRoleBindings []*rbac.ClusterRoleBinding
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			superUser string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actionsToSubjects []actionToSubjects
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no super user, star matches star",
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("admin", newRule("*", "*", "*", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				clusterRoleBindings: []*rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					newClusterRoleBinding("admin", "User:super-admin", "Group:super-admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roleBindings: []*rbac.RoleBinding{
0000000000000000000000000000000000000000;;					newRoleBinding("ns1", "admin", bindToClusterRole, "User:admin", "Group:admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				actionsToSubjects: []actionToSubjects{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "get", "Pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						// cluster role matches star in namespace
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "*", "Pods", "", "*", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						// empty ns
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "*", "Pods", "", "", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "super user, local roles work",
0000000000000000000000000000000000000000;;				superUser: "foo",
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("admin", newRule("*", "*", "*", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				clusterRoleBindings: []*rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					newClusterRoleBinding("admin", "User:super-admin", "Group:super-admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roles: []*rbac.Role{
0000000000000000000000000000000000000000;;					newRole("admin", "ns1", newRule("get", "*", "Pods", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roleBindings: []*rbac.RoleBinding{
0000000000000000000000000000000000000000;;					newRoleBinding("ns1", "admin", bindToRole, "User:admin", "Group:admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				actionsToSubjects: []actionToSubjects{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "get", "Pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "foo"},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						// verb matchies correctly
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "create", "Pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "foo"},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						// binding only works in correct ns
0000000000000000000000000000000000000000;;						&defaultAttributes{"", "", "get", "Pods", "", "ns2", ""},
0000000000000000000000000000000000000000;;						[]rbac.Subject{
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: user.SystemPrivilegedGroup},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "foo"},
0000000000000000000000000000000000000000;;							{Kind: rbac.UserKind, APIGroup: rbac.GroupName, Name: "super-admin"},
0000000000000000000000000000000000000000;;							{Kind: rbac.GroupKind, APIGroup: rbac.GroupName, Name: "super-admins"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			ruleResolver, lister := rbacregistryvalidation.NewTestRuleResolver(tt.roles, tt.roleBindings, tt.clusterRoles, tt.clusterRoleBindings)
0000000000000000000000000000000000000000;;			a := SubjectAccessEvaluator{tt.superUser, lister, lister, ruleResolver}
0000000000000000000000000000000000000000;;			for i, action := range tt.actionsToSubjects {
0000000000000000000000000000000000000000;;				actualSubjects, err := a.AllowedSubjects(action.action)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("case %q %d: error %v", tt.name, i, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(actualSubjects, action.subjects) {
0000000000000000000000000000000000000000;;					t.Errorf("case %q %d: expected\n%v\nactual\n%v", tt.name, i, action.subjects, actualSubjects)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
