0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2977f9c93c0ca7b949d0f599323149e5802ad6bc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rbac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		rbacregistryvalidation "k8s.io/kubernetes/pkg/registry/rbac/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/auth/authorizer/rbac/bootstrappolicy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRule(verbs, apiGroups, resources, nonResourceURLs string) rbac.PolicyRule {
0000000000000000000000000000000000000000;;		return rbac.PolicyRule{
0000000000000000000000000000000000000000;;			Verbs:           strings.Split(verbs, ","),
0000000000000000000000000000000000000000;;			APIGroups:       strings.Split(apiGroups, ","),
0000000000000000000000000000000000000000;;			Resources:       strings.Split(resources, ","),
0000000000000000000000000000000000000000;;			NonResourceURLs: strings.Split(nonResourceURLs, ","),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRole(name, namespace string, rules ...rbac.PolicyRule) *rbac.Role {
0000000000000000000000000000000000000000;;		return &rbac.Role{ObjectMeta: metav1.ObjectMeta{Namespace: namespace, Name: name}, Rules: rules}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newClusterRole(name string, rules ...rbac.PolicyRule) *rbac.ClusterRole {
0000000000000000000000000000000000000000;;		return &rbac.ClusterRole{ObjectMeta: metav1.ObjectMeta{Name: name}, Rules: rules}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		bindToRole        uint16 = 0x0
0000000000000000000000000000000000000000;;		bindToClusterRole uint16 = 0x1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newClusterRoleBinding(roleName string, subjects ...string) *rbac.ClusterRoleBinding {
0000000000000000000000000000000000000000;;		r := &rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{},
0000000000000000000000000000000000000000;;			RoleRef: rbac.RoleRef{
0000000000000000000000000000000000000000;;				APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;				Kind:     "ClusterRole", // ClusterRoleBindings can only refer to ClusterRole
0000000000000000000000000000000000000000;;				Name:     roleName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Subjects = make([]rbac.Subject, len(subjects))
0000000000000000000000000000000000000000;;		for i, subject := range subjects {
0000000000000000000000000000000000000000;;			split := strings.SplitN(subject, ":", 2)
0000000000000000000000000000000000000000;;			r.Subjects[i].Kind, r.Subjects[i].Name = split[0], split[1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch r.Subjects[i].Kind {
0000000000000000000000000000000000000000;;			case rbac.ServiceAccountKind:
0000000000000000000000000000000000000000;;				r.Subjects[i].APIGroup = ""
0000000000000000000000000000000000000000;;			case rbac.UserKind, rbac.GroupKind:
0000000000000000000000000000000000000000;;				r.Subjects[i].APIGroup = rbac.GroupName
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("invalid kind %s", r.Subjects[i].Kind))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRoleBinding(namespace, roleName string, bindType uint16, subjects ...string) *rbac.RoleBinding {
0000000000000000000000000000000000000000;;		r := &rbac.RoleBinding{ObjectMeta: metav1.ObjectMeta{Namespace: namespace}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch bindType {
0000000000000000000000000000000000000000;;		case bindToRole:
0000000000000000000000000000000000000000;;			r.RoleRef = rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "Role", Name: roleName}
0000000000000000000000000000000000000000;;		case bindToClusterRole:
0000000000000000000000000000000000000000;;			r.RoleRef = rbac.RoleRef{APIGroup: rbac.GroupName, Kind: "ClusterRole", Name: roleName}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Subjects = make([]rbac.Subject, len(subjects))
0000000000000000000000000000000000000000;;		for i, subject := range subjects {
0000000000000000000000000000000000000000;;			split := strings.SplitN(subject, ":", 2)
0000000000000000000000000000000000000000;;			r.Subjects[i].Kind, r.Subjects[i].Name = split[0], split[1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch r.Subjects[i].Kind {
0000000000000000000000000000000000000000;;			case rbac.ServiceAccountKind:
0000000000000000000000000000000000000000;;				r.Subjects[i].APIGroup = ""
0000000000000000000000000000000000000000;;			case rbac.UserKind, rbac.GroupKind:
0000000000000000000000000000000000000000;;				r.Subjects[i].APIGroup = rbac.GroupName
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("invalid kind %s", r.Subjects[i].Kind))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type defaultAttributes struct {
0000000000000000000000000000000000000000;;		user        string
0000000000000000000000000000000000000000;;		groups      string
0000000000000000000000000000000000000000;;		verb        string
0000000000000000000000000000000000000000;;		resource    string
0000000000000000000000000000000000000000;;		subresource string
0000000000000000000000000000000000000000;;		namespace   string
0000000000000000000000000000000000000000;;		apiGroup    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("user=(%s), groups=(%s), verb=(%s), resource=(%s), namespace=(%s), apiGroup=(%s)",
0000000000000000000000000000000000000000;;			d.user, strings.Split(d.groups, ","), d.verb, d.resource, d.namespace, d.apiGroup)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetUser() user.Info {
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{Name: d.user, Groups: strings.Split(d.groups, ",")}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetVerb() string         { return d.verb }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) IsReadOnly() bool        { return d.verb == "get" || d.verb == "watch" }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetNamespace() string    { return d.namespace }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetResource() string     { return d.resource }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetSubresource() string  { return d.subresource }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetName() string         { return "" }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetAPIGroup() string     { return d.apiGroup }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetAPIVersion() string   { return "" }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) IsResourceRequest() bool { return true }
0000000000000000000000000000000000000000;;	func (d *defaultAttributes) GetPath() string         { return "" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			roles               []*rbac.Role
0000000000000000000000000000000000000000;;			roleBindings        []*rbac.RoleBinding
0000000000000000000000000000000000000000;;			clusterRoles        []*rbac.ClusterRole
0000000000000000000000000000000000000000;;			clusterRoleBindings []*rbac.ClusterRoleBinding
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			shouldPass []authorizer.Attributes
0000000000000000000000000000000000000000;;			shouldFail []authorizer.Attributes
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("admin", newRule("*", "*", "*", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roleBindings: []*rbac.RoleBinding{
0000000000000000000000000000000000000000;;					newRoleBinding("ns1", "admin", bindToClusterRole, "User:admin", "Group:admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldPass: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "get", "Pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "watch", "Pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "group1", "watch", "Foobar", "", "ns1", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"joe", "admins", "watch", "Foobar", "", "ns1", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"joe", "group1,admins", "watch", "Foobar", "", "ns1", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "GET", "Pods", "", "ns2", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "GET", "Nodes", "", "", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "admins", "GET", "Pods", "", "ns2", ""},
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "admins", "GET", "Nodes", "", "", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Non-resource-url tests
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("non-resource-url-getter", newRule("get", "", "", "/apis")),
0000000000000000000000000000000000000000;;					newClusterRole("non-resource-url", newRule("*", "", "", "/apis")),
0000000000000000000000000000000000000000;;					newClusterRole("non-resource-url-prefix", newRule("get", "", "", "/apis/*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				clusterRoleBindings: []*rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					newClusterRoleBinding("non-resource-url-getter", "User:foo", "Group:bar"),
0000000000000000000000000000000000000000;;					newClusterRoleBinding("non-resource-url", "User:admin", "Group:admin"),
0000000000000000000000000000000000000000;;					newClusterRoleBinding("non-resource-url-prefix", "User:prefixed", "Group:prefixed"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldPass: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "foo"}, Verb: "get", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"bar"}}, Verb: "get", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "admin"}, Verb: "get", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"admin"}}, Verb: "get", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "admin"}, Verb: "watch", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"admin"}}, Verb: "watch", Path: "/apis"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "prefixed"}, Verb: "get", Path: "/apis/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"prefixed"}}, Verb: "get", Path: "/apis/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "prefixed"}, Verb: "get", Path: "/apis/v1/foobar"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"prefixed"}}, Verb: "get", Path: "/apis/v1/foorbar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					// wrong verb
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "foo"}, Verb: "watch", Path: "/apis"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"bar"}}, Verb: "watch", Path: "/apis"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// wrong path
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "foo"}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"bar"}}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "admin"}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"admin"}}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// not covered by prefix
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Name: "prefixed"}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;					authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"prefixed"}}, Verb: "get", Path: "/api/v1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// test subresource resolution
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("admin", newRule("*", "*", "pods", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roleBindings: []*rbac.RoleBinding{
0000000000000000000000000000000000000000;;					newRoleBinding("ns1", "admin", bindToClusterRole, "User:admin", "Group:admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldPass: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "get", "pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "get", "pods", "status", "ns1", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// test subresource resolution
0000000000000000000000000000000000000000;;				clusterRoles: []*rbac.ClusterRole{
0000000000000000000000000000000000000000;;					newClusterRole("admin", newRule("*", "*", "pods/status", "*")),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				roleBindings: []*rbac.RoleBinding{
0000000000000000000000000000000000000000;;					newRoleBinding("ns1", "admin", bindToClusterRole, "User:admin", "Group:admins"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldPass: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "get", "pods", "status", "ns1", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: []authorizer.Attributes{
0000000000000000000000000000000000000000;;					&defaultAttributes{"admin", "", "get", "pods", "", "ns1", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			ruleResolver, _ := rbacregistryvalidation.NewTestRuleResolver(tt.roles, tt.roleBindings, tt.clusterRoles, tt.clusterRoleBindings)
0000000000000000000000000000000000000000;;			a := RBACAuthorizer{ruleResolver}
0000000000000000000000000000000000000000;;			for _, attr := range tt.shouldPass {
0000000000000000000000000000000000000000;;				if authorized, _, _ := a.Authorize(attr); !authorized {
0000000000000000000000000000000000000000;;					t.Errorf("case %d: incorrectly restricted %s", i, attr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, attr := range tt.shouldFail {
0000000000000000000000000000000000000000;;				if authorized, _, _ := a.Authorize(attr); authorized {
0000000000000000000000000000000000000000;;					t.Errorf("case %d: incorrectly passed %s", i, attr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRuleMatches(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			rule rbac.PolicyRule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			requestsToExpected map[authorizer.AttributesRecord]bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star verb, exact match other",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("*").Groups("group1").Resources("resource1").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star group, exact match other",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("verb1").Groups("*").Resources("resource1").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star resource, exact match other",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("verb1").Groups("group1").Resources("*").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource2").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource2").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "tuple expansion",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("verb1", "verb2").Groups("group1", "group2").Resources("resource1", "resource2").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource2").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource2").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource2").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource2").New(): true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "subresource expansion",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("*").Groups("*").Resources("resource1/subresource1").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource1").Subresource("subresource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource1").Subresource("subresource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group1").Resource("resource2").Subresource("subresource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb1").Group("group2").Resource("resource2").Subresource("subresource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource1").Subresource("subresource1").New(): true,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource1").Subresource("subresource2").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group1").Resource("resource2").Subresource("subresource1").New(): false,
0000000000000000000000000000000000000000;;					resourceRequest("verb2").Group("group2").Resource("resource2").Subresource("subresource1").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star nonresource, exact match other",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("verb1").URLs("*").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo").New():         true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar").New():     true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz").New():     true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar/one").New(): true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz/one").New(): true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo").New():         false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/bar").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/baz").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/bar/one").New(): false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/baz/one").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star nonresource subpath",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("verb1").URLs("/foo/*").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo").New():            false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar").New():        true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz").New():        true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar/one").New():    true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz/one").New():    true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/notfoo").New():         false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/notfoo/bar").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/notfoo/baz").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/notfoo/bar/one").New(): false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/notfoo/baz/one").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "star verb, exact nonresource",
0000000000000000000000000000000000000000;;				rule: rbac.NewRule("*").URLs("/foo", "/foo/bar/one").RuleOrDie(),
0000000000000000000000000000000000000000;;				requestsToExpected: map[authorizer.AttributesRecord]bool{
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo").New():         true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/bar/one").New(): true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb1").URL("/foo/baz/one").New(): false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo").New():         true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/bar").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/baz").New():     false,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/bar/one").New(): true,
0000000000000000000000000000000000000000;;					nonresourceRequest("verb2").URL("/foo/baz/one").New(): false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			for request, expected := range tc.requestsToExpected {
0000000000000000000000000000000000000000;;				if e, a := expected, RuleAllows(request, &tc.rule); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%q: expected %v, got %v for %v", tc.name, e, a, request)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type requestAttributeBuilder struct {
0000000000000000000000000000000000000000;;		request authorizer.AttributesRecord
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func resourceRequest(verb string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		return &requestAttributeBuilder{
0000000000000000000000000000000000000000;;			request: authorizer.AttributesRecord{ResourceRequest: true, Verb: verb},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func nonresourceRequest(verb string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		return &requestAttributeBuilder{
0000000000000000000000000000000000000000;;			request: authorizer.AttributesRecord{ResourceRequest: false, Verb: verb},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) Group(group string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		r.request.APIGroup = group
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) Resource(resource string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		r.request.Resource = resource
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) Subresource(subresource string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		r.request.Subresource = subresource
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) Name(name string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		r.request.Name = name
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) URL(url string) *requestAttributeBuilder {
0000000000000000000000000000000000000000;;		r.request.Path = url
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *requestAttributeBuilder) New() authorizer.AttributesRecord {
0000000000000000000000000000000000000000;;		return r.request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkAuthorize(b *testing.B) {
0000000000000000000000000000000000000000;;		bootstrapRoles := []rbac.ClusterRole{}
0000000000000000000000000000000000000000;;		bootstrapRoles = append(bootstrapRoles, bootstrappolicy.ControllerRoles()...)
0000000000000000000000000000000000000000;;		bootstrapRoles = append(bootstrapRoles, bootstrappolicy.ClusterRoles()...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bootstrapBindings := []rbac.ClusterRoleBinding{}
0000000000000000000000000000000000000000;;		bootstrapBindings = append(bootstrapBindings, bootstrappolicy.ClusterRoleBindings()...)
0000000000000000000000000000000000000000;;		bootstrapBindings = append(bootstrapBindings, bootstrappolicy.ControllerRoleBindings()...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterRoles := []*rbac.ClusterRole{}
0000000000000000000000000000000000000000;;		for i := range bootstrapRoles {
0000000000000000000000000000000000000000;;			clusterRoles = append(clusterRoles, &bootstrapRoles[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clusterRoleBindings := []*rbac.ClusterRoleBinding{}
0000000000000000000000000000000000000000;;		for i := range bootstrapBindings {
0000000000000000000000000000000000000000;;			clusterRoleBindings = append(clusterRoleBindings, &bootstrapBindings[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, resolver := rbacregistryvalidation.NewTestRuleResolver(nil, nil, clusterRoles, clusterRoleBindings)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authz := New(resolver, resolver, resolver, resolver)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeUser := &user.DefaultInfo{Name: "system:node:node1", Groups: []string{"system:nodes", "system:authenticated"}}
0000000000000000000000000000000000000000;;		requests := []struct {
0000000000000000000000000000000000000000;;			name  string
0000000000000000000000000000000000000000;;			attrs authorizer.Attributes
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"allow list pods",
0000000000000000000000000000000000000000;;				authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					User:            nodeUser,
0000000000000000000000000000000000000000;;					Verb:            "list",
0000000000000000000000000000000000000000;;					Resource:        "pods",
0000000000000000000000000000000000000000;;					Subresource:     "",
0000000000000000000000000000000000000000;;					Name:            "",
0000000000000000000000000000000000000000;;					Namespace:       "",
0000000000000000000000000000000000000000;;					APIGroup:        "",
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"allow update pods/status",
0000000000000000000000000000000000000000;;				authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					User:            nodeUser,
0000000000000000000000000000000000000000;;					Verb:            "update",
0000000000000000000000000000000000000000;;					Resource:        "pods",
0000000000000000000000000000000000000000;;					Subresource:     "status",
0000000000000000000000000000000000000000;;					Name:            "mypods",
0000000000000000000000000000000000000000;;					Namespace:       "myns",
0000000000000000000000000000000000000000;;					APIGroup:        "",
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"forbid educate dolphins",
0000000000000000000000000000000000000000;;				authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					User:            nodeUser,
0000000000000000000000000000000000000000;;					Verb:            "educate",
0000000000000000000000000000000000000000;;					Resource:        "dolphins",
0000000000000000000000000000000000000000;;					Subresource:     "",
0000000000000000000000000000000000000000;;					Name:            "",
0000000000000000000000000000000000000000;;					Namespace:       "",
0000000000000000000000000000000000000000;;					APIGroup:        "",
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResetTimer()
0000000000000000000000000000000000000000;;		for _, request := range requests {
0000000000000000000000000000000000000000;;			b.Run(request.name, func(b *testing.B) {
0000000000000000000000000000000000000000;;				for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;					authz.Authorize(request.attrs)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
