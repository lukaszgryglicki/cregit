0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
af54942a9b706a6693b349eb899f9419e4a1ae3f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrappolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rolesWithAllowStar are the controller roles which are allowed to contain a *.  These are
0000000000000000000000000000000000000000;;	// namespace lifecycle and GC which have to delete anything.  If you're adding to this list
0000000000000000000000000000000000000000;;	// tag sig-auth
0000000000000000000000000000000000000000;;	var rolesWithAllowStar = sets.NewString(
0000000000000000000000000000000000000000;;		saRolePrefix+"namespace-controller",
0000000000000000000000000000000000000000;;		saRolePrefix+"generic-garbage-collector",
0000000000000000000000000000000000000000;;		saRolePrefix+"resourcequota-controller",
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestNoStarsForControllers confirms that no controller role has star verbs, groups,
0000000000000000000000000000000000000000;;	// or resources.  There are two known exceptions, namespace lifecycle and GC which have to
0000000000000000000000000000000000000000;;	// delete anything
0000000000000000000000000000000000000000;;	func TestNoStarsForControllers(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, role := range ControllerRoles() {
0000000000000000000000000000000000000000;;			if rolesWithAllowStar.Has(role.Name) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i, rule := range role.Rules {
0000000000000000000000000000000000000000;;				for j, verb := range rule.Verbs {
0000000000000000000000000000000000000000;;					if verb == "*" {
0000000000000000000000000000000000000000;;						t.Errorf("%s.Rule[%d].Verbs[%d] is star", role.Name, i, j)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for j, group := range rule.APIGroups {
0000000000000000000000000000000000000000;;					if group == "*" {
0000000000000000000000000000000000000000;;						t.Errorf("%s.Rule[%d].APIGroups[%d] is star", role.Name, i, j)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for j, resource := range rule.Resources {
0000000000000000000000000000000000000000;;					if resource == "*" {
0000000000000000000000000000000000000000;;						t.Errorf("%s.Rule[%d].Resources[%d] is star", role.Name, i, j)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerRoleLabel(t *testing.T) {
0000000000000000000000000000000000000000;;		roles := ControllerRoles()
0000000000000000000000000000000000000000;;		for i := range roles {
0000000000000000000000000000000000000000;;			role := roles[i]
0000000000000000000000000000000000000000;;			accessor, err := meta.Accessor(&role)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, want := accessor.GetLabels(), map[string]string{"kubernetes.io/bootstrapping": "rbac-defaults"}; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;				t.Errorf("ClusterRole: %s GetLabels() = %s, want %s", accessor.GetName(), got, want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rolebindings := ControllerRoleBindings()
0000000000000000000000000000000000000000;;		for i := range rolebindings {
0000000000000000000000000000000000000000;;			rolebinding := rolebindings[i]
0000000000000000000000000000000000000000;;			accessor, err := meta.Accessor(&rolebinding)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, want := accessor.GetLabels(), map[string]string{"kubernetes.io/bootstrapping": "rbac-defaults"}; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;				t.Errorf("ClusterRoleBinding: %s GetLabels() = %s, want %s", accessor.GetName(), got, want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
