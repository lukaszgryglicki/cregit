0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1dae5b565eb9eae3ff70a54028c77c2f735d24b8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bootstrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		bootstrapapi "k8s.io/kubernetes/pkg/bootstrap/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type lister struct {
0000000000000000000000000000000000000000;;		secrets []*api.Secret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *lister) List(selector labels.Selector) (ret []*api.Secret, err error) {
0000000000000000000000000000000000000000;;		return l.secrets, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *lister) Get(name string) (*api.Secret, error) {
0000000000000000000000000000000000000000;;		for _, s := range l.secrets {
0000000000000000000000000000000000000000;;			if s.Name == name {
0000000000000000000000000000000000000000;;				return s, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.NewNotFound(schema.GroupResource{}, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		tokenID     = "foobar"           // 6 letters
0000000000000000000000000000000000000000;;		tokenSecret = "circumnavigation" // 16 letters
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenAuthenticator(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			secrets []*api.Secret
0000000000000000000000000000000000000000;;			token   string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			wantNotFound bool
0000000000000000000000000000000000000000;;			wantUser     *user.DefaultInfo
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid token",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token: tokenID + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:bootstrap:" + tokenID,
0000000000000000000000000000000000000000;;					Groups: []string{"system:bootstrappers"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "invalid secret name",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: "bad-name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token:        tokenID + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no usage",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:     []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey: []byte(tokenSecret),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token:        tokenID + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "wrong token",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token:        "barfoo" + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expired token",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenExpirationKey:       []byte("2009-11-10T23:00:00Z"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token:        tokenID + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "not expired token",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + tokenID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte(tokenID),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenExpirationKey:       []byte("2109-11-10T23:00:00Z"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				token: tokenID + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:bootstrap:" + tokenID,
0000000000000000000000000000000000000000;;					Groups: []string{"system:bootstrappers"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "token id wrong length",
0000000000000000000000000000000000000000;;				secrets: []*api.Secret{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: bootstrapapi.BootstrapTokenSecretPrefix + "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Data: map[string][]byte{
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenIDKey:               []byte("foo"),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenSecretKey:           []byte(tokenSecret),
0000000000000000000000000000000000000000;;							bootstrapapi.BootstrapTokenUsageAuthentication: []byte("true"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: "bootstrap.kubernetes.io/token",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// Token ID must be 6 characters.
0000000000000000000000000000000000000000;;				token:        "foo" + "." + tokenSecret,
0000000000000000000000000000000000000000;;				wantNotFound: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				a := NewTokenAuthenticator(&lister{test.secrets})
0000000000000000000000000000000000000000;;				u, found, err := a.AuthenticateToken(test.token)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("test %q returned an error: %v", test.name, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !found {
0000000000000000000000000000000000000000;;					if !test.wantNotFound {
0000000000000000000000000000000000000000;;						t.Errorf("test %q expected to get user", test.name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if test.wantNotFound {
0000000000000000000000000000000000000000;;					t.Errorf("test %q expected to not get a user", test.name)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				gotUser := u.(*user.DefaultInfo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(gotUser, test.wantUser) {
0000000000000000000000000000000000000000;;					t.Errorf("test %q want user=%#v, got=%#v", test.name, test.wantUser, gotUser)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
