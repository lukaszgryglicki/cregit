0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
37ea63060cdaf0543e84c49f6fec7fb2e699ca6e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package antiaffinity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ensures the hard PodAntiAffinity is denied if it defines TopologyKey other than kubernetes.io/hostname.
0000000000000000000000000000000000000000;;	func TestInterPodAffinityAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewInterPodAntiAffinity()
0000000000000000000000000000000000000000;;		pod := api.Pod{
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			affinity      *api.Affinity
0000000000000000000000000000000000000000;;			errorExpected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// empty affinity its success.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity:      &api.Affinity{},
0000000000000000000000000000000000000000;;				errorExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// what ever topologyKey in preferredDuringSchedulingIgnoredDuringExecution, the admission should success.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity: &api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 5,
0000000000000000000000000000000000000000;;								PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "security",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"S2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									TopologyKey: "az",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// valid topologyKey in requiredDuringSchedulingIgnoredDuringExecution,
0000000000000000000000000000000000000000;;			// plus any topologyKey in preferredDuringSchedulingIgnoredDuringExecution, then admission success.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity: &api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						PreferredDuringSchedulingIgnoredDuringExecution: []api.WeightedPodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Weight: 5,
0000000000000000000000000000000000000000;;								PodAffinityTerm: api.PodAffinityTerm{
0000000000000000000000000000000000000000;;									LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;										MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Key:      "security",
0000000000000000000000000000000000000000;;												Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;												Values:   []string{"S2"},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									TopologyKey: "az",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: kubeletapis.LabelHostname,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// valid topologyKey in requiredDuringSchedulingIgnoredDuringExecution then admission success.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity: &api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: kubeletapis.LabelHostname,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid topologyKey in requiredDuringSchedulingIgnoredDuringExecution then admission fails.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity: &api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: " zone ",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid topologyKey in requiredDuringSchedulingRequiredDuringExecution then admission fails.
0000000000000000000000000000000000000000;;			// TODO: Uncomment this block when implement RequiredDuringSchedulingRequiredDuringExecution.
0000000000000000000000000000000000000000;;			// {
0000000000000000000000000000000000000000;;			//         affinity: map[string]string{
0000000000000000000000000000000000000000;;			//			api.AffinityAnnotationKey: `
0000000000000000000000000000000000000000;;			//				{"podAntiAffinity": {
0000000000000000000000000000000000000000;;			//					"requiredDuringSchedulingRequiredDuringExecution": [{
0000000000000000000000000000000000000000;;			//						"labelSelector": {
0000000000000000000000000000000000000000;;			//							"matchExpressions": [{
0000000000000000000000000000000000000000;;			//								"key": "security",
0000000000000000000000000000000000000000;;			//								"operator": "In",
0000000000000000000000000000000000000000;;			//								"values":["S2"]
0000000000000000000000000000000000000000;;			//							}]
0000000000000000000000000000000000000000;;			//						},
0000000000000000000000000000000000000000;;			//						"namespaces":[],
0000000000000000000000000000000000000000;;			//						"topologyKey": " zone "
0000000000000000000000000000000000000000;;			//					}]
0000000000000000000000000000000000000000;;			//				}}`,
0000000000000000000000000000000000000000;;			//			},
0000000000000000000000000000000000000000;;			//			errorExpected: true,
0000000000000000000000000000000000000000;;			//  }
0000000000000000000000000000000000000000;;			// list of requiredDuringSchedulingIgnoredDuringExecution middle element topologyKey is not valid.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				affinity: &api.Affinity{
0000000000000000000000000000000000000000;;					PodAntiAffinity: &api.PodAntiAffinity{
0000000000000000000000000000000000000000;;						RequiredDuringSchedulingIgnoredDuringExecution: []api.PodAffinityTerm{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: kubeletapis.LabelHostname,
0000000000000000000000000000000000000000;;							}, {
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: " zone ",
0000000000000000000000000000000000000000;;							}, {
0000000000000000000000000000000000000000;;								LabelSelector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;									MatchExpressions: []metav1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;										{
0000000000000000000000000000000000000000;;											Key:      "security",
0000000000000000000000000000000000000000;;											Operator: metav1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;											Values:   []string{"S2"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								TopologyKey: kubeletapis.LabelHostname,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			pod.Spec.Affinity = test.affinity
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), "foo", "name", api.Resource("pods").WithVersion("version"), "", "ignored", nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.errorExpected && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error for Anti Affinity %+v but did not get an error", test.affinity)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !test.errorExpected && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %v for AntiAffinity %+v", err, test.affinity)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestHandles(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewInterPodAntiAffinity()
0000000000000000000000000000000000000000;;		tests := map[admission.Operation]bool{
0000000000000000000000000000000000000000;;			admission.Update:  true,
0000000000000000000000000000000000000000;;			admission.Create:  true,
0000000000000000000000000000000000000000;;			admission.Delete:  false,
0000000000000000000000000000000000000000;;			admission.Connect: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for op, expected := range tests {
0000000000000000000000000000000000000000;;			result := handler.Handles(op)
0000000000000000000000000000000000000000;;			if result != expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected result for operation %s: %v\n", op, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestOtherResources ensures that this admission controller is a no-op for other resources,
0000000000000000000000000000000000000000;;	// subresources, and non-pods.
0000000000000000000000000000000000000000;;	func TestOtherResources(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "testnamespace"
0000000000000000000000000000000000000000;;		name := "testname"
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			kind        string
0000000000000000000000000000000000000000;;			resource    string
0000000000000000000000000000000000000000;;			subresource string
0000000000000000000000000000000000000000;;			object      runtime.Object
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "non-pod resource",
0000000000000000000000000000000000000000;;				kind:     "Foo",
0000000000000000000000000000000000000000;;				resource: "foos",
0000000000000000000000000000000000000000;;				object:   pod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "pod subresource",
0000000000000000000000000000000000000000;;				kind:        "Pod",
0000000000000000000000000000000000000000;;				resource:    "pods",
0000000000000000000000000000000000000000;;				subresource: "eviction",
0000000000000000000000000000000000000000;;				object:      pod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "non-pod object",
0000000000000000000000000000000000000000;;				kind:        "Pod",
0000000000000000000000000000000000000000;;				resource:    "pods",
0000000000000000000000000000000000000000;;				object:      &api.Service{},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			handler := &plugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(tc.object, nil, api.Kind(tc.kind).WithVersion("version"), namespace, name, api.Resource(tc.resource).WithVersion("version"), tc.subresource, admission.Create, nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectError {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected nil error", tc.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
