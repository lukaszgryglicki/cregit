0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
17bd77cee299de2dd0887c8a948384aae5cfb19d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package autoprovision
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		kubeadmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newHandlerForTest returns the admission controller configured for testing.
0000000000000000000000000000000000000000;;	func newHandlerForTest(c clientset.Interface) (admission.Interface, informers.SharedInformerFactory, error) {
0000000000000000000000000000000000000000;;		f := informers.NewSharedInformerFactory(c, 5*time.Minute)
0000000000000000000000000000000000000000;;		handler := NewProvision()
0000000000000000000000000000000000000000;;		pluginInitializer := kubeadmission.NewPluginInitializer(c, nil, f, nil, nil, nil, nil)
0000000000000000000000000000000000000000;;		pluginInitializer.Initialize(handler)
0000000000000000000000000000000000000000;;		err := admission.Validate(handler)
0000000000000000000000000000000000000000;;		return handler, f, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newMockClientForTest creates a mock client that returns a client configured for the specified list of namespaces.
0000000000000000000000000000000000000000;;	func newMockClientForTest(namespaces []string) *fake.Clientset {
0000000000000000000000000000000000000000;;		mockClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		mockClient.AddReactor("list", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			namespaceList := &api.NamespaceList{
0000000000000000000000000000000000000000;;				ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;					ResourceVersion: fmt.Sprintf("%d", len(namespaces)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i, ns := range namespaces {
0000000000000000000000000000000000000000;;				namespaceList.Items = append(namespaceList.Items, api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            ns,
0000000000000000000000000000000000000000;;						ResourceVersion: fmt.Sprintf("%d", i),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, namespaceList, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return mockClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newPod returns a new pod for the specified namespace
0000000000000000000000000000000000000000;;	func newPod(namespace string) api.Pod {
0000000000000000000000000000000000000000;;		return api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Volumes:    []api.Volume{{Name: "vol"}},
0000000000000000000000000000000000000000;;				Containers: []api.Container{{Name: "ctr", Image: "image"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// hasCreateNamespaceAction returns true if it has the create namespace action
0000000000000000000000000000000000000000;;	func hasCreateNamespaceAction(mockClient *fake.Clientset) bool {
0000000000000000000000000000000000000000;;		for _, action := range mockClient.Actions() {
0000000000000000000000000000000000000000;;			if action.GetVerb() == "create" && action.GetResource().Resource == "namespaces" {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmission verifies a namespace is created on create requests for namespace managed resources
0000000000000000000000000000000000000000;;	func TestAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest([]string{})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), pod.Namespace, pod.Name, api.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !hasCreateNamespaceAction(mockClient) {
0000000000000000000000000000000000000000;;			t.Errorf("expected create namespace action")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmissionNamespaceExists verifies that no client call is made when a namespace already exists
0000000000000000000000000000000000000000;;	func TestAdmissionNamespaceExists(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest([]string{namespace})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), pod.Namespace, pod.Name, api.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hasCreateNamespaceAction(mockClient) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected create namespace action")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestIgnoreAdmission validates that a request is ignored if its not a create
0000000000000000000000000000000000000000;;	func TestIgnoreAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest([]string{})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;		chainHandler := admission.NewChainHandler(handler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = chainHandler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), pod.Namespace, pod.Name, api.Resource("pods").WithVersion("version"), "", admission.Update, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hasCreateNamespaceAction(mockClient) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected create namespace action")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmissionWithLatentCache(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest([]string{})
0000000000000000000000000000000000000000;;		mockClient.AddReactor("create", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, errors.NewAlreadyExists(api.Resource("namespaces"), namespace)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), pod.Namespace, pod.Name, api.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !hasCreateNamespaceAction(mockClient) {
0000000000000000000000000000000000000000;;			t.Errorf("expected create namespace action")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
