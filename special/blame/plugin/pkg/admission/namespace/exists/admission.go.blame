0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
17bd77cee299de2dd0887c8a948384aae5cfb19d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package exists
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		corelisters "k8s.io/kubernetes/pkg/client/listers/core/internalversion"
0000000000000000000000000000000000000000;;		kubeapiserveradmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers a plugin
0000000000000000000000000000000000000000;;	func Register(plugins *admission.Plugins) {
0000000000000000000000000000000000000000;;		plugins.Register("NamespaceExists", func(config io.Reader) (admission.Interface, error) {
0000000000000000000000000000000000000000;;			return NewExists(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// exists is an implementation of admission.Interface.
0000000000000000000000000000000000000000;;	// It rejects all incoming requests in a namespace context if the namespace does not exist.
0000000000000000000000000000000000000000;;	// It is useful in deployments that want to enforce pre-declaration of a Namespace resource.
0000000000000000000000000000000000000000;;	type exists struct {
0000000000000000000000000000000000000000;;		*admission.Handler
0000000000000000000000000000000000000000;;		client          internalclientset.Interface
0000000000000000000000000000000000000000;;		namespaceLister corelisters.NamespaceLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = kubeapiserveradmission.WantsInternalKubeInformerFactory(&exists{})
0000000000000000000000000000000000000000;;	var _ = kubeapiserveradmission.WantsInternalKubeClientSet(&exists{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exists) Admit(a admission.Attributes) error {
0000000000000000000000000000000000000000;;		// if we're here, then we've already passed authentication, so we're allowed to do what we're trying to do
0000000000000000000000000000000000000000;;		// if we're here, then the API server has found a route, which means that if we have a non-empty namespace
0000000000000000000000000000000000000000;;		// its a namespaced resource.
0000000000000000000000000000000000000000;;		if len(a.GetNamespace()) == 0 || a.GetKind().GroupKind() == api.Kind("Namespace") {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// we need to wait for our caches to warm
0000000000000000000000000000000000000000;;		if !e.WaitForReady() {
0000000000000000000000000000000000000000;;			return admission.NewForbidden(a, fmt.Errorf("not yet ready to handle request"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := e.namespaceLister.Get(a.GetNamespace())
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// in case of latency in our caches, make a call direct to storage to verify that it truly exists or not
0000000000000000000000000000000000000000;;		_, err = e.client.Core().Namespaces().Get(a.GetNamespace(), metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewExists creates a new namespace exists admission control handler
0000000000000000000000000000000000000000;;	func NewExists() admission.Interface {
0000000000000000000000000000000000000000;;		return &exists{
0000000000000000000000000000000000000000;;			Handler: admission.NewHandler(admission.Create, admission.Update, admission.Delete),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exists) SetInternalKubeClientSet(client internalclientset.Interface) {
0000000000000000000000000000000000000000;;		e.client = client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exists) SetInternalKubeInformerFactory(f informers.SharedInformerFactory) {
0000000000000000000000000000000000000000;;		namespaceInformer := f.Core().InternalVersion().Namespaces()
0000000000000000000000000000000000000000;;		e.namespaceLister = namespaceInformer.Lister()
0000000000000000000000000000000000000000;;		e.SetReadyFunc(namespaceInformer.Informer().HasSynced)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exists) Validate() error {
0000000000000000000000000000000000000000;;		if e.namespaceLister == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing namespaceLister")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.client == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing client")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
