0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f78000f784fcc6cc55f5354883f47fa55cf943c5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		kubeadmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeAuthorizer) Authorize(a authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		username := a.GetUser().GetName()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if username == "non-deleter" {
0000000000000000000000000000000000000000;;			if a.GetVerb() == "delete" {
0000000000000000000000000000000000000000;;				return false, "", nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if username == "non-pod-deleter" {
0000000000000000000000000000000000000000;;			if a.GetVerb() == "delete" && a.GetResource() == "pods" {
0000000000000000000000000000000000000000;;				return false, "", nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if username == "non-rc-deleter" {
0000000000000000000000000000000000000000;;			if a.GetVerb() == "delete" && a.GetResource() == "replicationcontrollers" {
0000000000000000000000000000000000000000;;				return false, "", nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newGCPermissionsEnforcement returns the admission controller configured for testing.
0000000000000000000000000000000000000000;;	func newGCPermissionsEnforcement() *gcPermissionsEnforcement {
0000000000000000000000000000000000000000;;		// the pods/status endpoint is ignored by this plugin since old kubelets
0000000000000000000000000000000000000000;;		// corrupt them.  the pod status strategy ensures status updates cannot mutate
0000000000000000000000000000000000000000;;		// ownerRef.
0000000000000000000000000000000000000000;;		whiteList := []whiteListItem{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				groupResource: schema.GroupResource{Resource: "pods"},
0000000000000000000000000000000000000000;;				subresource:   "status",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gcAdmit := &gcPermissionsEnforcement{
0000000000000000000000000000000000000000;;			Handler:   admission.NewHandler(admission.Create, admission.Update),
0000000000000000000000000000000000000000;;			whiteList: whiteList,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pluginInitializer := kubeadmission.NewPluginInitializer(nil, nil, nil, fakeAuthorizer{}, nil, api.Registry.RESTMapper(), nil)
0000000000000000000000000000000000000000;;		pluginInitializer.Initialize(gcAdmit)
0000000000000000000000000000000000000000;;		return gcAdmit
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGCAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		expectNoError := func(err error) bool {
0000000000000000000000000000000000000000;;			return err == nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectCantSetOwnerRefError := func(err error) bool {
0000000000000000000000000000000000000000;;			return strings.Contains(err.Error(), "cannot set an ownerRef on a resource you can't delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			username    string
0000000000000000000000000000000000000000;;			resource    schema.GroupVersionResource
0000000000000000000000000000000000000000;;			subresource string
0000000000000000000000000000000000000000;;			oldObj      runtime.Object
0000000000000000000000000000000000000000;;			newObj      runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			checkError func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, create, no objectref change",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, create, objectref change",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, create, no objectref change",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, create, objectref change",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectCantSetOwnerRefError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, create, no objectref change",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, create, objectref change",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectCantSetOwnerRefError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, create, objectref change, but not a pod",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("not-pods"),
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, no objectref change",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, no objectref change two",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, objectref change",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, update, no objectref change",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, update, no objectref change two",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, update, objectref change",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectCantSetOwnerRefError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-deleter, update, objectref change two",
0000000000000000000000000000000000000000;;				username:   "non-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}, {Name: "second"}}}},
0000000000000000000000000000000000000000;;				checkError: expectCantSetOwnerRefError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, update, no objectref change",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "non-pod-deleter, update status, objectref change",
0000000000000000000000000000000000000000;;				username:    "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:    api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				subresource: "status",
0000000000000000000000000000000000000000;;				oldObj:      &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:      &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError:  expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, update, objectref change",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectCantSetOwnerRefError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-pod-deleter, update, objectref change, but not a pod",
0000000000000000000000000000000000000000;;				username:   "non-pod-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("not-pods"),
0000000000000000000000000000000000000000;;				oldObj:     &api.Pod{},
0000000000000000000000000000000000000000;;				newObj:     &api.Pod{ObjectMeta: metav1.ObjectMeta{OwnerReferences: []metav1.OwnerReference{{Name: "first"}}}},
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gcAdmit := newGCPermissionsEnforcement()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			operation := admission.Create
0000000000000000000000000000000000000000;;			if tc.oldObj != nil {
0000000000000000000000000000000000000000;;				operation = admission.Update
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			user := &user.DefaultInfo{Name: tc.username}
0000000000000000000000000000000000000000;;			attributes := admission.NewAttributesRecord(tc.newObj, tc.oldObj, schema.GroupVersionKind{}, metav1.NamespaceDefault, "foo", tc.resource, tc.subresource, operation, user)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := gcAdmit.Admit(attributes)
0000000000000000000000000000000000000000;;			if !tc.checkError(err) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected err: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBlockOwnerDeletionAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		podWithOwnerRefs := func(refs ...metav1.OwnerReference) *api.Pod {
0000000000000000000000000000000000000000;;			var refSlice []metav1.OwnerReference
0000000000000000000000000000000000000000;;			for _, ref := range refs {
0000000000000000000000000000000000000000;;				refSlice = append(refSlice, ref)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return &api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					OwnerReferences: refSlice,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		getTrueVar := func() *bool {
0000000000000000000000000000000000000000;;			ret := true
0000000000000000000000000000000000000000;;			return &ret
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		getFalseVar := func() *bool {
0000000000000000000000000000000000000000;;			ret := false
0000000000000000000000000000000000000000;;			return &ret
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		blockRC1 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "v1",
0000000000000000000000000000000000000000;;			Kind:               "ReplicationController",
0000000000000000000000000000000000000000;;			Name:               "rc1",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getTrueVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		blockRC2 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "v1",
0000000000000000000000000000000000000000;;			Kind:               "ReplicationController",
0000000000000000000000000000000000000000;;			Name:               "rc2",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getTrueVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		notBlockRC1 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "v1",
0000000000000000000000000000000000000000;;			Kind:               "ReplicationController",
0000000000000000000000000000000000000000;;			Name:               "rc1",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getFalseVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		notBlockRC2 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "v1",
0000000000000000000000000000000000000000;;			Kind:               "ReplicationController",
0000000000000000000000000000000000000000;;			Name:               "rc2",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getFalseVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nilBlockRC1 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;			Kind:       "ReplicationController",
0000000000000000000000000000000000000000;;			Name:       "rc1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nilBlockRC2 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;			Kind:       "ReplicationController",
0000000000000000000000000000000000000000;;			Name:       "rc2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		blockDS1 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "extensions/v1beta1",
0000000000000000000000000000000000000000;;			Kind:               "DaemonSet",
0000000000000000000000000000000000000000;;			Name:               "ds1",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getTrueVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		notBlockDS1 := metav1.OwnerReference{
0000000000000000000000000000000000000000;;			APIVersion:         "extensions/v1beta1",
0000000000000000000000000000000000000000;;			Kind:               "DaemonSet",
0000000000000000000000000000000000000000;;			Name:               "ds1",
0000000000000000000000000000000000000000;;			BlockOwnerDeletion: getFalseVar(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectNoError := func(err error) bool {
0000000000000000000000000000000000000000;;			return err == nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectCantSetBlockOwnerDeletionError := func(err error) bool {
0000000000000000000000000000000000000000;;			return strings.Contains(err.Error(), "cannot set blockOwnerDeletion if an ownerReference refers to a resource you can't delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			username    string
0000000000000000000000000000000000000000;;			resource    schema.GroupVersionResource
0000000000000000000000000000000000000000;;			subresource string
0000000000000000000000000000000000000000;;			oldObj      runtime.Object
0000000000000000000000000000000000000000;;			newObj      runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			checkError func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// cases for create
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, create, no ownerReferences",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, create, all ownerReferences have blockOwnerDeletion=false",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1, notBlockRC2),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, create, some ownerReferences have blockOwnerDeletion=true",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1, blockRC2),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, create, no ownerReferences",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, create, all ownerReferences have blockOwnerDeletion=false or nil",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1, nilBlockRC2),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, create, some ownerReferences have blockOwnerDeletion=true",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1, notBlockRC2),
0000000000000000000000000000000000000000;;				checkError: expectCantSetBlockOwnerDeletionError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, create, some ownerReferences have blockOwnerDeletion=true, but are pointing to daemonset",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockDS1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// cases are for update
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, no ownerReferences change blockOwnerDeletion",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(nilBlockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, some ownerReferences change to blockOwnerDeletion=true",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(notBlockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "super-user, update, add new ownerReferences with blockOwnerDeletion=true",
0000000000000000000000000000000000000000;;				username:   "super",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, no ownerReferences change blockOwnerDeletion",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(nilBlockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, some ownerReferences change from blockOwnerDeletion=false to true",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(notBlockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				checkError: expectCantSetBlockOwnerDeletionError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, some ownerReferences change from blockOwnerDeletion=nil to true",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(nilBlockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				checkError: expectCantSetBlockOwnerDeletionError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, some ownerReferences change from blockOwnerDeletion=true to false",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, some ownerReferences change blockOwnerDeletion, but all such references are to daemonset",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(notBlockDS1),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockDS1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, add new ownerReferences with blockOwnerDeletion=nil or false",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(notBlockRC1, nilBlockRC2),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, add new ownerReferences with blockOwnerDeletion=true",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockRC1),
0000000000000000000000000000000000000000;;				checkError: expectCantSetBlockOwnerDeletionError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "non-rc-deleter, update, add new ownerReferences with blockOwnerDeletion=true, but the references are to daemonset",
0000000000000000000000000000000000000000;;				username:   "non-rc-deleter",
0000000000000000000000000000000000000000;;				resource:   api.SchemeGroupVersion.WithResource("pods"),
0000000000000000000000000000000000000000;;				oldObj:     podWithOwnerRefs(),
0000000000000000000000000000000000000000;;				newObj:     podWithOwnerRefs(blockDS1),
0000000000000000000000000000000000000000;;				checkError: expectNoError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gcAdmit := newGCPermissionsEnforcement()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			operation := admission.Create
0000000000000000000000000000000000000000;;			if tc.oldObj != nil {
0000000000000000000000000000000000000000;;				operation = admission.Update
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			user := &user.DefaultInfo{Name: tc.username}
0000000000000000000000000000000000000000;;			attributes := admission.NewAttributesRecord(tc.newObj, tc.oldObj, schema.GroupVersionKind{}, metav1.NamespaceDefault, "foo", tc.resource, tc.subresource, operation, user)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := gcAdmit.Admit(attributes)
0000000000000000000000000000000000000000;;			if !tc.checkError(err) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected err: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
