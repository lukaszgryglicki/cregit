0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
98af5114332c592b32703f0e6eb660deb96ae2ab;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package imagepolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConfigNormalization(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			test             string
0000000000000000000000000000000000000000;;			config           imagePolicyWebhookConfig
0000000000000000000000000000000000000000;;			normalizedConfig imagePolicyWebhookConfig
0000000000000000000000000000000000000000;;			wantErr          bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				test: "config within normal ranges",
0000000000000000000000000000000000000000;;				config: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     ((minAllowTTL + maxAllowTTL) / 2) / time.Second,
0000000000000000000000000000000000000000;;					DenyTTL:      ((minDenyTTL + maxDenyTTL) / 2) / time.Second,
0000000000000000000000000000000000000000;;					RetryBackoff: ((minRetryBackoff + maxRetryBackoff) / 2) / time.Millisecond,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				normalizedConfig: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     ((minAllowTTL + maxAllowTTL) / 2) / time.Second * time.Second,
0000000000000000000000000000000000000000;;					DenyTTL:      ((minDenyTTL + maxDenyTTL) / 2) / time.Second * time.Second,
0000000000000000000000000000000000000000;;					RetryBackoff: (minRetryBackoff + maxRetryBackoff) / 2,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				test: "config below normal ranges, error",
0000000000000000000000000000000000000000;;				config: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     minAllowTTL - time.Duration(1),
0000000000000000000000000000000000000000;;					DenyTTL:      minDenyTTL - time.Duration(1),
0000000000000000000000000000000000000000;;					RetryBackoff: minRetryBackoff - time.Duration(1),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				test: "config above normal ranges, error",
0000000000000000000000000000000000000000;;				config: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     time.Duration(1) + maxAllowTTL,
0000000000000000000000000000000000000000;;					DenyTTL:      time.Duration(1) + maxDenyTTL,
0000000000000000000000000000000000000000;;					RetryBackoff: time.Duration(1) + maxRetryBackoff,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				test: "config wants default values",
0000000000000000000000000000000000000000;;				config: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     useDefault,
0000000000000000000000000000000000000000;;					DenyTTL:      useDefault,
0000000000000000000000000000000000000000;;					RetryBackoff: useDefault,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				normalizedConfig: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     defaultAllowTTL,
0000000000000000000000000000000000000000;;					DenyTTL:      defaultDenyTTL,
0000000000000000000000000000000000000000;;					RetryBackoff: defaultRetryBackoff,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				test: "config wants disabled values",
0000000000000000000000000000000000000000;;				config: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     disableTTL,
0000000000000000000000000000000000000000;;					DenyTTL:      disableTTL,
0000000000000000000000000000000000000000;;					RetryBackoff: disableTTL,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				normalizedConfig: imagePolicyWebhookConfig{
0000000000000000000000000000000000000000;;					AllowTTL:     time.Duration(0),
0000000000000000000000000000000000000000;;					DenyTTL:      time.Duration(0),
0000000000000000000000000000000000000000;;					RetryBackoff: time.Duration(0),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			err := normalizeWebhookConfig(&tt.config)
0000000000000000000000000000000000000000;;			if err == nil && tt.wantErr == true {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error from normalization and didn't have one", tt.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil && tt.wantErr == false {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error from normalization: %v", tt.test, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && !reflect.DeepEqual(tt.config, tt.normalizedConfig) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected config to be normalized. got: %v expected: %v", tt.test, tt.config, tt.normalizedConfig)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
