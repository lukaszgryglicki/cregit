0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
98af5114332c592b32703f0e6eb660deb96ae2ab;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package imagepolicy contains an admission controller that configures a webhook to which policy
0000000000000000000000000000000000000000;;	// decisions are delegated.
0000000000000000000000000000000000000000;;	package imagepolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		defaultRetryBackoff = time.Duration(500) * time.Millisecond
0000000000000000000000000000000000000000;;		minRetryBackoff     = time.Duration(1)
0000000000000000000000000000000000000000;;		maxRetryBackoff     = time.Duration(5) * time.Minute
0000000000000000000000000000000000000000;;		defaultAllowTTL     = time.Duration(5) * time.Minute
0000000000000000000000000000000000000000;;		defaultDenyTTL      = time.Duration(30) * time.Second
0000000000000000000000000000000000000000;;		minAllowTTL         = time.Duration(1) * time.Second
0000000000000000000000000000000000000000;;		maxAllowTTL         = time.Duration(30) * time.Minute
0000000000000000000000000000000000000000;;		minDenyTTL          = time.Duration(1) * time.Second
0000000000000000000000000000000000000000;;		maxDenyTTL          = time.Duration(30) * time.Minute
0000000000000000000000000000000000000000;;		useDefault          = time.Duration(0)  //sentinel for using default TTL
0000000000000000000000000000000000000000;;		disableTTL          = time.Duration(-1) //sentinel for disabling a TTL
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// imagePolicyWebhookConfig holds config data for imagePolicyWebhook
0000000000000000000000000000000000000000;;	type imagePolicyWebhookConfig struct {
0000000000000000000000000000000000000000;;		KubeConfigFile string        `json:"kubeConfigFile"`
0000000000000000000000000000000000000000;;		AllowTTL       time.Duration `json:"allowTTL"`
0000000000000000000000000000000000000000;;		DenyTTL        time.Duration `json:"denyTTL"`
0000000000000000000000000000000000000000;;		RetryBackoff   time.Duration `json:"retryBackoff"`
0000000000000000000000000000000000000000;;		DefaultAllow   bool          `json:"defaultAllow"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AdmissionConfig holds config data for admission controllers
0000000000000000000000000000000000000000;;	type AdmissionConfig struct {
0000000000000000000000000000000000000000;;		ImagePolicyWebhook imagePolicyWebhookConfig `json:"imagePolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func normalizeWebhookConfig(config *imagePolicyWebhookConfig) (err error) {
0000000000000000000000000000000000000000;;		config.RetryBackoff, err = normalizeConfigDuration("backoff", time.Millisecond, config.RetryBackoff, minRetryBackoff, maxRetryBackoff, defaultRetryBackoff)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AllowTTL, err = normalizeConfigDuration("allow cache", time.Second, config.AllowTTL, minAllowTTL, maxAllowTTL, defaultAllowTTL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.DenyTTL, err = normalizeConfigDuration("deny cache", time.Second, config.DenyTTL, minDenyTTL, maxDenyTTL, defaultDenyTTL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func normalizeConfigDuration(name string, scale, value, min, max, defaultValue time.Duration) (time.Duration, error) {
0000000000000000000000000000000000000000;;		// disable with -1 sentinel
0000000000000000000000000000000000000000;;		if value == disableTTL {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("image policy webhook %s disabled", name)
0000000000000000000000000000000000000000;;			return time.Duration(0), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// use default with 0 sentinel
0000000000000000000000000000000000000000;;		if value == useDefault {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("image policy webhook %s using default value", name)
0000000000000000000000000000000000000000;;			return defaultValue, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// convert to s; unmarshalling gives ns
0000000000000000000000000000000000000000;;		value *= scale
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check value is within range
0000000000000000000000000000000000000000;;		if value <= min || value > max {
0000000000000000000000000000000000000000;;			return value, fmt.Errorf("valid value is between %v and %v, got %v", min, max, value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return value, nil
0000000000000000000000000000000000000000;;	}
