0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f16ae5b932f488fd79e14adc7f322afe6a3d6ebf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scdeny
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ensures the SecurityContext is denied if it defines anything more than Caps or Privileged
0000000000000000000000000000000000000000;;	func TestAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewSecurityContextDeny()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runAsUser := int64(1)
0000000000000000000000000000000000000000;;		priv := true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			sc          *api.SecurityContext
0000000000000000000000000000000000000000;;			podSc       *api.PodSecurityContext
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "unset",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty container.SecurityContext",
0000000000000000000000000000000000000000;;				sc:   &api.SecurityContext{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:  "empty pod.Spec.SecurityContext",
0000000000000000000000000000000000000000;;				podSc: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "valid container.SecurityContext",
0000000000000000000000000000000000000000;;				sc:   &api.SecurityContext{Privileged: &priv, Capabilities: &api.Capabilities{}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:  "valid pod.Spec.SecurityContext",
0000000000000000000000000000000000000000;;				podSc: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "container.SecurityContext.RunAsUser",
0000000000000000000000000000000000000000;;				sc:          &api.SecurityContext{RunAsUser: &runAsUser},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "container.SecurityContext.SELinuxOptions",
0000000000000000000000000000000000000000;;				sc:          &api.SecurityContext{SELinuxOptions: &api.SELinuxOptions{}},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "pod.Spec.SecurityContext.RunAsUser",
0000000000000000000000000000000000000000;;				podSc:       &api.PodSecurityContext{RunAsUser: &runAsUser},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "pod.Spec.SecurityContext.SELinuxOptions",
0000000000000000000000000000000000000000;;				podSc:       &api.PodSecurityContext{SELinuxOptions: &api.SELinuxOptions{}},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			p := pod()
0000000000000000000000000000000000000000;;			p.Spec.SecurityContext = tc.podSc
0000000000000000000000000000000000000000;;			p.Spec.Containers[0].SecurityContext = tc.sc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(p, nil, api.Kind("Pod").WithVersion("version"), "foo", "name", api.Resource("pods").WithVersion("version"), "", "ignored", nil))
0000000000000000000000000000000000000000;;			if err != nil && !tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;			} else if err == nil && tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected error", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// verify init containers are also checked
0000000000000000000000000000000000000000;;			p = pod()
0000000000000000000000000000000000000000;;			p.Spec.SecurityContext = tc.podSc
0000000000000000000000000000000000000000;;			p.Spec.Containers[0].SecurityContext = tc.sc
0000000000000000000000000000000000000000;;			p.Spec.InitContainers = p.Spec.Containers
0000000000000000000000000000000000000000;;			p.Spec.Containers = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = handler.Admit(admission.NewAttributesRecord(p, nil, api.Kind("Pod").WithVersion("version"), "foo", "name", api.Resource("pods").WithVersion("version"), "", "ignored", nil))
0000000000000000000000000000000000000000;;			if err != nil && !tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;			} else if err == nil && tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected error", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodSecurityContextAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewSecurityContextDeny()
0000000000000000000000000000000000000000;;		pod := api.Pod{
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			securityContext api.PodSecurityContext
0000000000000000000000000000000000000000;;			errorExpected   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				securityContext: api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				errorExpected:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				securityContext: api.PodSecurityContext{
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{int64(1234)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				securityContext: api.PodSecurityContext{
0000000000000000000000000000000000000000;;					FSGroup: &fsGroup,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			pod.Spec.SecurityContext = &test.securityContext
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), "foo", "name", api.Resource("pods").WithVersion("version"), "", "ignored", nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.errorExpected && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error for security context %+v but did not get an error", test.securityContext)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !test.errorExpected && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %v for security context %+v", err, test.securityContext)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandles(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewSecurityContextDeny()
0000000000000000000000000000000000000000;;		tests := map[admission.Operation]bool{
0000000000000000000000000000000000000000;;			admission.Update:  true,
0000000000000000000000000000000000000000;;			admission.Create:  true,
0000000000000000000000000000000000000000;;			admission.Delete:  false,
0000000000000000000000000000000000000000;;			admission.Connect: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for op, expected := range tests {
0000000000000000000000000000000000000000;;			result := handler.Handles(op)
0000000000000000000000000000000000000000;;			if result != expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected result for operation %s: %v\n", op, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pod() *api.Pod {
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
