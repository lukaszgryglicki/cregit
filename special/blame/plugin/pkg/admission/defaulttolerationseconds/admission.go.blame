0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
68208aeb423eb2a294edd099c37ad4cb771c6b01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaulttolerationseconds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		defaultNotReadyTolerationSeconds = flag.Int64("default-not-ready-toleration-seconds", 300,
0000000000000000000000000000000000000000;;			"Indicates the tolerationSeconds of the toleration for notReady:NoExecute"+
0000000000000000000000000000000000000000;;				" that is added by default to every pod that does not already have such a toleration.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultUnreachableTolerationSeconds = flag.Int64("default-unreachable-toleration-seconds", 300,
0000000000000000000000000000000000000000;;			"Indicates the tolerationSeconds of the toleration for unreachable:NoExecute"+
0000000000000000000000000000000000000000;;				" that is added by default to every pod that does not already have such a toleration.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers a plugin
0000000000000000000000000000000000000000;;	func Register(plugins *admission.Plugins) {
0000000000000000000000000000000000000000;;		plugins.Register("DefaultTolerationSeconds", func(config io.Reader) (admission.Interface, error) {
0000000000000000000000000000000000000000;;			return NewDefaultTolerationSeconds(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// plugin contains the client used by the admission controller
0000000000000000000000000000000000000000;;	// It will add default tolerations for every pod
0000000000000000000000000000000000000000;;	// that tolerate taints `notReady:NoExecute` and `unreachable:NoExecute`,
0000000000000000000000000000000000000000;;	// with tolerationSeconds of 300s.
0000000000000000000000000000000000000000;;	// If the pod already specifies a toleration for taint `notReady:NoExecute`
0000000000000000000000000000000000000000;;	// or `unreachable:NoExecute`, the plugin won't touch it.
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*admission.Handler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultTolerationSeconds creates a new instance of the DefaultTolerationSeconds admission controller
0000000000000000000000000000000000000000;;	func NewDefaultTolerationSeconds() admission.Interface {
0000000000000000000000000000000000000000;;		return &plugin{
0000000000000000000000000000000000000000;;			Handler: admission.NewHandler(admission.Create, admission.Update),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Admit(attributes admission.Attributes) (err error) {
0000000000000000000000000000000000000000;;		if attributes.GetResource().GroupResource() != api.Resource("pods") {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(attributes.GetSubresource()) > 0 {
0000000000000000000000000000000000000000;;			// only run the checks below on pods proper and not subresources
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod, ok := attributes.GetObject().(*api.Pod)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return errors.NewBadRequest(fmt.Sprintf("expected *api.Pod but got %T", attributes.GetObject()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tolerations := pod.Spec.Tolerations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		toleratesNodeNotReady := false
0000000000000000000000000000000000000000;;		toleratesNodeUnreachable := false
0000000000000000000000000000000000000000;;		for _, toleration := range tolerations {
0000000000000000000000000000000000000000;;			if (toleration.Key == algorithm.TaintNodeNotReady || len(toleration.Key) == 0) &&
0000000000000000000000000000000000000000;;				(toleration.Effect == api.TaintEffectNoExecute || len(toleration.Effect) == 0) {
0000000000000000000000000000000000000000;;				toleratesNodeNotReady = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if (toleration.Key == algorithm.TaintNodeUnreachable || len(toleration.Key) == 0) &&
0000000000000000000000000000000000000000;;				(toleration.Effect == api.TaintEffectNoExecute || len(toleration.Effect) == 0) {
0000000000000000000000000000000000000000;;				toleratesNodeUnreachable = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// no change is required, return immediately
0000000000000000000000000000000000000000;;		if toleratesNodeNotReady && toleratesNodeUnreachable {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !toleratesNodeNotReady {
0000000000000000000000000000000000000000;;			helper.AddOrUpdateTolerationInPod(pod, &api.Toleration{
0000000000000000000000000000000000000000;;				Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;				Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;				Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;				TolerationSeconds: defaultNotReadyTolerationSeconds,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !toleratesNodeUnreachable {
0000000000000000000000000000000000000000;;			helper.AddOrUpdateTolerationInPod(pod, &api.Toleration{
0000000000000000000000000000000000000000;;				Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;				Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;				Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;				TolerationSeconds: defaultUnreachableTolerationSeconds,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
