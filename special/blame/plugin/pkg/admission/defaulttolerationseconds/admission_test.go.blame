0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
68208aeb423eb2a294edd099c37ad4cb771c6b01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaulttolerationseconds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestForgivenessAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		var defaultTolerationSeconds int64 = 300
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genTolerationSeconds := func(s int64) *int64 {
0000000000000000000000000000000000000000;;			return &s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler := NewDefaultTolerationSeconds()
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			description  string
0000000000000000000000000000000000000000;;			requestedPod api.Pod
0000000000000000000000000000000000000000;;			expectedPod  api.Pod
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod has no tolerations, expect add tolerations for `notReady:NoExecute` and `unreachable:NoExecute`",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod has tolerations, but none is for taint `notReady:NoExecute` or `unreachable:NoExecute`, expect add tolerations for `notReady:NoExecute` and `unreachable:NoExecute`",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               "foo",
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpEqual,
0000000000000000000000000000000000000000;;								Value:             "bar",
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               "foo",
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpEqual,
0000000000000000000000000000000000000000;;								Value:             "bar",
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod specified a toleration for taint `notReady:NoExecute`, expect add toleration for `unreachable:NoExecute`",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod specified a toleration for taint `unreachable:NoExecute`, expect add toleration for `notReady:NoExecute`",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: &defaultTolerationSeconds,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod specified tolerations for both `notReady:NoExecute` and `unreachable:NoExecute`, expect no change",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod specified toleration for taint `unreachable`, expect add toleration for `notReady:NoExecute`",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								Effect:            api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(300),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "pod has wildcard toleration for all kind of taints, expect no change",
0000000000000000000000000000000000000000;;				requestedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{Operator: api.TolerationOpExists, TolerationSeconds: genTolerationSeconds(700)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedPod: api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Operator:          api.TolerationOpExists,
0000000000000000000000000000000000000000;;								TolerationSeconds: genTolerationSeconds(700),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(&test.requestedPod, nil, api.Kind("Pod").WithVersion("version"), "foo", "name", api.Resource("pods").WithVersion("version"), "", "ignored", nil))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]: unexpected error %v for pod %+v", test.description, err, test.requestedPod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !helper.Semantic.DeepEqual(test.expectedPod.Annotations, test.requestedPod.Annotations) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]: expected %#v got %#v", test.description, test.expectedPod.Annotations, test.requestedPod.Annotations)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandles(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := NewDefaultTolerationSeconds()
0000000000000000000000000000000000000000;;		tests := map[admission.Operation]bool{
0000000000000000000000000000000000000000;;			admission.Update:  true,
0000000000000000000000000000000000000000;;			admission.Create:  true,
0000000000000000000000000000000000000000;;			admission.Delete:  false,
0000000000000000000000000000000000000000;;			admission.Connect: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for op, expected := range tests {
0000000000000000000000000000000000000000;;			result := handler.Handles(op)
0000000000000000000000000000000000000000;;			if result != expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected result for operation %s: %v\n", op, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
