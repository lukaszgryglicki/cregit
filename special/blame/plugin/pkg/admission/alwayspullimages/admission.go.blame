0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
97a612ee657f14bdf3b2adbce615c906f571fbe3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package alwayspullimages contains an admission controller that modifies every new Pod to force
0000000000000000000000000000000000000000;;	// the image pull policy to Always. This is useful in a multitenant cluster so that users can be
0000000000000000000000000000000000000000;;	// assured that their private images can only be used by those who have the credentials to pull
0000000000000000000000000000000000000000;;	// them. Without this admission controller, once an image has been pulled to a node, any pod from
0000000000000000000000000000000000000000;;	// any user can use it simply by knowing the image's name (assuming the Pod is scheduled onto the
0000000000000000000000000000000000000000;;	// right node), without any authorization check against the image. With this admission controller
0000000000000000000000000000000000000000;;	// enabled, images are always pulled prior to starting containers, which means valid credentials are
0000000000000000000000000000000000000000;;	// required.
0000000000000000000000000000000000000000;;	package alwayspullimages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers a plugin
0000000000000000000000000000000000000000;;	func Register(plugins *admission.Plugins) {
0000000000000000000000000000000000000000;;		plugins.Register("AlwaysPullImages", func(config io.Reader) (admission.Interface, error) {
0000000000000000000000000000000000000000;;			return NewAlwaysPullImages(), nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// alwaysPullImages is an implementation of admission.Interface.
0000000000000000000000000000000000000000;;	// It looks at all new pods and overrides each container's image pull policy to Always.
0000000000000000000000000000000000000000;;	type alwaysPullImages struct {
0000000000000000000000000000000000000000;;		*admission.Handler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *alwaysPullImages) Admit(attributes admission.Attributes) (err error) {
0000000000000000000000000000000000000000;;		// Ignore all calls to subresources or resources other than pods.
0000000000000000000000000000000000000000;;		if len(attributes.GetSubresource()) != 0 || attributes.GetResource().GroupResource() != api.Resource("pods") {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod, ok := attributes.GetObject().(*api.Pod)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return apierrors.NewBadRequest("Resource was marked with kind Pod but was unable to be converted")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range pod.Spec.InitContainers {
0000000000000000000000000000000000000000;;			pod.Spec.InitContainers[i].ImagePullPolicy = api.PullAlways
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			pod.Spec.Containers[i].ImagePullPolicy = api.PullAlways
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAlwaysPullImages creates a new always pull images admission control handler
0000000000000000000000000000000000000000;;	func NewAlwaysPullImages() admission.Interface {
0000000000000000000000000000000000000000;;		return &alwaysPullImages{
0000000000000000000000000000000000000000;;			Handler: admission.NewHandler(admission.Create, admission.Update),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
