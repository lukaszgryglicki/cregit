0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
97a612ee657f14bdf3b2adbce615c906f571fbe3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package alwayspullimages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmission verifies all create requests for pods result in every container's image pull policy
0000000000000000000000000000000000000000;;	// set to Always
0000000000000000000000000000000000000000;;	func TestAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		handler := &alwaysPullImages{}
0000000000000000000000000000000000000000;;		pod := api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				InitContainers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "init1", Image: "image"},
0000000000000000000000000000000000000000;;					{Name: "init2", Image: "image", ImagePullPolicy: api.PullNever},
0000000000000000000000000000000000000000;;					{Name: "init3", Image: "image", ImagePullPolicy: api.PullIfNotPresent},
0000000000000000000000000000000000000000;;					{Name: "init4", Image: "image", ImagePullPolicy: api.PullAlways},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "ctr1", Image: "image"},
0000000000000000000000000000000000000000;;					{Name: "ctr2", Image: "image", ImagePullPolicy: api.PullNever},
0000000000000000000000000000000000000000;;					{Name: "ctr3", Image: "image", ImagePullPolicy: api.PullIfNotPresent},
0000000000000000000000000000000000000000;;					{Name: "ctr4", Image: "image", ImagePullPolicy: api.PullAlways},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := handler.Admit(admission.NewAttributesRecord(&pod, nil, api.Kind("Pod").WithVersion("version"), pod.Namespace, pod.Name, api.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range pod.Spec.InitContainers {
0000000000000000000000000000000000000000;;			if c.ImagePullPolicy != api.PullAlways {
0000000000000000000000000000000000000000;;				t.Errorf("Container %v: expected pull always, got %v", c, c.ImagePullPolicy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			if c.ImagePullPolicy != api.PullAlways {
0000000000000000000000000000000000000000;;				t.Errorf("Container %v: expected pull always, got %v", c, c.ImagePullPolicy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestOtherResources ensures that this admission controller is a no-op for other resources,
0000000000000000000000000000000000000000;;	// subresources, and non-pods.
0000000000000000000000000000000000000000;;	func TestOtherResources(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "testnamespace"
0000000000000000000000000000000000000000;;		name := "testname"
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "ctr2", Image: "image", ImagePullPolicy: api.PullNever},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			kind        string
0000000000000000000000000000000000000000;;			resource    string
0000000000000000000000000000000000000000;;			subresource string
0000000000000000000000000000000000000000;;			object      runtime.Object
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "non-pod resource",
0000000000000000000000000000000000000000;;				kind:     "Foo",
0000000000000000000000000000000000000000;;				resource: "foos",
0000000000000000000000000000000000000000;;				object:   pod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "pod subresource",
0000000000000000000000000000000000000000;;				kind:        "Pod",
0000000000000000000000000000000000000000;;				resource:    "pods",
0000000000000000000000000000000000000000;;				subresource: "exec",
0000000000000000000000000000000000000000;;				object:      pod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "non-pod object",
0000000000000000000000000000000000000000;;				kind:        "Pod",
0000000000000000000000000000000000000000;;				resource:    "pods",
0000000000000000000000000000000000000000;;				object:      &api.Service{},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			handler := &alwaysPullImages{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(tc.object, nil, api.Kind(tc.kind).WithVersion("version"), namespace, name, api.Resource(tc.resource).WithVersion("version"), tc.subresource, admission.Create, nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectError {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected nil error", tc.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if e, a := api.PullNever, pod.Spec.Containers[0].ImagePullPolicy; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%s: image pull policy was changed to %s", tc.name, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
