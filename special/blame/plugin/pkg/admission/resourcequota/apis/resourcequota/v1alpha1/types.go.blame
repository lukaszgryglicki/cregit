0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
37d5da0561092fe7fee1b92a5e29ef17c9ff3927;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Configuration provides configuration for the ResourceQuota admission controller.
0000000000000000000000000000000000000000;;	type Configuration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LimitedResources whose consumption is limited by default.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LimitedResources []LimitedResource `json:"limitedResources"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LimitedResource matches a resource whose consumption is limited by default.
0000000000000000000000000000000000000000;;	// To consume the resource, there must exist an associated quota that limits
0000000000000000000000000000000000000000;;	// its consumption.
0000000000000000000000000000000000000000;;	type LimitedResource struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APIGroup is the name of the APIGroup that contains the limited resource.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		APIGroup string `json:"apiGroup,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource is the name of the resource this rule applies to.
0000000000000000000000000000000000000000;;		// For example, if the administrator wants to limit consumption
0000000000000000000000000000000000000000;;		// of a storage resource associated with persistent volume claims,
0000000000000000000000000000000000000000;;		// the value would be "persistentvolumeclaims".
0000000000000000000000000000000000000000;;		Resource string `json:"resource"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For each intercepted request, the quota system will evaluate
0000000000000000000000000000000000000000;;		// its resource usage.  It will iterate through each resource consumed
0000000000000000000000000000000000000000;;		// and if the resource contains any substring in this listing, the
0000000000000000000000000000000000000000;;		// quota system will ensure that there is a covering quota.  In the
0000000000000000000000000000000000000000;;		// absence of a covering quota, the quota system will deny the request.
0000000000000000000000000000000000000000;;		// For example, if an administrator wants to globally enforce that
0000000000000000000000000000000000000000;;		// that a quota must exist to consume persistent volume claims associated
0000000000000000000000000000000000000000;;		// with any storage class, the list would include
0000000000000000000000000000000000000000;;		// ".storageclass.storage.k8s.io/requests.storage"
0000000000000000000000000000000000000000;;		MatchContains []string `json:"matchContains,omitempty"`
0000000000000000000000000000000000000000;;	}
