0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4740b2bc5fdb66a0dbbc5b6b3e5a13088c4af253;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resourcequota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		resourcequotaapi "k8s.io/kubernetes/plugin/pkg/admission/resourcequota/apis/resourcequota"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/resourcequota/apis/resourcequota/install"
0000000000000000000000000000000000000000;;		resourcequotav1alpha1 "k8s.io/kubernetes/plugin/pkg/admission/resourcequota/apis/resourcequota/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		groupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		registry             = registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;		scheme               = runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs               = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		install.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadConfiguration loads the provided configuration.
0000000000000000000000000000000000000000;;	func LoadConfiguration(config io.Reader) (*resourcequotaapi.Configuration, error) {
0000000000000000000000000000000000000000;;		// if no config is provided, return a default configuration
0000000000000000000000000000000000000000;;		if config == nil {
0000000000000000000000000000000000000000;;			externalConfig := &resourcequotav1alpha1.Configuration{}
0000000000000000000000000000000000000000;;			scheme.Default(externalConfig)
0000000000000000000000000000000000000000;;			internalConfig := &resourcequotaapi.Configuration{}
0000000000000000000000000000000000000000;;			if err := scheme.Convert(externalConfig, internalConfig, nil); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return internalConfig, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// we have a config so parse it.
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoder := codecs.UniversalDecoder()
0000000000000000000000000000000000000000;;		decodedObj, err := runtime.Decode(decoder, data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceQuotaConfiguration, ok := decodedObj.(*resourcequotaapi.Configuration)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected type: %T", decodedObj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resourceQuotaConfiguration, nil
0000000000000000000000000000000000000000;;	}
