0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7f21ae1b8b538e23a474bbcdec7748da6f5afe2f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package webhook checks a webhook for configured operation admission
0000000000000000000000000000000000000000;;	package webhook
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RuleMatcher struct {
0000000000000000000000000000000000000000;;		Rule v1alpha1.RuleWithOperations
0000000000000000000000000000000000000000;;		Attr admission.Attributes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RuleMatcher) Matches() bool {
0000000000000000000000000000000000000000;;		return r.operation() &&
0000000000000000000000000000000000000000;;			r.group() &&
0000000000000000000000000000000000000000;;			r.version() &&
0000000000000000000000000000000000000000;;			r.resource()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func exactOrWildcard(items []string, requested string) bool {
0000000000000000000000000000000000000000;;		for _, item := range items {
0000000000000000000000000000000000000000;;			if item == "*" {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if item == requested {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RuleMatcher) group() bool {
0000000000000000000000000000000000000000;;		return exactOrWildcard(r.Rule.APIGroups, r.Attr.GetResource().Group)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RuleMatcher) version() bool {
0000000000000000000000000000000000000000;;		return exactOrWildcard(r.Rule.APIVersions, r.Attr.GetResource().Version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RuleMatcher) operation() bool {
0000000000000000000000000000000000000000;;		attrOp := r.Attr.GetOperation()
0000000000000000000000000000000000000000;;		for _, op := range r.Rule.Operations {
0000000000000000000000000000000000000000;;			if op == v1alpha1.OperationAll {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// The constants are the same such that this is a valid cast (and this
0000000000000000000000000000000000000000;;			// is tested).
0000000000000000000000000000000000000000;;			if op == v1alpha1.OperationType(attrOp) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func splitResource(resSub string) (res, sub string) {
0000000000000000000000000000000000000000;;		parts := strings.SplitN(resSub, "/", 2)
0000000000000000000000000000000000000000;;		if len(parts) == 2 {
0000000000000000000000000000000000000000;;			return parts[0], parts[1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parts[0], ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RuleMatcher) resource() bool {
0000000000000000000000000000000000000000;;		opRes, opSub := r.Attr.GetResource().Resource, r.Attr.GetSubresource()
0000000000000000000000000000000000000000;;		for _, res := range r.Rule.Resources {
0000000000000000000000000000000000000000;;			res, sub := splitResource(res)
0000000000000000000000000000000000000000;;			resMatch := res == "*" || res == opRes
0000000000000000000000000000000000000000;;			subMatch := sub == "*" || sub == opSub
0000000000000000000000000000000000000000;;			if resMatch && subMatch {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
