0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6b1b4beb02e9802f33d2a313650e0f896a3b84e0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podnodeselector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		kubeadmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestPodAdmission verifies various scenarios involving pod/namespace/global node label selectors
0000000000000000000000000000000000000000;;	func TestPodAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "testNamespace",
0000000000000000000000000000000000000000;;				Namespace: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mockClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		informerFactory.Start(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "testPod", Namespace: "testNamespace"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			defaultNodeSelector             string
0000000000000000000000000000000000000000;;			namespaceNodeSelector           string
0000000000000000000000000000000000000000;;			whitelist                       string
0000000000000000000000000000000000000000;;			podNodeSelector                 map[string]string
0000000000000000000000000000000000000000;;			mergedNodeSelector              labels.Set
0000000000000000000000000000000000000000;;			ignoreTestNamespaceNodeSelector bool
0000000000000000000000000000000000000000;;			admit                           bool
0000000000000000000000000000000000000000;;			testName                        string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:             "",
0000000000000000000000000000000000000000;;				podNodeSelector:                 map[string]string{},
0000000000000000000000000000000000000000;;				mergedNodeSelector:              labels.Set{},
0000000000000000000000000000000000000000;;				ignoreTestNamespaceNodeSelector: true,
0000000000000000000000000000000000000000;;				admit:    true,
0000000000000000000000000000000000000000;;				testName: "No node selectors",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:             "infra = false",
0000000000000000000000000000000000000000;;				podNodeSelector:                 map[string]string{},
0000000000000000000000000000000000000000;;				mergedNodeSelector:              labels.Set{"infra": "false"},
0000000000000000000000000000000000000000;;				ignoreTestNamespaceNodeSelector: true,
0000000000000000000000000000000000000000;;				admit:    true,
0000000000000000000000000000000000000000;;				testName: "Default node selector and no conflicts",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: " infra = false ",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{},
0000000000000000000000000000000000000000;;				mergedNodeSelector:    labels.Set{"infra": "false"},
0000000000000000000000000000000000000000;;				admit:                 true,
0000000000000000000000000000000000000000;;				testName:              "TestNamespace node selector with whitespaces and no conflicts",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "infra = false",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=true",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{},
0000000000000000000000000000000000000000;;				mergedNodeSelector:    labels.Set{"infra": "true"},
0000000000000000000000000000000000000000;;				admit:                 true,
0000000000000000000000000000000000000000;;				testName:              "Default and namespace node selector, no conflicts",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "infra = false",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{},
0000000000000000000000000000000000000000;;				mergedNodeSelector:    labels.Set{},
0000000000000000000000000000000000000000;;				admit:                 true,
0000000000000000000000000000000000000000;;				testName:              "Empty namespace node selector and no conflicts",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "infra = false",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=true",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{"env": "test"},
0000000000000000000000000000000000000000;;				mergedNodeSelector:    labels.Set{"infra": "true", "env": "test"},
0000000000000000000000000000000000000000;;				admit:                 true,
0000000000000000000000000000000000000000;;				testName:              "TestNamespace and pod node selector, no conflicts",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "env = test",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=true",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{"infra": "false"},
0000000000000000000000000000000000000000;;				admit:                 false,
0000000000000000000000000000000000000000;;				testName:              "Conflicting pod and namespace node selector, one label",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "env=dev",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=false, env = test",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{"env": "dev", "color": "blue"},
0000000000000000000000000000000000000000;;				admit:                 false,
0000000000000000000000000000000000000000;;				testName:              "Conflicting pod and namespace node selector, multiple labels",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "env=dev",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=false, env = dev",
0000000000000000000000000000000000000000;;				whitelist:             "env=dev, infra=false, color=blue",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{"env": "dev", "color": "blue"},
0000000000000000000000000000000000000000;;				mergedNodeSelector:    labels.Set{"infra": "false", "env": "dev", "color": "blue"},
0000000000000000000000000000000000000000;;				admit:                 true,
0000000000000000000000000000000000000000;;				testName:              "Merged pod node selectors satisfy the whitelist",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:   "env=dev",
0000000000000000000000000000000000000000;;				namespaceNodeSelector: "infra=false, env = dev",
0000000000000000000000000000000000000000;;				whitelist:             "env=dev, infra=true, color=blue",
0000000000000000000000000000000000000000;;				podNodeSelector:       map[string]string{"env": "dev", "color": "blue"},
0000000000000000000000000000000000000000;;				admit:                 false,
0000000000000000000000000000000000000000;;				testName:              "Merged pod node selectors conflict with the whitelist",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				defaultNodeSelector:             "env=dev",
0000000000000000000000000000000000000000;;				ignoreTestNamespaceNodeSelector: true,
0000000000000000000000000000000000000000;;				whitelist:                       "env=prd",
0000000000000000000000000000000000000000;;				podNodeSelector:                 map[string]string{},
0000000000000000000000000000000000000000;;				admit:                           false,
0000000000000000000000000000000000000000;;				testName:                        "Default node selector conflict with the whitelist",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if !test.ignoreTestNamespaceNodeSelector {
0000000000000000000000000000000000000000;;				namespace.ObjectMeta.Annotations = map[string]string{"scheduler.alpha.kubernetes.io/node-selector": test.namespaceNodeSelector}
0000000000000000000000000000000000000000;;				informerFactory.Core().InternalVersion().Namespaces().Informer().GetStore().Update(namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			handler.clusterNodeSelectors = make(map[string]string)
0000000000000000000000000000000000000000;;			handler.clusterNodeSelectors["clusterDefaultNodeSelector"] = test.defaultNodeSelector
0000000000000000000000000000000000000000;;			handler.clusterNodeSelectors[namespace.Name] = test.whitelist
0000000000000000000000000000000000000000;;			pod.Spec = api.PodSpec{NodeSelector: test.podNodeSelector}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := handler.Admit(admission.NewAttributesRecord(pod, nil, api.Kind("Pod").WithVersion("version"), "testNamespace", namespace.ObjectMeta.Name, api.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;			if test.admit && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test: %s, expected no error but got: %s", test.testName, err)
0000000000000000000000000000000000000000;;			} else if !test.admit && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test: %s, expected an error", test.testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.admit && !labels.Equals(test.mergedNodeSelector, labels.Set(pod.Spec.NodeSelector)) {
0000000000000000000000000000000000000000;;				t.Errorf("Test: %s, expected: %s but got: %s", test.testName, test.mergedNodeSelector, pod.Spec.NodeSelector)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandles(t *testing.T) {
0000000000000000000000000000000000000000;;		for op, shouldHandle := range map[admission.Operation]bool{
0000000000000000000000000000000000000000;;			admission.Create:  true,
0000000000000000000000000000000000000000;;			admission.Update:  false,
0000000000000000000000000000000000000000;;			admission.Connect: false,
0000000000000000000000000000000000000000;;			admission.Delete:  false,
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			nodeEnvionment := NewPodNodeSelector(nil)
0000000000000000000000000000000000000000;;			if e, a := shouldHandle, nodeEnvionment.Handles(op); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: shouldHandle=%t, handles=%t", op, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newHandlerForTest returns the admission controller configured for testing.
0000000000000000000000000000000000000000;;	func newHandlerForTest(c clientset.Interface) (*podNodeSelector, informers.SharedInformerFactory, error) {
0000000000000000000000000000000000000000;;		f := informers.NewSharedInformerFactory(c, 5*time.Minute)
0000000000000000000000000000000000000000;;		handler := NewPodNodeSelector(nil)
0000000000000000000000000000000000000000;;		pluginInitializer := kubeadmission.NewPluginInitializer(c, nil, f, nil, nil, nil, nil)
0000000000000000000000000000000000000000;;		pluginInitializer.Initialize(handler)
0000000000000000000000000000000000000000;;		err := admission.Validate(handler)
0000000000000000000000000000000000000000;;		return handler, f, err
0000000000000000000000000000000000000000;;	}
