0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7b839e94246ce301157d7720c7f7db67bf0dd9bb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package noderestriction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/auth/nodeidentifier"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		coreinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeTestPod(namespace, name, node string, mirror bool) *api.Pod {
0000000000000000000000000000000000000000;;		pod := &api.Pod{}
0000000000000000000000000000000000000000;;		pod.Namespace = namespace
0000000000000000000000000000000000000000;;		pod.Name = name
0000000000000000000000000000000000000000;;		pod.Spec.NodeName = node
0000000000000000000000000000000000000000;;		if mirror {
0000000000000000000000000000000000000000;;			pod.Annotations = map[string]string{api.MirrorPodAnnotationKey: "true"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test_nodePlugin_Admit(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			mynode = &user.DefaultInfo{Name: "system:node:mynode", Groups: []string{"system:nodes"}}
0000000000000000000000000000000000000000;;			bob    = &user.DefaultInfo{Name: "bob"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mynodeObj    = &api.Node{ObjectMeta: metav1.ObjectMeta{Name: "mynode"}}
0000000000000000000000000000000000000000;;			othernodeObj = &api.Node{ObjectMeta: metav1.ObjectMeta{Name: "othernode"}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mymirrorpod      = makeTestPod("ns", "mymirrorpod", "mynode", true)
0000000000000000000000000000000000000000;;			othermirrorpod   = makeTestPod("ns", "othermirrorpod", "othernode", true)
0000000000000000000000000000000000000000;;			unboundmirrorpod = makeTestPod("ns", "unboundmirrorpod", "", true)
0000000000000000000000000000000000000000;;			mypod            = makeTestPod("ns", "mypod", "mynode", false)
0000000000000000000000000000000000000000;;			otherpod         = makeTestPod("ns", "otherpod", "othernode", false)
0000000000000000000000000000000000000000;;			unboundpod       = makeTestPod("ns", "unboundpod", "", false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			configmapResource = api.Resource("configmap").WithVersion("v1")
0000000000000000000000000000000000000000;;			configmapKind     = api.Kind("ConfigMap").WithVersion("v1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podResource = api.Resource("pods").WithVersion("v1")
0000000000000000000000000000000000000000;;			podKind     = api.Kind("Pod").WithVersion("v1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			nodeResource = api.Resource("nodes").WithVersion("v1")
0000000000000000000000000000000000000000;;			nodeKind     = api.Kind("Node").WithVersion("v1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			noExistingPods = fake.NewSimpleClientset().Core()
0000000000000000000000000000000000000000;;			existingPods   = fake.NewSimpleClientset(mymirrorpod, othermirrorpod, unboundmirrorpod, mypod, otherpod, unboundpod).Core()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sapod := makeTestPod("ns", "mysapod", "mynode", true)
0000000000000000000000000000000000000000;;		sapod.Spec.ServiceAccountName = "foo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secretpod := makeTestPod("ns", "mysecretpod", "mynode", true)
0000000000000000000000000000000000000000;;		secretpod.Spec.Volumes = []api.Volume{{VolumeSource: api.VolumeSource{Secret: &api.SecretVolumeSource{SecretName: "foo"}}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configmappod := makeTestPod("ns", "myconfigmappod", "mynode", true)
0000000000000000000000000000000000000000;;		configmappod.Spec.Volumes = []api.Volume{{VolumeSource: api.VolumeSource{ConfigMap: &api.ConfigMapVolumeSource{LocalObjectReference: api.LocalObjectReference{Name: "foo"}}}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvcpod := makeTestPod("ns", "mypvcpod", "mynode", true)
0000000000000000000000000000000000000000;;		pvcpod.Spec.Volumes = []api.Volume{{VolumeSource: api.VolumeSource{PersistentVolumeClaim: &api.PersistentVolumeClaimVolumeSource{ClaimName: "foo"}}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			podsGetter coreinternalversion.PodsGetter
0000000000000000000000000000000000000000;;			attributes admission.Attributes
0000000000000000000000000000000000000000;;			err        string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Mirror pods bound to us
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow creating a mirror pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mymirrorpod, nil, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of mirror pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mymirrorpod, mymirrorpod, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow delete of mirror pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of mirror pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mymirrorpod, nil, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow update of mirror pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mymirrorpod, mymirrorpod, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of mirror pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, mymirrorpod.Namespace, mymirrorpod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Mirror pods bound to another node
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid creating a mirror pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othermirrorpod, nil, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of mirror pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othermirrorpod, othermirrorpod, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of mirror pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of mirror pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othermirrorpod, nil, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of mirror pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othermirrorpod, othermirrorpod, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of mirror pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, othermirrorpod.Namespace, othermirrorpod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Mirror pods not bound to any node
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid creating a mirror pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundmirrorpod, nil, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of mirror pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundmirrorpod, unboundmirrorpod, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of mirror pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of mirror pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundmirrorpod, nil, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of mirror pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundmirrorpod, unboundmirrorpod, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of mirror pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundmirrorpod.Namespace, unboundmirrorpod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Normal pods bound to us
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid creating a normal pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mypod, nil, podKind, mypod.Namespace, mypod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "can only create mirror pods",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of normal pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mypod, mypod, podKind, mypod.Namespace, mypod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow delete of normal pod bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, mypod.Namespace, mypod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of normal pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mypod, nil, podKind, mypod.Namespace, mypod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow update of normal pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mypod, mypod, podKind, mypod.Namespace, mypod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of normal pod status bound to self",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, mypod.Namespace, mypod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Normal pods bound to another
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid creating a normal pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(otherpod, nil, podKind, otherpod.Namespace, otherpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "can only create mirror pods",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of normal pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(otherpod, otherpod, podKind, otherpod.Namespace, otherpod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of normal pod bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, otherpod.Namespace, otherpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of normal pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(otherpod, nil, podKind, otherpod.Namespace, otherpod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of normal pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(otherpod, otherpod, podKind, otherpod.Namespace, otherpod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of normal pod status bound to another",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, otherpod.Namespace, otherpod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Normal pods not bound to any node
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid creating a normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "can only create mirror pods",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, unboundpod, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, unboundpod, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "spec.nodeName set to itself",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "forbidden: unexpected operation",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Missing pod
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of unknown pod",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "not found",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Resource pods
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of pod referencing service account",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(sapod, nil, podKind, sapod.Namespace, sapod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "reference a service account",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of pod referencing secret",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(secretpod, nil, podKind, secretpod.Namespace, secretpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "reference secrets",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of pod referencing configmap",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(configmappod, nil, podKind, configmappod.Namespace, configmappod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "reference configmaps",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of pod referencing persistentvolumeclaim",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(pvcpod, nil, podKind, pvcpod.Namespace, pvcpod.Name, podResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "reference persistentvolumeclaims",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// My node object
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow create of my node",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mynodeObj, nil, nodeKind, mynodeObj.Namespace, mynodeObj.Name, nodeResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow create of my node pulling name from object",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mynodeObj, nil, nodeKind, mynodeObj.Namespace, "", nodeResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow update of my node",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mynodeObj, mynodeObj, nodeKind, mynodeObj.Namespace, mynodeObj.Name, nodeResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow delete of my node",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, nodeKind, mynodeObj.Namespace, mynodeObj.Name, nodeResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow update of my node status",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(mynodeObj, mynodeObj, nodeKind, mynodeObj.Namespace, mynodeObj.Name, nodeResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Other node object
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of other node",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othernodeObj, nil, nodeKind, othernodeObj.Namespace, othernodeObj.Name, nodeResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "cannot modify node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid create of other node pulling name from object",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othernodeObj, nil, nodeKind, othernodeObj.Namespace, "", nodeResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "cannot modify node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of other node",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othernodeObj, othernodeObj, nodeKind, othernodeObj.Namespace, othernodeObj.Name, nodeResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "cannot modify node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid delete of other node",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, nodeKind, othernodeObj.Namespace, othernodeObj.Name, nodeResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "cannot modify node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "forbid update of other node status",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(othernodeObj, othernodeObj, nodeKind, othernodeObj.Namespace, othernodeObj.Name, nodeResource, "status", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "cannot modify node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Unrelated objects
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow create of unrelated object",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(&api.ConfigMap{}, nil, configmapKind, "myns", "mycm", configmapResource, "", admission.Create, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow update of unrelated object",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(&api.ConfigMap{}, &api.ConfigMap{}, configmapKind, "myns", "mycm", configmapResource, "", admission.Update, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow delete of unrelated object",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, configmapKind, "myns", "mycm", configmapResource, "", admission.Delete, mynode),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Unrelated user
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user creating a normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Create, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user update of normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, unboundpod, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Update, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user delete of normal pod unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "", admission.Delete, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user create of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: noExistingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Create, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user update of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(unboundpod, unboundpod, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Update, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "allow unrelated user delete of normal pod status unbound",
0000000000000000000000000000000000000000;;				podsGetter: existingPods,
0000000000000000000000000000000000000000;;				attributes: admission.NewAttributesRecord(nil, nil, podKind, unboundpod.Namespace, unboundpod.Name, podResource, "status", admission.Delete, bob),
0000000000000000000000000000000000000000;;				err:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			t.Run(tt.name, func(t *testing.T) {
0000000000000000000000000000000000000000;;				c := NewPlugin(nodeidentifier.NewDefaultNodeIdentifier())
0000000000000000000000000000000000000000;;				c.podsGetter = tt.podsGetter
0000000000000000000000000000000000000000;;				err := c.Admit(tt.attributes)
0000000000000000000000000000000000000000;;				if (err == nil) != (len(tt.err) == 0) {
0000000000000000000000000000000000000000;;					t.Errorf("nodePlugin.Admit() error = %v, expected %v", err, tt.err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(tt.err) > 0 && !strings.Contains(err.Error(), tt.err) {
0000000000000000000000000000000000000000;;					t.Errorf("nodePlugin.Admit() error = %v, expected %v", err, tt.err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
