0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8a1bac95aa7b5189877bec187f321d72c25c636b;plugin/pkg/admission/persistentvolumeclaim/default/admission.go[plugin/pkg/admission/persistentvolumeclaim/default/admission.go][plugin/pkg/admission/storageclass/setdefault/admission.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package setdefault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		admission "k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;		storageutil "k8s.io/kubernetes/pkg/apis/storage/util"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		storagelisters "k8s.io/kubernetes/pkg/client/listers/storage/internalversion"
0000000000000000000000000000000000000000;;		kubeapiserveradmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PluginName = "DefaultStorageClass"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers a plugin
0000000000000000000000000000000000000000;;	func Register(plugins *admission.Plugins) {
0000000000000000000000000000000000000000;;		plugins.Register(PluginName, func(config io.Reader) (admission.Interface, error) {
0000000000000000000000000000000000000000;;			plugin := newPlugin()
0000000000000000000000000000000000000000;;			return plugin, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// claimDefaulterPlugin holds state for and implements the admission plugin.
0000000000000000000000000000000000000000;;	type claimDefaulterPlugin struct {
0000000000000000000000000000000000000000;;		*admission.Handler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lister storagelisters.StorageClassLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.Interface = &claimDefaulterPlugin{}
0000000000000000000000000000000000000000;;	var _ = kubeapiserveradmission.WantsInternalKubeInformerFactory(&claimDefaulterPlugin{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newPlugin creates a new admission plugin.
0000000000000000000000000000000000000000;;	func newPlugin() *claimDefaulterPlugin {
0000000000000000000000000000000000000000;;		return &claimDefaulterPlugin{
0000000000000000000000000000000000000000;;			Handler: admission.NewHandler(admission.Create),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *claimDefaulterPlugin) SetInternalKubeInformerFactory(f informers.SharedInformerFactory) {
0000000000000000000000000000000000000000;;		informer := f.Storage().InternalVersion().StorageClasses()
0000000000000000000000000000000000000000;;		a.lister = informer.Lister()
0000000000000000000000000000000000000000;;		a.SetReadyFunc(informer.Informer().HasSynced)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures lister is set.
0000000000000000000000000000000000000000;;	func (a *claimDefaulterPlugin) Validate() error {
0000000000000000000000000000000000000000;;		if a.lister == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing lister")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admit sets the default value of a PersistentVolumeClaim's storage class, in case the user did
0000000000000000000000000000000000000000;;	// not provide a value.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1.  Find available StorageClasses.
0000000000000000000000000000000000000000;;	// 2.  Figure which is the default
0000000000000000000000000000000000000000;;	// 3.  Write to the PVClaim
0000000000000000000000000000000000000000;;	func (c *claimDefaulterPlugin) Admit(a admission.Attributes) error {
0000000000000000000000000000000000000000;;		if a.GetResource().GroupResource() != api.Resource("persistentvolumeclaims") {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(a.GetSubresource()) != 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvc, ok := a.GetObject().(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		// if we can't convert then we don't handle this object so just return
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if helper.PersistentVolumeClaimHasClass(pvc) {
0000000000000000000000000000000000000000;;			// The user asked for a class.
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("no storage class for claim %s (generate: %s)", pvc.Name, pvc.GenerateName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		def, err := getDefaultClass(c.lister)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return admission.NewForbidden(a, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if def == nil {
0000000000000000000000000000000000000000;;			// No default class selected, do nothing about the PVC.
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("defaulting storage class for claim %s (generate: %s) to %s", pvc.Name, pvc.GenerateName, def.Name)
0000000000000000000000000000000000000000;;		pvc.Spec.StorageClassName = &def.Name
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getDefaultClass returns the default StorageClass from the store, or nil.
0000000000000000000000000000000000000000;;	func getDefaultClass(lister storagelisters.StorageClassLister) (*storage.StorageClass, error) {
0000000000000000000000000000000000000000;;		list, err := lister.List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultClasses := []*storage.StorageClass{}
0000000000000000000000000000000000000000;;		for _, class := range list {
0000000000000000000000000000000000000000;;			if storageutil.IsDefaultAnnotation(class.ObjectMeta) {
0000000000000000000000000000000000000000;;				defaultClasses = append(defaultClasses, class)
0000000000000000000000000000000000000000;;				glog.V(4).Infof("getDefaultClass added: %s", class.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(defaultClasses) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(defaultClasses) > 1 {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("getDefaultClass %s defaults found", len(defaultClasses))
0000000000000000000000000000000000000000;;			return nil, errors.NewInternalError(fmt.Errorf("%d default StorageClasses were found", len(defaultClasses)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return defaultClasses[0], nil
0000000000000000000000000000000000000000;;	}
