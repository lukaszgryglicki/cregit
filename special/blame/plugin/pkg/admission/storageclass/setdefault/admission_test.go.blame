0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8a1bac95aa7b5189877bec187f321d72c25c636b;plugin/pkg/admission/persistentvolumeclaim/default/admission_test.go[plugin/pkg/admission/persistentvolumeclaim/default/admission_test.go][plugin/pkg/admission/storageclass/setdefault/admission_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package setdefault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;		storageutil "k8s.io/kubernetes/pkg/apis/storage/util"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		empty := ""
0000000000000000000000000000000000000000;;		foo := "foo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultClass1 := &storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "default1",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					storageutil.IsDefaultStorageClassAnnotation: "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "default1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultClass2 := &storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "default2",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					storageutil.IsDefaultStorageClassAnnotation: "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "default2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Class that has explicit default = false
0000000000000000000000000000000000000000;;		classWithFalseDefault := &storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "nondefault1",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					storageutil.IsDefaultStorageClassAnnotation: "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "nondefault1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Class with missing default annotation (=non-default)
0000000000000000000000000000000000000000;;		classWithNoDefault := &storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "nondefault2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "nondefault1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Class with empty default annotation (=non-default)
0000000000000000000000000000000000000000;;		classWithEmptyDefault := &storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "nondefault2",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					storageutil.IsDefaultStorageClassAnnotation: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "nondefault1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		claimWithClass := &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "PersistentVolumeClaim",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "claimWithClass",
0000000000000000000000000000000000000000;;				Namespace: "ns",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;				StorageClassName: &foo,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		claimWithEmptyClass := &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "PersistentVolumeClaim",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "claimWithEmptyClass",
0000000000000000000000000000000000000000;;				Namespace: "ns",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;				StorageClassName: &empty,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		claimWithNoClass := &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "PersistentVolumeClaim",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "claimWithNoClass",
0000000000000000000000000000000000000000;;				Namespace: "ns",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name              string
0000000000000000000000000000000000000000;;			classes           []*storage.StorageClass
0000000000000000000000000000000000000000;;			claim             *api.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			expectError       bool
0000000000000000000000000000000000000000;;			expectedClassName string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"no default, no modification of PVCs",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithNoClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"one default, modify PVC with class=nil",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithNoClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"default1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"one default, no modification of PVC with class=''",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithEmptyClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"one default, no modification of PVC with class='foo'",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"two defaults, error with PVC with class=nil",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, defaultClass2, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithNoClass,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"two defaults, no modification of PVC with class=''",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, defaultClass2, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithEmptyClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"two defaults, no modification of PVC with class='foo'",
0000000000000000000000000000000000000000;;				[]*storage.StorageClass{defaultClass1, defaultClass2, classWithFalseDefault, classWithNoDefault, classWithEmptyDefault},
0000000000000000000000000000000000000000;;				claimWithClass,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				"foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("starting test %q", test.name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// clone the claim, it's going to be modified
0000000000000000000000000000000000000000;;			clone, err := api.Scheme.DeepCopy(test.claim)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Cannot clone claim: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			claim := clone.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctrl := newPlugin()
0000000000000000000000000000000000000000;;			informerFactory := informers.NewSharedInformerFactory(nil, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;			ctrl.SetInternalKubeInformerFactory(informerFactory)
0000000000000000000000000000000000000000;;			for _, c := range test.classes {
0000000000000000000000000000000000000000;;				informerFactory.Storage().InternalVersion().StorageClasses().Informer().GetStore().Add(c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			attrs := admission.NewAttributesRecord(
0000000000000000000000000000000000000000;;				claim, // new object
0000000000000000000000000000000000000000;;				nil,   // old object
0000000000000000000000000000000000000000;;				api.Kind("PersistentVolumeClaim").WithVersion("version"),
0000000000000000000000000000000000000000;;				claim.Namespace,
0000000000000000000000000000000000000000;;				claim.Name,
0000000000000000000000000000000000000000;;				api.Resource("persistentvolumeclaims").WithVersion("version"),
0000000000000000000000000000000000000000;;				"", // subresource
0000000000000000000000000000000000000000;;				admission.Create,
0000000000000000000000000000000000000000;;				nil, // userInfo
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			err = ctrl.Admit(attrs)
0000000000000000000000000000000000000000;;			glog.Infof("Got %v", err)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("Test %q: unexpected error received: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("Test %q: expected error and no error recevied", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			class := ""
0000000000000000000000000000000000000000;;			if claim.Spec.StorageClassName != nil {
0000000000000000000000000000000000000000;;				class = *claim.Spec.StorageClassName
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectedClassName != "" && test.expectedClassName != class {
0000000000000000000000000000000000000000;;				t.Errorf("Test %q: expected class name %q, got %q", test.name, test.expectedClassName, class)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectedClassName == "" && class != "" {
0000000000000000000000000000000000000000;;				t.Errorf("Test %q: expected class name %q, got %q", test.name, test.expectedClassName, class)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
