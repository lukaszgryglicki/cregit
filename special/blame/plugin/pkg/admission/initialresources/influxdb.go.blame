0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5536d66a1341cfc5a5fe01682242d8b96121b69f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialresources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		influxdb "github.com/influxdata/influxdb/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		cpuSeriesName      = "autoscaling.cpu.usage.2m"
0000000000000000000000000000000000000000;;		memSeriesName      = "autoscaling.memory.usage.2m"
0000000000000000000000000000000000000000;;		cpuContinuousQuery = "select derivative(value) as value from \"cpu/usage_ns_cumulative\" where pod_id <> '' group by pod_id, pod_namespace, container_name, container_base_image, time(2m) into " + cpuSeriesName
0000000000000000000000000000000000000000;;		memContinuousQuery = "select mean(value) as value from \"memory/usage_bytes_gauge\" where pod_id <> '' group by pod_id, pod_namespace, container_name, container_base_image, time(2m) into " + memSeriesName
0000000000000000000000000000000000000000;;		timeFormat         = "2006-01-02 15:04:05"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(piosz): rewrite this once we will migrate into InfluxDB v0.9.
0000000000000000000000000000000000000000;;	type influxdbSource struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInfluxdbSource(host, user, password, db string) (dataSource, error) {
0000000000000000000000000000000000000000;;		return &influxdbSource{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *influxdbSource) query(query string) ([]*influxdb.Response, error) {
0000000000000000000000000000000000000000;;		// TODO(piosz): add support again
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("temporary not supported; see #18826 for more details")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *influxdbSource) GetUsagePercentile(kind api.ResourceName, perc int64, image, namespace string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;		var series string
0000000000000000000000000000000000000000;;		if kind == api.ResourceCPU {
0000000000000000000000000000000000000000;;			series = cpuSeriesName
0000000000000000000000000000000000000000;;		} else if kind == api.ResourceMemory {
0000000000000000000000000000000000000000;;			series = memSeriesName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var imgPattern string
0000000000000000000000000000000000000000;;		if exactMatch {
0000000000000000000000000000000000000000;;			imgPattern = "='" + image + "'"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// Escape character "/" in image pattern.
0000000000000000000000000000000000000000;;			imgPattern = "=~/^" + strings.Replace(image, "/", "\\/", -1) + "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var namespaceCond string
0000000000000000000000000000000000000000;;		if namespace != "" {
0000000000000000000000000000000000000000;;			namespaceCond = " and pod_namespace='" + namespace + "'"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := fmt.Sprintf("select percentile(value, %v), count(pod_id) from %v where container_base_image%v%v and time > '%v' and time < '%v'", perc, series, imgPattern, namespaceCond, start.UTC().Format(timeFormat), end.UTC().Format(timeFormat))
0000000000000000000000000000000000000000;;		if _, err := s.query(query); err != nil {
0000000000000000000000000000000000000000;;			return 0, 0, fmt.Errorf("error while trying to query InfluxDB: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, 0, nil
0000000000000000000000000000000000000000;;	}
