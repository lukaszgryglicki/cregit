0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f1b7b8566d6c114c83a96e2bd7e7b3d31b7aaba4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialresources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert "github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		testImageName    string = "hawkular/hawkular-metrics"
0000000000000000000000000000000000000000;;		testImageVersion string = "latest"
0000000000000000000000000000000000000000;;		testImageSHA     string = "b727ece3780cdd30e9a86226e520f26bcc396071ed7a86b7ef6684bb93a9f717"
0000000000000000000000000000000000000000;;		testPartialMatch string = "hawkular/hawkular-metrics:*"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testImageWithVersion() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s:%s", testImageName, testImageVersion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testImageWithReference() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s@sha256:%s", testImageName, testImageSHA)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTaqQuery(t *testing.T) {
0000000000000000000000000000000000000000;;		kind := api.ResourceCPU
0000000000000000000000000000000000000000;;		tQ := tagQuery(kind, testImageWithVersion(), false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(tQ))
0000000000000000000000000000000000000000;;		assert.Equal(t, testPartialMatch, tQ[containerImageTag])
0000000000000000000000000000000000000000;;		assert.Equal(t, "cpu/usage", tQ[descriptorTag])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tQe := tagQuery(kind, testImageWithVersion(), true)
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(tQe))
0000000000000000000000000000000000000000;;		assert.Equal(t, testImageWithVersion(), tQe[containerImageTag])
0000000000000000000000000000000000000000;;		assert.Equal(t, "cpu/usage", tQe[descriptorTag])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tQr := tagQuery(kind, testImageWithReference(), false)
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(tQe))
0000000000000000000000000000000000000000;;		assert.Equal(t, testPartialMatch, tQr[containerImageTag])
0000000000000000000000000000000000000000;;		assert.Equal(t, "cpu/usage", tQr[descriptorTag])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tQre := tagQuery(kind, testImageWithReference(), true)
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(tQe))
0000000000000000000000000000000000000000;;		assert.Equal(t, testImageWithReference(), tQre[containerImageTag])
0000000000000000000000000000000000000000;;		assert.Equal(t, "cpu/usage", tQre[descriptorTag])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kind = api.ResourceMemory
0000000000000000000000000000000000000000;;		tQ = tagQuery(kind, testImageWithReference(), true)
0000000000000000000000000000000000000000;;		assert.Equal(t, "memory/usage", tQ[descriptorTag])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kind = api.ResourceStorage
0000000000000000000000000000000000000000;;		tQ = tagQuery(kind, testImageWithReference(), true)
0000000000000000000000000000000000000000;;		assert.Equal(t, "", tQ[descriptorTag])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSource(t *testing.T) (map[string]string, dataSource) {
0000000000000000000000000000000000000000;;		tenant := "16a8884e4c155457ee38a8901df6b536"
0000000000000000000000000000000000000000;;		reqs := make(map[string]string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			assert.Equal(t, tenant, r.Header.Get("Hawkular-Tenant"))
0000000000000000000000000000000000000000;;			assert.Equal(t, "Basic", r.Header.Get("Authorization")[:5])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if strings.Contains(r.RequestURI, "counters/data") {
0000000000000000000000000000000000000000;;				assert.True(t, strings.Contains(r.RequestURI, url.QueryEscape(testImageWithVersion())))
0000000000000000000000000000000000000000;;				assert.True(t, strings.Contains(r.RequestURI, "cpu%2Fusage"))
0000000000000000000000000000000000000000;;				assert.True(t, strings.Contains(r.RequestURI, "percentiles=90"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				reqs["counters/data"] = r.RequestURI
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, ` [{"start":1444620095882,"end":1444648895882,"min":1.45,"avg":1.45,"median":1.45,"max":1.45,"percentile95th":1.45,"samples":123456,"percentiles":[{"value":7896.54,"quantile":0.9},{"value":1.45,"quantile":0.99}],"empty":false}]`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				reqs["unknown"] = r.RequestURI
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		paramUri := fmt.Sprintf("%s?user=test&pass=yep&tenant=foo&insecure=true", s.URL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hSource, err := newHawkularSource(paramUri)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return reqs, hSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInsecureMustBeBool(t *testing.T) {
0000000000000000000000000000000000000000;;		paramUri := fmt.Sprintf("localhost?user=test&pass=yep&insecure=foo")
0000000000000000000000000000000000000000;;		_, err := newHawkularSource(paramUri)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error from newHawkularSource")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCAFileMustExist(t *testing.T) {
0000000000000000000000000000000000000000;;		paramUri := fmt.Sprintf("localhost?user=test&pass=yep&caCert=foo")
0000000000000000000000000000000000000000;;		_, err := newHawkularSource(paramUri)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error from newHawkularSource")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceAccountIsMutuallyExclusiveWithAuth(t *testing.T) {
0000000000000000000000000000000000000000;;		paramUri := fmt.Sprintf("localhost?user=test&pass=yep&useServiceAccount=true")
0000000000000000000000000000000000000000;;		_, err := newHawkularSource(paramUri)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error from newHawkularSource")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetUsagePercentile(t *testing.T) {
0000000000000000000000000000000000000000;;		reqs, hSource := newSource(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		usage, samples, err := hSource.GetUsagePercentile(api.ResourceCPU, 90, testImageWithVersion(), "16a8884e4c155457ee38a8901df6b536", true, time.Now(), time.Now())
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, len(reqs))
0000000000000000000000000000000000000000;;		assert.Equal(t, "", reqs["unknown"])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, int64(123456), int64(samples))
0000000000000000000000000000000000000000;;		assert.Equal(t, int64(7896), usage) // float64 -> int64
0000000000000000000000000000000000000000;;	}
