0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c1fcc18efe25e919338e800712f943d41fb63544;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialresources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		influxdbHost = flag.String("ir-influxdb-host", "localhost:8080/api/v1/namespaces/kube-system/services/monitoring-influxdb:api/proxy", "Address of InfluxDB which contains metrics required by InitialResources")
0000000000000000000000000000000000000000;;		user         = flag.String("ir-user", "root", "User used for connecting to InfluxDB")
0000000000000000000000000000000000000000;;		// TODO: figure out how to better pass password here
0000000000000000000000000000000000000000;;		password       = flag.String("ir-password", "root", "Password used for connecting to InfluxDB")
0000000000000000000000000000000000000000;;		db             = flag.String("ir-dbname", "k8s", "InfluxDB database name which contains metrics required by InitialResources")
0000000000000000000000000000000000000000;;		hawkularConfig = flag.String("ir-hawkular", "", "Hawkular configuration URL")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WARNING: If you are planning to add another implementation of dataSource interface please bear in mind,
0000000000000000000000000000000000000000;;	// that dataSource will be moved to Heapster some time in the future and possibly rewritten.
0000000000000000000000000000000000000000;;	type dataSource interface {
0000000000000000000000000000000000000000;;		// Returns <perc>th of sample values which represent usage of <kind> for containers running <image>,
0000000000000000000000000000000000000000;;		// within time range (start, end), number of samples considered and error if occurred.
0000000000000000000000000000000000000000;;		// If <exactMatch> then take only samples that concern the same image (both name and take are the same),
0000000000000000000000000000000000000000;;		// otherwise consider also samples with the same image a possibly different tag.
0000000000000000000000000000000000000000;;		GetUsagePercentile(kind api.ResourceName, perc int64, image, namespace string, exactMatch bool, start, end time.Time) (usage int64, samples int64, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDataSource(kind string) (dataSource, error) {
0000000000000000000000000000000000000000;;		if kind == "influxdb" {
0000000000000000000000000000000000000000;;			return newInfluxdbSource(*influxdbHost, *user, *password, *db)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if kind == "gcm" {
0000000000000000000000000000000000000000;;			return newGcmSource()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if kind == "hawkular" {
0000000000000000000000000000000000000000;;			return newHawkularSource(*hawkularConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("unknown data source %v", kind)
0000000000000000000000000000000000000000;;	}
