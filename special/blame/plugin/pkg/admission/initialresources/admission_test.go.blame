0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c1fcc18efe25e919338e800712f943d41fb63544;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialresources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeSource struct {
0000000000000000000000000000000000000000;;		f func(kind api.ResourceName, perc int64, image, namespace string, exactMatch bool, start, end time.Time) (int64, int64, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeSource) GetUsagePercentile(kind api.ResourceName, perc int64, image, namespace string, exactMatch bool, start, end time.Time) (usage int64, samples int64, err error) {
0000000000000000000000000000000000000000;;		return s.f(kind, perc, image, namespace, exactMatch, start, end)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseReq(cpu, mem string) api.ResourceList {
0000000000000000000000000000000000000000;;		if cpu == "" && mem == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req := api.ResourceList{}
0000000000000000000000000000000000000000;;		if cpu != "" {
0000000000000000000000000000000000000000;;			req[api.ResourceCPU] = resource.MustParse(cpu)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mem != "" {
0000000000000000000000000000000000000000;;			req[api.ResourceMemory] = resource.MustParse(mem)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addContainer(pod *api.Pod, name, image string, request api.ResourceList) {
0000000000000000000000000000000000000000;;		pod.Spec.Containers = append(pod.Spec.Containers, api.Container{
0000000000000000000000000000000000000000;;			Name:      name,
0000000000000000000000000000000000000000;;			Image:     image,
0000000000000000000000000000000000000000;;			Resources: api.ResourceRequirements{Requests: request},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createPod(name string, image string, request api.ResourceList) *api.Pod {
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: "test-ns"},
0000000000000000000000000000000000000000;;			Spec:       api.PodSpec{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []api.Container{}
0000000000000000000000000000000000000000;;		addContainer(pod, "i0", image, request)
0000000000000000000000000000000000000000;;		pod.Spec.InitContainers = pod.Spec.Containers
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []api.Container{}
0000000000000000000000000000000000000000;;		addContainer(pod, "c0", image, request)
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPods() []*api.Pod {
0000000000000000000000000000000000000000;;		return []*api.Pod{
0000000000000000000000000000000000000000;;			createPod("p0", "image:v0", parseReq("", "")),
0000000000000000000000000000000000000000;;			createPod("p1", "image:v1", parseReq("", "300")),
0000000000000000000000000000000000000000;;			createPod("p2", "image:v2", parseReq("300m", "")),
0000000000000000000000000000000000000000;;			createPod("p3", "image:v3", parseReq("300m", "300")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyContainer(t *testing.T, c *api.Container, cpu, mem int64) {
0000000000000000000000000000000000000000;;		req := c.Resources.Requests
0000000000000000000000000000000000000000;;		if req.Cpu().MilliValue() != cpu {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong CPU request for container %v. Expected %v, got %v.", c.Name, cpu, req.Cpu().MilliValue())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req.Memory().Value() != mem {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong memory request for container %v. Expected %v, got %v.", c.Name, mem, req.Memory().Value())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyPod(t *testing.T, pod *api.Pod, cpu, mem int64) {
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.Containers[0], cpu, mem)
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.InitContainers[0], cpu, mem)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyAnnotation(t *testing.T, pod *api.Pod, expected string) {
0000000000000000000000000000000000000000;;		a, ok := pod.ObjectMeta.Annotations[initialResourcesAnnotation]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("No annotation but expected %v", expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a != expected {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong annotation set by Initial Resources: got %v, expected %v", a, expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectNoAnnotation(t *testing.T, pod *api.Pod) {
0000000000000000000000000000000000000000;;		if a, ok := pod.ObjectMeta.Annotations[initialResourcesAnnotation]; ok {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no annotation but got %v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func admit(t *testing.T, ir admission.Interface, pods []*api.Pod) {
0000000000000000000000000000000000000000;;		for i := range pods {
0000000000000000000000000000000000000000;;			p := pods[i]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podKind := api.Kind("Pod").WithVersion("version")
0000000000000000000000000000000000000000;;			podRes := api.Resource("pods").WithVersion("version")
0000000000000000000000000000000000000000;;			attrs := admission.NewAttributesRecord(p, nil, podKind, "test", p.ObjectMeta.Name, podRes, "", admission.Create, nil)
0000000000000000000000000000000000000000;;			if err := ir.Admit(attrs); err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testAdminScenarios(t *testing.T, ir admission.Interface, p *api.Pod) {
0000000000000000000000000000000000000000;;		podKind := api.Kind("Pod").WithVersion("version")
0000000000000000000000000000000000000000;;		podRes := api.Resource("pods").WithVersion("version")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			attrs       admission.Attributes
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				admission.NewAttributesRecord(p, nil, podKind, "test", p.ObjectMeta.Name, podRes, "foo", admission.Create, nil),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				admission.NewAttributesRecord(&api.ReplicationController{}, nil, podKind, "test", "", podRes, "", admission.Create, nil),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := ir.Admit(test.attrs)
0000000000000000000000000000000000000000;;			if err != nil && test.expectError == false {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			} else if err == nil && test.expectError == true {
0000000000000000000000000000000000000000;;				t.Error("Error expected for Admit but received none")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func performTest(t *testing.T, ir admission.Interface) {
0000000000000000000000000000000000000000;;		pods := getPods()
0000000000000000000000000000000000000000;;		admit(t, ir, pods)
0000000000000000000000000000000000000000;;		testAdminScenarios(t, ir, pods[0])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyPod(t, pods[0], 100, 100)
0000000000000000000000000000000000000000;;		verifyPod(t, pods[1], 100, 300)
0000000000000000000000000000000000000000;;		verifyPod(t, pods[2], 300, 100)
0000000000000000000000000000000000000000;;		verifyPod(t, pods[3], 300, 300)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyAnnotation(t, pods[0], "Initial Resources plugin set: cpu, memory request for init container i0; cpu, memory request for container c0")
0000000000000000000000000000000000000000;;		verifyAnnotation(t, pods[1], "Initial Resources plugin set: cpu request for init container i0")
0000000000000000000000000000000000000000;;		verifyAnnotation(t, pods[2], "Initial Resources plugin set: memory request for init container i0")
0000000000000000000000000000000000000000;;		expectNoAnnotation(t, pods[3])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimateReturnsErrorFromSource(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			return 0, 0, errors.New("Example error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ir := newInitialResources(&fakeSource{f: f}, 90, false)
0000000000000000000000000000000000000000;;		admit(t, ir, getPods())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimationBasedOnTheSameImageSameNamespace7d(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == week && ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 100, 120, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 120, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		performTest(t, newInitialResources(&fakeSource{f: f}, 90, false))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimationBasedOnTheSameImageSameNamespace30d(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == week && ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 200, 20, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == month && ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 100, 120, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 120, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		performTest(t, newInitialResources(&fakeSource{f: f}, 90, false))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimationBasedOnTheSameImageAllNamespaces7d(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if exactMatch && ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 200, 20, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == week && ns == "" {
0000000000000000000000000000000000000000;;				return 100, 120, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 120, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		performTest(t, newInitialResources(&fakeSource{f: f}, 90, false))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimationBasedOnTheSameImageAllNamespaces30d(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if exactMatch && ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 200, 20, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == week && ns == "" {
0000000000000000000000000000000000000000;;				return 200, 20, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exactMatch && end.Sub(start) == month && ns == "" {
0000000000000000000000000000000000000000;;				return 100, 120, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 120, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		performTest(t, newInitialResources(&fakeSource{f: f}, 90, false))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEstimationBasedOnOtherImages(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, image, ns string, exactMatch bool, _, _ time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if image == "image" && !exactMatch && ns == "" {
0000000000000000000000000000000000000000;;				return 100, 5, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 20, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		performTest(t, newInitialResources(&fakeSource{f: f}, 90, false))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoData(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, _ bool, _, _ time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			return 200, 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ir := newInitialResources(&fakeSource{f: f}, 90, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods := []*api.Pod{
0000000000000000000000000000000000000000;;			createPod("p0", "image:v0", parseReq("", "")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		admit(t, ir, pods)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pods[0].Spec.Containers[0].Resources.Requests != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected resource estimation")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectNoAnnotation(t, pods[0])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestManyContainers(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, _, _ time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if exactMatch {
0000000000000000000000000000000000000000;;				return 100, 120, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 30, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ir := newInitialResources(&fakeSource{f: f}, 90, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := createPod("p", "image:v0", parseReq("", ""))
0000000000000000000000000000000000000000;;		addContainer(pod, "c1", "image:v1", parseReq("", "300"))
0000000000000000000000000000000000000000;;		addContainer(pod, "c2", "image:v2", parseReq("300m", ""))
0000000000000000000000000000000000000000;;		addContainer(pod, "c3", "image:v3", parseReq("300m", "300"))
0000000000000000000000000000000000000000;;		admit(t, ir, []*api.Pod{pod})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.Containers[0], 100, 100)
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.Containers[1], 100, 300)
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.Containers[2], 300, 100)
0000000000000000000000000000000000000000;;		verifyContainer(t, &pod.Spec.Containers[3], 300, 300)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verifyAnnotation(t, pod, "Initial Resources plugin set: cpu, memory request for init container i0; cpu, memory request for container c0; cpu request for container c1; memory request for container c2")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceAware(t *testing.T) {
0000000000000000000000000000000000000000;;		f := func(_ api.ResourceName, _ int64, _, ns string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;			if ns == "test-ns" {
0000000000000000000000000000000000000000;;				return 200, 0, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 200, 120, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ir := newInitialResources(&fakeSource{f: f}, 90, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods := []*api.Pod{
0000000000000000000000000000000000000000;;			createPod("p0", "image:v0", parseReq("", "")),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		admit(t, ir, pods)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pods[0].Spec.Containers[0].Resources.Requests != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected resource estimation")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectNoAnnotation(t, pods[0])
0000000000000000000000000000000000000000;;	}
