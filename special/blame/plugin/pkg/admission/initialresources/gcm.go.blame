0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
dfdf69d1b577c1003be198f16d21515537e326e7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialresources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gce "cloud.google.com/go/compute/metadata"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;		gcm "google.golang.org/api/cloudmonitoring/v2beta2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		kubePrefix    = "custom.cloudmonitoring.googleapis.com/kubernetes.io/"
0000000000000000000000000000000000000000;;		cpuMetricName = kubePrefix + "cpu/usage_rate"
0000000000000000000000000000000000000000;;		memMetricName = kubePrefix + "memory/usage"
0000000000000000000000000000000000000000;;		labelImage    = kubePrefix + "label/container_base_image"
0000000000000000000000000000000000000000;;		labelNs       = kubePrefix + "label/pod_namespace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type gcmSource struct {
0000000000000000000000000000000000000000;;		project    string
0000000000000000000000000000000000000000;;		gcmService *gcm.Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGcmSource() (dataSource, error) {
0000000000000000000000000000000000000000;;		// Detect project ID
0000000000000000000000000000000000000000;;		projectId, err := gce.ProjectID()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create Google Cloud Monitoring service.
0000000000000000000000000000000000000000;;		client := oauth2.NewClient(oauth2.NoContext, google.ComputeTokenSource(""))
0000000000000000000000000000000000000000;;		s, err := gcm.New(client)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gcmSource{
0000000000000000000000000000000000000000;;			project:    projectId,
0000000000000000000000000000000000000000;;			gcmService: s,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *gcmSource) query(metric, oldest, youngest string, labels []string, pageToken string) (*gcm.ListTimeseriesResponse, error) {
0000000000000000000000000000000000000000;;		req := s.gcmService.Timeseries.List(s.project, metric, youngest, nil).
0000000000000000000000000000000000000000;;			Oldest(oldest).
0000000000000000000000000000000000000000;;			Aggregator("mean").
0000000000000000000000000000000000000000;;			Window("1m")
0000000000000000000000000000000000000000;;		for _, l := range labels {
0000000000000000000000000000000000000000;;			req = req.Labels(l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pageToken != "" {
0000000000000000000000000000000000000000;;			req = req.PageToken(pageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return req.Do()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func retrieveRawSamples(res *gcm.ListTimeseriesResponse, output *[]int) {
0000000000000000000000000000000000000000;;		for _, ts := range res.Timeseries {
0000000000000000000000000000000000000000;;			for _, p := range ts.Points {
0000000000000000000000000000000000000000;;				*output = append(*output, int(*p.DoubleValue))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *gcmSource) GetUsagePercentile(kind api.ResourceName, perc int64, image, namespace string, exactMatch bool, start, end time.Time) (int64, int64, error) {
0000000000000000000000000000000000000000;;		var metric string
0000000000000000000000000000000000000000;;		if kind == api.ResourceCPU {
0000000000000000000000000000000000000000;;			metric = cpuMetricName
0000000000000000000000000000000000000000;;		} else if kind == api.ResourceMemory {
0000000000000000000000000000000000000000;;			metric = memMetricName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var labels []string
0000000000000000000000000000000000000000;;		if exactMatch {
0000000000000000000000000000000000000000;;			labels = append(labels, labelImage+"=="+image)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			labels = append(labels, labelImage+"=~"+image+".*")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if namespace != "" {
0000000000000000000000000000000000000000;;			labels = append(labels, labelNs+"=="+namespace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oldest := start.Format(time.RFC3339)
0000000000000000000000000000000000000000;;		youngest := end.Format(time.RFC3339)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rawSamples := make([]int, 0)
0000000000000000000000000000000000000000;;		pageToken := ""
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			res, err := s.query(metric, oldest, youngest, labels, pageToken)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return 0, 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			retrieveRawSamples(res, &rawSamples)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pageToken = res.NextPageToken
0000000000000000000000000000000000000000;;			if pageToken == "" {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count := len(rawSamples)
0000000000000000000000000000000000000000;;		if count == 0 {
0000000000000000000000000000000000000000;;			return 0, 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Ints(rawSamples)
0000000000000000000000000000000000000000;;		usageIndex := int64(math.Ceil(float64(count)*9/10)) - 1
0000000000000000000000000000000000000000;;		usage := rawSamples[usageIndex]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return int64(usage), int64(count), nil
0000000000000000000000000000000000000000;;	}
