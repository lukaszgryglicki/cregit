0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3b06cf288046874117f039532276be415780809c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		internalapi "k8s.io/kubernetes/plugin/pkg/admission/podtolerationrestriction/apis/podtolerationrestriction"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			config     internalapi.Configuration
0000000000000000000000000000000000000000;;			testName   string
0000000000000000000000000000000000000000;;			testStatus bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				config: internalapi.Configuration{
0000000000000000000000000000000000000000;;					Default: []api.Toleration{
0000000000000000000000000000000000000000;;						{Key: "foo", Operator: "Exists", Value: "", Effect: "NoExecute", TolerationSeconds: &[]int64{60}[0]},
0000000000000000000000000000000000000000;;						{Key: "foo", Operator: "Equal", Value: "bar", Effect: "NoExecute", TolerationSeconds: &[]int64{60}[0]},
0000000000000000000000000000000000000000;;						{Key: "foo", Operator: "Equal", Value: "bar", Effect: "NoSchedule"},
0000000000000000000000000000000000000000;;						{Operator: "Exists", Effect: "NoSchedule"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Whitelist: []api.Toleration{
0000000000000000000000000000000000000000;;						{Key: "foo", Value: "bar", Effect: "NoSchedule"},
0000000000000000000000000000000000000000;;						{Key: "foo", Operator: "Equal", Value: "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testName:   "Valid cases",
0000000000000000000000000000000000000000;;				testStatus: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				config: internalapi.Configuration{
0000000000000000000000000000000000000000;;					Whitelist: []api.Toleration{{Key: "foo", Operator: "Exists", Value: "bar", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testName:   "Invalid case",
0000000000000000000000000000000000000000;;				testStatus: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				config: internalapi.Configuration{
0000000000000000000000000000000000000000;;					Default: []api.Toleration{{Operator: "Equal", Value: "bar", Effect: "NoSchedule"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testName:   "Invalid case",
0000000000000000000000000000000000000000;;				testStatus: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range tests {
0000000000000000000000000000000000000000;;			errs := ValidateConfiguration(&tests[i].config)
0000000000000000000000000000000000000000;;			if tests[i].testStatus && errs != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test: %s, expected success: %v", tests[i].testName, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tests[i].testStatus && errs == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test: %s, expected errors: %v", tests[i].testName, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
