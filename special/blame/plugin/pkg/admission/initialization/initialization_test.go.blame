0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a2a62e1efd21e6de3766089faf20f6b9d2c900b1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initialization
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInitializer(name string, rules ...v1alpha1.Rule) *v1alpha1.InitializerConfiguration {
0000000000000000000000000000000000000000;;		return addInitializer(&v1alpha1.InitializerConfiguration{}, name, rules...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addInitializer(base *v1alpha1.InitializerConfiguration, name string, rules ...v1alpha1.Rule) *v1alpha1.InitializerConfiguration {
0000000000000000000000000000000000000000;;		base.Initializers = append(base.Initializers, v1alpha1.Initializer{
0000000000000000000000000000000000000000;;			Name:  name,
0000000000000000000000000000000000000000;;			Rules: rules,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return base
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindInitializers(t *testing.T) {
0000000000000000000000000000000000000000;;		type args struct {
0000000000000000000000000000000000000000;;			initializers *v1alpha1.InitializerConfiguration
0000000000000000000000000000000000000000;;			gvr          schema.GroupVersionResource
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			args args
0000000000000000000000000000000000000000;;			want []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty",
0000000000000000000000000000000000000000;;				args: args{
0000000000000000000000000000000000000000;;					gvr:          schema.GroupVersionResource{},
0000000000000000000000000000000000000000;;					initializers: newInitializer("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "everything",
0000000000000000000000000000000000000000;;				args: args{
0000000000000000000000000000000000000000;;					gvr:          schema.GroupVersionResource{},
0000000000000000000000000000000000000000;;					initializers: newInitializer("1", v1alpha1.Rule{APIGroups: []string{"*"}, APIVersions: []string{"*"}, Resources: []string{"*"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: []string{"1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty group",
0000000000000000000000000000000000000000;;				args: args{
0000000000000000000000000000000000000000;;					gvr:          schema.GroupVersionResource{},
0000000000000000000000000000000000000000;;					initializers: newInitializer("1", v1alpha1.Rule{APIGroups: []string{""}, APIVersions: []string{"*"}, Resources: []string{"*"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: []string{"1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "pod",
0000000000000000000000000000000000000000;;				args: args{
0000000000000000000000000000000000000000;;					gvr: schema.GroupVersionResource{Resource: "pods"},
0000000000000000000000000000000000000000;;					initializers: addInitializer(
0000000000000000000000000000000000000000;;						newInitializer("1", v1alpha1.Rule{APIGroups: []string{""}, APIVersions: []string{"*"}, Resources: []string{"pods"}}),
0000000000000000000000000000000000000000;;						"2", v1alpha1.Rule{APIGroups: []string{""}, APIVersions: []string{"*"}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: []string{"1", "2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "multiple matches",
0000000000000000000000000000000000000000;;				args: args{
0000000000000000000000000000000000000000;;					gvr:          schema.GroupVersionResource{Resource: "pods"},
0000000000000000000000000000000000000000;;					initializers: newInitializer("1", v1alpha1.Rule{APIGroups: []string{""}, APIVersions: []string{"*"}, Resources: []string{"pods"}}),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: []string{"1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			t.Run(tt.name, func(t *testing.T) {
0000000000000000000000000000000000000000;;				if got := findInitializers(tt.args.initializers, tt.args.gvr); !reflect.DeepEqual(got, tt.want) {
0000000000000000000000000000000000000000;;					t.Errorf("findInitializers() = %v, want %v", got, tt.want)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
