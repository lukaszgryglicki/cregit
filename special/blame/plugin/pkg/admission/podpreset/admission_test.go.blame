0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4f464f4f557a394d8000d8a173a77452fc579f35;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podpreset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		kadmission "k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/settings"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		settingslisters "k8s.io/kubernetes/pkg/client/listers/settings/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			orig       []api.EnvVar
0000000000000000000000000000000000000000;;			mod        []api.EnvVar
0000000000000000000000000000000000000000;;			result     []api.EnvVar
0000000000000000000000000000000000000000;;			shouldFail bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty original": {
0000000000000000000000000000000000000000;;				mod:        []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				result:     []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"good merge": {
0000000000000000000000000000000000000000;;				orig:       []api.EnvVar{{Name: "abcd", Value: "value2"}, {Name: "hello", Value: "value3"}},
0000000000000000000000000000000000000000;;				mod:        []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				result:     []api.EnvVar{{Name: "abcd", Value: "value2"}, {Name: "hello", Value: "value3"}, {Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflict": {
0000000000000000000000000000000000000000;;				orig:       []api.EnvVar{{Name: "abc", Value: "value3"}},
0000000000000000000000000000000000000000;;				mod:        []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				shouldFail: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"one is exact same": {
0000000000000000000000000000000000000000;;				orig:       []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "hello", Value: "value3"}},
0000000000000000000000000000000000000000;;				mod:        []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				result:     []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "hello", Value: "value3"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			result, err := mergeEnv(
0000000000000000000000000000000000000000;;				&settings.PodPreset{Spec: settings.PodPresetSpec{Env: test.mod}},
0000000000000000000000000000000000000000;;				test.orig,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if test.shouldFail && err == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test %q to fail but got nil", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.shouldFail && err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("test %q failed: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.result, result) {
0000000000000000000000000000000000000000;;				t.Fatalf("results were not equal for test %q: got %#v; expected: %#v", name, result, test.result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeEnvFrom(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			orig       []api.EnvFromSource
0000000000000000000000000000000000000000;;			mod        []api.EnvFromSource
0000000000000000000000000000000000000000;;			result     []api.EnvFromSource
0000000000000000000000000000000000000000;;			shouldFail bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty original": {
0000000000000000000000000000000000000000;;				mod: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"good merge": {
0000000000000000000000000000000000000000;;				orig: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "thing"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mod: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "thing"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			result, err := mergeEnvFrom(
0000000000000000000000000000000000000000;;				&settings.PodPreset{Spec: settings.PodPresetSpec{EnvFrom: test.mod}},
0000000000000000000000000000000000000000;;				test.orig,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if test.shouldFail && err == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test %q to fail but got nil", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.shouldFail && err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("test %q failed: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.result, result) {
0000000000000000000000000000000000000000;;				t.Fatalf("results were not equal for test %q: got %#v; expected: %#v", name, result, test.result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeVolumeMounts(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			orig       []api.VolumeMount
0000000000000000000000000000000000000000;;			mod        []api.VolumeMount
0000000000000000000000000000000000000000;;			result     []api.VolumeMount
0000000000000000000000000000000000000000;;			shouldFail bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty original": {
0000000000000000000000000000000000000000;;				mod: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"good merge": {
0000000000000000000000000000000000000000;;				mod: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				orig: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflict": {
0000000000000000000000000000000000000000;;				mod: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/things/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				orig: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflict on mount path": {
0000000000000000000000000000000000000000;;				mod: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "things-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				orig: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"one is exact same": {
0000000000000000000000000000000000000000;;				mod: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				orig: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "etc-volume",
0000000000000000000000000000000000000000;;						MountPath: "/etc/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "simply-mounted-volume",
0000000000000000000000000000000000000000;;						MountPath: "/opt/",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			result, err := mergeVolumeMounts(
0000000000000000000000000000000000000000;;				&settings.PodPreset{Spec: settings.PodPresetSpec{VolumeMounts: test.mod}},
0000000000000000000000000000000000000000;;				test.orig,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if test.shouldFail && err == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test %q to fail but got nil", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.shouldFail && err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("test %q failed: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.result, result) {
0000000000000000000000000000000000000000;;				t.Fatalf("results were not equal for test %q: got %#v; expected: %#v", name, result, test.result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			orig       []api.Volume
0000000000000000000000000000000000000000;;			mod        []api.Volume
0000000000000000000000000000000000000000;;			result     []api.Volume
0000000000000000000000000000000000000000;;			shouldFail bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty original": {
0000000000000000000000000000000000000000;;				mod: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"good merge": {
0000000000000000000000000000000000000000;;				orig: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol4", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mod: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol4", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflict": {
0000000000000000000000000000000000000000;;				orig: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol4", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mod: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{HostPath: &api.HostPathVolumeSource{Path: "/etc/apparmor.d"}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"one is exact same": {
0000000000000000000000000000000000000000;;				orig: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol4", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mod: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				result: []api.Volume{
0000000000000000000000000000000000000000;;					{Name: "vol3", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol4", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;					{Name: "vol2", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shouldFail: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			result, err := mergeVolumes(
0000000000000000000000000000000000000000;;				&settings.PodPreset{Spec: settings.PodPresetSpec{Volumes: test.mod}},
0000000000000000000000000000000000000000;;				test.orig,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if test.shouldFail && err == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test %q to fail but got nil", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.shouldFail && err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("test %q failed: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.result, result) {
0000000000000000000000000000000000000000;;				t.Fatalf("results were not equal for test %q: got %#v; expected: %#v", name, result, test.result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTestAdmission provides an admission plugin with test implementations of internal structs.  It uses
0000000000000000000000000000000000000000;;	// an authorizer that always returns true.
0000000000000000000000000000000000000000;;	func NewTestAdmission(lister settingslisters.PodPresetLister, objects ...runtime.Object) kadmission.Interface {
0000000000000000000000000000000000000000;;		// Build a test client that the admission plugin can use to look up the service account missing from its cache
0000000000000000000000000000000000000000;;		client := fake.NewSimpleClientset(objects...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &podPresetPlugin{
0000000000000000000000000000000000000000;;			client:  client,
0000000000000000000000000000000000000000;;			Handler: kadmission.NewHandler(kadmission.Create),
0000000000000000000000000000000000000000;;			lister:  lister,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmitConflictWithDifferentNamespaceShouldDoNothing(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mypod",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"security": "S2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: containerName,
0000000000000000000000000000000000000000;;						Env:  []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pip := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "othernamespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Env: []api.EnvVar{{Name: "abc", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := admitPod(pod, pip)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmitConflictWithNonMatchingLabelsShouldNotError(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mypod",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"security": "S2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: containerName,
0000000000000000000000000000000000000000;;						Env:  []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABC", Value: "value3"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pip := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S3"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Env: []api.EnvVar{{Name: "abc", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := admitPod(pod, pip)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmit(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mypod",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"security": "S2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: containerName,
0000000000000000000000000000000000000000;;						Env:  []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABCD", Value: "value3"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pip := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Env:     []api.EnvVar{{Name: "abcd", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := admitPod(pod, pip)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmitMirrorPod(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mirrorPod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mypod",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"security": "S2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Annotations: map[string]string{api.MirrorPodAnnotationKey: "mirror"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: containerName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pip := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Env:     []api.EnvVar{{Name: "abcd", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := admitPod(mirrorPod, pip); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		container := mirrorPod.Spec.Containers[0]
0000000000000000000000000000000000000000;;		if len(mirrorPod.Spec.Volumes) != 0 ||
0000000000000000000000000000000000000000;;			len(container.VolumeMounts) != 0 ||
0000000000000000000000000000000000000000;;			len(container.Env) != 0 ||
0000000000000000000000000000000000000000;;			len(container.EnvFrom) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("mirror pod is updated by PodPreset admission:\n\tVolumes got %d, expected 0\n\tVolumeMounts go %d, expected 0\n\tEnv got, %d expected 0\n\tEnvFrom got %d, expected 0", len(mirrorPod.Spec.Volumes), len(container.VolumeMounts), len(container.Env), len(container.EnvFrom))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExclusionNoAdmit(t *testing.T) {
0000000000000000000000000000000000000000;;		containerName := "container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mypod",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"security": "S2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					api.PodPresetOptOutAnnotationKey: "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: containerName,
0000000000000000000000000000000000000000;;						Env:  []api.EnvVar{{Name: "abc", Value: "value2"}, {Name: "ABCD", Value: "value3"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pip := &settings.PodPreset{
0000000000000000000000000000000000000000;;			ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "hello",
0000000000000000000000000000000000000000;;				Namespace: "namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: settings.PodPresetSpec{
0000000000000000000000000000000000000000;;				Selector: v1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchExpressions: []v1.LabelSelectorRequirement{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Key:      "security",
0000000000000000000000000000000000000000;;							Operator: v1.LabelSelectorOpIn,
0000000000000000000000000000000000000000;;							Values:   []string{"S2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []api.Volume{{Name: "vol", VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{}}}},
0000000000000000000000000000000000000000;;				Env:     []api.EnvVar{{Name: "abcd", Value: "value"}, {Name: "ABC", Value: "value"}},
0000000000000000000000000000000000000000;;				EnvFrom: []api.EnvFromSource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Prefix: "pre_",
0000000000000000000000000000000000000000;;						ConfigMapRef: &api.ConfigMapEnvSource{
0000000000000000000000000000000000000000;;							LocalObjectReference: api.LocalObjectReference{Name: "abc"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		originalPod, err := api.Scheme.Copy(pod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = admitPod(pod, pip)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify PodSpec has not been mutated
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(pod, originalPod) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected pod spec of '%v' to be unchanged", pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func admitPod(pod *api.Pod, pip *settings.PodPreset) error {
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(nil, controller.NoResyncPeriodFunc())
0000000000000000000000000000000000000000;;		store := informerFactory.Settings().InternalVersion().PodPresets().Informer().GetStore()
0000000000000000000000000000000000000000;;		store.Add(pip)
0000000000000000000000000000000000000000;;		plugin := NewTestAdmission(informerFactory.Settings().InternalVersion().PodPresets().Lister())
0000000000000000000000000000000000000000;;		attrs := kadmission.NewAttributesRecord(
0000000000000000000000000000000000000000;;			pod,
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;			api.Kind("Pod").WithVersion("version"),
0000000000000000000000000000000000000000;;			"namespace",
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			api.Resource("pods").WithVersion("version"),
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			kadmission.Create,
0000000000000000000000000000000000000000;;			&user.DefaultInfo{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := plugin.Admit(attrs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
